changed in both
  base   100644 4c2bf4a1d4ad294014f15fd8835fe06df7445dc2 src/vs/workbench/parts/terminal/electron-browser/terminalInstance.ts
  our    100644 04d9dcba251cf79c28429027cda3ca3b0c10a29c src/vs/workbench/parts/terminal/electron-browser/terminalInstance.ts
  their  100644 ae8677f429767faab5a1c772a62f3164a40976a8 src/vs/workbench/parts/terminal/electron-browser/terminalInstance.ts
@@ -25,6 +25,7 @@
 import { scrollbarSliderBackground, scrollbarSliderHoverBackground, scrollbarSliderActiveBackground, activeContrastBorder } from 'vs/platform/theme/common/colorRegistry';
 import { TPromise } from 'vs/base/common/winjs.base';
 import { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';
+<<<<<<< .our
 import { ansiColorIdentifiers, TERMINAL_BACKGROUND_COLOR, TERMINAL_FOREGROUND_COLOR, TERMINAL_CURSOR_FOREGROUND_COLOR, TERMINAL_CURSOR_BACKGROUND_COLOR, TERMINAL_SELECTION_BACKGROUND_COLOR } from 'vs/workbench/parts/terminal/common/terminalColorRegistry';
 import { PANEL_BACKGROUND } from 'vs/workbench/common/theme';
 import { IConfigurationService, ConfigurationTarget } from 'vs/platform/configuration/common/configuration';
@@ -41,6 +42,24 @@
 const NUMBER_OF_FRAMES_TO_MEASURE = 20;
 
 let Terminal: typeof XTermTerminal;
+=======
+import { IHistoryService } from 'vs/workbench/services/history/common/history';
+import pkg from 'vs/platform/node/package';
+
+/** The amount of time to consider terminal errors to be related to the launch */
+const LAUNCHING_DURATION = 500;
+
+let Terminal: typeof XTermTerminal;
+
+class StandardTerminalProcessFactory implements ITerminalProcessFactory {
+	public create(env: { [key: string]: string }): cp.ChildProcess {
+		return cp.fork('./terminalProcess', [], {
+			env,
+			cwd: Uri.parse(path.dirname(require.toUrl('./terminalProcess'))).fsPath
+		});
+	}
+}
+>>>>>>> .their
 
 export class TerminalInstance implements ITerminalInstance {
 	private static readonly EOL_REGEX = /\r?\n/g;
@@ -58,12 +77,19 @@
 	private _skipTerminalCommands: string[];
 	private _title: string;
 	private _wrapperElement: HTMLDivElement;
-	private _xterm: XTermTerminal;
+	private _xterm: any;//XTermTerminal;
 	private _xtermElement: HTMLDivElement;
 	private _terminalHasTextContextKey: IContextKey<boolean>;
 	private _cols: number;
 	private _rows: number;
+<<<<<<< .our
 	private _dimensionsOverride: ITerminalDimensions;
+=======
+	private _messageTitleListener: (message: { type: string, content: string }) => void;
+	private _preLaunchInputQueue: string;
+	private _initialCwd: string;
+	private _xtermReadyPromise: TPromise<void>;
+>>>>>>> .their
 	private _windowsShellHelper: WindowsShellHelper;
 	private _xtermReadyPromise: Promise<void>;
 
@@ -141,16 +167,26 @@
 		this._logService.trace(`terminalInstance#ctor (id: ${this.id})`, this._shellLaunchConfig);
 
 		this._initDimensions();
+<<<<<<< .our
 		if (!this.shellLaunchConfig.isRendererOnly) {
 			this._createProcess();
 		} else {
 			this.setTitle(this._shellLaunchConfig.name, false);
+=======
+		this._createProcess(this._shellLaunchConfig);
+
+		if (platform.isWindows) {
+			this._processReady.then(() => {
+				this._windowsShellHelper = new WindowsShellHelper(this._processId, this._shellLaunchConfig.executable);
+			});
+>>>>>>> .their
 		}
 
 		this._xtermReadyPromise = this._createXterm();
 		this._xtermReadyPromise.then(() => {
 			// Only attach xterm.js to the DOM if the terminal panel has been opened before.
 			if (_container) {
+<<<<<<< .our
 				this._attachToElement(_container);
 			}
 		});
@@ -163,6 +199,11 @@
 				this.updateAccessibilitySupport();
 			}
 		}));
+=======
+				this.attachToElement(_container);
+			}
+		});
+>>>>>>> .their
 	}
 
 	public addDisposable(disposable: lifecycle.IDisposable): void {
@@ -261,6 +302,7 @@
 	/**
 	 * Create xterm.js instance and attach data listeners.
 	 */
+<<<<<<< .our
 	protected async _createXterm(): Promise<void> {
 		if (!Terminal) {
 			Terminal = (await import('vscode-xterm')).Terminal;
@@ -295,6 +337,15 @@
 			rendererType: config.rendererType === 'auto' ? 'canvas' : config.rendererType,
 			// TODO: Remove this once the setting is removed upstream
 			experimentalCharAtlas: 'dynamic'
+=======
+	protected async _createXterm(): TPromise<void> {
+		if (!Terminal) {
+			Terminal = await import('xterm');
+			Terminal.loadAddon('search');
+		}
+		this._xterm = new Terminal({
+			scrollback: this._configHelper.config.scrollback
+>>>>>>> .their
 		});
 		if (this._shellLaunchConfig.initialText) {
 			this._xterm.writeln(this._shellLaunchConfig.initialText);
@@ -331,6 +382,7 @@
 	}
 
 	public attachToElement(container: HTMLElement): void {
+<<<<<<< .our
 		// The container did not change, do nothing
 		if (this._container === container) {
 			return;
@@ -403,6 +455,55 @@
 
 			// xterm.js currently drops selection on keyup as we need to handle this case.
 			this._disposables.push(dom.addDisposableListener(this._xterm.element, 'keyup', (event: KeyboardEvent) => {
+=======
+		this._xtermReadyPromise.then(() => {
+			if (this._wrapperElement) {
+				throw new Error('The terminal instance has already been attached to a container');
+			}
+
+			this._container = container;
+			this._wrapperElement = document.createElement('div');
+			dom.addClass(this._wrapperElement, 'terminal-wrapper');
+			this._xtermElement = document.createElement('div');
+
+			this._xterm.open(this._xtermElement, false);
+			this._xterm.attachCustomKeyEventHandler((event: KeyboardEvent) => {
+				// Disable all input if the terminal is exiting
+				if (this._isExiting) {
+					return false;
+				}
+
+				// Skip processing by xterm.js of keyboard events that resolve to commands described
+				// within commandsToSkipShell
+				const standardKeyboardEvent = new StandardKeyboardEvent(event);
+				const resolveResult = this._keybindingService.softDispatch(standardKeyboardEvent, standardKeyboardEvent.target);
+				if (resolveResult && this._skipTerminalCommands.some(k => k === resolveResult.commandId)) {
+					event.preventDefault();
+					return false;
+				}
+
+				// If tab focus mode is on, tab is not passed to the terminal
+				if (TabFocus.getTabFocusMode() && event.keyCode === 9) {
+					return false;
+				}
+
+				// Windows does not get a process title event from terminalProcess so we check the name on enter
+				// messageTitleListener is falsy when the API/user renames the terminal so we don't override it
+				if (platform.isWindows && event.keyCode === 13 /* ENTER */ && this._messageTitleListener) {
+					this._windowsShellHelper.getShellName().then(title => this.setTitle(title, true));
+				}
+
+				return undefined;
+			});
+			this._instanceDisposables.push(dom.addDisposableListener(this._xterm.element, 'mouseup', (event: KeyboardEvent) => {
+				// Wait until mouseup has propagated through the DOM before
+				// evaluating the new selection state.
+				setTimeout(() => this._refreshSelectionContextKey(), 0);
+			}));
+
+			// xterm.js currently drops selection on keyup as we need to handle this case.
+			this._instanceDisposables.push(dom.addDisposableListener(this._xterm.element, 'keyup', (event: KeyboardEvent) => {
+>>>>>>> .their
 				// Wait until keyup has propagated through the DOM before evaluating
 				// the new selection state.
 				setTimeout(() => this._refreshSelectionContextKey(), 0);
@@ -412,7 +513,11 @@
 			const focusTrap: HTMLElement = document.createElement('div');
 			focusTrap.setAttribute('tabindex', '0');
 			dom.addClass(focusTrap, 'focus-trap');
+<<<<<<< .our
 			this._disposables.push(dom.addDisposableListener(focusTrap, 'focus', (event: FocusEvent) => {
+=======
+			this._instanceDisposables.push(dom.addDisposableListener(focusTrap, 'focus', (event: FocusEvent) => {
+>>>>>>> .their
 				let currentElement = focusTrap;
 				while (!dom.hasClass(currentElement, 'part')) {
 					currentElement = currentElement.parentElement;
@@ -422,6 +527,7 @@
 			}));
 			xtermHelper.insertBefore(focusTrap, this._xterm.textarea);
 
+<<<<<<< .our
 			this._disposables.push(dom.addDisposableListener(this._xterm.textarea, 'focus', (event: KeyboardEvent) => {
 				this._terminalFocusContextKey.set(true);
 				this._onFocused.fire(this);
@@ -434,11 +540,25 @@
 				this._terminalFocusContextKey.set(true);
 			}));
 			this._disposables.push(dom.addDisposableListener(this._xterm.element, 'blur', (event: KeyboardEvent) => {
+=======
+			this._instanceDisposables.push(dom.addDisposableListener(this._xterm.textarea, 'focus', (event: KeyboardEvent) => {
+				this._terminalFocusContextKey.set(true);
+			}));
+			this._instanceDisposables.push(dom.addDisposableListener(this._xterm.textarea, 'blur', (event: KeyboardEvent) => {
+				this._terminalFocusContextKey.reset();
+				this._refreshSelectionContextKey();
+			}));
+			this._instanceDisposables.push(dom.addDisposableListener(this._xterm.element, 'focus', (event: KeyboardEvent) => {
+				this._terminalFocusContextKey.set(true);
+			}));
+			this._instanceDisposables.push(dom.addDisposableListener(this._xterm.element, 'blur', (event: KeyboardEvent) => {
+>>>>>>> .their
 				this._terminalFocusContextKey.reset();
 				this._refreshSelectionContextKey();
 			}));
 
 			this._wrapperElement.appendChild(this._xtermElement);
+<<<<<<< .our
 			this._container.appendChild(this._wrapperElement);
 
 			if (this._processManager) {
@@ -514,6 +634,25 @@
 				textRenderLayer.onGridChanged = originalOnGridChanged;
 			}
 		};
+=======
+			this._widgetManager = new TerminalWidgetManager(this._configHelper, this._wrapperElement);
+			this._linkHandler.setWidgetManager(this._widgetManager);
+			this._container.appendChild(this._wrapperElement);
+
+			const computedStyle = window.getComputedStyle(this._container);
+			const width = parseInt(computedStyle.getPropertyValue('width').replace('px', ''), 10);
+			const height = parseInt(computedStyle.getPropertyValue('height').replace('px', ''), 10);
+			this.layout(new Dimension(width, height));
+			this.setVisible(this._isVisible);
+			this.updateConfig();
+
+			// If IShellLaunchConfig.waitOnExit was true and the process finished before the terminal
+			// panel was initialized.
+			if (this._xterm.getOption('disableStdin')) {
+				this._attachPressAnyKeyToCloseListener();
+			}
+		});
+>>>>>>> .their
 	}
 
 	public registerLinkMatcher(regex: RegExp, handler: (url: string) => void, matchIndex?: number, validationCallback?: (uri: string, callback: (isValid: boolean) => void) => void): number {
removed in local
  base   100644 ce211e668a02b03b972948849228b52986573baa src/vs/workbench/parts/terminal/test/electron-browser/terminalInstance.test.ts
  their  100644 4db5bff6f16a030ad9587e0750b17d249d665783 src/vs/workbench/parts/terminal/test/electron-browser/terminalInstance.test.ts
