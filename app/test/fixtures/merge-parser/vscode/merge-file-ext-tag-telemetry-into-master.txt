changed in both
  base   100644 f74918098565c226b0caefe395a4fe02dd4f808f build/builtInExtensions.json
  our    100644 b3efcd2cc657706605008661521b555c93a32c16 build/builtInExtensions.json
  their  100644 a3b35277a0d16d4dbbbb572bf484ba9c57d40015 build/builtInExtensions.json
@@ -1,7 +1,11 @@
 [
 	{
 		"name": "ms-vscode.node-debug",
+<<<<<<< .our
 		"version": "1.27.2",
+=======
+		"version": "1.20.12",
+>>>>>>> .their
 		"repo": "https://github.com/Microsoft/vscode-node-debug"
 	},
 	{
changed in both
  base   100644 d484484cbdc8135cb1ce39535578e49293b8d1a5 extensions/emmet/src/abbreviationActions.ts
  our    100644 26444af31e5994ebc9cddebb9de151cacae3311b extensions/emmet/src/abbreviationActions.ts
  their  100644 f03492699697d1e2bdccaffda4d2704a72e145fc extensions/emmet/src/abbreviationActions.ts
changed in both
  base   100644 202d73c4c00e72d222b9eab805caef82f43b3b23 extensions/git/package.json
  our    100644 712f071eb3a07013f5d0d6a279de9bb561020d87 extensions/git/package.json
  their  100644 72d29e62dadbc2e69b9731158925c86d5b44f1e2 extensions/git/package.json
@@ -1196,9 +1196,14 @@
     "byline": "^5.0.0",
     "file-type": "^7.2.0",
     "iconv-lite": "0.4.19",
+<<<<<<< .our
     "jschardet": "^1.6.0",
     "vscode-extension-telemetry": "0.0.18",
     "vscode-nls": "^3.2.4",
+=======
+    "vscode-extension-telemetry": "0.0.8",
+    "vscode-nls": "^3.2.1",
+>>>>>>> .their
     "which": "^1.3.0"
   },
   "devDependencies": {
changed in both
  base   100644 b7c0719c1320935df55831d836c3f25d30208910 extensions/git/package.nls.json
  our    100644 bc4c812d75bab82c7f66b4ac04102d4914b8efbe extensions/git/package.nls.json
  their  100644 67005ce9e704345544e20e0d2f83f188b04effa5 extensions/git/package.nls.json
@@ -80,8 +80,12 @@
 	"config.decorations.enabled": "Controls whether Git contributes colors and badges to the explorer and the open editors view.",
 	"config.promptToSaveFilesBeforeCommit": "Controls whether Git should check for unsaved files before committing.",
 	"config.showInlineOpenFileAction": "Controls whether to show an inline Open File action in the Git changes view.",
+<<<<<<< .our
 	"config.showPushSuccessNotification": "Controls whether to show a notification when a push is successful.",
 	"config.inputValidation": "Controls when to show commit message input validation.",
+=======
+	"config.inputValidation": "Controls when to show input validation.",
+>>>>>>> .their
 	"config.detectSubmodules": "Controls whether to automatically detect git submodules.",
 	"colors.added": "Color for added resources.",
 	"config.detectSubmodulesLimit": "Controls the limit of git submodules detected.",
changed in both
  base   100644 f840f51b49fcf3eb31974563d5685c3b98e57c01 extensions/git/yarn.lock
  our    100644 cf3f64be85380b9d42abc452055ff323ba258bce extensions/git/yarn.lock
  their  100644 a5348c49a520fa5794b80bedbb776de443cd8cc3 extensions/git/yarn.lock
@@ -30,13 +30,9 @@
   version "1.0.28"
   resolved "https://registry.yarnpkg.com/@types/which/-/which-1.0.28.tgz#016e387629b8817bed653fe32eab5d11279c8df6"
 
-applicationinsights@1.0.1:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/applicationinsights/-/applicationinsights-1.0.1.tgz#53446b830fe8d5d619eee2a278b31d3d25030927"
-  dependencies:
-    diagnostic-channel "0.2.0"
-    diagnostic-channel-publishers "0.2.1"
-    zone.js "0.7.6"
+applicationinsights@0.18.0:
+  version "0.18.0"
+  resolved "https://registry.yarnpkg.com/applicationinsights/-/applicationinsights-0.18.0.tgz#162ebb48a383408bc4de44db32b417307f45bbc1"
 
 balanced-match@^1.0.0:
   version "1.0.0"
@@ -73,16 +69,6 @@
   dependencies:
     ms "2.0.0"
 
-diagnostic-channel-publishers@0.2.1:
-  version "0.2.1"
-  resolved "https://registry.yarnpkg.com/diagnostic-channel-publishers/-/diagnostic-channel-publishers-0.2.1.tgz#8e2d607a8b6d79fe880b548bc58cc6beb288c4f3"
-
-diagnostic-channel@0.2.0:
-  version "0.2.0"
-  resolved "https://registry.yarnpkg.com/diagnostic-channel/-/diagnostic-channel-0.2.0.tgz#cc99af9612c23fb1fff13612c72f2cbfaa8d5a17"
-  dependencies:
-    semver "^5.3.0"
-
 diff@3.2.0:
   version "3.2.0"
   resolved "https://registry.yarnpkg.com/diff/-/diff-3.2.0.tgz#c9ce393a4b7cbd0b058a725c93df299027868ff9"
@@ -247,21 +233,24 @@
   version "1.0.1"
   resolved "https://registry.yarnpkg.com/path-is-absolute/-/path-is-absolute-1.0.1.tgz#174b9268735534ffbc7ace6bf53a5a9e1b5c5f5f"
 
-semver@^5.3.0:
-  version "5.5.0"
-  resolved "https://registry.yarnpkg.com/semver/-/semver-5.5.0.tgz#dc4bbc7a6ca9d916dee5d43516f0092b58f7b8ab"
-
 supports-color@3.1.2:
   version "3.1.2"
   resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-3.1.2.tgz#72a262894d9d408b956ca05ff37b2ed8a6e2a2d5"
   dependencies:
     has-flag "^1.0.0"
 
+<<<<<<< .our
 vscode-extension-telemetry@0.0.18:
   version "0.0.18"
   resolved "https://registry.yarnpkg.com/vscode-extension-telemetry/-/vscode-extension-telemetry-0.0.18.tgz#602ba20d8c71453aa34533a291e7638f6e5c0327"
+=======
+vscode-extension-telemetry@0.0.8:
+  version "0.0.8"
+  resolved "https://registry.yarnpkg.com/vscode-extension-telemetry/-/vscode-extension-telemetry-0.0.8.tgz#2261bff986b6690a6f1f746a45ac5bd1f85d29e0"
+>>>>>>> .their
   dependencies:
-    applicationinsights "1.0.1"
+    applicationinsights "0.18.0"
+    winreg "1.2.3"
 
 vscode-nls@^3.2.4:
   version "3.2.4"
@@ -273,10 +262,10 @@
   dependencies:
     isexe "^2.0.0"
 
+winreg@1.2.3:
+  version "1.2.3"
+  resolved "https://registry.yarnpkg.com/winreg/-/winreg-1.2.3.tgz#93ad116b2696da87d58f7265a8fcea5254a965d5"
+
 wrappy@1:
   version "1.0.2"
   resolved "https://registry.yarnpkg.com/wrappy/-/wrappy-1.0.2.tgz#b5243d8f3ec1aa35f1364605bc0d1036e30ab69f"
-
-zone.js@0.7.6:
-  version "0.7.6"
-  resolved "https://registry.yarnpkg.com/zone.js/-/zone.js-0.7.6.tgz#fbbc39d3e0261d0986f1ba06306eb3aeb0d22009"
changed in both
  base   100644 a8bbb91b7613c4e23f075182382e69177815890b extensions/html/package.json
  our    100644 5bcc9be5877c773efa5d16e5dc79ee66b4fba518 extensions/html/package.json
  their  100644 d28af119e6f74c48242371546ba9f74aa482714e extensions/html/package.json
@@ -66,6 +66,18 @@
         "language": "html",
         "path": "./snippets/html.snippets.json"
       }
+<<<<<<< .our
     ]
+=======
+    }
+  },
+  "dependencies": {
+    "vscode-extension-telemetry": "0.0.8",
+    "vscode-languageclient": "^3.5.0",
+    "vscode-nls": "^3.2.1"
+  },
+  "devDependencies": {
+    "@types/node": "7.0.43"
+>>>>>>> .their
   }
 }
removed in local
  base   100644 47c5c2e51b717cefb936d0f55ab3ae6de64bc62d extensions/html/yarn.lock
  their  100644 e21fadd6db7c7454df5a669b3560d283a9089f42 extensions/html/yarn.lock
changed in both
  base   100644 5b9b79b5c1191566cb7a55573fbf0ad740fc4dd9 extensions/json/package.json
  our    100644 af9024bfde9123390d1583e73a5ad460ae6c9ea8 extensions/json/package.json
  their  100644 69a6dcbabaffad169db72a8e25eb0e789f16b13d extensions/json/package.json
@@ -67,6 +67,92 @@
         "fileMatch": "*.schema.json",
         "url": "http://json-schema.org/draft-04/schema#"
       }
+<<<<<<< .our
     ]
+=======
+    ],
+    "configuration": {
+      "id": "json",
+      "order": 20,
+      "type": "object",
+      "title": "JSON",
+      "properties": {
+        "json.schemas": {
+          "type": "array",
+          "scope": "resource",
+          "description": "%json.schemas.desc%",
+          "items": {
+            "type": "object",
+            "default": {
+              "fileMatch": [
+                "/myfile"
+              ],
+              "url": "schemaURL"
+            },
+            "properties": {
+              "url": {
+                "type": "string",
+                "default": "/user.schema.json",
+                "description": "%json.schemas.url.desc%"
+              },
+              "fileMatch": {
+                "type": "array",
+                "items": {
+                  "type": "string",
+                  "default": "MyFile.json",
+                  "description": "%json.schemas.fileMatch.item.desc%"
+                },
+                "minItems": 1,
+                "description": "%json.schemas.fileMatch.desc%"
+              },
+              "schema": {
+                "$ref": "http://json-schema.org/draft-04/schema#",
+                "description": "%json.schemas.schema.desc%"
+              }
+            }
+          }
+        },
+        "json.format.enable": {
+          "type": "boolean",
+          "scope": "window",
+          "default": true,
+          "description": "%json.format.enable.desc%"
+        },
+        "json.trace.server": {
+          "type": "string",
+          "scope": "window",
+          "enum": [
+            "off",
+            "messages",
+            "verbose"
+          ],
+          "default": "off",
+          "description": "%json.tracing.desc%"
+        },
+        "json.colorDecorators.enable": {
+          "type": "boolean",
+          "scope": "window",
+          "default": true,
+          "description": "%json.colorDecorators.enable.desc%",
+          "deprecationMessage": "%json.colorDecorators.enable.deprecationMessage%"
+        }
+      }
+    },
+    "configurationDefaults": {
+      "[json]": {
+        "editor.quickSuggestions": {
+          "strings": true
+        }
+      }
+    }
+  },
+  "dependencies": {
+    "vscode-extension-telemetry": "0.0.8",
+    "vscode-languageclient": "^3.5.0",
+    "vscode-nls": "^3.2.1"
+  },
+  "devDependencies": {
+    "@types/node": "7.0.43"
+>>>>>>> .their
   }
 }
removed in local
  base   100644 47c5c2e51b717cefb936d0f55ab3ae6de64bc62d extensions/json/yarn.lock
  their  100644 e21fadd6db7c7454df5a669b3560d283a9089f42 extensions/json/yarn.lock
removed in local
  base   100644 ec99b44b91d51d43a7e7ce480c306765798adb13 extensions/markdown/package.json
  their  100644 f6961eed26e7fe612bc24ab427a2c3d45020a34b extensions/markdown/package.json
removed in local
  base   100644 b1ed9e8c9a1b99a6ba7c6cc731578b6f759010f4 extensions/markdown/yarn.lock
  their  100644 c88a44add56d5e4ce96e482d176b22c2afa43bc9 extensions/markdown/yarn.lock
changed in both
  base   100644 146b7fd061a9878ab2b1741dd96d98df6904b124 extensions/merge-conflict/package.json
  our    100644 81b65c21ac62f3d1237abb6a363f0644349d8408 extensions/merge-conflict/package.json
  their  100644 9445d17a812bf2334d997119e66109339acebdb3 extensions/merge-conflict/package.json
@@ -100,7 +100,12 @@
     }
   },
   "dependencies": {
+<<<<<<< .our
     "vscode-nls": "^3.2.4"
+=======
+    "vscode-extension-telemetry": "0.0.8",
+    "vscode-nls": "^3.2.1"
+>>>>>>> .their
   },
   "devDependencies": {
     "@types/node": "8.0.33"
changed in both
  base   100644 74ebd7c4fcfcc1dc36d48a77d0aefa622f17c905 extensions/merge-conflict/yarn.lock
  our    100644 5b1dccc447c34e2e61ebbf9b7966bc495f7fb97f extensions/merge-conflict/yarn.lock
  their  100644 ecb3d8de216c9e7eab37a06453f22837e894a46e extensions/merge-conflict/yarn.lock
@@ -6,6 +6,27 @@
   version "8.0.33"
   resolved "https://registry.yarnpkg.com/@types/node/-/node-8.0.33.tgz#1126e94374014e54478092830704f6ea89df04cd"
 
+<<<<<<< .our
 vscode-nls@^3.2.4:
   version "3.2.4"
   resolved "https://registry.yarnpkg.com/vscode-nls/-/vscode-nls-3.2.4.tgz#2166b4183c8aea884d20727f5449e62be69fd398"
+=======
+applicationinsights@0.18.0:
+  version "0.18.0"
+  resolved "https://registry.yarnpkg.com/applicationinsights/-/applicationinsights-0.18.0.tgz#162ebb48a383408bc4de44db32b417307f45bbc1"
+
+vscode-extension-telemetry@0.0.8:
+  version "0.0.8"
+  resolved "https://registry.yarnpkg.com/vscode-extension-telemetry/-/vscode-extension-telemetry-0.0.8.tgz#2261bff986b6690a6f1f746a45ac5bd1f85d29e0"
+  dependencies:
+    applicationinsights "0.18.0"
+    winreg "1.2.3"
+
+vscode-nls@^3.2.1:
+  version "3.2.1"
+  resolved "https://registry.yarnpkg.com/vscode-nls/-/vscode-nls-3.2.1.tgz#b1f3e04e8a94a715d5a7bcbc8339c51e6d74ca51"
+
+winreg@1.2.3:
+  version "1.2.3"
+  resolved "https://registry.yarnpkg.com/winreg/-/winreg-1.2.3.tgz#93ad116b2696da87d58f7265a8fcea5254a965d5"
+>>>>>>> .their
removed in local
  base   100644 3a94a50c4c3c3c9116c117b5b65f1d827692a71a extensions/typescript/package.json
  their  100644 e876f7e3be79aaf2a54ab9ffcd5cf6b737601cbc extensions/typescript/package.json
removed in local
  base   100644 0fcc8a28cac0b15db4afa7fd7a682bc5d5b516e2 extensions/typescript/yarn.lock
  their  100644 9e1bb7b96b0f41ffb035e7126b71468805a46796 extensions/typescript/yarn.lock
changed in both
  base   100644 d2cd7701ffb1504dda1860dbe1224113422b13dd package.json
  our    100644 d0e982ce0b76c5b1b5eb02b673e459e47f3353a4 package.json
  their  100644 b366410af4c11ebc6ef919d3178b75d13f501561 package.json
@@ -1,7 +1,12 @@
 {
   "name": "code-oss-dev",
+<<<<<<< .our
   "version": "1.27.0",
   "distro": "a4155d9780fbbc94ead6cb3017dd0fc3806c57b8",
+=======
+  "version": "1.20.0",
+  "distro": "4f4765e9dc2643798d3f9910ee585e09427081b3",
+>>>>>>> .their
   "author": {
     "name": "Microsoft Corporation"
   },
changed in both
  base   100644 400b8610977e771f443c1c0a21129eea48db5042 src/vs/code/electron-browser/issue/issueReporterMain.ts
  our    100644 2e25cb33248a3d343edf9a79d532a58614f0a2b1 src/vs/code/electron-browser/issue/issueReporterMain.ts
  their  100644 c0676aa709203ee235d1de62f04026299fb243f8 src/vs/code/electron-browser/issue/issueReporterMain.ts
@@ -51,6 +51,8 @@
 	state?: string;
 }
 
+const MAX_URL_LENGTH = 5400;
+
 export interface IssueReporterConfiguration extends IWindowConfiguration {
 	data: IssueReporterData;
 	features: IssueReporterFeatures;
@@ -68,12 +70,18 @@
 	private telemetryService: ITelemetryService;
 	private logService: ILogService;
 	private issueReporterModel: IssueReporterModel;
+<<<<<<< .our
 	private numberOfSearchResultsDisplayed = 0;
 	private receivedSystemInfo = false;
 	private receivedPerformanceInfo = false;
 	private shouldQueueSearch = false;
 
 	private previewButton: Button;
+=======
+	private shouldQueueSearch = true;
+	private receivedSystemInfo = false;
+	private receivedPerformanceInfo = false;
+>>>>>>> .their
 
 	constructor(configuration: IssueReporterConfiguration) {
 		super();
@@ -89,10 +97,14 @@
 			extensionsDisabled: !!this.environmentService.disableExtensions,
 		});
 
+<<<<<<< .our
 		this.previewButton = new Button(document.getElementById('issue-reporter'));
 
 		ipcRenderer.on('issuePerformanceInfoResponse', (event, info) => {
 			this.logService.trace('issueReporter: Received performance data');
+=======
+		ipcRenderer.on('issuePerformanceInfoResponse', (event, info) => {
+>>>>>>> .their
 			this.issueReporterModel.update(info);
 			this.receivedPerformanceInfo = true;
 
@@ -101,21 +113,33 @@
 			this.updateWorkspaceInfo(state);
 			this.updatePreviewButtonState();
 		});
+<<<<<<< .our
 
 		ipcRenderer.on('issueSystemInfoResponse', (event, info) => {
 			this.logService.trace('issueReporter: Received system data');
 			this.issueReporterModel.update({ systemInfo: info });
 			this.receivedSystemInfo = true;
 
+=======
+
+		ipcRenderer.on('issueSystemInfoResponse', (event, info) => {
+			this.issueReporterModel.update({ systemInfo: info });
+			this.receivedSystemInfo = true;
+
+>>>>>>> .their
 			this.updateSystemInfo(this.issueReporterModel.getData());
 			this.updatePreviewButtonState();
 		});
 
 		ipcRenderer.send('issueSystemInfoRequest');
+<<<<<<< .our
 		if (configuration.data.issueType === IssueType.PerformanceIssue) {
 			ipcRenderer.send('issuePerformanceInfoRequest');
 		}
 		this.logService.trace('issueReporter: Sent data requests');
+=======
+		ipcRenderer.send('issuePerformanceInfoRequest');
+>>>>>>> .their
 
 		if (window.document.documentElement.lang !== 'en') {
 			show(document.getElementById('english'));
@@ -304,12 +328,17 @@
 	}
 
 	private setEventHandlers(): void {
+<<<<<<< .our
 		this.addEventListener('issue-type', 'change', (event: Event) => {
 			const issueType = parseInt((<HTMLInputElement>event.target).value);
 			this.issueReporterModel.update({ issueType: issueType });
 			if (issueType === IssueType.PerformanceIssue && !this.receivedPerformanceInfo) {
 				ipcRenderer.send('issuePerformanceInfoRequest');
 			}
+=======
+		document.getElementById('issue-type').addEventListener('change', (event: Event) => {
+			this.issueReporterModel.update({ issueType: parseInt((<HTMLInputElement>event.target).value) });
+>>>>>>> .their
 			this.updatePreviewButtonState();
 			this.render();
 		});
@@ -353,6 +382,7 @@
 			}
 		});
 
+<<<<<<< .our
 		this.addEventListener('description', 'input', (event: Event) => {
 			const issueDescription = (<HTMLInputElement>event.target).value;
 			this.issueReporterModel.update({ issueDescription });
@@ -362,6 +392,10 @@
 				const title = (<HTMLInputElement>document.getElementById('issue-title')).value;
 				this.searchVSCodeIssues(title, issueDescription);
 			}
+=======
+		document.getElementById('description').addEventListener('input', (event: Event) => {
+			this.issueReporterModel.update({ issueDescription: (<HTMLInputElement>event.target).value });
+>>>>>>> .their
 		});
 
 		this.addEventListener('issue-title', 'input', (e) => {
@@ -383,16 +417,27 @@
 
 		this.previewButton.onDidClick(() => this.createIssue());
 
+<<<<<<< .our
 		this.addEventListener('disableExtensions', 'click', () => {
 			ipcRenderer.send('workbenchCommand', 'workbench.action.reloadWindowWithExtensionsDisabled');
 		});
 
 		this.addEventListener('disableExtensions', 'keydown', (e: KeyboardEvent) => {
 			e.stopPropagation();
+=======
+		const disableExtensions = document.getElementById('disableExtensions');
+		disableExtensions.addEventListener('click', () => {
+			ipcRenderer.send('workbenchCommand', 'workbench.extensions.action.disableAll');
+			ipcRenderer.send('workbenchCommand', 'workbench.action.reloadWindow');
+		});
+
+		disableExtensions.addEventListener('keydown', (e) => {
+>>>>>>> .their
 			if (e.keyCode === 13 || e.keyCode === 32) {
 				ipcRenderer.send('workbenchCommand', 'workbench.extensions.action.disableAll');
 				ipcRenderer.send('workbenchCommand', 'workbench.action.reloadWindow');
 			}
+<<<<<<< .our
 		});
 
 		document.onkeydown = (e: KeyboardEvent) => {
@@ -401,6 +446,29 @@
 			if (cmdOrCtrlKey && e.keyCode === 13) {
 				if (this.createIssue()) {
 					remote.getCurrentWindow().close();
+=======
+		});
+
+		const showRunning = document.getElementById('showRunning');
+		showRunning.addEventListener('click', () => {
+			ipcRenderer.send('workbenchCommand', 'workbench.action.showRuntimeExtensions');
+		});
+
+		showRunning.addEventListener('keydown', (e) => {
+			if (e.keyCode === 13 || e.keyCode === 32) {
+				ipcRenderer.send('workbenchCommand', 'workbench.action.showRuntimeExtensions');
+			}
+		});
+
+		// Cmd+Enter or Mac or Ctrl+Enter on other platforms previews issue and closes window
+		if (platform.isMacintosh) {
+			let prevKeyWasCommand = false;
+			document.onkeydown = (e: KeyboardEvent) => {
+				if (prevKeyWasCommand && e.keyCode === 13) {
+					if (this.createIssue()) {
+						remote.getCurrentWindow().close();
+					}
+>>>>>>> .their
 				}
 			}
 
@@ -475,6 +543,7 @@
 		}
 	}
 
+<<<<<<< .our
 	private searchExtensionIssues(title: string): void {
 		const url = this.getExtensionGitHubUrl();
 		if (title) {
@@ -499,6 +568,34 @@
 		const similarIssues = document.getElementById('similar-issues');
 		similarIssues.innerHTML = '';
 		this.numberOfSearchResultsDisplayed = 0;
+=======
+	private updatePreviewButtonState() {
+		const submitButton = <HTMLButtonElement>document.getElementById('github-submit-btn');
+		if (this.isPreviewEnabled()) {
+			submitButton.disabled = false;
+			submitButton.textContent = localize('previewOnGitHub', "Preview on GitHub");
+		} else {
+			submitButton.disabled = true;
+			submitButton.textContent = localize('loadingData', "Loading data...");
+		}
+	}
+
+	private isPreviewEnabled() {
+		const issueType = this.issueReporterModel.getData().issueType;
+		if (issueType === IssueType.Bug && this.receivedSystemInfo) {
+			return true;
+		}
+
+		if (issueType === IssueType.PerformanceIssue && this.receivedSystemInfo && this.receivedPerformanceInfo) {
+			return true;
+		}
+
+		if (issueType === IssueType.FeatureRequest) {
+			return true;
+		}
+
+		return false;
+>>>>>>> .their
 	}
 
 	@debounce(300)
@@ -669,6 +766,7 @@
 		hide(problemSourceHelpText);
 		hide(extensionSelector);
 
+
 		if (issueType === IssueType.Bug) {
 			show(blockContainer);
 			show(systemBlock);
@@ -690,18 +788,30 @@
 			show(workspaceBlock);
 			show(problemSource);
 
+<<<<<<< .our
 			if (fileOnExtension) {
 				show(extensionSelector);
 			} else {
 				show(extensionsBlock);
 				show(problemSourceHelpText);
 			}
+=======
+			descriptionTitle.innerHTML = `${localize('stepsToReproduce', "Steps to Reproduce")} <span class="required-input">*</span>`;
+			descriptionSubtitle.innerHTML = localize('performanceIssueDesciption', "When did this performance issue happen? Does it occur on startup or after a specific series of actions? We support GitHub-flavored Markdown. You will be able to edit your issue and add screenshots when we preview it on GitHub.");
+		} else {
+			hide(systemBlock);
+			hide(processBlock);
+			hide(workspaceBlock);
+			hide(extensionsBlock);
+			hide(disabledExtensions);
+>>>>>>> .their
 
 			descriptionTitle.innerHTML = `${localize('stepsToReproduce', "Steps to Reproduce")} <span class="required-input">*</span>`;
 			descriptionSubtitle.innerHTML = localize('performanceIssueDesciption', "When did this performance issue happen? Does it occur on startup or after a specific series of actions? We support GitHub-flavored Markdown. You will be able to edit your issue and add screenshots when we preview it on GitHub.");
 		} else if (issueType === IssueType.FeatureRequest) {
 			descriptionTitle.innerHTML = `${localize('description', "Description")} <span class="required-input">*</span>`;
 			descriptionSubtitle.innerHTML = localize('featureRequestDescription', "Please describe the feature you would like to see. We support GitHub-flavored Markdown. You will be able to edit your issue and add screenshots when we preview it on GitHub.");
+<<<<<<< .our
 			show(problemSource);
 
 			if (fileOnExtension) {
@@ -714,6 +824,8 @@
 
 			descriptionTitle.innerHTML = `${localize('expectedResults', "Expected Results")} <span class="required-input">*</span>`;
 			descriptionSubtitle.innerHTML = localize('settingsSearchResultsDescription', "Please list the results that you were expecting to see when you searched with this query. We support GitHub-flavored Markdown. You will be able to edit your issue and add screenshots when we preview it on GitHub.");
+=======
+>>>>>>> .their
 		}
 	}
 
@@ -775,19 +887,36 @@
 		*/
 		this.telemetryService.publicLog('issueReporterSubmit', { issueType: this.issueReporterModel.getData().issueType, numSimilarIssuesDisplayed: this.numberOfSearchResultsDisplayed });
 
+<<<<<<< .our
 		const baseUrl = this.getIssueUrlWithTitle((<HTMLInputElement>document.getElementById('issue-title')).value);
+=======
+		const issueTitle = encodeURIComponent((<HTMLInputElement>document.getElementById('issue-title')).value);
+		const queryStringPrefix = product.reportIssueUrl.indexOf('?') === -1 ? '?' : '&';
+		const baseUrl = `${product.reportIssueUrl}${queryStringPrefix}title=${issueTitle}&body=`;
+>>>>>>> .their
 		const issueBody = this.issueReporterModel.serialize();
 		let url = baseUrl + `&body=${encodeURIComponent(issueBody)}`;
 
+<<<<<<< .our
 		if (url.length > MAX_URL_LENGTH) {
 			clipboard.writeText(issueBody);
 			url = baseUrl + `&body=${encodeURIComponent(localize('pasteData', "We have written the needed data into your clipboard because it was too large to send. Please paste."))}`;
+=======
+		const lengthValidationElement = document.getElementById('url-length-validation-error');
+		if (url.length > MAX_URL_LENGTH) {
+			lengthValidationElement.textContent = localize('urlLengthError', "The data exceeds the length limit of {0} characters. The data is length {1}.", MAX_URL_LENGTH, url.length);
+			show(lengthValidationElement);
+			return false;
+		} else {
+			hide(lengthValidationElement);
+>>>>>>> .their
 		}
 
 		shell.openExternal(url);
 		return true;
 	}
 
+<<<<<<< .our
 	private getExtensionGitHubUrl(): string {
 		let repositoryUrl = '';
 		const bugsUrl = this.getExtensionBugsUrl();
@@ -815,6 +944,8 @@
 		return `${repositoryUrl}${queryStringPrefix}title=${encodeURIComponent(issueTitle)}`;
 	}
 
+=======
+>>>>>>> .their
 	private updateSystemInfo = (state) => {
 		const target = document.querySelector('.block-system .block-info');
 		let tableHtml = '';
changed in both
  base   100644 86d5a0afc344211db40807ec5ceb13e6aaeae8bd src/vs/code/electron-browser/issue/issueReporterPage.ts
  our    100644 afa0c79c4b86524a7065a34520049d4f1bbdcf14 src/vs/code/electron-browser/issue/issueReporterPage.ts
  their  100644 14742da3b7362f75ce9c58b70fa09ef428bf6705 src/vs/code/electron-browser/issue/issueReporterPage.ts
@@ -13,12 +13,28 @@
 
 	<div class="section">
 		<div class="input-group">
+<<<<<<< .our
 			<label class="inline-label" for="issue-type">${escape(localize('issueTypeLabel', "This is a"))}</label>
 			<select id="issue-type" class="inline-form-control">
+=======
+			<label id="issue-type-label" class="inline-form-control" for="issue-type">${escape(localize('issueTypeLabel', "This is a"))}</label>
+			<select id="issue-type" class="inline-form-control">
+				<option value="0">${escape(localize('bugReporter', "Bug Report"))}</option>
+				<option value="1">${escape(localize('performanceIssue', "Performance Issue"))}</option>
+				<option value="2">${escape(localize('featureRequest', "Feature Request"))}</option>
+			</select>
+		</div>
+
+		<div class="input-group">
+			<label id="issue-title-label" for="issue-title">${escape(localize('issueTitleLabel', "Title"))} <span class="required-input">*</span></label>
+			<input id="issue-title" type="text" class="inline-form-control" placeholder="${escape(localize('issueTitleRequired', "Please enter a title."))}" required>
+			<small id="similar-issues">
+>>>>>>> .their
 				<!-- To be dynamically filled -->
 			</select>
 		</div>
 
+<<<<<<< .our
 		<div class="input-group" id="problem-source">
 			<label class="inline-label" for="issue-source">${escape(localize('issueSourceLabel', "File on"))}</label>
 			<select id="issue-source" class="inline-form-control">
@@ -34,9 +50,71 @@
 				<select id="extension-selector" class="inline-form-control">
 					<!-- To be dynamically filled -->
 				</select>
+=======
+	<div class="system-info">
+		<div id="block-container">
+			<div class="block block-system">
+				<details>
+					<summary>${escape(localize('systemInfo', "My System Info"))}
+						<div class="include-data">
+							<input class="sendData" type="checkbox" id="includeSystemInfo" checked>
+								<label class="caption" for="includeSystemInfo">${escape(localize('sendData', "Send my data"))}</label>
+							</input>
+						</div>
+					</summary>
+					<div class="block-info">
+						<!-- To be dynamically filled -->
+					</div>
+				</details>
+			</div>
+			<div class="block block-process">
+				<details>
+					<summary>${escape(localize('processes', "Currently Running Processes"))}
+						<div class="include-data">
+							<input class="sendData"  type="checkbox" id="includeProcessInfo" checked>
+								<label class="caption" for="includeProcessInfo">${escape(localize('sendData', "Send my data"))}</label>
+							</input>
+						</div>
+					</summary>
+					<div class="block-info">
+						<!-- To be dynamically filled -->
+					</div>
+				</details>
+			</div>
+			<div class="block block-workspace">
+				<details>
+					<summary>${escape(localize('workspaceStats', "My Workspace Stats"))}
+						<div class="include-data">
+							<input class="sendData"  type="checkbox" id="includeWorkspaceInfo" checked>
+								<label class="caption" for="includeWorkspaceInfo">${escape(localize('sendData', "Send my data"))}</label>
+							</input>
+						</div>
+					</summary>
+					<pre class="block-info">
+						<code>
+							<!-- To be dynamically filled -->
+						</code>
+					</pre>
+				</details>
+			</div>
+			<div class="block block-extensions">
+				<details>
+					<summary>${escape(localize('extensions', "My Extensions"))}
+						<div class="include-data">
+							<input class="sendData"  type="checkbox" id="includeExtensions" checked>
+								<label class="caption" for="includeExtensions">${escape(localize('sendData', "Send my data"))}</label>
+							</input>
+						</div>
+					</summary>
+					<div class="block-info">
+						<!-- To be dynamically filled -->
+					</div>
+				</details>
+>>>>>>> .their
 			</div>
 		</div>
 
+<<<<<<< .our
 		<div class="input-group">
 			<label class="inline-label" for="issue-title">${escape(localize('issueTitleLabel', "Title"))} <span class="required-input">*</span></label>
 			<input id="issue-title" type="text" class="inline-form-control" placeholder="${escape(localize('issueTitleRequired', "Please enter a title."))}" required>
@@ -44,6 +122,25 @@
 			<small id="similar-issues">
 				<!-- To be dynamically filled -->
 			</small>
+=======
+	<div class="section">
+		<div id="disabledExtensions">
+			<div class="extensions-form">
+				<label>${escape(localize('tryDisablingExtensions', "Is the problem reproducible when extensions are disabled?"))}</label>
+				<div class="form-buttons">
+					<div class="choice">
+						<input type="radio" id="reproducesWithoutExtensions" value=true name="reprosWithoutExtensions" />
+						<label for="reproducesWithoutExtensions">${escape(localize('yes', "Yes"))}</label>
+					</div>
+					<div class="choice">
+						<input type="radio" id="reproducesWithExtensions" value=false name="reprosWithoutExtensions" checked/>
+						<label for="reproducesWithExtensions">${escape(localize('no', "No"))}</label>
+					</div>
+				</div>
+			</div>
+			<div class="instructions">${escape(localize('disableExtensionsLabel', "Try to reproduce the problem after "))}<span tabIndex=0 role="button" id="disableExtensions" class="workbenchCommand">${escape(localize('disableExtensions', "disabling all extensions and reloading the window"))}</span>.</div>
+			<div class="instructions">${escape(localize('showRunningExtensionsLabel', "If you suspect it's an extension issue, "))}<span tabIndex=0 role="button"id="showRunning" class="workbenchCommand">${escape(localize('showRunningExtensions', "see all running extensions"))}</span>.</div>
+>>>>>>> .their
 		</div>
 
 	</div>
@@ -56,7 +153,11 @@
 			<!-- To be dynamically filled -->
 		</div>
 		<div class="block-info-text">
+<<<<<<< .our
 			<textarea name="description" id="description" placeholder="${escape(localize('details', "Please enter details."))}" required></textarea>
+=======
+			<textarea name="description" id="description" cols="100" rows="12" placeholder="${escape(localize('details', "Please enter details."))}" required></textarea>
+>>>>>>> .their
 		</div>
 	</div>
 
changed in both
  base   100644 b0da6839f0ee6dec0e298b5475601cfbef9e151f src/vs/code/electron-browser/issue/media/issueReporter.css
  our    100644 aeb02c73f2bd814e5226d69fd77698600c612772 src/vs/code/electron-browser/issue/media/issueReporter.css
  their  100644 e5e13bf685f73db3a6ae0665d174c72fcb920401 src/vs/code/electron-browser/issue/media/issueReporter.css
@@ -33,7 +33,16 @@
 }
 
 .section {
+<<<<<<< .our
 	margin-bottom: .5em;
+=======
+	margin-bottom: 1.5em;
+}
+
+#similar-issues {
+	margin-left: 10%;
+	display: block;
+>>>>>>> .their
 }
 
 /**
@@ -50,6 +59,13 @@
 	border: 1px solid #ced4da;
 }
 
+<<<<<<< .our
+=======
+.inline-form-control {
+	display: inline-block !important;
+}
+
+>>>>>>> .their
 textarea {
 	overflow: auto;
 	resize: vertical;
@@ -108,7 +124,11 @@
 
 .block .block-info {
 	width: 100%;
+<<<<<<< .our
 	font-family: Monaco, Menlo, Consolas, "Droid Sans Mono", "Inconsolata", "Courier New", monospace, "Droid Sans Fallback";
+=======
+	font-family: 'Menlo', 'Courier New', 'Courier', monospace;
+>>>>>>> .their
 	font-size: 12px;
 	overflow: auto;
 	overflow-wrap: break-word;
@@ -168,8 +188,40 @@
 	margin-bottom: 1em;
 }
 
+<<<<<<< .our
 #extension-selection {
 	margin-top: 1em;
+=======
+.extensions-form {
+	display: flex;
+}
+
+.extensions-form > .form-buttons {
+	display: flex;
+	margin-left: 20px;
+}
+
+.extensions-form > .form-buttons > .choice {
+	margin-right: 35px;
+	position: relative;
+}
+
+.extensions-form > .form-buttons > .choice > label, .extensions-form  > .form-buttons > .choice > input {
+	cursor: pointer;
+	height: 100%;
+	margin-top: 1px;
+}
+
+.extensions-form > .form-buttons > .choice > label {
+	position: absolute;
+	top: 50%;
+	margin-top: -50%;
+	left: 20px;
+}
+
+.system-info {
+	margin-bottom: 1.25em;
+>>>>>>> .their
 }
 
 select, input, textarea {
@@ -177,12 +229,40 @@
 	margin-top: 10px;
 }
 
+<<<<<<< .our
+=======
+summary {
+	border: 1px solid transparent;
+	padding: 0 10px;
+	margin-bottom: 5px;
+}
+>>>>>>> .their
 
 .validation-error {
 	font-size: 12px;
 	margin-top: 1em;
 }
 
+<<<<<<< .our
+=======
+.include-data {
+	display: inline-block;
+	position: relative;
+}
+
+.include-data > .caption {
+	display: inline-block;
+	font-size: 12px;
+	position: absolute;
+	width: 80px;
+	top: 2px;
+	left: 30px;
+}
+
+.sendData {
+	margin-left: 1em;
+}
+>>>>>>> .their
 
 input[type="checkbox"] {
 	width: auto;
@@ -206,6 +286,7 @@
 	margin-top: .5em;
 }
 
+<<<<<<< .our
 a, .workbenchCommand {
 	cursor: pointer;
 	border: 1px solid transparent;
@@ -214,6 +295,11 @@
 .workbenchCommand:disabled {
 	color: #868e96;
 	cursor: default
+=======
+.workbenchCommand:disabled {
+	color: #868e96;
+	cursor: pointer;
+>>>>>>> .their
 }
 
 .block-extensions .block-info {
@@ -240,6 +326,7 @@
 	color: #be1100;
 }
 
+<<<<<<< .our
 .section .input-group .validation-error {
 	margin-left: 15%;
 }
@@ -280,10 +367,52 @@
 
 	.section .inline-form-control  {
 		width: calc(85% - 5px);
+=======
+button {
+	background-color: #007ACC;
+	color: #fff;
+}
+
+#issue-type-label {
+	width: 95px;
+}
+
+#issue-type {
+	width: calc(100% - 100px);
+}
+
+#issue-title-label {
+	width: 80px;
+	display: inline-block;
+}
+
+#issue-title {
+	width: calc(100% - 85px);
+}
+
+
+@media (max-width: 950px) {
+	#issue-type-label {
+		width: 12%;
+	}
+
+	#issue-type {
+		width: calc(88% - 5px);
+	}
+
+	#issue-title-label {
+		width: 10%;
+		display: inline-block
+	}
+
+	#issue-title {
+		width: calc(90% - 5px);
+>>>>>>> .their
 	}
 }
 
 @media (max-width: 620px) {
+<<<<<<< .our
 	.section .inline-label {
 		display: none !important;
 	}
@@ -352,3 +481,17 @@
 	text-overflow: ellipsis;
 	overflow: hidden;
 }
+=======
+	#issue-title-label, #issue-type-label {
+		display: none !important;
+	}
+
+	#issue-type, #issue-title {
+		width: 100%;
+	}
+
+	#similar-issues {
+		margin-left: 0;
+	}
+}
+>>>>>>> .their
changed in both
  base   100644 926ce809c15e50b217e7611d57950e1abb2b320e src/vs/code/electron-main/diagnostics.ts
  our    100644 3bb9e182899533e24fe8967328f2174571df8e45 src/vs/code/electron-main/diagnostics.ts
  their  100644 20101529482e798fcb9a3661e923227ec6db57b7 src/vs/code/electron-main/diagnostics.ts
@@ -41,7 +41,11 @@
 }
 
 export interface PerformanceInfo {
+<<<<<<< .our
 	processInfo?: string;
+=======
+	processInfo?: ProcessInfo[];
+>>>>>>> .their
 	workspaceInfo?: string;
 }
 
@@ -84,6 +88,7 @@
 			});
 		}
 
+<<<<<<< .our
 		return Promise.all(workspaceStatPromises).then(() => {
 			return {
 				processInfo: formatProcessList(info, rootProcess),
@@ -95,6 +100,12 @@
 				workspaceInfo: `Unable to calculate workspace stats: ${error}`
 			};
 		});
+=======
+		return {
+			processInfo: getProcessList(info, rootProcess),
+			workspaceInfo: workspaceInfoMessages.join('\n')
+		};
+>>>>>>> .their
 	});
 }
 
@@ -106,8 +117,12 @@
 		'Memory (System)': `${(os.totalmem() / GB).toFixed(2)}GB (${(os.freemem() / GB).toFixed(2)}GB free)`,
 		VM: `${Math.round((virtualMachineHint.value() * 100))}%`,
 		'Screen Reader': `${app.isAccessibilitySupportEnabled() ? 'yes' : 'no'}`,
+<<<<<<< .our
 		'Process Argv': `${info.mainArguments.join(' ')}`,
 		'GPU Status': app.getGPUFeatureStatus()
+=======
+		'Process Argv': `${info.mainArguments.join(' ')}`
+>>>>>>> .their
 	};
 
 	const cpus = os.cpus();
@@ -233,11 +248,55 @@
 	return output.join('\n');
 }
 
+<<<<<<< .our
 function expandGPUFeatures(): string {
 	const gpuFeatures = app.getGPUFeatureStatus();
 	const longestFeatureName = Math.max(...Object.keys(gpuFeatures).map(feature => feature.length));
 	// Make columns aligned by adding spaces after feature name
 	return Object.keys(gpuFeatures).map(feature => `${feature}:  ${repeat(' ', longestFeatureName - feature.length)}  ${gpuFeatures[feature]}`).join('\n                  ');
+=======
+function getProcessList(info: IMainProcessInfo, rootProcess: ProcessItem): ProcessInfo[] {
+	const mapPidToWindowTitle = new Map<number, string>();
+	info.windows.forEach(window => mapPidToWindowTitle.set(window.pid, window.title));
+
+	const processes: ProcessInfo[] = [];
+
+	if (rootProcess) {
+		getProcessItem(mapPidToWindowTitle, processes, rootProcess, 0);
+	}
+
+	return processes;
+}
+
+function getProcessItem(mapPidToWindowTitle: Map<number, string>, processes: ProcessInfo[], item: ProcessItem, indent: number): void {
+	const isRoot = (indent === 0);
+
+	const MB = 1024 * 1024;
+
+	// Format name with indent
+	let name: string;
+	if (isRoot) {
+		name = `${product.applicationName} main`;
+	} else {
+		name = `${repeat('--', indent)} ${item.name}`;
+
+		if (item.name === 'window') {
+			name = `${name} (${mapPidToWindowTitle.get(item.pid)})`;
+		}
+	}
+	const memory = process.platform === 'win32' ? item.mem : (os.totalmem() * (item.mem / 100));
+	processes.push({
+		cpu: Number(item.load.toFixed(0)),
+		memory: Number((memory / MB).toFixed(0)),
+		pid: Number((item.pid).toFixed(0)),
+		name
+	});
+
+	// Recurse into children if any
+	if (Array.isArray(item.children)) {
+		item.children.forEach(child => getProcessItem(mapPidToWindowTitle, processes, child, indent + 1));
+	}
+>>>>>>> .their
 }
 
 export function formatEnvironment(info: IMainProcessInfo): string {
changed in both
  base   100644 87425685c5bf2d06a5f136e2c85c9eb94a531eec src/vs/code/electron-main/logUploader.ts
  our    100644 7142aa19a4cc1eda1ba377d464497305ab507809 src/vs/code/electron-main/logUploader.ts
  their  100644 543fab3fb4112192910de1b00ccfbfb1392035a8 src/vs/code/electron-main/logUploader.ts
changed in both
  base   100644 f92847452e17f8a74e8e3061d3cdcd8497cc2a98 src/vs/editor/common/config/editorOptions.ts
  our    100644 3a51038033803eb3e426c81c8416ce7c260eb272 src/vs/editor/common/config/editorOptions.ts
  their  100644 921165fc844a1ffffaabae0686019f416d9cf666 src/vs/editor/common/config/editorOptions.ts
changed in both
  base   100644 7eb0243f2c1d3b7f1423d6ddaf20adeb7c3ba27a src/vs/editor/contrib/find/test/findController.test.ts
  our    100644 e5ce80bb6016a1e51d5e1e85539a8e82a7c12e34 src/vs/editor/contrib/find/test/findController.test.ts
  their  100644 f48c33a69778ffbb8ff101d0333db8b792a0fcc7 src/vs/editor/contrib/find/test/findController.test.ts
changed in both
  base   100644 3fdcc99d6befa01c078606e59f0f27bcb685735f src/vs/editor/contrib/suggest/suggestMemory.ts
  our    100644 e278a619c962e7c12a5cd1b555b0c59b33e32c0a src/vs/editor/contrib/suggest/suggestMemory.ts
  their  100644 58df1fd71798f5aefc1600422c7325aee09a6afe src/vs/editor/contrib/suggest/suggestMemory.ts
changed in both
  base   100644 ee095d5b1fed42389037b0f1aafa2a9c6ff2ebdb src/vs/monaco.d.ts
  our    100644 76dcf491ff9c1973ad61bf5d423713bb1a3b4e44 src/vs/monaco.d.ts
  their  100644 0a1cc793efdd772ec44aca5ef7cc0b887353421c src/vs/monaco.d.ts
changed in both
  base   100644 02ed4c6986266d06910a3eb61efa5ede6c6b5c5c src/vs/platform/issue/electron-main/issueService.ts
  our    100644 cebb4e612373900c38659291fafa9b78f51e1be1 src/vs/platform/issue/electron-main/issueService.ts
  their  100644 06355038ac58012ea185270479c7e8f0d2d1f7fa src/vs/platform/issue/electron-main/issueService.ts
@@ -9,21 +9,33 @@
 import { localize } from 'vs/nls';
 import * as objects from 'vs/base/common/objects';
 import { parseArgs } from 'vs/platform/environment/node/argv';
+<<<<<<< .our
 import { IIssueService, IssueReporterData, IssueReporterFeatures, ProcessExplorerData } from 'vs/platform/issue/common/issue';
+=======
+import { IIssueService, IssueReporterData } from 'vs/platform/issue/common/issue';
+>>>>>>> .their
 import { BrowserWindow, ipcMain, screen } from 'electron';
 import { ILaunchService } from 'vs/code/electron-main/launch';
 import { getPerformanceInfo, PerformanceInfo, getSystemInfo, SystemInfo } from 'vs/code/electron-main/diagnostics';
 import { IEnvironmentService } from 'vs/platform/environment/common/environment';
+<<<<<<< .our
 import { isMacintosh, IProcessEnvironment } from 'vs/base/common/platform';
 import { ILogService } from 'vs/platform/log/common/log';
+=======
+import { isMacintosh } from 'vs/base/common/platform';
+>>>>>>> .their
 
 const DEFAULT_BACKGROUND_COLOR = '#1E1E1E';
 
 export class IssueService implements IIssueService {
 	_serviceBrand: any;
 	_issueWindow: BrowserWindow;
+<<<<<<< .our
 	_issueParentWindow: BrowserWindow;
 	_processExplorerWindow: BrowserWindow;
+=======
+	_parentWindow: BrowserWindow;
+>>>>>>> .their
 
 	constructor(
 		private machineId: string,
@@ -47,6 +59,7 @@
 		});
 
 		ipcMain.on('workbenchCommand', (event, arg) => {
+<<<<<<< .our
 			this._issueParentWindow.webContents.send('vscode:runAction', { id: arg, from: 'issueReporter' });
 		});
 
@@ -95,6 +108,22 @@
 			this.launchService.getMainProcessInfo().then(info => {
 				event.sender.send('windowsInfoResponse', info.windows);
 			});
+=======
+			this._parentWindow.webContents.send('vscode:runAction', { id: arg });
+		});
+
+		this._parentWindow = BrowserWindow.getFocusedWindow();
+		const position = this.getWindowPosition();
+		this._issueWindow = new BrowserWindow({
+			width: position.width,
+			height: position.height,
+			minWidth: 300,
+			minHeight: 200,
+			x: position.x,
+			y: position.y,
+			title: localize('issueReporter', "Issue Reporter"),
+			backgroundColor: data.styles.backgroundColor || DEFAULT_BACKGROUND_COLOR
+>>>>>>> .their
 		});
 
 		// Create as singleton
@@ -154,7 +183,11 @@
 		return TPromise.as(null);
 	}
 
+<<<<<<< .our
 	private getWindowPosition(parentWindow: BrowserWindow, defaultWidth: number, defaultHeight: number) {
+=======
+	private getWindowPosition() {
+>>>>>>> .their
 		// We want the new window to open on the same display that the parent is in
 		let displayToUse: Electron.Display;
 		const displays = screen.getAllDisplays();
@@ -174,8 +207,13 @@
 			}
 
 			// if we have a last active window, use that display for the new window
+<<<<<<< .our
 			if (!displayToUse && parentWindow) {
 				displayToUse = screen.getDisplayMatching(parentWindow.getBounds());
+=======
+			if (!displayToUse && this._parentWindow) {
+				displayToUse = screen.getDisplayMatching(this._parentWindow.getBounds());
+>>>>>>> .their
 			}
 
 			// fallback to primary display or first display
@@ -185,6 +223,7 @@
 		}
 
 		let state = {
+<<<<<<< .our
 			width: defaultWidth,
 			height: defaultHeight,
 			x: undefined,
@@ -220,6 +259,15 @@
 				state.height = displayBounds.height; // prevent window from exceeding display bounds height
 			}
 		}
+=======
+			width: 800,
+			height: 900,
+			x: undefined,
+			y: undefined
+		};
+		state.x = displayToUse.bounds.x + (displayToUse.bounds.width / 2) - (state.width / 2);
+		state.y = displayToUse.bounds.y + (displayToUse.bounds.height / 2) - (state.height / 2);
+>>>>>>> .their
 
 		return state;
 	}
changed in both
  base   100644 de93ac69de48a0346cdacb450d2e51025c485f95 src/vs/workbench/browser/parts/editor/editorCommands.ts
  our    100644 f8a7357eecc3080de4e3febda7b346e2b0e5aeaa src/vs/workbench/browser/parts/editor/editorCommands.ts
  their  100644 18f4458765383b885d4024bccf842e1a399b68a2 src/vs/workbench/browser/parts/editor/editorCommands.ts
@@ -498,10 +498,15 @@
 					.filter(context => context.groupId === groupId)
 					.map(context => typeof context.editorIndex === 'number' ? group.getEditor(context.editorIndex) : group.activeEditor);
 
+<<<<<<< .our
 				return group.closeEditors(editors);
 			}));
 		}
 	});
+=======
+						return group.activeEditor;
+					}).filter(input => !!input);
+>>>>>>> .their
 
 	KeybindingsRegistry.registerCommandAndKeybindingRule({
 		id: CLOSE_EDITOR_GROUP_COMMAND_ID,
removed in local
  base   100644 b3b5dfc497319f909209434d226ee3043a841739 src/vs/workbench/browser/parts/views/treeView.ts
  their  100644 69fd5b0cab97585b2857a4b8710a8c348e762830 src/vs/workbench/browser/parts/views/treeView.ts
changed in both
  base   100644 7c4a15e8e7b5a76263d9cf59c24a21607c8d7a3d src/vs/workbench/electron-browser/actions.ts
  our    100644 bdd05d8bf604885479f782703b020131fa80ea9f src/vs/workbench/electron-browser/actions.ts
  their  100644 00db7589aea4cc5c06afae34fee65f342a38e3f8 src/vs/workbench/electron-browser/actions.ts
@@ -29,6 +29,7 @@
 import { getBaseLabel } from 'vs/base/common/labels';
 import { IViewlet } from 'vs/workbench/common/viewlet';
 import { IPanel } from 'vs/workbench/common/panel';
+<<<<<<< .our
 import { IWorkspaceIdentifier, getWorkspaceLabel, ISingleFolderWorkspaceIdentifier, isSingleFolderWorkspaceIdentifier, isWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';
 import { FileKind } from 'vs/platform/files/common/files';
 import { IssueType } from 'vs/platform/issue/common/issue';
@@ -46,6 +47,19 @@
 import { IModeService } from 'vs/editor/common/services/modeService';
 import { IQuickInputService, IQuickPickItem, IQuickInputButton, IQuickPickSeparator, IKeyMods } from 'vs/platform/quickinput/common/quickInput';
 import { getIconClasses } from 'vs/workbench/browser/labels';
+=======
+import { IWorkspaceIdentifier, getWorkspaceLabel, ISingleFolderWorkspaceIdentifier, isSingleFolderWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';
+import { FileKind, IFileService } from 'vs/platform/files/common/files';
+import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
+import { IExtensionService, ActivationTimes } from 'vs/platform/extensions/common/extensions';
+import { getEntries } from 'vs/base/common/performance';
+import { IEditor } from 'vs/platform/editor/common/editor';
+import { IIssueService, IssueReporterData, IssueType, IssueReporterStyles } from 'vs/platform/issue/common/issue';
+import { IThemeService, ITheme } from 'vs/platform/theme/common/themeService';
+import { textLinkForeground, inputBackground, inputBorder, inputForeground, buttonBackground, buttonHoverBackground, buttonForeground, inputValidationErrorBorder, foreground, inputActiveOptionBorder } from 'vs/platform/theme/common/colorRegistry';
+import { SIDE_BAR_BACKGROUND } from 'vs/workbench/common/theme';
+import { getGalleryExtensionIdFromLocal } from 'vs/platform/extensionManagement/common/extensionManagementUtil';
+>>>>>>> .their
 
 // --- actions
 
@@ -584,9 +598,26 @@
 		super(id, label);
 	}
 
+<<<<<<< .our
 	run(): TPromise<boolean> {
 		return this.issueService.openProcessExplorer()
 			.then(() => true);
+=======
+	public run(): TPromise<boolean> {
+		return this.extensionManagementService.getInstalled(LocalExtensionType.User).then(extensions => {
+			const enabledExtensions = extensions.filter(extension => this.extensionEnablementService.isEnabled({ id: getGalleryExtensionIdFromLocal(extension) }));
+			const theme = this.themeService.getTheme();
+			const issueReporterData: IssueReporterData = {
+				styles: getIssueReporterStyles(theme),
+				zoomLevel: webFrame.getZoomLevel(),
+				enabledExtensions
+			};
+
+			return this.issueService.openReporter(issueReporterData).then(() => {
+				return TPromise.as(true);
+			});
+		});
+>>>>>>> .their
 	}
 }
 
changed in both
  base   100644 c3806ceef8da4420d0f7eff870511a61269245f7 src/vs/workbench/parts/extensions/electron-browser/extensionsViews.ts
  our    100644 3bfb6cffba943bf68a9fa9c24fb1903c66dd3fad src/vs/workbench/parts/extensions/electron-browser/extensionsViews.ts
  their  100644 a390e5cabbb4df24c40a9a396717ef1dd87f5030 src/vs/workbench/parts/extensions/electron-browser/extensionsViews.ts
@@ -323,7 +323,7 @@
 		}
 
 		if (text) {
-			options = assign(options, { text: text.substr(0, 350), source: 'searchText' });
+			options = assign(options, { text: text.substr(0, 350), source: text === query.value ? 'searchText' : 'file-extension-tags' });
 		} else {
 			options.source = 'viewlet';
 		}
changed in both
  base   100644 6e4bf7992f557c12f3341b9300dd35d3beed11e3 src/vs/workbench/parts/files/electron-browser/fileCommands.ts
  our    100644 38cb4a1c6b995d502359ecceccc8480e423cd6e0 src/vs/workbench/parts/files/electron-browser/fileCommands.ts
  their  100644 ee8f3d96a5ed02f85a336743d200bd6f62b67e26 src/vs/workbench/parts/files/electron-browser/fileCommands.ts
@@ -352,12 +352,17 @@
 	}
 });
 
+<<<<<<< .our
 function revealResourcesInOS(resources: URI[], windowsService: IWindowsService, notificationService: INotificationService, workspaceContextService: IWorkspaceContextService): void {
+=======
+function revealResourcesInOS(resources: URI[], windowsService: IWindowsService, messageService: IMessageService): void {
+>>>>>>> .their
 	if (resources.length) {
 		sequence(resources.map(r => () => windowsService.showItemInFolder(paths.normalize(r.fsPath, true))));
 	} else if (workspaceContextService.getWorkspace().folders.length) {
 		windowsService.showItemInFolder(paths.normalize(workspaceContextService.getWorkspace().folders[0].uri.fsPath, true));
 	} else {
+<<<<<<< .our
 		notificationService.info(nls.localize('openFileToReveal', "Open a file first to reveal"));
 	}
 }
@@ -366,10 +371,20 @@
 	id: REVEAL_IN_OS_COMMAND_ID,
 	weight: KeybindingWeight.WorkbenchContrib,
 	when: EditorContextKeys.focus.toNegated(),
+=======
+		messageService.show(severity.Info, nls.localize('openFileToReveal', "Open a file first to reveal"));
+	}
+}
+KeybindingsRegistry.registerCommandAndKeybindingRule({
+	id: REVEAL_IN_OS_COMMAND_ID,
+	weight: KeybindingsRegistry.WEIGHT.workbenchContrib(),
+	when: ExplorerFocusCondition,
+>>>>>>> .their
 	primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KEY_R,
 	win: {
 		primary: KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_R
 	},
+<<<<<<< .our
 	handler: (accessor: ServicesAccessor, resource: URI | object) => {
 		const resources = getMultiSelectedResources(resource, accessor.get(IListService), accessor.get(IEditorService));
 		revealResourcesInOS(resources, accessor.get(IWindowsService), accessor.get(INotificationService), accessor.get(IWorkspaceContextService));
@@ -390,6 +405,27 @@
 });
 
 function resourcesToClipboard(resources: URI[], clipboardService: IClipboardService, notificationService: INotificationService, contextService?: IWorkspaceContextService): void {
+=======
+	handler: (accessor: ServicesAccessor, resource: URI) => {
+		const resources = getMultiSelectedResources(resource, accessor.get(IListService), accessor.get(IWorkbenchEditorService));
+		revealResourcesInOS(resources, accessor.get(IWindowsService), accessor.get(IMessageService));
+	}
+});
+KeybindingsRegistry.registerCommandAndKeybindingRule({
+	weight: KeybindingsRegistry.WEIGHT.workbenchContrib(),
+	when: undefined,
+	primary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyCode.KEY_R),
+	id: 'workbench.action.files.revealActiveFileInWindows',
+	handler: (accessor: ServicesAccessor, resource: URI) => {
+		const editorService = accessor.get(IWorkbenchEditorService);
+		const activeInput = editorService.getActiveEditorInput();
+		const resources = activeInput && activeInput.getResource() ? [activeInput.getResource()] : [];
+		revealResourcesInOS(resources, accessor.get(IWindowsService), accessor.get(IMessageService));
+	}
+});
+
+function resourcesToClipboard(resources: URI[], clipboardService: IClipboardService, messageService: IMessageService): void {
+>>>>>>> .their
 	if (resources.length) {
 		const lineDelimiter = isWindows ? '\r\n' : '\n';
 
@@ -413,10 +449,16 @@
 		}).join(lineDelimiter);
 		clipboardService.writeText(text);
 	} else {
+<<<<<<< .our
 		notificationService.info(nls.localize('openFileToCopy', "Open a file first to copy its path"));
 	}
 }
 
+=======
+		messageService.show(severity.Info, nls.localize('openFileToCopy', "Open a file first to copy its path"));
+	}
+}
+>>>>>>> .their
 KeybindingsRegistry.registerCommandAndKeybindingRule({
 	weight: KeybindingWeight.WorkbenchContrib,
 	when: EditorContextKeys.focus.toNegated(),
@@ -425,13 +467,20 @@
 		primary: KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_C
 	},
 	id: COPY_PATH_COMMAND_ID,
+<<<<<<< .our
 	handler: (accessor, resource: URI | object) => {
 		const resources = getMultiSelectedResources(resource, accessor.get(IListService), accessor.get(IEditorService));
 		resourcesToClipboard(resources, accessor.get(IClipboardService), accessor.get(INotificationService));
+=======
+	handler: (accessor, resource: URI) => {
+		const resources = getMultiSelectedResources(resource, accessor.get(IListService), accessor.get(IWorkbenchEditorService));
+		resourcesToClipboard(resources, accessor.get(IClipboardService), accessor.get(IMessageService));
+>>>>>>> .their
 	}
 });
 
 KeybindingsRegistry.registerCommandAndKeybindingRule({
+<<<<<<< .our
 	weight: KeybindingWeight.WorkbenchContrib,
 	when: EditorContextKeys.focus.toNegated(),
 	primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_C,
@@ -455,6 +504,17 @@
 		const activeInput = editorService.activeEditor;
 		const resources = activeInput && activeInput.getResource() ? [activeInput.getResource()] : [];
 		resourcesToClipboard(resources, accessor.get(IClipboardService), accessor.get(INotificationService));
+=======
+	weight: KeybindingsRegistry.WEIGHT.workbenchContrib(),
+	when: undefined,
+	primary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyCode.KEY_P),
+	id: 'workbench.action.files.copyPathOfActiveFile',
+	handler: (accessor, resource: URI) => {
+		const editorService = accessor.get(IWorkbenchEditorService);
+		const activeInput = editorService.getActiveEditorInput();
+		const resources = activeInput && activeInput.getResource() ? [activeInput.getResource()] : [];
+		resourcesToClipboard(resources, accessor.get(IClipboardService), accessor.get(IMessageService));
+>>>>>>> .their
 	}
 });
 
