changed in both
  base   100644 abb7d7856987fd588f7247d45bc636b5b93e8113 build/gulpfile.editor.js
  our    100644 52d1f0fcf323631277651ff28381ae49c0fa6558 build/gulpfile.editor.js
  their  100644 3fc14da504529603e52c0e6307d38c858b7aaa0c build/gulpfile.editor.js
changed in both
  base   100644 256ca1ff53480886408bcb4fbdde1694daf85c94 build/monaco/package.json
  our    100644 efd919085b2ffc82da8d810c609a9ed217bffb35 build/monaco/package.json
  their  100644 aadfb15ab707e9b2ee28ff906e51526da9e58e6b build/monaco/package.json
@@ -1,7 +1,11 @@
 {
   "name": "monaco-editor-core",
   "private": true,
+<<<<<<< .our
   "version": "0.14.3",
+=======
+  "version": "0.13.2",
+>>>>>>> .their
   "description": "A browser based code editor",
   "author": "Microsoft Corporation",
   "license": "MIT",
changed in both
  base   100644 50e2e7a1b37e8e7dc9cb953afdb3da3703529edf extensions/css-language-features/client/src/cssMain.ts
  our    100644 dce55982cb94bb035bdff7d2c558ebd86a9e9f7b extensions/css-language-features/client/src/cssMain.ts
  their  100644 c587c0a5a875feededfe2a5f69b0bb55f13a8166 extensions/css-language-features/client/src/cssMain.ts
@@ -10,6 +10,10 @@
 
 import { languages, window, commands, ExtensionContext, Range, Position, CompletionItem, CompletionItemKind, TextEdit, SnippetString } from 'vscode';
 import { LanguageClient, LanguageClientOptions, ServerOptions, TransportKind, Disposable } from 'vscode-languageclient';
+<<<<<<< .our
+=======
+import { FoldingRangeRequest, FoldingRangeRequestParam, FoldingRangeClientCapabilities, FoldingRangeKind as LSFoldingRangeKind } from 'vscode-languageserver-protocol-foldingprovider';
+>>>>>>> .their
 
 // this method is called when vs code is activated
 export function activate(context: ExtensionContext) {
@@ -99,6 +103,41 @@
 		});
 	}
 
+<<<<<<< .our
+=======
+	function initFoldingProvider(): Disposable {
+		function getKind(kind: string | undefined): FoldingRangeKind | undefined {
+			if (kind) {
+				switch (kind) {
+					case LSFoldingRangeKind.Comment:
+						return FoldingRangeKind.Comment;
+					case LSFoldingRangeKind.Imports:
+						return FoldingRangeKind.Imports;
+					case LSFoldingRangeKind.Region:
+						return FoldingRangeKind.Region;
+				}
+			}
+			return void 0;
+		}
+		return languages.registerFoldingRangeProvider(documentSelector, {
+			provideFoldingRanges(document: TextDocument, context: FoldingContext, token: CancellationToken) {
+				const param: FoldingRangeRequestParam = {
+					textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document)
+				};
+				return client.sendRequest(FoldingRangeRequest.type, param, token).then(ranges => {
+					if (Array.isArray(ranges)) {
+						return ranges.map(r => new FoldingRange(r.startLine, r.endLine, getKind(r.kind)));
+					}
+					return null;
+				}, error => {
+					client.logFailedRequest(FoldingRangeRequest.type, error);
+					return null;
+				});
+			}
+		});
+	}
+
+>>>>>>> .their
 	commands.registerCommand('_css.applyCodeAction', applyCodeAction);
 
 	function applyCodeAction(uri: string, documentVersion: number, edits: TextEdit[]) {
changed in both
  base   100644 bf8fa07af2bafe31c5d7bd433d40e1c887926f07 extensions/html-language-features/client/src/htmlMain.ts
  our    100644 68f8b881d3bcf186706879657e06ddbdb58036d9 extensions/html-language-features/client/src/htmlMain.ts
  their  100644 021a4aa625e161dea6ec031fcb5d5c986874a373 extensions/html-language-features/client/src/htmlMain.ts
@@ -14,6 +14,11 @@
 import { activateTagClosing } from './tagClosing';
 import TelemetryReporter from 'vscode-extension-telemetry';
 
+<<<<<<< .our
+=======
+import { FoldingRangeRequest, FoldingRangeRequestParam, FoldingRangeClientCapabilities, FoldingRangeKind as LSFoldingRangeKind } from 'vscode-languageserver-protocol-foldingprovider';
+
+>>>>>>> .their
 namespace TagCloseRequest {
 	export const type: RequestType<TextDocumentPositionParams, string, any, any> = new RequestType('html/tag');
 }
@@ -154,6 +159,41 @@
 			return null;
 		}
 	});
+<<<<<<< .our
+=======
+
+	function initFoldingProvider(): Disposable {
+		function getKind(kind: string | undefined): FoldingRangeKind | undefined {
+			if (kind) {
+				switch (kind) {
+					case LSFoldingRangeKind.Comment:
+						return FoldingRangeKind.Comment;
+					case LSFoldingRangeKind.Imports:
+						return FoldingRangeKind.Imports;
+					case LSFoldingRangeKind.Region:
+						return FoldingRangeKind.Region;
+				}
+			}
+			return void 0;
+		}
+		return languages.registerFoldingRangeProvider(documentSelector, {
+			provideFoldingRanges(document: TextDocument, context: FoldingContext, token: CancellationToken) {
+				const param: FoldingRangeRequestParam = {
+					textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document)
+				};
+				return client.sendRequest(FoldingRangeRequest.type, param, token).then(ranges => {
+					if (Array.isArray(ranges)) {
+						return ranges.map(r => new FoldingRange(r.startLine, r.endLine, getKind(r.kind)));
+					}
+					return null;
+				}, error => {
+					client.logFailedRequest(FoldingRangeRequest.type, error);
+					return null;
+				});
+			}
+		});
+	}
+>>>>>>> .their
 }
 
 function getPackageInfo(context: ExtensionContext): IPackageInfo | null {
changed in both
  base   100644 53c19c4c22fb718c87585ff218e87f55deffe12d extensions/json-language-features/client/src/jsonMain.ts
  our    100644 9040304a4f84d9462af713bf2628e4bb49f8d701 extensions/json-language-features/client/src/jsonMain.ts
  their  100644 2cd653dfa4bfcf4922745c99617da6bf4bfdb64d extensions/json-language-features/client/src/jsonMain.ts
@@ -12,6 +12,11 @@
 import { LanguageClient, LanguageClientOptions, RequestType, ServerOptions, TransportKind, NotificationType, DidChangeConfigurationNotification } from 'vscode-languageclient';
 import TelemetryReporter from 'vscode-extension-telemetry';
 
+<<<<<<< .our
+=======
+import { FoldingRangeRequest, FoldingRangeRequestParam, FoldingRangeClientCapabilities, FoldingRangeKind as LSFoldingRangeKind } from 'vscode-languageserver-protocol-foldingprovider';
+
+>>>>>>> .their
 import { hash } from './utils/hash';
 
 namespace VSCodeContentRequest {
@@ -135,6 +140,41 @@
 	};
 	languages.setLanguageConfiguration('json', languageConfiguration);
 	languages.setLanguageConfiguration('jsonc', languageConfiguration);
+<<<<<<< .our
+=======
+
+	function initFoldingProvider(): Disposable {
+		function getKind(kind: string | undefined): FoldingRangeKind | undefined {
+			if (kind) {
+				switch (kind) {
+					case LSFoldingRangeKind.Comment:
+						return FoldingRangeKind.Comment;
+					case LSFoldingRangeKind.Imports:
+						return FoldingRangeKind.Imports;
+					case LSFoldingRangeKind.Region:
+						return FoldingRangeKind.Region;
+				}
+			}
+			return void 0;
+		}
+		return languages.registerFoldingRangeProvider(documentSelector, {
+			provideFoldingRanges(document: TextDocument, context: FoldingContext, token: CancellationToken) {
+				const param: FoldingRangeRequestParam = {
+					textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document)
+				};
+				return client.sendRequest(FoldingRangeRequest.type, param, token).then(ranges => {
+					if (Array.isArray(ranges)) {
+						return ranges.map(r => new FoldingRange(r.startLine, r.endLine, getKind(r.kind)));
+					}
+					return null;
+				}, error => {
+					client.logFailedRequest(FoldingRangeRequest.type, error);
+					return null;
+				});
+			}
+		});
+	}
+>>>>>>> .their
 }
 
 export function deactivate(): Promise<any> {
changed in both
  base   100644 a326864787f31fd62471cee61eba1c79ef7d2074 src/vs/base/browser/browser.ts
  our    100644 19c46188f3ba487d308c72637ce84fdba83c8908 src/vs/base/browser/browser.ts
  their  100644 1954291c847840bb3117b50a873739e8c8663a46 src/vs/base/browser/browser.ts
@@ -157,6 +157,15 @@
 export const isIPad = (userAgent.indexOf('iPad') >= 0);
 export const isEdgeWebView = isEdge && (userAgent.indexOf('WebView/') >= 0);
 
+<<<<<<< .our
+=======
+export const isChromev56 = (
+	userAgent.indexOf('Chrome/56.') >= 0
+	// Edge likes to impersonate Chrome sometimes
+	&& userAgent.indexOf('Edge/') === -1
+);
+
+>>>>>>> .their
 export function hasClipboardSupport() {
 	if (isIE) {
 		return false;
changed in both
  base   100644 d3dd81fac4e3883c692ffb8a3a50eb739850d0d6 src/vs/editor/browser/controller/textAreaInput.ts
  our    100644 53169924b40a89453d9315348a7454e0e49c0a03 src/vs/editor/browser/controller/textAreaInput.ts
  their  100644 45ba0fbe90bdb309b7911d7d1b8aee99a83c2ab5 src/vs/editor/browser/controller/textAreaInput.ts
changed in both
  base   100644 7103fb97b39aa6353f99198957309325520bd98e src/vs/editor/browser/widget/codeEditorWidget.ts
  our    100644 6f588e16445e2740e0f36730ce132f1ff91e44d8 src/vs/editor/browser/widget/codeEditorWidget.ts
  their  100644 afae2c3c2b263b95d6d7c5f8534ad1874def8d41 src/vs/editor/browser/widget/codeEditorWidget.ts
@@ -1827,6 +1827,7 @@
 	let hintForeground = theme.getColor(editorHintForeground);
 	if (hintForeground) {
 		collector.addRule(`.monaco-editor .${ClassName.EditorHintDecoration} { background: url("data:image/svg+xml,${getDotDotDotSVGData(hintForeground)}") no-repeat bottom left; }`);
+<<<<<<< .our
 	}
 
 	const unnecessaryForeground = theme.getColor(editorUnnecessaryCodeOpacity);
@@ -1837,5 +1838,7 @@
 	const unnecessaryBorder = theme.getColor(editorUnnecessaryCodeBorder);
 	if (unnecessaryBorder) {
 		collector.addRule(`.${SHOW_UNUSED_ENABLED_CLASS} .monaco-editor .${ClassName.EditorUnnecessaryDecoration} { border-bottom: 2px dashed ${unnecessaryBorder}; }`);
+=======
+>>>>>>> .their
 	}
 });
changed in both
  base   100644 3a122545b631dac5f9e3feb05bfddad50e4d88e1 src/vs/editor/contrib/codelens/codelensController.ts
  our    100644 23fde7dc577ec0599b59cfb3d324af268c439828 src/vs/editor/contrib/codelens/codelensController.ts
  their  100644 0cd0fb98162e74c98f45a7b7f6c77b8143ac2ff3 src/vs/editor/contrib/codelens/codelensController.ts
@@ -292,6 +292,7 @@
 
 			const promises = toResolve.map((request, i) => {
 
+<<<<<<< .our
 				const resolvedSymbols = new Array<ICodeLensSymbol>(request.length);
 				const promises = request.map((request, i) => {
 					if (typeof request.provider.resolveCodeLens === 'function') {
@@ -302,6 +303,20 @@
 					resolvedSymbols[i] = request.symbol;
 					return Promise.resolve(void 0);
 				});
+=======
+			const resolvedSymbols = new Array<ICodeLensSymbol>(request.length);
+			const promises = request.map((request, i) => {
+				if (typeof request.provider.resolveCodeLens === 'function') {
+					return asWinJsPromise((token) => {
+						return request.provider.resolveCodeLens(model, request.symbol, token);
+					}).then(symbol => {
+						resolvedSymbols[i] = symbol;
+					});
+				}
+				resolvedSymbols[i] = request.symbol;
+				return TPromise.as(void 0);
+			});
+>>>>>>> .their
 
 				return Promise.all(promises).then(() => {
 					lenses[i].updateCommands(resolvedSymbols);
changed in both
  base   100644 dcb29cd3d1f185dfd444fa697cdf612a400a7e7b src/vs/vscode.d.ts
  our    100644 6000b0300db361418bc31c0585263a9d663705f5 src/vs/vscode.d.ts
  their  100644 cee7ee04bb245fb88abcceeeeba3ed63fc024e20 src/vs/vscode.d.ts
@@ -3584,7 +3584,10 @@
 		 * [Region](#FoldingRangeKind.Region). The kind is used to categorize folding ranges and used by commands
 		 * like 'Fold all comments'. See
 		 * [FoldingRangeKind](#FoldingRangeKind) for an enumeration of all kinds.
+<<<<<<< .our
 		 * If not set, the range is originated from a syntax element.
+=======
+>>>>>>> .their
 		 */
 		kind?: FoldingRangeKind;
 
@@ -3598,6 +3601,7 @@
 		constructor(start: number, end: number, kind?: FoldingRangeKind);
 	}
 
+<<<<<<< .our
 	/**
 	 * An enumeration of specific folding range kinds. The kind is an optional field of a [FoldingRange](#FoldingRange)
 	 * and is used to distinguish specific folding ranges such as ranges originated from comments. The kind is used by commands like
@@ -3616,6 +3620,20 @@
 		/**
 		 * Kind for folding range representing regions originating from folding markers like `#region` and `#endregion`.
 		 */
+=======
+	export enum FoldingRangeKind {
+		/**
+		 * Kind for folding range representing a comment.
+		 */
+		Comment = 1,
+		/**
+		 * Kind for folding range representing a import.
+		 */
+		Imports = 2,
+		/**
+		 * Kind for folding range representing regions (for example a folding range marked by `#region` and `#endregion`).
+		 */
+>>>>>>> .their
 		Region = 3
 	}
 
@@ -5055,6 +5073,7 @@
 	}
 
 	/**
+<<<<<<< .our
 	 * An object representing an executed Task. It can be used
 	 * to terminate a task.
 	 *
@@ -5207,6 +5226,8 @@
 	}
 
 	/**
+=======
+>>>>>>> .their
 	 * Enumeration of file types. The types `File` and `Directory` can also be
 	 * a symbolic links, in that use `FileType.File | FileType.SymbolicLink` and
 	 * `FileType.Directory | FileType.SymbolicLink`.
@@ -6237,7 +6258,11 @@
 		 *
 		 * @return New webview panel.
 		 */
+<<<<<<< .our
 		export function createWebviewPanel(viewType: string, title: string, showOptions: ViewColumn | { viewColumn: ViewColumn, preserveFocus?: boolean }, options?: WebviewPanelOptions & WebviewOptions): WebviewPanel;
+=======
+		export function createWebviewPanel(viewType: string, title: string, position: ViewColumn, options?: WebviewPanelOptions & WebviewOptions): WebviewPanel;
+>>>>>>> .their
 
 		/**
 		 * Set a message to the status bar. This is a short hand for the more powerful
changed in both
  base   100644 5c98f71fd8252434107ee3fd454ae1449b96ade6 src/vs/workbench/api/node/extHostTypeConverters.ts
  our    100644 ae449946df0a11f467815b4a7ec498cfdb238842 src/vs/workbench/api/node/extHostTypeConverters.ts
  their  100644 149733b823a0dc7cb591257f7f16f89726217e60 src/vs/workbench/api/node/extHostTypeConverters.ts
@@ -706,6 +706,25 @@
 			range.kind = FoldingRangeKind.from(r.kind);
 		}
 		return range;
+<<<<<<< .our
+=======
+	}
+}
+
+export namespace FoldingRangeKind {
+	export function from(kind: vscode.FoldingRangeKind | undefined): modes.FoldingRangeKind | undefined {
+		if (kind) {
+			switch (kind) {
+				case types.FoldingRangeKind.Comment:
+					return modes.FoldingRangeKind.Comment;
+				case types.FoldingRangeKind.Imports:
+					return modes.FoldingRangeKind.Imports;
+				case types.FoldingRangeKind.Region:
+					return modes.FoldingRangeKind.Region;
+			}
+		}
+		return void 0;
+>>>>>>> .their
 	}
 }
 
changed in both
  base   100644 1d84be9456667096318430ace00b2c74df7f0013 src/vs/workbench/api/node/extHostTypes.ts
  our    100644 7e7572fe66c624d470c8506c4a3ebf35efe8320a src/vs/workbench/api/node/extHostTypes.ts
  their  100644 492ac346fb978429c1d20148f56d17d359d6f179 src/vs/workbench/api/node/extHostTypes.ts
@@ -1941,6 +1941,7 @@
 	Comment = 1,
 	Imports = 2,
 	Region = 3
+<<<<<<< .our
 }
 
 //#endregion
@@ -1955,6 +1956,8 @@
 	 * Determines an item is expanded
 	 */
 	Expanded = 1
+=======
+>>>>>>> .their
 }
 
 export class QuickInputButtons {
changed in both
  base   100644 e91157377ab33d134defebbfcc5a2817b5aa6124 src/vs/workbench/api/node/extHostWebview.ts
  our    100644 89302f776704c2cabc429d6a8ced0d9c7839abe0 src/vs/workbench/api/node/extHostWebview.ts
  their  100644 285c1722e97ea01b5e69819f853a8e89c3a74219 src/vs/workbench/api/node/extHostWebview.ts
@@ -242,6 +242,7 @@
 		extensionLocation: URI,
 		viewType: string,
 		title: string,
+<<<<<<< .our
 		showOptions: vscode.ViewColumn | { viewColumn: vscode.ViewColumn, preserveFocus?: boolean },
 		options: (vscode.WebviewPanelOptions & vscode.WebviewOptions) = {},
 	): vscode.WebviewPanel {
@@ -253,6 +254,15 @@
 
 		const handle = ExtHostWebviews.newHandle();
 		this._proxy.$createWebviewPanel(handle, viewType, title, webviewShowOptions, options, extensionLocation);
+=======
+		viewColumn: vscode.ViewColumn,
+		options: (vscode.WebviewPanelOptions & vscode.WebviewOptions) | undefined,
+		extensionFolderPath: string
+	): vscode.WebviewPanel {
+		options = options || {};
+		const handle = ExtHostWebviews.webviewHandlePool++ + '';
+		this._proxy.$createWebviewPanel(handle, viewType, title, typeConverters.fromViewColumn(viewColumn), options, extensionFolderPath);
+>>>>>>> .their
 
 		const webview = new ExtHostWebview(handle, this._proxy, options);
 		const panel = new ExtHostWebviewPanel(handle, this._proxy, viewType, title, viewColumn, options, webview);
changed in both
  base   100644 96ec92771ac7f0be88d964d1c744d799458669fd src/vs/workbench/browser/parts/activitybar/activitybarActions.ts
  our    100644 773bbe0d763095d8dfa6af1262d5e8a15944139f src/vs/workbench/browser/parts/activitybar/activitybarActions.ts
  their  100644 366b81fe440c92f643b6909cdf88d67ba6e52e16 src/vs/workbench/browser/parts/activitybar/activitybarActions.ts
@@ -21,9 +21,14 @@
 import { StandardMouseEvent } from 'vs/base/browser/mouseEvent';
 import { KeyCode } from 'vs/base/common/keyCodes';
 import { StandardKeyboardEvent } from 'vs/base/browser/keyboardEvent';
+<<<<<<< .our
 import { ActivityAction, ActivityActionItem, ICompositeBarColors, ToggleCompositePinnedAction, ICompositeBar } from 'vs/workbench/browser/parts/compositeBarActions';
 import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
 import URI from 'vs/base/common/uri';
+=======
+import { ActivityAction, ActivityActionItem, ICompositeBarColors } from 'vs/workbench/browser/parts/compositebar/compositeBarActions';
+import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
+>>>>>>> .their
 
 export class ViewletActivityAction extends ActivityAction {
 
changed in both
  base   100644 54c49535f2bca89c496a3e6b901872b914bcbf3e src/vs/workbench/browser/parts/quickinput/quickInput.ts
  our    100644 d834bd59460d51375417fd865daeb856b353a144 src/vs/workbench/browser/parts/quickinput/quickInput.ts
  their  100644 f82473876f9a9cc7ba545afa94eceb07ec00a8cc src/vs/workbench/browser/parts/quickinput/quickInput.ts
@@ -32,6 +32,7 @@
 import { Button } from 'vs/base/browser/ui/button/button';
 import { dispose, IDisposable } from 'vs/base/common/lifecycle';
 import Severity from 'vs/base/common/severity';
+<<<<<<< .our
 import { IEditorGroupsService } from 'vs/workbench/services/group/common/editorGroupsService';
 import { IContextKeyService, RawContextKey, IContextKey } from 'vs/platform/contextkey/common/contextkey';
 import { ICommandAndKeybindingRule, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';
@@ -43,6 +44,9 @@
 import { equals } from 'vs/base/common/arrays';
 import { TimeoutTimer } from 'vs/base/common/async';
 import { getIconClass } from 'vs/workbench/browser/parts/quickinput/quickInputUtils';
+=======
+import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
+>>>>>>> .their
 
 const $ = dom.$;
 
@@ -777,9 +781,13 @@
 		@IInstantiationService private instantiationService: IInstantiationService,
 		@IPartService private partService: IPartService,
 		@IQuickOpenService private quickOpenService: IQuickOpenService,
+<<<<<<< .our
 		@IEditorGroupsService private editorGroupService: IEditorGroupsService,
 		@IKeybindingService private keybindingService: IKeybindingService,
 		@IContextKeyService private contextKeyService: IContextKeyService,
+=======
+		@IWorkbenchEditorService private editorService: IWorkbenchEditorService,
+>>>>>>> .their
 		@IThemeService themeService: IThemeService
 	) {
 		super(QuickInputService.ID, themeService);
@@ -916,11 +924,26 @@
 			}, 0);
 		}));
 
+<<<<<<< .our
 		const focusTracker = dom.trackFocus(container);
 		this._register(focusTracker);
 		this._register(focusTracker.onDidBlur(() => {
 			if (!this.ui.ignoreFocusOut && !this.environmentService.args['sticky-quickopen'] && this.configurationService.getValue(CLOSE_ON_FOCUS_LOST_CONFIG)) {
 				this.hide(true);
+=======
+		this.toUnbind.push(dom.addDisposableListener(this.container, 'focusout', (e: FocusEvent) => {
+			if (e.relatedTarget === this.container) {
+				(<HTMLElement>e.target).focus();
+				return;
+			}
+			for (let element = <Element>e.relatedTarget; element; element = element.parentElement) {
+				if (element === this.container) {
+					return;
+				}
+			}
+			if (!this.ignoreFocusLost && !this.environmentService.args['sticky-quickopen'] && this.configurationService.getValue(CLOSE_ON_FOCUS_LOST_CONFIG)) {
+				this.close(undefined, true);
+>>>>>>> .their
 			}
 		}));
 		this._register(dom.addDisposableListener(container, dom.EventType.KEY_DOWN, (e: KeyboardEvent) => {
@@ -1009,6 +1032,7 @@
 		this.updateStyles();
 	}
 
+<<<<<<< .our
 	pick<T extends IQuickPickItem, O extends IPickOptions<T>>(picks: TPromise<QuickPickInput<T>[]> | QuickPickInput<T>[], options: O = <O>{}, token: CancellationToken = CancellationToken.None): TPromise<O extends { canPickMany: true } ? T[] : T> {
 		return new TPromise<O extends { canPickMany: true } ? T[] : T>((doResolve, reject) => {
 			let resolve = (result: any) => {
@@ -1161,6 +1185,72 @@
 			input.show();
 		});
 	}
+=======
+	private close(ok?: true | Thenable<never>, focusLost?: boolean) {
+		if (this.container.style.display === 'none') {
+			return TPromise.as(undefined);
+		}
+		if (this.controller) {
+			const resolved = this.controller.resolve(ok);
+			if (resolved) {
+				const result = resolved
+					.then(() => {
+						this.container.style.display = 'none';
+						if (!focusLost) {
+							this.restoreFocus();
+						}
+					});
+				result.then(null, onUnexpectedError);
+				return result;
+			}
+		}
+		this.container.style.display = 'none';
+		if (!focusLost) {
+			this.restoreFocus();
+		}
+		return TPromise.as(undefined);
+	}
+
+	private restoreFocus(): void {
+		const editor = this.editorService.getActiveEditor();
+		if (editor) {
+			editor.focus();
+		}
+	}
+
+	pick<T extends IPickOpenEntry>(picks: TPromise<T[]>, options: IPickOptions = {}, token?: CancellationToken): TPromise<T[]> {
+		return this.show({
+			type: 'selectMany',
+			picks,
+			placeHolder: options.placeHolder,
+			matchOnDescription: options.matchOnDescription,
+			matchOnDetail: options.matchOnDetail,
+			ignoreFocusLost: options.ignoreFocusLost
+		}, token);
+	}
+
+	input(options: IInputOptions = {}, token?: CancellationToken): TPromise<string> {
+		return this.show({
+			type: 'textInput',
+			value: options.value,
+			valueSelection: options.valueSelection,
+			prompt: options.prompt,
+			placeHolder: options.placeHolder,
+			password: options.password,
+			ignoreFocusLost: options.ignoreFocusLost,
+			validateInput: options.validateInput,
+		}, token);
+	}
+
+	show<T extends IPickOpenEntry>(parameters: SelectManyParameters<T>, token?: CancellationToken): TPromise<T[]>;
+	show(parameters: TextInputParameters, token?: CancellationToken): TPromise<string>;
+	show<R>(parameters: InputParameters, token: CancellationToken = CancellationToken.None): TPromise<R> {
+		this.create();
+		this.quickOpenService.close();
+		if (this.controller) {
+			this.controller.resolve();
+		}
+>>>>>>> .their
 
 	backButton = backButton;
 
changed in both
  base   100644 ea7188eab8e592853b12b1c9095eeeeb3a0ec374 src/vs/workbench/parts/extensions/electron-browser/extensionEditor.ts
  our    100644 69bc170328023443de8604d25d47c4839fd2f82f src/vs/workbench/parts/extensions/electron-browser/extensionEditor.ts
  their  100644 bdcf15d35d8ede121543372090f5357996b1fccf src/vs/workbench/parts/extensions/electron-browser/extensionEditor.ts
@@ -277,7 +277,11 @@
 		this.content = append(body, $('.content'));
 	}
 
+<<<<<<< .our
 	setInput(input: ExtensionsInput, options: EditorOptions, token: CancellationToken): Thenable<void> {
+=======
+	setInput(input: ExtensionsInput, options: EditorOptions): TPromise<void> {
+>>>>>>> .their
 		this.editorLoadComplete = false;
 		const extension = input.extension;
 
@@ -418,6 +422,7 @@
 		this.navbar.clear();
 		this.navbar.onChange(this.onNavbarChange.bind(this, extension), this, this.transientDisposables);
 
+<<<<<<< .our
 		if (extension.hasReadme()) {
 			this.navbar.push(NavbarSection.Readme, localize('details', "Details"), localize('detailstooltip', "Extension details, rendered from the extension's 'README.md' file"));
 		}
@@ -438,6 +443,11 @@
 				}
 				this.editorLoadComplete = true;
 			});
+=======
+		this.editorLoadComplete = true;
+		return super.setInput(input, options);
+	}
+>>>>>>> .their
 
 		return super.setInput(input, options, token);
 	}
@@ -461,6 +471,22 @@
 			this.telemetryService.publicLog('extensionEditor:navbarChange', assign(extension.telemetryData, { navItem: id }));
 		}
 
+<<<<<<< .our
+=======
+	private onNavbarChange(extension: IExtension, id: string): void {
+		if (this.editorLoadComplete) {
+			/* __GDPR__
+				"extensionEditor:navbarChange" : {
+					"navItem": { "classification": "SystemMetaData", "purpose": "FeatureInsight" },
+					"${include}": [
+						"${GalleryExtensionTelemetryData}"
+					]
+				}
+			*/
+			this.telemetryService.publicLog('extensionEditor:navbarChange', assign(extension.telemetryData, { navItem: id }));
+		}
+
+>>>>>>> .their
 		this.contentDisposables = dispose(this.contentDisposables);
 		this.content.innerHTML = '';
 		this.activeWebview = null;
