changed in both
  base   100644 7412c251294cd65bb7a2f81ce18c00f9a5197696 .gitignore
  our    100644 6a9804cd2373e8051bf7b31a2c4dacc67eb9fb69 .gitignore
  their  100644 02cec46f3774a7de8b7d253a40a1e3db7acde174 .gitignore
@@ -1,3 +1,4 @@
+<<<<<<< .our
 .DS_Store
 npm-debug.log
 Thumbs.db
@@ -19,3 +20,22 @@
 test_data/
 test-results/
 yarn-error.log
+=======
+.DS_Store
+npm-debug.log
+Thumbs.db
+node_modules/
+.build/
+out/
+out-build/
+out-editor/
+out-editor-esm/
+out-editor-min/
+out-monaco-editor-core/
+out-vscode/
+out-vscode-min/
+build/node_modules
+coverage/
+test_data/
+yarn-error.log
+>>>>>>> .their
changed in both
  base   100644 4fde19e669a8bd7ee823bdaabe45f388fe359a55 build/gulpfile.editor.js
  our    100644 52d1f0fcf323631277651ff28381ae49c0fa6558 build/gulpfile.editor.js
  their  100644 a2366ec17201cc7c26e2d9bd32b922c8f77dbb59 build/gulpfile.editor.js
@@ -12,9 +12,12 @@
 const i18n = require('./lib/i18n');
 const standalone = require('./lib/standalone');
 const cp = require('child_process');
+<<<<<<< .our
 const compilation = require('./lib/compilation');
 const monacoapi = require('./monaco/api');
 const fs = require('fs');
+=======
+>>>>>>> .their
 
 var root = path.dirname(__dirname);
 var sha1 = util.getVersion(root);
@@ -99,6 +102,8 @@
 gulp.task('clean-editor-build', util.rimraf('out-editor-build'));
 gulp.task('compile-editor-build', ['clean-editor-build', 'extract-editor-src'], compilation.compileTask('out-editor-src', 'out-editor-build', true));
 
+const languages = i18n.defaultLanguages.concat([]);  // i18n.defaultLanguages.concat(process.env.VSCODE_QUALITY !== 'stable' ? i18n.extraLanguages : []);
+
 gulp.task('clean-optimized-editor', util.rimraf('out-editor'));
 gulp.task('optimize-editor', ['clean-optimized-editor', 'compile-editor-build'], common.optimizeTask({
 	src: 'out-editor-build',
@@ -122,6 +127,7 @@
 gulp.task('minify-editor', ['clean-minified-editor', 'optimize-editor'], common.minifyTask('out-editor'));
 
 gulp.task('clean-editor-esm', util.rimraf('out-editor-esm'));
+<<<<<<< .our
 gulp.task('extract-editor-esm', ['clean-editor-esm', 'clean-editor-distro', 'extract-editor-src'], function () {
 	standalone.createESMSourcesAndResources2({
 		srcFolder: './out-editor-src',
@@ -145,12 +151,30 @@
 	});
 });
 gulp.task('compile-editor-esm', ['extract-editor-esm', 'clean-editor-distro'], function () {
+=======
+gulp.task('extract-editor-esm', ['clean-editor-esm', 'clean-editor-distro'], function() {
+	standalone.createESMSourcesAndResources({
+		entryPoints: [
+			'vs/editor/editor.main',
+			'vs/editor/editor.worker'
+		],
+		outFolder: './out-editor-esm/src',
+		outResourcesFolder: './out-monaco-editor-core/esm',
+		redirects: {
+			'vs/base/browser/ui/octiconLabel/octiconLabel': 'vs/base/browser/ui/octiconLabel/octiconLabel.mock',
+			'vs/nls': 'vs/nls.mock',
+		}
+	});
+});
+gulp.task('compile-editor-esm', ['extract-editor-esm', 'clean-editor-distro'], function() {
+>>>>>>> .their
 	const result = cp.spawnSync(`node`, [`../node_modules/.bin/tsc`], {
 		cwd: path.join(__dirname, '../out-editor-esm')
 	});
 	console.log(result.stdout.toString());
 });
 
+<<<<<<< .our
 function toExternalDTS(contents) {
 	let lines = contents.split('\n');
 	let killNextCloseCurlyBrace = false;
@@ -186,6 +210,8 @@
 	return lines.join('\n');
 }
 
+=======
+>>>>>>> .their
 gulp.task('clean-editor-distro', util.rimraf('out-monaco-editor-core'));
 gulp.task('editor-distro', ['clean-editor-distro', 'compile-editor-esm', 'minify-editor', 'optimize-editor'], function () {
 	return es.merge(
added in both
  our    100644 3e2bacc25d536d5cf841f4c455c1fdad871ec336 build/lib/standalone.js
  their  100644 12511b01d36b4d5a48aa56b9b8dbff41caa111b3 build/lib/standalone.js
@@ -7,6 +7,7 @@
 var ts = require("typescript");
 var fs = require("fs");
 var path = require("path");
+<<<<<<< .our
 var tss = require("./treeshaking");
 var REPO_ROOT = path.join(__dirname, '../../');
 var SRC_DIR = path.join(REPO_ROOT, 'src');
@@ -238,6 +239,173 @@
 }
 exports.createESMSourcesAndResources2 = createESMSourcesAndResources2;
 function transportCSS(module, enqueue, write) {
+=======
+var REPO_ROOT = path.join(__dirname, '../../');
+var SRC_DIR = path.join(REPO_ROOT, 'src');
+var OUT_EDITOR = path.join(REPO_ROOT, 'out-editor');
+function createESMSourcesAndResources(options) {
+    var OUT_FOLDER = path.join(REPO_ROOT, options.outFolder);
+    var OUT_RESOURCES_FOLDER = path.join(REPO_ROOT, options.outResourcesFolder);
+    var in_queue = Object.create(null);
+    var queue = [];
+    var enqueue = function (module) {
+        if (in_queue[module]) {
+            return;
+        }
+        in_queue[module] = true;
+        queue.push(module);
+    };
+    var seenDir = {};
+    var createDirectoryRecursive = function (dir) {
+        if (seenDir[dir]) {
+            return;
+        }
+        var lastSlash = dir.lastIndexOf('/');
+        if (lastSlash === -1) {
+            lastSlash = dir.lastIndexOf('\\');
+        }
+        if (lastSlash !== -1) {
+            createDirectoryRecursive(dir.substring(0, lastSlash));
+        }
+        seenDir[dir] = true;
+        try {
+            fs.mkdirSync(dir);
+        }
+        catch (err) { }
+    };
+    seenDir[REPO_ROOT] = true;
+    var toggleComments = function (fileContents) {
+        var lines = fileContents.split(/\r\n|\r|\n/);
+        var mode = 0;
+        for (var i = 0; i < lines.length; i++) {
+            var line = lines[i];
+            if (mode === 0) {
+                if (/\/\/ ESM-comment-begin/.test(line)) {
+                    mode = 1;
+                    continue;
+                }
+                if (/\/\/ ESM-uncomment-begin/.test(line)) {
+                    mode = 2;
+                    continue;
+                }
+                continue;
+            }
+            if (mode === 1) {
+                if (/\/\/ ESM-comment-end/.test(line)) {
+                    mode = 0;
+                    continue;
+                }
+                lines[i] = '// ' + line;
+                continue;
+            }
+            if (mode === 2) {
+                if (/\/\/ ESM-uncomment-end/.test(line)) {
+                    mode = 0;
+                    continue;
+                }
+                lines[i] = line.replace(/^(\s*)\/\/ ?/, function (_, indent) {
+                    return indent;
+                });
+            }
+        }
+        return lines.join('\n');
+    };
+    var write = function (filePath, contents) {
+        var absoluteFilePath;
+        if (/\.ts$/.test(filePath)) {
+            absoluteFilePath = path.join(OUT_FOLDER, filePath);
+        }
+        else {
+            absoluteFilePath = path.join(OUT_RESOURCES_FOLDER, filePath);
+        }
+        createDirectoryRecursive(path.dirname(absoluteFilePath));
+        if (/(\.ts$)|(\.js$)/.test(filePath)) {
+            contents = toggleComments(contents.toString());
+        }
+        fs.writeFileSync(absoluteFilePath, contents);
+    };
+    options.entryPoints.forEach(function (entryPoint) { return enqueue(entryPoint); });
+    while (queue.length > 0) {
+        var module_1 = queue.shift();
+        if (transportCSS(options, module_1, enqueue, write)) {
+            continue;
+        }
+        if (transportResource(options, module_1, enqueue, write)) {
+            continue;
+        }
+        if (transportDTS(options, module_1, enqueue, write)) {
+            continue;
+        }
+        var filename = void 0;
+        if (options.redirects[module_1]) {
+            filename = path.join(SRC_DIR, options.redirects[module_1] + '.ts');
+        }
+        else {
+            filename = path.join(SRC_DIR, module_1 + '.ts');
+        }
+        var fileContents = fs.readFileSync(filename).toString();
+        var info = ts.preProcessFile(fileContents);
+        for (var i = info.importedFiles.length - 1; i >= 0; i--) {
+            var importedFilename = info.importedFiles[i].fileName;
+            var pos = info.importedFiles[i].pos;
+            var end = info.importedFiles[i].end;
+            var importedFilepath = void 0;
+            if (/^vs\/css!/.test(importedFilename)) {
+                importedFilepath = importedFilename.substr('vs/css!'.length) + '.css';
+            }
+            else {
+                importedFilepath = importedFilename;
+            }
+            if (/(^\.\/)|(^\.\.\/)/.test(importedFilepath)) {
+                importedFilepath = path.join(path.dirname(module_1), importedFilepath);
+            }
+            enqueue(importedFilepath);
+            var relativePath = void 0;
+            if (importedFilepath === path.dirname(module_1)) {
+                relativePath = '../' + path.basename(path.dirname(module_1));
+            }
+            else if (importedFilepath === path.dirname(path.dirname(module_1))) {
+                relativePath = '../../' + path.basename(path.dirname(path.dirname(module_1)));
+            }
+            else {
+                relativePath = path.relative(path.dirname(module_1), importedFilepath);
+            }
+            if (!/(^\.\/)|(^\.\.\/)/.test(relativePath)) {
+                relativePath = './' + relativePath;
+            }
+            fileContents = (fileContents.substring(0, pos + 1)
+                + relativePath
+                + fileContents.substring(end + 1));
+        }
+        fileContents = fileContents.replace(/import ([a-zA-z0-9]+) = require\(('[^']+')\);/g, function (_, m1, m2) {
+            return "import * as " + m1 + " from " + m2 + ";";
+        });
+        fileContents = fileContents.replace(/Thenable/g, 'PromiseLike');
+        write(module_1 + '.ts', fileContents);
+    }
+    var esm_opts = {
+        "compilerOptions": {
+            "outDir": path.relative(path.dirname(OUT_FOLDER), OUT_RESOURCES_FOLDER),
+            "rootDir": "src",
+            "module": "es6",
+            "target": "es5",
+            "experimentalDecorators": true,
+            "lib": [
+                "dom",
+                "es5",
+                "es2015.collection",
+                "es2015.promise"
+            ],
+            "types": []
+        }
+    };
+    fs.writeFileSync(path.join(path.dirname(OUT_FOLDER), 'tsconfig.json'), JSON.stringify(esm_opts, null, '\t'));
+    var monacodts = fs.readFileSync(path.join(SRC_DIR, 'vs/monaco.d.ts')).toString();
+    fs.writeFileSync(path.join(OUT_FOLDER, 'vs/monaco.d.ts'), monacodts);
+}
+exports.createESMSourcesAndResources = createESMSourcesAndResources;
+function transportCSS(options, module, enqueue, write) {
+>>>>>>> .their
     if (!/\.css/.test(module)) {
         return false;
     }
@@ -245,10 +413,17 @@
     var fileContents = fs.readFileSync(filename).toString();
     var inlineResources = 'base64'; // see https://github.com/Microsoft/monaco-editor/issues/148
     var inlineResourcesLimit = 300000; //3000; // see https://github.com/Microsoft/monaco-editor/issues/336
+<<<<<<< .our
     var newContents = _rewriteOrInlineUrls(fileContents, inlineResources === 'base64', inlineResourcesLimit);
     write(module, newContents);
     return true;
     function _rewriteOrInlineUrls(contents, forceBase64, inlineByteLimit) {
+=======
+    var newContents = _rewriteOrInlineUrls(filename, fileContents, inlineResources === 'base64', inlineResourcesLimit);
+    write(module, newContents);
+    return true;
+    function _rewriteOrInlineUrls(originalFileFSPath, contents, forceBase64, inlineByteLimit) {
+>>>>>>> .their
         return _replaceURL(contents, function (url) {
             var imagePath = path.join(path.dirname(module), url);
             var fileContents = fs.readFileSync(path.join(SRC_DIR, imagePath));
@@ -305,3 +480,30 @@
         return haystack.length >= needle.length && haystack.substr(0, needle.length) === needle;
     }
 }
+<<<<<<< .our
+=======
+function transportResource(options, module, enqueue, write) {
+    if (!/\.svg/.test(module)) {
+        return false;
+    }
+    write(module, fs.readFileSync(path.join(SRC_DIR, module)));
+    return true;
+}
+function transportDTS(options, module, enqueue, write) {
+    if (options.redirects[module] && fs.existsSync(path.join(SRC_DIR, options.redirects[module] + '.ts'))) {
+        return false;
+    }
+    if (!fs.existsSync(path.join(SRC_DIR, module + '.d.ts'))) {
+        return false;
+    }
+    write(module + '.d.ts', fs.readFileSync(path.join(SRC_DIR, module + '.d.ts')));
+    var filename;
+    if (options.redirects[module]) {
+        write(module + '.js', fs.readFileSync(path.join(SRC_DIR, options.redirects[module] + '.js')));
+    }
+    else {
+        write(module + '.js', fs.readFileSync(path.join(SRC_DIR, module + '.js')));
+    }
+    return true;
+}
+>>>>>>> .their
added in both
  our    100644 621b4aea6d488b834c7bbf8a2a0fbee100ad979e build/lib/standalone.ts
  their  100644 a402cf684056477a5fb344fcc16d5d5bbcc39a99 build/lib/standalone.ts
@@ -6,6 +6,7 @@
 import * as ts from 'typescript';
 import * as fs from 'fs';
 import * as path from 'path';
+<<<<<<< .our
 import * as tss from './treeshaking';
 
 const REPO_ROOT = path.join(__dirname, '../../');
@@ -273,6 +274,201 @@
 }
 
 function transportCSS(module: string, enqueue: (module: string) => void, write: (path: string, contents: string | Buffer) => void): boolean {
+=======
+
+const REPO_ROOT = path.join(__dirname, '../../');
+const SRC_DIR = path.join(REPO_ROOT, 'src');
+const OUT_EDITOR = path.join(REPO_ROOT, 'out-editor');
+
+export interface IOptions {
+	entryPoints: string[];
+	outFolder: string;
+	outResourcesFolder: string;
+	redirects: { [module: string]: string; };
+}
+
+export function createESMSourcesAndResources(options: IOptions): void {
+	const OUT_FOLDER = path.join(REPO_ROOT, options.outFolder);
+	const OUT_RESOURCES_FOLDER = path.join(REPO_ROOT, options.outResourcesFolder);
+
+	let in_queue: { [module: string]: boolean; } = Object.create(null);
+	let queue: string[] = [];
+
+	const enqueue = (module: string) => {
+		if (in_queue[module]) {
+			return;
+		}
+		in_queue[module] = true;
+		queue.push(module);
+	};
+
+	const seenDir: { [key: string]: boolean; } = {};
+	const createDirectoryRecursive = (dir: string) => {
+		if (seenDir[dir]) {
+			return;
+		}
+
+		let lastSlash = dir.lastIndexOf('/');
+		if (lastSlash === -1) {
+			lastSlash = dir.lastIndexOf('\\');
+		}
+		if (lastSlash !== -1) {
+			createDirectoryRecursive(dir.substring(0, lastSlash));
+		}
+		seenDir[dir] = true;
+		try { fs.mkdirSync(dir); } catch (err) { }
+	};
+
+	seenDir[REPO_ROOT] = true;
+
+	const toggleComments = (fileContents: string) => {
+		let lines = fileContents.split(/\r\n|\r|\n/);
+		let mode = 0;
+		for (let i = 0; i < lines.length; i++) {
+			const line = lines[i];
+
+			if (mode === 0) {
+				if (/\/\/ ESM-comment-begin/.test(line)) {
+					mode = 1;
+					continue;
+				}
+				if (/\/\/ ESM-uncomment-begin/.test(line)) {
+					mode = 2;
+					continue;
+				}
+				continue;
+			}
+
+			if (mode === 1) {
+				if (/\/\/ ESM-comment-end/.test(line)) {
+					mode = 0;
+					continue;
+				}
+				lines[i] = '// ' + line;
+				continue;
+			}
+
+			if (mode === 2) {
+				if (/\/\/ ESM-uncomment-end/.test(line)) {
+					mode = 0;
+					continue;
+				}
+				lines[i] = line.replace(/^(\s*)\/\/ ?/, function (_, indent) {
+					return indent;
+				});
+			}
+		}
+
+		return lines.join('\n');
+	};
+
+	const write = (filePath: string, contents: string | Buffer) => {
+		let absoluteFilePath: string;
+		if (/\.ts$/.test(filePath)) {
+			absoluteFilePath = path.join(OUT_FOLDER, filePath);
+		} else {
+			absoluteFilePath = path.join(OUT_RESOURCES_FOLDER, filePath);
+		}
+		createDirectoryRecursive(path.dirname(absoluteFilePath));
+		if (/(\.ts$)|(\.js$)/.test(filePath)) {
+			contents = toggleComments(contents.toString());
+		}
+		fs.writeFileSync(absoluteFilePath, contents);
+	};
+
+	options.entryPoints.forEach((entryPoint) => enqueue(entryPoint));
+
+	while (queue.length > 0) {
+		const module = queue.shift();
+		if (transportCSS(options, module, enqueue, write)) {
+			continue;
+		}
+		if (transportResource(options, module, enqueue, write)) {
+			continue;
+		}
+		if (transportDTS(options, module, enqueue, write)) {
+			continue;
+		}
+
+		let filename: string;
+		if (options.redirects[module]) {
+			filename = path.join(SRC_DIR, options.redirects[module] + '.ts');
+		} else {
+			filename = path.join(SRC_DIR, module + '.ts');
+		}
+		let fileContents = fs.readFileSync(filename).toString();
+
+		const info = ts.preProcessFile(fileContents);
+
+		for (let i = info.importedFiles.length - 1; i >= 0; i--) {
+			const importedFilename = info.importedFiles[i].fileName;
+			const pos = info.importedFiles[i].pos;
+			const end = info.importedFiles[i].end;
+
+			let importedFilepath: string;
+			if (/^vs\/css!/.test(importedFilename)) {
+				importedFilepath = importedFilename.substr('vs/css!'.length) + '.css';
+			} else {
+				importedFilepath = importedFilename;
+			}
+			if (/(^\.\/)|(^\.\.\/)/.test(importedFilepath)) {
+				importedFilepath = path.join(path.dirname(module), importedFilepath);
+			}
+
+			enqueue(importedFilepath);
+
+			let relativePath: string;
+			if (importedFilepath === path.dirname(module)) {
+				relativePath = '../' + path.basename(path.dirname(module));
+			} else if (importedFilepath === path.dirname(path.dirname(module))) {
+				relativePath = '../../' + path.basename(path.dirname(path.dirname(module)));
+			} else {
+				relativePath = path.relative(path.dirname(module), importedFilepath);
+			}
+			if (!/(^\.\/)|(^\.\.\/)/.test(relativePath)) {
+				relativePath = './' + relativePath;
+			}
+			fileContents = (
+				fileContents.substring(0, pos + 1)
+				+ relativePath
+				+ fileContents.substring(end + 1)
+			);
+		}
+
+		fileContents = fileContents.replace(/import ([a-zA-z0-9]+) = require\(('[^']+')\);/g, function (_, m1, m2) {
+			return `import * as ${m1} from ${m2};`;
+		});
+		fileContents = fileContents.replace(/Thenable/g, 'PromiseLike');
+
+		write(module + '.ts', fileContents);
+	}
+
+	const esm_opts = {
+		"compilerOptions": {
+			"outDir": path.relative(path.dirname(OUT_FOLDER), OUT_RESOURCES_FOLDER),
+			"rootDir": "src",
+			"module": "es6",
+			"target": "es5",
+			"experimentalDecorators": true,
+			"lib": [
+				"dom",
+				"es5",
+				"es2015.collection",
+				"es2015.promise"
+			],
+			"types": [
+			]
+		}
+	};
+	fs.writeFileSync(path.join(path.dirname(OUT_FOLDER), 'tsconfig.json'), JSON.stringify(esm_opts, null, '\t'));
+
+	const monacodts = fs.readFileSync(path.join(SRC_DIR, 'vs/monaco.d.ts')).toString();
+	fs.writeFileSync(path.join(OUT_FOLDER, 'vs/monaco.d.ts'), monacodts);
+
+}
+
+function transportCSS(options: IOptions, module: string, enqueue: (module: string) => void, write: (path: string, contents: string | Buffer) => void): boolean {
+>>>>>>> .their
 
 	if (!/\.css/.test(module)) {
 		return false;
@@ -283,11 +479,19 @@
 	const inlineResources = 'base64'; // see https://github.com/Microsoft/monaco-editor/issues/148
 	const inlineResourcesLimit = 300000;//3000; // see https://github.com/Microsoft/monaco-editor/issues/336
 
+<<<<<<< .our
 	const newContents = _rewriteOrInlineUrls(fileContents, inlineResources === 'base64', inlineResourcesLimit);
 	write(module, newContents);
 	return true;
 
 	function _rewriteOrInlineUrls(contents: string, forceBase64: boolean, inlineByteLimit: number): string {
+=======
+	const newContents = _rewriteOrInlineUrls(filename, fileContents, inlineResources === 'base64', inlineResourcesLimit);
+	write(module, newContents);
+	return true;
+
+	function _rewriteOrInlineUrls(originalFileFSPath: string, contents: string, forceBase64: boolean, inlineByteLimit: number): string {
+>>>>>>> .their
 		return _replaceURL(contents, (url) => {
 			let imagePath = path.join(path.dirname(module), url);
 			let fileContents = fs.readFileSync(path.join(SRC_DIR, imagePath));
@@ -347,3 +551,36 @@
 		return haystack.length >= needle.length && haystack.substr(0, needle.length) === needle;
 	}
 }
+<<<<<<< .our
+=======
+
+function transportResource(options: IOptions, module: string, enqueue: (module: string) => void, write: (path: string, contents: string | Buffer) => void): boolean {
+
+	if (!/\.svg/.test(module)) {
+		return false;
+	}
+
+	write(module, fs.readFileSync(path.join(SRC_DIR, module)));
+	return true;
+}
+
+function transportDTS(options: IOptions, module: string, enqueue: (module: string) => void, write: (path: string, contents: string | Buffer) => void): boolean {
+
+	if (options.redirects[module] && fs.existsSync(path.join(SRC_DIR, options.redirects[module] + '.ts'))) {
+		return false;
+	}
+
+	if (!fs.existsSync(path.join(SRC_DIR, module + '.d.ts'))) {
+		return false;
+	}
+
+	write(module + '.d.ts', fs.readFileSync(path.join(SRC_DIR, module + '.d.ts')));
+	let filename: string;
+	if (options.redirects[module]) {
+		write(module + '.js', fs.readFileSync(path.join(SRC_DIR, options.redirects[module] + '.js')));
+	} else {
+		write(module + '.js', fs.readFileSync(path.join(SRC_DIR, module + '.js')));
+	}
+	return true;
+}
+>>>>>>> .their
changed in both
  base   100644 c3c04a5aa56f8d6f827b387f7ba17b800772e2ad build/monaco/monaco.d.ts.recipe
  our    100644 bebfe72348463fbdce9848d9655a5909083f9f7d build/monaco/monaco.d.ts.recipe
  their  100644 84d517fc8bb6214add478b5a2333f22347f561b0 build/monaco/monaco.d.ts.recipe
changed in both
  base   100644 40cd4f1e2724d3e8cd5b884d4cd8e8af06a2fde4 build/monaco/package.json
  our    100644 efd919085b2ffc82da8d810c609a9ed217bffb35 build/monaco/package.json
  their  100644 958b4ee71c30f185a67b324d57f83a50c374a251 build/monaco/package.json
@@ -1,11 +1,18 @@
 {
   "name": "monaco-editor-core",
   "private": true,
+<<<<<<< .our
   "version": "0.14.3",
   "description": "A browser based code editor",
   "author": "Microsoft Corporation",
   "license": "MIT",
   "typings": "./esm/vs/editor/editor.api.d.ts",
+=======
+  "version": "0.11.7",
+  "description": "A browser based code editor",
+  "author": "Microsoft Corporation",
+  "license": "MIT",
+>>>>>>> .their
   "module": "./esm/vs/editor/editor.main.js",
   "repository": {
     "type": "git",
changed in both
  base   100644 372ec24968768ca6a040f44a9e2e25ff01d213ff extensions/html/language-configuration.json
  our    100644 191f54303f197c9c018fd5750183d76233682bbc extensions/html/language-configuration.json
  their  100644 79ce9f9ce41a4769cfe2e19dda4685d410621c0e extensions/html/language-configuration.json
changed in both
  base   100644 3b8d0cb9e28a4eb4ebfc7aa2e6237f34134162ca extensions/html/package.json
  our    100644 5bcc9be5877c773efa5d16e5dc79ee66b4fba518 extensions/html/package.json
  their  100644 e0f3e9dd3b699b2131c69f50a16e28f8f012ae48 extensions/html/package.json
removed in local
  base   100644 25c6b771052d8ef100cb8edd5181982163f8fb7d extensions/markdown/src/features/previewContentProvider.ts
  their  100644 f0dd43ff28eff8733c5718f2713ef3dcf5e0459f extensions/markdown/src/features/previewContentProvider.ts
changed in both
  base   100644 ad57992cc8800b5cee3a3c4c2244972a6ce20567 extensions/npm/src/main.ts
  our    100644 02e22490fd765e056a1cc1278aaa50055590dce6 extensions/npm/src/main.ts
  their  100644 00de7090ed1c7b1a23a4491c9d8baba01a51db1e extensions/npm/src/main.ts
@@ -56,10 +56,35 @@
 		watcher.onDidCreate((_e) => invalidateScriptCaches());
 		context.subscriptions.push(watcher);
 
+<<<<<<< .our
 		let provider: vscode.TaskProvider = new NpmTaskProvider(context);
 		let disposable = vscode.workspace.registerTaskProvider('npm', provider);
 		context.subscriptions.push(disposable);
 		return disposable;
+=======
+async function readFile(file: string): Promise<string> {
+	return new Promise<string>((resolve, reject) => {
+		fs.readFile(file, (err, data) => {
+			if (err) {
+				reject(err);
+			}
+			resolve(data.toString());
+		});
+	});
+}
+
+interface NpmTaskDefinition extends vscode.TaskDefinition {
+	script: string;
+	path?: string;
+}
+
+const buildNames: string[] = ['build', 'compile', 'watch'];
+function isBuildTask(name: string): boolean {
+	for (let buildName of buildNames) {
+		if (name.indexOf(buildName) !== -1) {
+			return true;
+		}
+>>>>>>> .their
 	}
 	return undefined;
 }
@@ -93,5 +118,42 @@
 	httpRequest.configure(httpSettings.get<string>('proxy', ''), httpSettings.get<boolean>('proxyStrictSSL', true));
 }
 
+<<<<<<< .our
 export function deactivate(): void {
+=======
+function createTask(script: string, cmd: string, folder: vscode.WorkspaceFolder, packageJsonUri: vscode.Uri, matcher?: any): vscode.Task {
+
+	function getTaskName(script: string, file: string) {
+		if (file.length) {
+			return `${script} - ${file.substring(0, file.length - 1)}`;
+		}
+		return script;
+	}
+
+	function getCommandLine(folder: vscode.WorkspaceFolder, cmd: string): string {
+		let packageManager = vscode.workspace.getConfiguration('npm', folder.uri).get<string>('packageManager', 'npm');
+		if (vscode.workspace.getConfiguration('npm', folder.uri).get<boolean>('runSilent')) {
+			return `${packageManager} --silent ${cmd}`;
+		}
+		return `${packageManager} ${cmd}`;
+	}
+
+	function getRelativePath(folder: vscode.WorkspaceFolder, packageJsonUri: vscode.Uri): string {
+		let rootUri = folder.uri;
+		let absolutePath = packageJsonUri.path.substring(0, packageJsonUri.path.length - 'package.json'.length);
+		return absolutePath.substring(rootUri.path.length + 1);
+	}
+
+	let kind: NpmTaskDefinition = {
+		type: 'npm',
+		script: script
+	};
+	let relativePackageJson = getRelativePath(folder, packageJsonUri);
+	if (relativePackageJson.length) {
+		kind.path = getRelativePath(folder, packageJsonUri);
+	}
+	let taskName = getTaskName(script, relativePackageJson);
+	let cwd = path.dirname(packageJsonUri.fsPath);
+	return new vscode.Task(kind, folder, taskName, 'npm', new vscode.ShellExecution(getCommandLine(folder, cmd), { cwd: cwd }), matcher);
+>>>>>>> .their
 }
changed in both
  base   100644 1d58887f40316ffdcab65672835f088a62a234c9 src/vs/base/browser/ui/list/listWidget.ts
  our    100644 efaf1d52986f5302740f76831d1a7b5015bc7068 src/vs/base/browser/ui/list/listWidget.ts
  their  100644 040362bf372cbc4b7d55220e699421e0d28fbb9a src/vs/base/browser/ui/list/listWidget.ts
changed in both
  base   100644 46bf06ccb39eb8d696add1d5d6ee141395427243 src/vs/base/browser/ui/octiconLabel/octiconLabel.mock.ts
  our    100644 7fb29670d641afcf239c0548b050fb6e7ca41b01 src/vs/base/browser/ui/octiconLabel/octiconLabel.mock.ts
  their  100644 4b628e632f6a8598ff062217a4430f8d5cf8b5bb src/vs/base/browser/ui/octiconLabel/octiconLabel.mock.ts
@@ -2,10 +2,16 @@
  *  Copyright (c) Microsoft Corporation. All rights reserved.
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
+<<<<<<< .our
 
 import { escape } from 'vs/base/common/strings';
 
 export function renderOcticons(text: string): string {
+=======
+import { escape } from 'vs/base/common/strings';
+
+export function render(text: string): string {
+>>>>>>> .their
 	return escape(text);
 }
 
changed in both
  base   100644 cbe277dfb2927f69860c571c89c12f70acfcda24 src/vs/base/common/marked/marked.js
  our    100644 92e7aaa8b53f82fdc2edda3996a1ce79f0235734 src/vs/base/common/marked/marked.js
  their  100644 11d29ced080533e22539452105ec49258a336fd1 src/vs/base/common/marked/marked.js
@@ -1,13 +1,21 @@
 /**
  * marked - a markdown parser
  * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
+<<<<<<< .our
  * https://github.com/markedjs/marked
+=======
+ * https://github.com/chjj/marked
+>>>>>>> .their
  */
 
 var __marked_exports;
 
+<<<<<<< .our
 ; (function (root) {
 'use strict';
+=======
+(function() {
+>>>>>>> .their
 
 /**
  * Block-Level Grammar
@@ -18,6 +26,7 @@
   code: /^( {4}[^\n]+\n*)+/,
   fences: noop,
   hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,
+<<<<<<< .our
   heading: /^ *(#{1,6}) *([^\n]+?) *(?:#+ *)?(?:\n+|$)/,
   nptable: noop,
   blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
@@ -81,6 +90,61 @@
 block.blockquote = edit(block.blockquote)
   .replace('paragraph', block.paragraph)
   .getRegex();
+=======
+  heading: /^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,
+  nptable: noop,
+  blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
+  list: /^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,
+  html: /^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,
+  def: /^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,
+  table: noop,
+  lheading: /^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,
+  paragraph: /^([^\n]+(?:\n?(?!hr|heading|lheading| {0,3}>|tag)[^\n]+)+)/,
+  text: /^[^\n]+/
+};
+
+block._label = /(?:\\[\[\]]|[^\[\]])+/;
+block._title = /(?:"(?:\\"|[^"]|"[^"\n]*")*"|'\n?(?:[^'\n]+\n?)*'|\([^()]*\))/;
+block.def = replace(block.def)
+  ('label', block._label)
+  ('title', block._title)
+  ();
+
+block.bullet = /(?:[*+-]|\d+\.)/;
+block.item = /^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/;
+block.item = replace(block.item, 'gm')
+  (/bull/g, block.bullet)
+  ();
+
+block.list = replace(block.list)
+  (/bull/g, block.bullet)
+  ('hr', '\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))')
+  ('def', '\\n+(?=' + block.def.source + ')')
+  ();
+
+block._tag = '(?!(?:'
+  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'
+  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'
+  + '|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b';
+
+block.html = replace(block.html)
+  ('comment', /<!--[\s\S]*?-->/)
+  ('closed', /<(tag)[\s\S]+?<\/\1>/)
+  ('closing', /<tag(?:"[^"]*"|'[^']*'|\s[^'"\/>]*)*?\/?>/)
+  (/tag/g, block._tag)
+  ();
+
+block.paragraph = replace(block.paragraph)
+  ('hr', block.hr)
+  ('heading', block.heading)
+  ('lheading', block.lheading)
+  ('tag', '<' + block._tag)
+  ();
+
+block.blockquote = replace(block.blockquote)
+  ('paragraph', block.paragraph)
+  ();
+>>>>>>> .their
 
 /**
  * Normal Block Grammar
@@ -98,17 +162,26 @@
   heading: /^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/
 });
 
+<<<<<<< .our
 block.gfm.paragraph = edit(block.paragraph)
   .replace('(?!', '(?!'
     + block.gfm.fences.source.replace('\\1', '\\2') + '|'
     + block.list.source.replace('\\1', '\\3') + '|')
   .getRegex();
+=======
+block.gfm.paragraph = replace(block.paragraph)
+  ('(?!', '(?!'
+  + block.gfm.fences.source.replace('\\1', '\\2') + '|'
+  + block.list.source.replace('\\1', '\\3') + '|')
+  ();
+>>>>>>> .their
 
 /**
  * GFM + Tables Block Grammar
  */
 
 block.tables = merge({}, block.gfm, {
+<<<<<<< .our
   nptable: /^ *([^|\n ].*\|.*)\n *([-:]+ *\|[-| :]*)(?:\n((?:.*[^>\n ].*(?:\n|$))*)\n*|$)/,
   table: /^ *\|(.+)\n *\|?( *[-:]+[-| :]*)(?:\n((?: *[^>\n ].*(?:\n|$))*)\n*|$)/
 });
@@ -129,6 +202,10 @@
       + '\\b)\\w+(?!:|[^\\w\\s@]*@)\\b')
     .getRegex(),
   def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/
+=======
+  nptable: /^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,
+  table: /^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/
+>>>>>>> .their
 });
 
 /**
@@ -141,9 +218,13 @@
   this.options = options || marked.defaults;
   this.rules = block.normal;
 
+<<<<<<< .our
   if (this.options.pedantic) {
     this.rules = block.pedantic;
   } else if (this.options.gfm) {
+=======
+  if (this.options.gfm) {
+>>>>>>> .their
     if (this.options.tables) {
       this.rules = block.tables;
     } else {
@@ -162,7 +243,11 @@
  * Static Lex Method
  */
 
+<<<<<<< .our
 Lexer.lex = function(src, options) {
+=======
+Lexer.lex = function (src, options) {
+>>>>>>> .their
   var lexer = new Lexer(options);
   return lexer.lex(src);
 };
@@ -171,7 +256,11 @@
  * Preprocessing
  */
 
+<<<<<<< .our
 Lexer.prototype.lex = function(src) {
+=======
+Lexer.prototype.lex = function (src) {
+>>>>>>> .their
   src = src
     .replace(/\r\n|\r/g, '\n')
     .replace(/\t/g, '    ')
@@ -185,6 +274,7 @@
  * Lexing
  */
 
+<<<<<<< .our
 Lexer.prototype.token = function(src, top) {
   src = src.replace(/^ +$/gm, '');
   var next,
@@ -200,6 +290,20 @@
       isordered,
       istask,
       ischecked;
+=======
+Lexer.prototype.token = function (src, top) {
+  var src = src.replace(/^ +$/gm, '')
+    , next
+    , loose
+    , cap
+    , bull
+    , b
+    , item
+    , space
+    , i
+    , tag
+    , l;
+>>>>>>> .their
 
   while (src) {
     // newline
@@ -219,7 +323,11 @@
       this.tokens.push({
         type: 'code',
         text: !this.options.pedantic
+<<<<<<< .our
           ? rtrim(cap, '\n')
+=======
+          ? cap.replace(/\n+$/, '')
+>>>>>>> .their
           : cap
       });
       continue;
@@ -249,6 +357,7 @@
 
     // table no leading pipe (gfm)
     if (top && (cap = this.rules.nptable.exec(src))) {
+<<<<<<< .our
       item = {
         type: 'table',
         header: splitCells(cap[1].replace(/^ *| *\| *$/g, '')),
@@ -279,6 +388,36 @@
 
         continue;
       }
+=======
+      src = src.substring(cap[0].length);
+
+      item = {
+        type: 'table',
+        header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
+        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
+        cells: cap[3].replace(/\n$/, '').split('\n')
+      };
+
+      for (i = 0; i < item.align.length; i++) {
+        if (/^ *-+: *$/.test(item.align[i])) {
+          item.align[i] = 'right';
+        } else if (/^ *:-+: *$/.test(item.align[i])) {
+          item.align[i] = 'center';
+        } else if (/^ *:-+ *$/.test(item.align[i])) {
+          item.align[i] = 'left';
+        } else {
+          item.align[i] = null;
+        }
+      }
+
+      for (i = 0; i < item.cells.length; i++) {
+        item.cells[i] = item.cells[i].split(/ *\| */);
+      }
+
+      this.tokens.push(item);
+
+      continue;
+>>>>>>> .their
     }
 
     // hr
@@ -316,12 +455,19 @@
     if (cap = this.rules.list.exec(src)) {
       src = src.substring(cap[0].length);
       bull = cap[2];
+<<<<<<< .our
       isordered = bull.length > 1;
 
       this.tokens.push({
         type: 'list_start',
         ordered: isordered,
         start: isordered ? +bull : ''
+=======
+
+      this.tokens.push({
+        type: 'list_start',
+        ordered: bull.length > 1
+>>>>>>> .their
       });
 
       // Get each top-level item.
@@ -367,6 +513,7 @@
           if (!loose) loose = next;
         }
 
+<<<<<<< .our
         // Check for task list items
         istask = /^\[[ xX]\] /.test(item);
         ischecked = undefined;
@@ -381,6 +528,12 @@
             : 'list_item_start',
           task: istask,
           checked: ischecked
+=======
+        this.tokens.push({
+          type: loose
+            ? 'loose_item_start'
+            : 'list_item_start'
+>>>>>>> .their
         });
 
         // Recurse.
@@ -416,7 +569,11 @@
     if (top && (cap = this.rules.def.exec(src))) {
       src = src.substring(cap[0].length);
       if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);
+<<<<<<< .our
       tag = cap[1].toLowerCase().replace(/\s+/g, ' ');
+=======
+      tag = cap[1].toLowerCase();
+>>>>>>> .their
       if (!this.tokens.links[tag]) {
         this.tokens.links[tag] = {
           href: cap[2],
@@ -428,6 +585,7 @@
 
     // table (gfm)
     if (top && (cap = this.rules.table.exec(src))) {
+<<<<<<< .our
       item = {
         type: 'table',
         header: splitCells(cap[1].replace(/^ *| *\| *$/g, '')),
@@ -460,6 +618,38 @@
 
         continue;
       }
+=======
+      src = src.substring(cap[0].length);
+
+      item = {
+        type: 'table',
+        header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
+        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
+        cells: cap[3].replace(/(?: *\| *)?\n$/, '').split('\n')
+      };
+
+      for (i = 0; i < item.align.length; i++) {
+        if (/^ *-+: *$/.test(item.align[i])) {
+          item.align[i] = 'right';
+        } else if (/^ *:-+: *$/.test(item.align[i])) {
+          item.align[i] = 'center';
+        } else if (/^ *:-+ *$/.test(item.align[i])) {
+          item.align[i] = 'left';
+        } else {
+          item.align[i] = null;
+        }
+      }
+
+      for (i = 0; i < item.cells.length; i++) {
+        item.cells[i] = item.cells[i]
+          .replace(/^ *\| *| *\| *$/g, '')
+          .split(/ *\| */);
+      }
+
+      this.tokens.push(item);
+
+      continue;
+>>>>>>> .their
     }
 
     // lheading
@@ -497,7 +687,12 @@
     }
 
     if (src) {
+<<<<<<< .our
       throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));
+=======
+      throw new
+        Error('Infinite loop on byte: ' + src.charCodeAt(0));
+>>>>>>> .their
     }
   }
 
@@ -509,6 +704,7 @@
  */
 
 var inline = {
+<<<<<<< .our
   escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
   autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
   url: noop,
@@ -524,11 +720,24 @@
   strong: /^__([^\s][\s\S]*?[^\s])__(?!_)|^\*\*([^\s][\s\S]*?[^\s])\*\*(?!\*)|^__([^\s])__(?!_)|^\*\*([^\s])\*\*(?!\*)/,
   em: /^_([^\s][\s\S]*?[^\s_])_(?!_)|^_([^\s_][\s\S]*?[^\s])_(?!_)|^\*([^\s][\s\S]*?[^\s*])\*(?!\*)|^\*([^\s*][\s\S]*?[^\s])\*(?!\*)|^_([^\s_])_(?!_)|^\*([^\s*])\*(?!\*)/,
   code: /^(`+)\s*([\s\S]*?[^`]?)\s*\1(?!`)/,
+=======
+  escape: /^\\([\\`*{}\[\]()#+\-.!_>])/,
+  autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
+  url: noop,
+  tag: /^<!--[\s\S]*?-->|^<\/?[a-zA-Z0-9\-]+(?:"[^"]*"|'[^']*'|\s[^<'">\/]*)*?\/?>/,
+  link: /^!?\[(inside)\]\(href\)/,
+  reflink: /^!?\[(inside)\]\s*\[([^\]]*)\]/,
+  nolink: /^!?\[((?:\[[^\]]*\]|\\[\[\]]|[^\[\]])*)\]/,
+  strong: /^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,
+  em: /^_([^\s_](?:[^_]|__)+?[^\s_])_\b|^\*((?:\*\*|[^*])+?)\*(?!\*)/,
+  code: /^(`+)(\s*)([\s\S]*?[^`]?)\2\1(?!`)/,
+>>>>>>> .their
   br: /^ {2,}\n(?!\s*$)/,
   del: noop,
   text: /^[\s\S]+?(?=[\\<!\[`*]|\b_| {2,}\n|$)/
 };
 
+<<<<<<< .our
 inline._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
 
 inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
@@ -558,6 +767,27 @@
 inline.reflink = edit(inline.reflink)
   .replace('label', inline._label)
   .getRegex();
+=======
+inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
+inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
+
+inline.autolink = replace(inline.autolink)
+  ('scheme', inline._scheme)
+  ('email', inline._email)
+  ()
+
+inline._inside = /(?:\[[^\]]*\]|\\[\[\]]|[^\[\]]|\](?=[^\[]*\]))*/;
+inline._href = /\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/;
+
+inline.link = replace(inline.link)
+  ('inside', inline._inside)
+  ('href', inline._href)
+  ();
+
+inline.reflink = replace(inline.reflink)
+  ('inside', inline._inside)
+  ();
+>>>>>>> .their
 
 /**
  * Normal Inline Grammar
@@ -571,6 +801,7 @@
 
 inline.pedantic = merge({}, inline.normal, {
   strong: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
+<<<<<<< .our
   em: /^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/,
   link: edit(/^!?\[(label)\]\((.*?)\)/)
     .replace('label', inline._label)
@@ -578,6 +809,9 @@
   reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/)
     .replace('label', inline._label)
     .getRegex()
+=======
+  em: /^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/
+>>>>>>> .their
 });
 
 /**
@@ -585,6 +819,7 @@
  */
 
 inline.gfm = merge({}, inline.normal, {
+<<<<<<< .our
   escape: edit(inline.escape).replace('])', '~|])').getRegex(),
   url: edit(/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/)
     .replace('email', inline._email)
@@ -595,6 +830,18 @@
     .replace(']|', '~]|')
     .replace('|', '|https?://|ftp://|www\\.|[a-zA-Z0-9.!#$%&\'*+/=?^_`{\\|}~-]+@|')
     .getRegex()
+=======
+  escape: replace(inline.escape)('])', '~|])')(),
+  url: replace(/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/)
+    ('email', inline._email)
+    (),
+  _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,
+  del: /^~~(?=\S)([\s\S]*?\S)~~/,
+  text: replace(inline.text)
+    (']|', '~]|')
+    ('|', '|https?://|ftp://|www\\.|[a-zA-Z0-9.!#$%&\'*+/=?^_`{\\|}~-]+@|')
+    ()
+>>>>>>> .their
 });
 
 /**
@@ -602,8 +849,13 @@
  */
 
 inline.breaks = merge({}, inline.gfm, {
+<<<<<<< .our
   br: edit(inline.br).replace('{2,}', '*').getRegex(),
   text: edit(inline.gfm.text).replace('{2,}', '*').getRegex()
+=======
+  br: replace(inline.br)('{2,}', '*')(),
+  text: replace(inline.gfm.text)('{2,}', '*')()
+>>>>>>> .their
 });
 
 /**
@@ -614,6 +866,7 @@
   this.options = options || marked.defaults;
   this.links = links;
   this.rules = inline.normal;
+<<<<<<< .our
   this.renderer = this.options.renderer || new Renderer();
   this.renderer.options = this.options;
 
@@ -624,11 +877,27 @@
   if (this.options.pedantic) {
     this.rules = inline.pedantic;
   } else if (this.options.gfm) {
+=======
+  this.renderer = this.options.renderer || new Renderer;
+  this.renderer.options = this.options;
+
+  if (!this.links) {
+    throw new
+      Error('Tokens array requires a `links` property.');
+  }
+
+  if (this.options.gfm) {
+>>>>>>> .their
     if (this.options.breaks) {
       this.rules = inline.breaks;
     } else {
       this.rules = inline.gfm;
     }
+<<<<<<< .our
+=======
+  } else if (this.options.pedantic) {
+    this.rules = inline.pedantic;
+>>>>>>> .their
   }
 }
 
@@ -642,7 +911,11 @@
  * Static Lexing/Compiling Method
  */
 
+<<<<<<< .our
 InlineLexer.output = function(src, links, options) {
+=======
+InlineLexer.output = function (src, links, options) {
+>>>>>>> .their
   var inline = new InlineLexer(links, options);
   return inline.output(src);
 };
@@ -651,6 +924,7 @@
  * Lexing/Compiling
  */
 
+<<<<<<< .our
 InlineLexer.prototype.output = function(src) {
   var out = '',
       link,
@@ -658,6 +932,14 @@
       href,
       title,
       cap;
+=======
+InlineLexer.prototype.output = function (src) {
+  var out = ''
+    , link
+    , text
+    , href
+    , cap;
+>>>>>>> .their
 
   while (src) {
     // escape
@@ -720,6 +1002,7 @@
     if (cap = this.rules.link.exec(src)) {
       src = src.substring(cap[0].length);
       this.inLink = true;
+<<<<<<< .our
       href = cap[2];
       if (this.options.pedantic) {
         link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);
@@ -737,6 +1020,11 @@
       out += this.outputLink(cap, {
         href: InlineLexer.escapes(href),
         title: InlineLexer.escapes(title)
+=======
+      out += this.outputLink(cap, {
+        href: cap[2],
+        title: cap[3]
+>>>>>>> .their
       });
       this.inLink = false;
       continue;
@@ -744,7 +1032,11 @@
 
     // reflink, nolink
     if ((cap = this.rules.reflink.exec(src))
+<<<<<<< .our
         || (cap = this.rules.nolink.exec(src))) {
+=======
+      || (cap = this.rules.nolink.exec(src))) {
+>>>>>>> .their
       src = src.substring(cap[0].length);
       link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
       link = this.links[link.toLowerCase()];
@@ -762,21 +1054,33 @@
     // strong
     if (cap = this.rules.strong.exec(src)) {
       src = src.substring(cap[0].length);
+<<<<<<< .our
       out += this.renderer.strong(this.output(cap[4] || cap[3] || cap[2] || cap[1]));
+=======
+      out += this.renderer.strong(this.output(cap[2] || cap[1]));
+>>>>>>> .their
       continue;
     }
 
     // em
     if (cap = this.rules.em.exec(src)) {
       src = src.substring(cap[0].length);
+<<<<<<< .our
       out += this.renderer.em(this.output(cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1]));
+=======
+      out += this.renderer.em(this.output(cap[2] || cap[1]));
+>>>>>>> .their
       continue;
     }
 
     // code
     if (cap = this.rules.code.exec(src)) {
       src = src.substring(cap[0].length);
+<<<<<<< .our
       out += this.renderer.codespan(escape(cap[2].trim(), true));
+=======
+      out += this.renderer.codespan(escape(cap[3].trim(), true));
+>>>>>>> .their
       continue;
     }
 
@@ -802,24 +1106,38 @@
     }
 
     if (src) {
+<<<<<<< .our
       throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));
+=======
+      throw new
+        Error('Infinite loop on byte: ' + src.charCodeAt(0));
+>>>>>>> .their
     }
   }
 
   return out;
 };
 
+<<<<<<< .our
 InlineLexer.escapes = function(text) {
   return text ? text.replace(InlineLexer.rules._escapes, '$1') : text;
 }
 
+=======
+>>>>>>> .their
 /**
  * Compile Link
  */
 
+<<<<<<< .our
 InlineLexer.prototype.outputLink = function(cap, link) {
   var href = link.href,
       title = link.title ? escape(link.title) : null;
+=======
+InlineLexer.prototype.outputLink = function (cap, link) {
+  var href = escape(link.href)
+    , title = link.title ? escape(link.title) : null;
+>>>>>>> .their
 
   return cap[0].charAt(0) !== '!'
     ? this.renderer.link(href, title, this.output(cap[1]))
@@ -830,7 +1148,11 @@
  * Smartypants Transformations
  */
 
+<<<<<<< .our
 InlineLexer.prototype.smartypants = function(text) {
+=======
+InlineLexer.prototype.smartypants = function (text) {
+>>>>>>> .their
   if (!this.options.smartypants) return text;
   return text
     // em-dashes
@@ -853,12 +1175,21 @@
  * Mangle Links
  */
 
+<<<<<<< .our
 InlineLexer.prototype.mangle = function(text) {
   if (!this.options.mangle) return text;
   var out = '',
       l = text.length,
       i = 0,
       ch;
+=======
+InlineLexer.prototype.mangle = function (text) {
+  if (!this.options.mangle) return text;
+  var out = ''
+    , l = text.length
+    , i = 0
+    , ch;
+>>>>>>> .their
 
   for (; i < l; i++) {
     ch = text.charCodeAt(i);
@@ -876,10 +1207,17 @@
  */
 
 function Renderer(options) {
+<<<<<<< .our
   this.options = options || marked.defaults;
 }
 
 Renderer.prototype.code = function(code, lang, escaped) {
+=======
+  this.options = options || {};
+}
+
+Renderer.prototype.code = function (code, lang, escaped) {
+>>>>>>> .their
   if (this.options.highlight) {
     var out = this.options.highlight(code, lang);
     if (out != null && out !== code) {
@@ -891,7 +1229,11 @@
   if (!lang) {
     return '<pre><code>'
       + (escaped ? code : escape(code, true))
+<<<<<<< .our
       + '</code></pre>';
+=======
+      + '\n</code></pre>';
+>>>>>>> .their
   }
 
   return '<pre><code class="'
@@ -899,6 +1241,7 @@
     + escape(lang, true)
     + '">'
     + (escaped ? code : escape(code, true))
+<<<<<<< .our
     + '</code></pre>\n';
 };
 
@@ -956,10 +1299,55 @@
 Renderer.prototype.table = function(header, body) {
   if (body) body = '<tbody>' + body + '</tbody>';
 
+=======
+    + '\n</code></pre>\n';
+};
+
+Renderer.prototype.blockquote = function (quote) {
+  return '<blockquote>\n' + quote + '</blockquote>\n';
+};
+
+Renderer.prototype.html = function (html) {
+  return html;
+};
+
+Renderer.prototype.heading = function (text, level, raw) {
+  return '<h'
+    + level
+    + ' id="'
+    + this.options.headerPrefix
+    + raw.toLowerCase().replace(/[^\w]+/g, '-')
+    + '">'
+    + text
+    + '</h'
+    + level
+    + '>\n';
+};
+
+Renderer.prototype.hr = function () {
+  return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
+};
+
+Renderer.prototype.list = function (body, ordered) {
+  var type = ordered ? 'ol' : 'ul';
+  return '<' + type + '>\n' + body + '</' + type + '>\n';
+};
+
+Renderer.prototype.listitem = function (text) {
+  return '<li>' + text + '</li>\n';
+};
+
+Renderer.prototype.paragraph = function (text) {
+  return '<p>' + text + '</p>\n';
+};
+
+Renderer.prototype.table = function (header, body) {
+>>>>>>> .their
   return '<table>\n'
     + '<thead>\n'
     + header
     + '</thead>\n'
+<<<<<<< .our
     + body
     + '</table>\n';
 };
@@ -972,11 +1360,28 @@
   var type = flags.header ? 'th' : 'td';
   var tag = flags.align
     ? '<' + type + ' align="' + flags.align + '">'
+=======
+    + '<tbody>\n'
+    + body
+    + '</tbody>\n'
+    + '</table>\n';
+};
+
+Renderer.prototype.tablerow = function (content) {
+  return '<tr>\n' + content + '</tr>\n';
+};
+
+Renderer.prototype.tablecell = function (content, flags) {
+  var type = flags.header ? 'th' : 'td';
+  var tag = flags.align
+    ? '<' + type + ' style="text-align:' + flags.align + '">'
+>>>>>>> .their
     : '<' + type + '>';
   return tag + content + '</' + type + '>\n';
 };
 
 // span level renderer
+<<<<<<< .our
 Renderer.prototype.strong = function(text) {
   return '<strong>' + text + '</strong>';
 };
@@ -998,6 +1403,29 @@
 };
 
 Renderer.prototype.link = function(href, title, text) {
+=======
+Renderer.prototype.strong = function (text) {
+  return '<strong>' + text + '</strong>';
+};
+
+Renderer.prototype.em = function (text) {
+  return '<em>' + text + '</em>';
+};
+
+Renderer.prototype.codespan = function (text) {
+  return '<code>' + text + '</code>';
+};
+
+Renderer.prototype.br = function () {
+  return this.options.xhtml ? '<br/>' : '<br>';
+};
+
+Renderer.prototype.del = function (text) {
+  return '<del>' + text + '</del>';
+};
+
+Renderer.prototype.link = function (href, title, text) {
+>>>>>>> .their
   if (this.options.sanitize) {
     try {
       var prot = decodeURIComponent(unescape(href))
@@ -1013,12 +1441,16 @@
   if (this.options.baseUrl && !originIndependentUrl.test(href)) {
     href = resolveUrl(this.options.baseUrl, href);
   }
+<<<<<<< .our
   try {
     href = encodeURI(href).replace(/%25/g, '%');
   } catch (e) {
     return text;
   }
   var out = '<a href="' + escape(href) + '"';
+=======
+  var out = '<a href="' + href + '"';
+>>>>>>> .their
   if (title) {
     out += ' title="' + title + '"';
   }
@@ -1026,7 +1458,11 @@
   return out;
 };
 
+<<<<<<< .our
 Renderer.prototype.image = function(href, title, text) {
+=======
+Renderer.prototype.image = function (href, title, text) {
+>>>>>>> .their
   if (this.options.baseUrl && !originIndependentUrl.test(href)) {
     href = resolveUrl(this.options.baseUrl, href);
   }
@@ -1038,7 +1474,11 @@
   return out;
 };
 
+<<<<<<< .our
 Renderer.prototype.text = function(text) {
+=======
+Renderer.prototype.text = function (text) {
+>>>>>>> .their
   return text;
 };
 
@@ -1047,11 +1487,16 @@
  * returns only the textual part of the token
  */
 
+<<<<<<< .our
 function TextRenderer() {}
+=======
+function TextRenderer() { }
+>>>>>>> .their
 
 // no need for block level renderers
 
 TextRenderer.prototype.strong =
+<<<<<<< .our
 TextRenderer.prototype.em =
 TextRenderer.prototype.codespan =
 TextRenderer.prototype.del =
@@ -1065,6 +1510,21 @@
 }
 
 TextRenderer.prototype.br = function() {
+=======
+  TextRenderer.prototype.em =
+  TextRenderer.prototype.codespan =
+  TextRenderer.prototype.del =
+  TextRenderer.prototype.text = function (text) {
+    return text;
+  }
+
+TextRenderer.prototype.link =
+  TextRenderer.prototype.image = function (href, title, text) {
+    return '' + text;
+  }
+
+TextRenderer.prototype.br = function () {
+>>>>>>> .their
   return '';
 }
 
@@ -1076,7 +1536,11 @@
   this.tokens = [];
   this.token = null;
   this.options = options || marked.defaults;
+<<<<<<< .our
   this.options.renderer = this.options.renderer || new Renderer();
+=======
+  this.options.renderer = this.options.renderer || new Renderer;
+>>>>>>> .their
   this.renderer = this.options.renderer;
   this.renderer.options = this.options;
 }
@@ -1085,7 +1549,11 @@
  * Static Parse Method
  */
 
+<<<<<<< .our
 Parser.parse = function(src, options) {
+=======
+Parser.parse = function (src, options) {
+>>>>>>> .their
   var parser = new Parser(options);
   return parser.parse(src);
 };
@@ -1094,6 +1562,7 @@
  * Parse Loop
  */
 
+<<<<<<< .our
 Parser.prototype.parse = function(src) {
   this.inline = new InlineLexer(src.links, this.options);
   // use an InlineLexer with a TextRenderer to extract pure text
@@ -1101,6 +1570,12 @@
     src.links,
     merge({}, this.options, {renderer: new TextRenderer()})
   );
+=======
+Parser.prototype.parse = function (src) {
+  this.inline = new InlineLexer(src.links, this.options);
+  // use an InlineLexer with a TextRenderer to extract pure text
+  this.inlineText = new InlineLexer(src.links, merge({}, this.options, { renderer: new TextRenderer }));
+>>>>>>> .their
   this.tokens = src.reverse();
 
   var out = '';
@@ -1115,7 +1590,11 @@
  * Next Token
  */
 
+<<<<<<< .our
 Parser.prototype.next = function() {
+=======
+Parser.prototype.next = function () {
+>>>>>>> .their
   return this.token = this.tokens.pop();
 };
 
@@ -1123,7 +1602,11 @@
  * Preview Next Token
  */
 
+<<<<<<< .our
 Parser.prototype.peek = function() {
+=======
+Parser.prototype.peek = function () {
+>>>>>>> .their
   return this.tokens[this.tokens.length - 1] || 0;
 };
 
@@ -1131,7 +1614,11 @@
  * Parse Text Tokens
  */
 
+<<<<<<< .our
 Parser.prototype.parseText = function() {
+=======
+Parser.prototype.parseText = function () {
+>>>>>>> .their
   var body = this.token.text;
 
   while (this.peek().type === 'text') {
@@ -1145,7 +1632,11 @@
  * Parse Current Token
  */
 
+<<<<<<< .our
 Parser.prototype.tok = function() {
+=======
+Parser.prototype.tok = function () {
+>>>>>>> .their
   switch (this.token.type) {
     case 'space': {
       return '';
@@ -1165,12 +1656,21 @@
         this.token.escaped);
     }
     case 'table': {
+<<<<<<< .our
       var header = '',
           body = '',
           i,
           row,
           cell,
           j;
+=======
+      var header = ''
+        , body = ''
+        , i
+        , row
+        , cell
+        , j;
+>>>>>>> .their
 
       // header
       cell = '';
@@ -1198,7 +1698,11 @@
       return this.renderer.table(header, body);
     }
     case 'blockquote_start': {
+<<<<<<< .our
       body = '';
+=======
+      var body = '';
+>>>>>>> .their
 
       while (this.next().type !== 'blockquote_end') {
         body += this.tok();
@@ -1207,14 +1711,20 @@
       return this.renderer.blockquote(body);
     }
     case 'list_start': {
+<<<<<<< .our
       body = '';
       var ordered = this.token.ordered,
           start = this.token.start;
+=======
+      var body = ''
+        , ordered = this.token.ordered;
+>>>>>>> .their
 
       while (this.next().type !== 'list_end') {
         body += this.tok();
       }
 
+<<<<<<< .our
       return this.renderer.list(body, ordered, start);
     }
     case 'list_item_start': {
@@ -1223,6 +1733,12 @@
       if (this.token.task) {
         body += this.renderer.checkbox(this.token.checked);
       }
+=======
+      return this.renderer.list(body, ordered);
+    }
+    case 'list_item_start': {
+      var body = '';
+>>>>>>> .their
 
       while (this.next().type !== 'list_item_end') {
         body += this.token.type === 'text'
@@ -1233,7 +1749,11 @@
       return this.renderer.listitem(body);
     }
     case 'loose_item_start': {
+<<<<<<< .our
       body = '';
+=======
+      var body = '';
+>>>>>>> .their
 
       while (this.next().type !== 'list_item_end') {
         body += this.tok();
@@ -1242,8 +1762,15 @@
       return this.renderer.listitem(body);
     }
     case 'html': {
+<<<<<<< .our
       // TODO@matt parse inline content if parameter markdown=1
       return this.renderer.html(this.token.text);
+=======
+      var html = !this.token.pre && !this.options.pedantic
+        ? this.inline.output(this.token.text)
+        : this.token.text;
+      return this.renderer.html(html);
+>>>>>>> .their
     }
     case 'paragraph': {
       return this.renderer.paragraph(this.inline.output(this.token.text));
@@ -1269,7 +1796,11 @@
 
 function unescape(html) {
   // explicitly match decimal, hex, and named HTML entities
+<<<<<<< .our
   return html.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig, function(_, n) {
+=======
+  return html.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig, function (_, n) {
+>>>>>>> .their
     n = n.toLowerCase();
     if (n === 'colon') return ':';
     if (n.charAt(0) === '#') {
@@ -1281,6 +1812,7 @@
   });
 }
 
+<<<<<<< .our
 function edit(regex, opt) {
   regex = regex.source || regex;
   opt = opt || '';
@@ -1294,6 +1826,17 @@
     getRegex: function() {
       return new RegExp(regex, opt);
     }
+=======
+function replace(regex, opt) {
+  regex = regex.source;
+  opt = opt || '';
+  return function self(name, val) {
+    if (!name) return new RegExp(regex, opt);
+    val = val.source || val;
+    val = val.replace(/(^|[^\[])\^/g, '$1');
+    regex = regex.replace(name, val);
+    return self;
+>>>>>>> .their
   };
 }
 
@@ -1305,7 +1848,11 @@
     if (/^[^:]+:\/*[^/]*$/.test(base)) {
       baseUrls[' ' + base] = base + '/';
     } else {
+<<<<<<< .our
       baseUrls[' ' + base] = rtrim(base, '/', true);
+=======
+      baseUrls[' ' + base] = base.replace(/[^/]*$/, '');
+>>>>>>> .their
     }
   }
   base = baseUrls[' ' + base];
@@ -1321,6 +1868,7 @@
 var baseUrls = {};
 var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;
 
+<<<<<<< .our
 function noop() {}
 noop.exec = noop;
 
@@ -1328,6 +1876,15 @@
   var i = 1,
       target,
       key;
+=======
+function noop() { }
+noop.exec = noop;
+
+function merge(obj) {
+  var i = 1
+    , target
+    , key;
+>>>>>>> .their
 
   for (; i < arguments.length; i++) {
     target = arguments[i];
@@ -1341,6 +1898,7 @@
   return obj;
 }
 
+<<<<<<< .our
 function splitCells(tableRow, count) {
   // ensure that every cell-delimiting pipe has a space
   // before it to distinguish it from an escaped pipe
@@ -1398,6 +1956,8 @@
 
   return str.substr(0, str.length - suffLen);
 }
+=======
+>>>>>>> .their
 
 /**
  * Marked
@@ -1405,6 +1965,7 @@
 
 function marked(src, opt, callback) {
   // throw error in case of non string input
+<<<<<<< .our
   if (typeof src === 'undefined' || src === null) {
     throw new Error('marked(): input parameter is undefined or null');
   }
@@ -1412,6 +1973,14 @@
     throw new Error('marked(): input parameter is of type '
       + Object.prototype.toString.call(src) + ', string expected');
   }
+=======
+  if (typeof src == 'undefined' || src === null)
+    throw new Error('marked(): input parameter is undefined or null');
+  if (typeof src != 'string')
+    throw new Error('marked(): input parameter is of type ' +
+      Object.prototype.toString.call(src) + ', string expected');
+
+>>>>>>> .their
 
   if (callback || typeof opt === 'function') {
     if (!callback) {
@@ -1421,10 +1990,17 @@
 
     opt = merge({}, marked.defaults, opt || {});
 
+<<<<<<< .our
     var highlight = opt.highlight,
         tokens,
         pending,
         i = 0;
+=======
+    var highlight = opt.highlight
+      , tokens
+      , pending
+      , i = 0;
+>>>>>>> .their
 
     try {
       tokens = Lexer.lex(src, opt)
@@ -1434,7 +2010,11 @@
 
     pending = tokens.length;
 
+<<<<<<< .our
     var done = function(err) {
+=======
+    var done = function (err) {
+>>>>>>> .their
       if (err) {
         opt.highlight = highlight;
         return callback(err);
@@ -1464,11 +2044,19 @@
     if (!pending) return done();
 
     for (; i < tokens.length; i++) {
+<<<<<<< .our
       (function(token) {
         if (token.type !== 'code') {
           return --pending || done();
         }
         return highlight(token.text, token.lang, function(err, code) {
+=======
+      (function (token) {
+        if (token.type !== 'code') {
+          return --pending || done();
+        }
+        return highlight(token.text, token.lang, function (err, code) {
+>>>>>>> .their
           if (err) return done(err);
           if (code == null || code === token.text) {
             return --pending || done();
@@ -1486,7 +2074,11 @@
     if (opt) opt = merge({}, marked.defaults, opt);
     return Parser.parse(Lexer.lex(src, opt), opt);
   } catch (e) {
+<<<<<<< .our
     e.message += '\nPlease report this to https://github.com/markedjs/marked.';
+=======
+    e.message += '\nPlease report this to https://github.com/chjj/marked.';
+>>>>>>> .their
     if ((opt || marked.defaults).silent) {
       return '<p>An error occurred:</p><pre>'
         + escape(e.message + '', true)
@@ -1501,6 +2093,7 @@
  */
 
 marked.options =
+<<<<<<< .our
 marked.setOptions = function(opt) {
   merge(marked.defaults, opt);
   return marked;
@@ -1529,6 +2122,31 @@
 }
 
 marked.defaults = marked.getDefaults();
+=======
+  marked.setOptions = function (opt) {
+    merge(marked.defaults, opt);
+    return marked;
+  };
+
+marked.defaults = {
+  gfm: true,
+  tables: true,
+  breaks: false,
+  pedantic: false,
+  sanitize: false,
+  sanitizer: null,
+  mangle: true,
+  smartLists: false,
+  silent: false,
+  highlight: null,
+  langPrefix: 'lang-',
+  smartypants: false,
+  headerPrefix: '',
+  renderer: new Renderer,
+  xhtml: false,
+  baseUrl: null
+};
+>>>>>>> .their
 
 /**
  * Expose
@@ -1547,15 +2165,25 @@
 marked.inlineLexer = InlineLexer.output;
 
 marked.parse = marked;
+<<<<<<< .our
+=======
+
+>>>>>>> .their
 __marked_exports = marked;
 
 }).call(this);
 
 // ESM-comment-begin
 define([], function() {
+<<<<<<< .our
 return {
   marked: __marked_exports
 };
+=======
+  return {
+    marked: __marked_exports
+  };
+>>>>>>> .their
 });
 // ESM-comment-end
 
changed in both
  base   100644 135f2ac07840f94ce6dcda1a6a8d5d624de24aa9 src/vs/base/common/platform.ts
  our    100644 277929ed5d02284c4e3e3de3c755086c00b03837 src/vs/base/common/platform.ts
  their  100644 4e98c088bc9e3c978bfdb7bf0ab74b75cfc4bf27 src/vs/base/common/platform.ts
changed in both
  base   100644 aea7370ed16e701f73c1ba05d5fb20acf90728fb src/vs/base/common/winjs.base.js
  our    100644 d8de83ddd3e544c6faec8ac12be0842e9f8984d7 src/vs/base/common/winjs.base.js
  their  100644 49debfc70456aa71addf7c834574312da89890c0 src/vs/base/common/winjs.base.js
@@ -1038,12 +1038,15 @@
             /// error function.
             /// </returns>
             /// </signature>
+<<<<<<< .our
             // BEGIN monaco change
             if (this.then !== Promise_then) {
                 this.then(onComplete, onError, onProgress);
                 return;
             }
             // END monaco change
+=======
+>>>>>>> .their
             return this._state.then(this, onComplete, onError, onProgress);
         },
 
changed in both
  base   100644 e7ea8490a75b6b5713caffdd1e1ffd239fabdd9c src/vs/base/common/worker/simpleWorker.ts
  our    100644 8b0862a816de5e23c2f0f64421099498a32c42be src/vs/base/common/worker/simpleWorker.ts
  their  100644 0099aac4956a1e9b94d598521bf4487146f363c6 src/vs/base/common/worker/simpleWorker.ts
changed in both
  base   100644 52bca4b7a05328ea0f29d67be37ba2efa3e3f72c src/vs/base/worker/defaultWorkerFactory.ts
  our    100644 4fe3caa24038f5d7d95d3358c6a54bfec1dad81e src/vs/base/worker/defaultWorkerFactory.ts
  their  100644 344588ad9efb7684b815a107a1cce04899714295 src/vs/base/worker/defaultWorkerFactory.ts
@@ -7,6 +7,7 @@
 import { globals } from 'vs/base/common/platform';
 import { logOnceWebWorkerWarning, IWorker, IWorkerCallback, IWorkerFactory } from 'vs/base/common/worker/simpleWorker';
 
+<<<<<<< .our
 function getWorker(workerId: string, label: string): Worker {
 	// Option for hosts to overwrite the worker script (used in the standalone editor)
 	if (globals.MonacoEnvironment) {
@@ -23,6 +24,19 @@
 	}
 	// ESM-comment-end
 	throw new Error(`You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker`);
+=======
+function getWorkerUrl(workerId: string, label: string): string {
+	// Option for hosts to overwrite the worker script url (used in the standalone editor)
+	if (globals.MonacoEnvironment && typeof globals.MonacoEnvironment.getWorkerUrl === 'function') {
+		return globals.MonacoEnvironment.getWorkerUrl(workerId, label);
+	}
+	// ESM-comment-begin
+	if (typeof require === 'function') {
+		return require.toUrl('./' + workerId) + '#' + label;
+	}
+	// ESM-comment-end
+	throw new Error(`You must define a function MonacoEnvironment.getWorkerUrl`);
+>>>>>>> .their
 }
 
 /**
changed in both
  base   100644 8d21c881d585cfc426d978363032e6e3098062cf src/vs/code/electron-main/menus.ts
  our    100644 9d5657cff26b159c842f9790d6387967d829e168 src/vs/code/electron-main/menus.ts
  their  100644 442e70d33c9e81e4b79bb15ebb1cd570f2937803 src/vs/code/electron-main/menus.ts
changed in both
  base   100644 c344b8a05c09cf46f5df0abe0a9873d2496888c5 src/vs/editor/browser/controller/textAreaInput.ts
  our    100644 53169924b40a89453d9315348a7454e0e49c0a03 src/vs/editor/browser/controller/textAreaInput.ts
  their  100644 ea9cf23d22db68caa5fac953ce118cbb62232461 src/vs/editor/browser/controller/textAreaInput.ts
@@ -189,6 +189,7 @@
 			// which breaks this path of code.
 			if (browser.isEdgeOrIE && locale === 'ja') {
 				return true;
+<<<<<<< .our
 			}
 
 			// https://github.com/Microsoft/monaco-editor/issues/545
@@ -207,6 +208,33 @@
 
 			if (compositionDataInValid(e.locale)) {
 				const [newState, typeInput] = deduceInputFromTextAreaValue(/*couldBeEmojiInput*/false, /*couldBeTypingAtOffset0*/false);
+=======
+			}
+
+			// https://github.com/Microsoft/monaco-editor/issues/545
+			// On IE11, we can't trust composition data when typing Chinese as IE11 doesn't emit correct
+			// events when users type numbers in IME.
+			// Chinese: zh-Hans-CN, zh-Hans-SG, zh-Hant-TW, zh-Hant-HK
+			if (browser.isIE && locale.indexOf('zh-Han') === 0) {
+				return true;
+			}
+
+			return false;
+		};
+
+		this._register(dom.addDisposableListener(textArea.domNode, 'compositionupdate', (e: CompositionEvent) => {
+			if (browser.isChromev56) {
+				// See https://github.com/Microsoft/monaco-editor/issues/320
+				// where compositionupdate .data is broken in Chrome v55 and v56
+				// See https://bugs.chromium.org/p/chromium/issues/detail?id=677050#c9
+				// The textArea doesn't get the composition update yet, the value of textarea is still obsolete
+				// so we can't correct e at this moment.
+				return;
+			}
+
+			if (compositionDataInValid(e.locale)) {
+				const [newState, typeInput] = deduceInputFromTextAreaValue(/*couldBeEmojiInput*/false);
+>>>>>>> .their
 				this._textAreaState = newState;
 				this._onType.fire(typeInput);
 				this._onCompositionUpdate.fire(e);
@@ -220,8 +248,11 @@
 		}));
 
 		this._register(dom.addDisposableListener(textArea.domNode, 'compositionend', (e: CompositionEvent) => {
+<<<<<<< .our
 			this._lastTextAreaEvent = TextAreaInputEventType.compositionend;
 
+=======
+>>>>>>> .their
 			if (compositionDataInValid(e.locale)) {
 				// https://github.com/Microsoft/monaco-editor/issues/339
 				const [newState, typeInput] = deduceInputFromTextAreaValue(/*couldBeEmojiInput*/false, /*couldBeTypingAtOffset0*/false);
@@ -436,6 +467,12 @@
 		}
 		this._hasFocus = newHasFocus;
 
+		if (this._isDoingComposition) {
+			// textarea gets focus, so the state should be clean
+			// https://github.com/Microsoft/monaco-editor/issues/552
+			this._isDoingComposition = false;
+		}
+
 		if (this._hasFocus) {
 			if (browser.isEdge) {
 				// Edge has a bug where setting the selection range while the focus event
changed in both
  base   100644 921165fc844a1ffffaabae0686019f416d9cf666 src/vs/editor/common/config/editorOptions.ts
  our    100644 3a51038033803eb3e426c81c8416ce7c260eb272 src/vs/editor/common/config/editorOptions.ts
  their  100644 3703a6e800e536715c1dfc0d23ac6f277e155cdd src/vs/editor/common/config/editorOptions.ts
changed in both
  base   100644 259ab0dc4bb29279532e8235d2896bbc6a330538 src/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase.ts
  our    100644 4d4b03519d11c8bcd261e15f4327bc58c04d4c19 src/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase.ts
  their  100644 f9ab27f12eab4de1d8f2596b03143a1385938018 src/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase.ts
changed in both
  base   100644 bc0a715dda9b77609345449d4a2ef4b13d276023 src/vs/editor/common/model/textModelTokens.ts
  our    100644 ab4e221927f80cd5f52953dce3c0e93b35c70b88 src/vs/editor/common/model/textModelTokens.ts
  their  100644 cb7c7bf2c7d18ed36d62ab2066f351d3c74b38de src/vs/editor/common/model/textModelTokens.ts
changed in both
  base   100644 cd669a4a94b4e88ed6c049f9f47cd24277afc7c5 src/vs/editor/common/services/editorSimpleWorker.ts
  our    100644 884fba7fa029c1f7e19eb6f3082961988cc818ec src/vs/editor/common/services/editorSimpleWorker.ts
  their  100644 b7302571032290d037efb70150e0f9810ba8580a src/vs/editor/common/services/editorSimpleWorker.ts
@@ -303,7 +303,11 @@
 	(ctx: IWorkerContext, createData: any): any;
 }
 
+<<<<<<< .our
 declare var require: any;
+=======
+declare var require;
+>>>>>>> .their
 
 /**
  * @internal
@@ -529,7 +533,10 @@
 			}
 			return TPromise.as(methods);
 		}
+<<<<<<< .our
 		// ESM-comment-begin
+=======
+>>>>>>> .their
 		return new TPromise<any>((c, e) => {
 			require([moduleId], (foreignModule: { create: IForeignModuleFactory }) => {
 				this._foreignModule = foreignModule.create(ctx, createData);
changed in both
  base   100644 1c84e72264659f53d96eb8c2b4ea5fe8e8b3a30b src/vs/editor/common/services/editorWorkerServiceImpl.ts
  our    100644 b03f956e9826b1bafdd7709cee73a75adcf8afc8 src/vs/editor/common/services/editorWorkerServiceImpl.ts
  their  100644 86885e233fcc8bc02153c600e65e5c943cedd491 src/vs/editor/common/services/editorWorkerServiceImpl.ts
changed in both
  base   100644 3a2e010a70733409e473a4734eaa753fad8e2508 src/vs/editor/contrib/colorPicker/colorPicker.css
  our    100644 b1978528c9595fa8972b2a69ebc8fca6d0ada98a src/vs/editor/contrib/colorPicker/colorPicker.css
  their  100644 68fff1fc3da2bbed565e5531556814fe352403ae src/vs/editor/contrib/colorPicker/colorPicker.css
@@ -8,7 +8,11 @@
 	user-select: none;
 }
 
+<<<<<<< .our
 .monaco-editor .colorpicker-hover:focus {
+=======
+.monaco-editor .colorpicker-hover[tabindex="0"]:focus {
+>>>>>>> .their
 	outline: none;
 }
 
changed in both
  base   100644 b44c9fda3be50ec53015c476e355df0ab626de02 src/vs/editor/contrib/snippet/snippetParser.ts
  our    100644 c839cffd343d30d5d0bcaf38e956939fd254b752 src/vs/editor/contrib/snippet/snippetParser.ts
  their  100644 2ee46939849adc103335c96ebf45e0baac3f708f src/vs/editor/contrib/snippet/snippetParser.ts
changed in both
  base   100644 3aef25f681c74c552f157e37b20515f999c87ccd src/vs/editor/contrib/suggest/suggestWidget.ts
  our    100644 a221be2731d33b2c0a5d84d119cac0233b76a147 src/vs/editor/contrib/suggest/suggestWidget.ts
  their  100644 e68013af3c7f60d2083b1be2280940204bea2f53 src/vs/editor/contrib/suggest/suggestWidget.ts
@@ -364,7 +364,11 @@
 	private state: State;
 	private isAuto: boolean;
 	private loadingTimeout: number;
+<<<<<<< .our
 	private currentSuggestionDetails: CancelablePromise<void>;
+=======
+	private currentSuggestionDetails: TPromise<void>;
+>>>>>>> .their
 	private focusedItem: ICompletionItem;
 	private ignoreFocusEvents = false;
 	private completionModel: CompletionModel;
@@ -576,6 +580,7 @@
 
 		this.list.reveal(index);
 
+<<<<<<< .our
 		this.currentSuggestionDetails = createCancelablePromise(token => item.resolve(token));
 
 		this.currentSuggestionDetails.then(() => {
@@ -595,6 +600,18 @@
 				this.currentSuggestionDetails = null;
 			}
 		});
+=======
+		this.currentSuggestionDetails = item.resolve()
+			.then(() => {
+				if (this.expandDocsSettingFromStorage()) {
+					this.showDetails();
+				} else {
+					removeClass(this.element, 'docs-side');
+				}
+			})
+			.then(null, err => !isPromiseCanceledError(err) && onUnexpectedError(err))
+			.then(() => this.currentSuggestionDetails = null);
+>>>>>>> .their
 
 		// emit an event
 		this.onDidFocusEmitter.fire({ item, index, model: this.completionModel });
@@ -713,6 +730,10 @@
 			*/
 			this.telemetryService.publicLog('suggestWidget', { ...stats, ...this.editor.getTelemetryData() });
 
+<<<<<<< .our
+=======
+			this.focusedItem = null;
+>>>>>>> .their
 			this.list.splice(0, this.list.length, this.completionModel.items);
 
 			if (isFrozen) {
added in both
  our    100644 7bd274aab602c1ca20dbabd57091a7bfaaed2c6d src/vs/editor/editor.api.ts
  their  100644 dbee1649496a0af5b854292f176e4583fd2895fd src/vs/editor/editor.api.ts
@@ -35,8 +35,12 @@
 export const Range = api.Range;
 export const Selection = api.Selection;
 export const SelectionDirection = api.SelectionDirection;
+<<<<<<< .our
 export const MarkerSeverity = api.MarkerSeverity;
 export const MarkerTag = api.MarkerTag;
+=======
+export const Severity = api.Severity;
+>>>>>>> .their
 export const Promise = api.Promise;
 export const Uri = api.Uri;
 export const Token = api.Token;
changed in both
  base   100644 b67b0863ad859e61fdeb5cefec517cf78bdf23f3 src/vs/editor/editor.main.ts
  our    100644 08fd5c9232686fb8b4d7c7bd0b267359955b2ec6 src/vs/editor/editor.main.ts
  their  100644 3f2c56b5d169a86edc3ed1b014caf1f6308af2fc src/vs/editor/editor.main.ts
changed in both
  base   100644 55ce345642e3cf0ed0f3428202d6f366ac28656c src/vs/editor/standalone/browser/standaloneLanguages.ts
  our    100644 b0287953b31b42b550a9fccdb465b02666dae70f src/vs/editor/standalone/browser/standaloneLanguages.ts
  their  100644 c0eec9275ac34e5205a38c1dcf670e969624539b src/vs/editor/standalone/browser/standaloneLanguages.ts
changed in both
  base   100644 0923605e55d941b51b14d922330b2f7e416571c0 src/vs/editor/test/common/services/editorSimpleWorker.test.ts
  our    100644 0d55c58d7c19c88e842b8ce075c821eaae2d62b8 src/vs/editor/test/common/services/editorSimpleWorker.test.ts
  their  100644 0a8b62e8a55e320e8a05e9eb0dafc7ad79369c47 src/vs/editor/test/common/services/editorSimpleWorker.test.ts
changed in both
  base   100644 c3566d28a4f7e5b23dc2388cbbb5e6f061c6b82e src/vs/monaco.d.ts
  our    100644 76dcf491ff9c1973ad61bf5d423713bb1a3b4e44 src/vs/monaco.d.ts
  their  100644 5c240cb045f608902e0f650d8e716e37e52a8917 src/vs/monaco.d.ts
changed in both
  base   100644 93fa74ef128babc8cd093a5251da0b60f00ef721 src/vs/platform/notification/common/notification.ts
  our    100644 525d8f18a25236e91e1ee09df20eced0cffc2156 src/vs/platform/notification/common/notification.ts
  their  100644 aa8c4f7c33074afb6ebf0bb5dda6d3ebd29eca59 src/vs/platform/notification/common/notification.ts
changed in both
  base   100644 8ce018cb411f7bb734d492ea81e0ee8bba50911b src/vs/platform/update/common/update.ts
  our    100644 5f187e283ae128388dba38cd5a453c1b2a817445 src/vs/platform/update/common/update.ts
  their  100644 45688bb94184b74fae81affcd657c13da57a0dac src/vs/platform/update/common/update.ts
@@ -54,7 +54,11 @@
 }
 
 export type Uninitialized = { type: StateType.Uninitialized };
+<<<<<<< .our
 export type Idle = { type: StateType.Idle, updateType: UpdateType };
+=======
+export type Idle = { type: StateType.Idle };
+>>>>>>> .their
 export type CheckingForUpdates = { type: StateType.CheckingForUpdates, context: any };
 export type AvailableForDownload = { type: StateType.AvailableForDownload, update: IUpdate };
 export type Downloading = { type: StateType.Downloading, update: IUpdate };
@@ -66,7 +70,11 @@
 
 export const State = {
 	Uninitialized: { type: StateType.Uninitialized } as Uninitialized,
+<<<<<<< .our
 	Idle: (updateType: UpdateType) => ({ type: StateType.Idle, updateType }) as Idle,
+=======
+	Idle: { type: StateType.Idle } as Idle,
+>>>>>>> .their
 	CheckingForUpdates: (context: any) => ({ type: StateType.CheckingForUpdates, context } as CheckingForUpdates),
 	AvailableForDownload: (update: IUpdate) => ({ type: StateType.AvailableForDownload, update } as AvailableForDownload),
 	Downloading: (update: IUpdate) => ({ type: StateType.Downloading, update } as Downloading),
changed in both
  base   100644 441bdd138e139b0a66eaa0ba1ba8778f629324d0 src/vs/platform/update/common/updateIpc.ts
  our    100644 aa2e8fd304e3da483284474d857022629d0c7835 src/vs/platform/update/common/updateIpc.ts
  their  100644 b52dbc115d220c4533ff76d08752d1597389f0fc src/vs/platform/update/common/updateIpc.ts
@@ -12,9 +12,12 @@
 import { IUpdateService, State } from './update';
 
 export interface IUpdateChannel extends IChannel {
+<<<<<<< .our
 	listen(event: 'onStateChange'): Event<State>;
 	listen<T>(command: string, arg?: any): Event<T>;
 
+=======
+>>>>>>> .their
 	call(command: 'checkForUpdates', arg: any): TPromise<void>;
 	call(command: 'downloadUpdate'): TPromise<void>;
 	call(command: 'applyUpdate'): TPromise<void>;
changed in both
  base   100644 04e3ccdfeb369ede9e13784af244e9fbee89e742 src/vs/platform/update/electron-main/abstractUpdateService.ts
  our    100644 b689dd6bd67916ca3e46a27a518e1cfc57d32758 src/vs/platform/update/electron-main/abstractUpdateService.ts
  their  100644 c947ebba306c0099c2573144f96732abfea02077 src/vs/platform/update/electron-main/abstractUpdateService.ts
@@ -181,6 +181,10 @@
 		// noop
 	}
 
+<<<<<<< .our
 	protected abstract buildUpdateFeedUrl(quality: string): string | undefined;
+=======
+	protected abstract setUpdateFeedUrl(quality: string): boolean;
+>>>>>>> .their
 	protected abstract doCheckForUpdates(context: any): void;
 }
changed in both
  base   100644 25d9cf28beb1bae72436866e64504e880a7c43e6 src/vs/platform/update/electron-main/updateService.darwin.ts
  our    100644 8ac8357ef63e52b69fcc0b4593970a0405426078 src/vs/platform/update/electron-main/updateService.darwin.ts
  their  100644 cde35fe74f7b4249c47117200d3a0d4deed28ddc src/vs/platform/update/electron-main/updateService.darwin.ts
changed in both
  base   100644 7b0ece17fe3032415606a27492406913a3678187 src/vs/platform/update/electron-main/updateService.linux.ts
  our    100644 87c60c5d4360ea55dff2b83145f098b858b83c75 src/vs/platform/update/electron-main/updateService.linux.ts
  their  100644 a87f49d45faa39dfbaaa153402237c32a816cf2f src/vs/platform/update/electron-main/updateService.linux.ts
@@ -69,7 +69,11 @@
 					}
 					*/
 				this.telemetryService.publicLog('update:notAvailable', { explicit: !!context });
+<<<<<<< .our
 				this.setState(State.Idle(UpdateType.Archive));
+=======
+				this.setState(State.Idle);
+>>>>>>> .their
 			});
 	}
 
changed in both
  base   100644 ef20367626c463c93d21e7b2f23038c44614a506 src/vs/platform/update/electron-main/updateService.win32.ts
  our    100644 6f5e750aafa60e074dd88761061c50e1f5691b2d src/vs/platform/update/electron-main/updateService.win32.ts
  their  100644 d0421d5ba37e45fc0dcf3a4d85ae5483127cfac7 src/vs/platform/update/electron-main/updateService.win32.ts
@@ -181,7 +181,11 @@
 					}
 					*/
 				this.telemetryService.publicLog('update:notAvailable', { explicit: !!context });
+<<<<<<< .our
 				this.setState(State.Idle(getUpdateType()));
+=======
+				this.setState(State.Idle);
+>>>>>>> .their
 			});
 	}
 
removed in local
  base   100644 d37e32d52c2022499b9788c0ba3178b908af7bba src/vs/workbench/browser/parts/editor/editorGroupsControl.ts
  their  100644 72defc1adbb11cfd0a4220a4a953908bc2e030ce src/vs/workbench/browser/parts/editor/editorGroupsControl.ts
changed in both
  base   100644 e7b9ac440dbc3957e95966fe8a46d05ef360e230 src/vs/workbench/browser/parts/notifications/notificationsCenter.ts
  our    100644 fd3ecd2e0079a1e980b0978636a8deec0185e597 src/vs/workbench/browser/parts/notifications/notificationsCenter.ts
  their  100644 d6baf9a796e583348d3fa022da44f440d2092d4f src/vs/workbench/browser/parts/notifications/notificationsCenter.ts
@@ -65,7 +65,15 @@
 		return this._isVisible;
 	}
 
+<<<<<<< .our
 	show(): void {
+=======
+	public show(): void {
+		if (this.model.notifications.length === 0) {
+			return; // currently not supporting to show empty (https://github.com/Microsoft/vscode/issues/44509)
+		}
+
+>>>>>>> .their
 		if (this._isVisible) {
 			this.notificationsList.show(true /* focus */);
 
changed in both
  base   100644 e5cd87a5e0e20e0c765a84b9e228d936474d6dc1 src/vs/workbench/browser/parts/notifications/notificationsCommands.ts
  our    100644 9519578fe607712e094dd05f5fe59f403e691075 src/vs/workbench/browser/parts/notifications/notificationsCommands.ts
  their  100644 469360901d6879310d20253c4ee42fe34ac36ad2 src/vs/workbench/browser/parts/notifications/notificationsCommands.ts
removed in local
  base   100644 6e300d32eed437803ec867773d1578aa308245d5 src/vs/workbench/parts/extensions/browser/extensionsActions.ts
  their  100644 9f3465b4ac59b159344801418daf9cc61a7f450f src/vs/workbench/parts/extensions/browser/extensionsActions.ts
changed in both
  base   100644 64f46350660cf925ea3243b1313b89efedc90505 src/vs/workbench/parts/terminal/electron-browser/terminalInstance.ts
  our    100644 04d9dcba251cf79c28429027cda3ca3b0c10a29c src/vs/workbench/parts/terminal/electron-browser/terminalInstance.ts
  their  100644 5e81a88576aafb9bb74d3fd5313372bdafe53d39 src/vs/workbench/parts/terminal/electron-browser/terminalInstance.ts
removed in local
  base   100644 756d45061f0e6fc4fc5ee690469e401751acc238 src/vs/workbench/parts/terminal/electron-browser/terminalTab.ts
  their  100644 c4921ed69fd312aa0e3fdf908c2f157694a7af00 src/vs/workbench/parts/terminal/electron-browser/terminalTab.ts
changed in both
  base   100644 0421848d583e44e23ee97d92ee67ce14a821e053 src/vs/workbench/parts/update/electron-browser/update.ts
  our    100644 2e468debc61fae01ce2d9c4b673a81993982cc62 src/vs/workbench/parts/update/electron-browser/update.ts
  their  100644 467c5b27d4587d13f27356511ddac2d81759d108 src/vs/workbench/parts/update/electron-browser/update.ts
@@ -24,6 +24,7 @@
 import { IUpdateService, State as UpdateState, StateType, IUpdate, UpdateType } from 'vs/platform/update/common/update';
 import * as semver from 'semver';
 import { IEnvironmentService } from 'vs/platform/environment/common/environment';
+<<<<<<< .our
 import { INotificationService, INotificationHandle } from 'vs/platform/notification/common/notification';
 import { IDialogService } from 'vs/platform/dialogs/common/dialogs';
 import { IWindowService } from 'vs/platform/windows/common/windows';
@@ -36,6 +37,29 @@
 function showReleaseNotes(instantiationService: IInstantiationService, version: string) {
 	if (!releaseNotesManager) {
 		releaseNotesManager = instantiationService.createInstance(ReleaseNotesManager);
+=======
+import { INotificationService } from 'vs/platform/notification/common/notification';
+import { IChoiceService } from 'vs/platform/dialogs/common/dialogs';
+import { IWindowService } from 'vs/platform/windows/common/windows';
+
+const NotNowAction = new Action(
+	'update.later',
+	nls.localize('later', "Later"),
+	null,
+	true,
+	() => TPromise.as(true)
+);
+
+const releaseNotesCache: { [version: string]: TPromise<string>; } = Object.create(null);
+
+export function loadReleaseNotes(accessor: ServicesAccessor, version: string): TPromise<string> {
+	const requestService = accessor.get(IRequestService);
+	const keybindingService = accessor.get(IKeybindingService);
+	const match = /^(\d+\.\d+)\./.exec(version);
+
+	if (!match) {
+		return TPromise.wrapError<string>(new Error('not found'));
+>>>>>>> .their
 	}
 
 	return instantiationService.invokeFunction(accessor => releaseNotesManager.show(accessor, version));
@@ -372,6 +396,10 @@
 		@INotificationService private notificationService: INotificationService,
 		@IDialogService private dialogService: IDialogService,
 		@IUpdateService private updateService: IUpdateService,
+<<<<<<< .our
+=======
+		@IWorkbenchEditorService editorService: IWorkbenchEditorService,
+>>>>>>> .their
 		@IActivityService private activityService: IActivityService,
 		@IWindowService private windowService: IWindowService
 	) {
changed in both
  base   100644 c9e370817e59140c2659ced6673a2417b3dccdaa src/vs/workbench/services/crashReporter/electron-browser/crashReporterService.ts
  our    100644 13049eb33586080418b399273af4b10cc25e823b src/vs/workbench/services/crashReporter/electron-browser/crashReporterService.ts
  their  100644 ec96ca675bf9008305a3e1d3c5c9c0bf0425eba7 src/vs/workbench/services/crashReporter/electron-browser/crashReporterService.ts
