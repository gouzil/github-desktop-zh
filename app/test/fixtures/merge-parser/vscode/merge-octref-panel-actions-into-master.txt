removed in local
  base   100644 cb576934bacc33ef6392c05f9c438a2bdb2bd3fb src/vs/workbench/browser/parts/compositebar/compositeBar.ts
  their  100644 22552b5b6e1b948a9fd6a2329deea638932a73ad src/vs/workbench/browser/parts/compositebar/compositeBar.ts
changed in both
  base   100644 b1451168b72a5801fbca49637bd60c8552fac425 src/vs/workbench/browser/parts/panel/panelActions.ts
  our    100644 54d4f61d0407acbc4a8f4db8c3137c1255c96970 src/vs/workbench/browser/parts/panel/panelActions.ts
  their  100644 d495ca113c65cb64e82c162df27eb612bbe692f2 src/vs/workbench/browser/parts/panel/panelActions.ts
@@ -170,6 +170,68 @@
 	}
 }
 
+export class SwitchPanelItemAction extends Action {
+	constructor(id: string,
+		name: string,
+		@IPanelService private panelService: IPanelService
+	) {
+		super(id, name);
+	}
+
+	public run(offset: number): TPromise<any> {
+		const pinnedPanels = this.panelService.getPinnedPanels();
+		const activePanel = this.panelService.getActivePanel();
+
+		if (!activePanel) {
+			return TPromise.as(null);
+		}
+
+		let targetPanelId: string;
+		for (let i = 0; i < pinnedPanels.length; i++) {
+			if (pinnedPanels[i].id === activePanel.getId()) {
+				targetPanelId = pinnedPanels[(i + pinnedPanels.length + offset) % pinnedPanels.length].id;
+				break;
+			}
+		}
+
+		return this.panelService.openPanel(targetPanelId, true);
+	}
+}
+
+export class PreviousPanelItemAction extends SwitchPanelItemAction {
+	static readonly ID = 'workbench.action.previousPanelItem';
+	static LABEL = nls.localize('previousPanelItem', 'Previous Panel Item');
+
+	constructor(id: string,
+		name: string,
+		@IPanelService panelService: IPanelService
+	) {
+		super(id, name, panelService);
+	}
+
+	public run(): TPromise<any> {
+		return super.run(-1);
+	}
+}
+
+export class NextPanelItemAction extends SwitchPanelItemAction {
+	static readonly ID = 'workbench.action.nextPanelItem';
+	static LABEL = nls.localize('nextPanelItem', 'Next Panel Item');
+
+	constructor(id: string,
+		name: string,
+		@IPanelService panelService: IPanelService
+	) {
+		super(id, name, panelService);
+	}
+
+
+	public run(): TPromise<any> {
+		return super.run(1);
+	}
+}
+
+
 const actionRegistry = Registry.as<IWorkbenchActionRegistry>(WorkbenchExtensions.WorkbenchActions);
 actionRegistry.registerWorkbenchAction(new SyncActionDescriptor(TogglePanelAction, TogglePanelAction.ID, TogglePanelAction.LABEL, { primary: KeyMod.CtrlCmd | KeyCode.KEY_J }), 'View: Toggle Panel', nls.localize('view', "View"));
 actionRegistry.registerWorkbenchAction(new SyncActionDescriptor(FocusPanelAction, FocusPanelAction.ID, FocusPanelAction.LABEL), 'View: Focus into Panel', nls.localize('view', "View"));
@@ -177,6 +239,7 @@
 actionRegistry.registerWorkbenchAction(new SyncActionDescriptor(ClosePanelAction, ClosePanelAction.ID, ClosePanelAction.LABEL), 'View: Close Panel', nls.localize('view', "View"));
 actionRegistry.registerWorkbenchAction(new SyncActionDescriptor(TogglePanelPositionAction, TogglePanelPositionAction.ID, TogglePanelPositionAction.LABEL), 'View: Toggle Panel Position', nls.localize('view', "View"));
 actionRegistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleMaximizedPanelAction, ToggleMaximizedPanelAction.ID, undefined), 'View: Toggle Panel Position', nls.localize('view', "View"));
+<<<<<<< .our
 
 MenuRegistry.appendMenuItem(MenuId.MenubarAppearanceMenu, {
 	group: '2_workbench_layout',
@@ -186,3 +249,7 @@
 	},
 	order: 5
 });
+=======
+actionRegistry.registerWorkbenchAction(new SyncActionDescriptor(PreviousPanelItemAction, PreviousPanelItemAction.ID, PreviousPanelItemAction.LABEL), 'View: Open Previous Panel Item', nls.localize('view', "View"));
+actionRegistry.registerWorkbenchAction(new SyncActionDescriptor(NextPanelItemAction, NextPanelItemAction.ID, NextPanelItemAction.LABEL), 'View: Open Next Panel Item', nls.localize('view', "View"));
+>>>>>>> .their
changed in both
  base   100644 d339b0cfe04a18464aa673eee0adf62a49fb43a1 src/vs/workbench/browser/parts/panel/panelPart.ts
  our    100644 13df252c82f39c22db7a098770e83f90233fabb9 src/vs/workbench/browser/parts/panel/panelPart.ts
  their  100644 beba0391b7f0a8a11f3495493de793ba4512212e src/vs/workbench/browser/parts/panel/panelPart.ts
@@ -188,7 +188,14 @@
 	getPanels(): PanelDescriptor[] {
 		return Registry.as<PanelRegistry>(PanelExtensions.Panels).getPanels()
 			.filter(p => p.enabled)
-			.sort((v1, v2) => v1.order - v2.order);
+			.sort((p1, p2) => p1.order - p2.order);
+	}
+
+	public getPinnedPanels(): PanelDescriptor[] {
+		const pinnedCompositeIds = this.compositeBar.getPinnedComposites();
+		return this.getPanels()
+			.filter(p => pinnedCompositeIds.indexOf(p.id) !== -1)
+			.sort((p1, p2) => pinnedCompositeIds.indexOf(p1.id) - pinnedCompositeIds.indexOf(p2.id));
 	}
 
 	setPanelEnablement(id: string, enabled: boolean): void {
merged
  result 100644 a27851e15bed2d93b04f59b14c577b57d0f292ea src/vs/workbench/services/panel/common/panelService.ts
  our    100644 97179ea7bb87d8b3b05ddb5b24aa443c95049e1a src/vs/workbench/services/panel/common/panelService.ts
@@ -34,11 +34,16 @@
 	getActivePanel(): IPanel;
 
 	/**
-	 * Returns all enabled panels
+	 * Returns all built-in panels following the default order (Problems - Output - Debug Console - Terminal)
 	 */
 	getPanels(): IPanelIdentifier[];
 
 	/**
+	 * Returns pinned panels following the visual order
+	 */
+	getPinnedPanels(): IPanelIdentifier[];
+
+	/**
 	 * Enables or disables a panel. Disabled panels are completly hidden from UI.
 	 * By default all panels are enabled.
 	 */
changed in both
  base   100644 577d37ad5b3c3dab82e555df46b05f954b8c35f5 src/vs/workbench/services/progress/test/progressService.test.ts
  our    100644 f1f23e0cea1675e568fd737db6e8614af1d045b5 src/vs/workbench/services/progress/test/progressService.test.ts
  their  100644 53ae1e10027d27526f10e6bc76d39cab136a9191 src/vs/workbench/services/progress/test/progressService.test.ts
@@ -75,6 +75,10 @@
 		return [];
 	}
 
+	public getPinnedPanels(): any[] {
+		return [];
+	}
+
 	public getActivePanel(): IViewlet {
 		return activeViewlet;
 	}
