changed in both
  base   100644 c945e012dee5c99538272d8f5fc851a0d70f6341 src/vs/editor/browser/editorBrowser.ts
  our    100644 d2b256b0ac954a95d910921337989333c3361cd3 src/vs/editor/browser/editorBrowser.ts
  their  100644 dfac5d47ff79a3603ca671af11006ae4420156f6 src/vs/editor/browser/editorBrowser.ts
@@ -170,7 +170,12 @@
 	/**
 	 * Position the overlay widget in the top center
 	 */
-	TOP_CENTER
+	TOP_CENTER,
+
+	/**
+	 * Position the overlay widget in the top center
+	 */
+	BOTTOM_STICK
 }
 /**
  * A position for rendering overlay widgets.
@@ -180,6 +185,7 @@
 	 * The position preference for the overlay widget.
 	 */
 	preference: OverlayWidgetPositionPreference;
+	reRender?: boolean;
 }
 /**
  * An overlay widgets renders on top of the text.
changed in both
  base   100644 9a2390c4a36e78523e729ec99bcc6f276d85b4b2 src/vs/editor/browser/view/viewImpl.ts
  our    100644 f619f1adef4f12e7f3e990d008867ec5f137fb73 src/vs/editor/browser/view/viewImpl.ts
  their  100644 6eefdf390da32c7f4f5fc6d9714f400e9991aec9 src/vs/editor/browser/view/viewImpl.ts
@@ -570,7 +570,8 @@
 
 	public layoutOverlayWidget(widgetData: IOverlayWidgetData): void {
 		let newPreference = widgetData.position ? widgetData.position.preference : null;
-		let shouldRender = this.overlayWidgets.setWidgetPosition(widgetData.widget, newPreference);
+		let reRender = widgetData.position ? widgetData.position.reRender : false;
+		let shouldRender = this.overlayWidgets.setWidgetPosition(widgetData.widget, newPreference, reRender);
 		if (shouldRender) {
 			this._scheduleRender();
 		}
merged
  result 100644 f0cc38fe8cd0fedb9bcd8042a16195224dc3e2ce src/vs/editor/browser/viewParts/overlayWidgets/overlayWidgets.ts
  our    100644 fc87fd6fa56b73557e8bf6e8cc09c571b662174d src/vs/editor/browser/viewParts/overlayWidgets/overlayWidgets.ts
@@ -91,9 +91,9 @@
 		this.setShouldRender();
 	}
 
-	public setWidgetPosition(widget: IOverlayWidget, preference: OverlayWidgetPositionPreference): boolean {
+	public setWidgetPosition(widget: IOverlayWidget, preference: OverlayWidgetPositionPreference, forceRender?: boolean): boolean {
 		let widgetData = this._widgets[widget.getId()];
-		if (widgetData.preference === preference) {
+		if (widgetData.preference === preference && !forceRender) {
 			return false;
 		}
 
@@ -133,6 +133,11 @@
 		} else if (widgetData.preference === OverlayWidgetPositionPreference.TOP_CENTER) {
 			domNode.setTop(0);
 			domNode.domNode.style.right = '50%';
+		} else if(widgetData.preference === OverlayWidgetPositionPreference.BOTTOM_STICK) {
+			let widgetHeight = domNode.domNode.clientHeight;
+			let wordwrap = this._context.configuration.editor.wrappingInfo.isViewportWrapping;
+			domNode.setTop((this._editorHeight - widgetHeight - (wordwrap ? 1 : 0 ) * this._horizontalScrollbarHeight));
+			domNode.setRight((2 * this._verticalScrollbarWidth) + this._minimapWidth);
 		}
 	}
 
changed in both
  base   100644 e804b2bd36bd1b465b899fc48d1c68bb629dd112 src/vs/editor/common/config/commonEditorConfig.ts
  our    100644 07380bbb371743d18229dc1396d98193d5bf04b8 src/vs/editor/common/config/commonEditorConfig.ts
  their  100644 5917019e38f03d67ecc099240ba613769949ff7b src/vs/editor/common/config/commonEditorConfig.ts
@@ -552,6 +552,12 @@
 			'default': EDITOR_DEFAULTS.contribInfo.suggest.snippets,
 			'description': nls.localize('snippetSuggestions', "Controls whether snippets are shown with other suggestions and how they are sorted.")
 		},
+		'editor.findWidget': {
+			'type': 'string',
+			'enum': ['default', 'top', 'bottom'],
+			'default': EDITOR_DEFAULTS.contribInfo.findWidget,
+			'description': nls.localize('findWidget', "Controls where find widget is shown")
+		},
 		'editor.emptySelectionClipboard': {
 			'type': 'boolean',
 			'default': EDITOR_DEFAULTS.emptySelectionClipboard,
changed in both
  base   100644 2bc5f7ad1f98c415bb6d29cf6ceebdbf13e562c9 src/vs/editor/common/config/editorOptions.ts
  our    100644 3a51038033803eb3e426c81c8416ce7c260eb272 src/vs/editor/common/config/editorOptions.ts
  their  100644 8ac3d82429c1c7a7f5a278ad72a0fae6af3f8cba src/vs/editor/common/config/editorOptions.ts
@@ -520,6 +520,10 @@
 	 */
 	snippetSuggestions?: 'top' | 'bottom' | 'inline' | 'none';
 	/**
+	 * Control where the findWidget is shown;
+	 */
+	findWidget?: 'default' | 'top' | 'bottom';
+	/**
 	 * Copying without a selection copies the current line.
 	 */
 	emptySelectionClipboard?: boolean;
@@ -939,7 +943,13 @@
 	readonly suggestOnTriggerCharacters: boolean;
 	readonly acceptSuggestionOnEnter: 'on' | 'smart' | 'off';
 	readonly acceptSuggestionOnCommitCharacter: boolean;
+<<<<<<< .our
 	// readonly snippetSuggestions: 'top' | 'bottom' | 'inline' | 'none';
+=======
+	readonly snippetSuggestions: 'top' | 'bottom' | 'inline' | 'none';
+	readonly findWidget: 'default' | 'top' | 'bottom';
+	readonly emptySelectionClipboard: boolean;
+>>>>>>> .their
 	readonly wordBasedSuggestions: boolean;
 	readonly suggestSelection: 'first' | 'recentlyUsed' | 'recentlyUsedByPrefix';
 	readonly suggestFontSize: number;
@@ -1329,6 +1339,12 @@
 			&& a.suggestOnTriggerCharacters === b.suggestOnTriggerCharacters
 			&& a.acceptSuggestionOnEnter === b.acceptSuggestionOnEnter
 			&& a.acceptSuggestionOnCommitCharacter === b.acceptSuggestionOnCommitCharacter
+<<<<<<< .our
+=======
+			&& a.snippetSuggestions === b.snippetSuggestions
+			&& a.findWidget === b.findWidget
+			&& a.emptySelectionClipboard === b.emptySelectionClipboard
+>>>>>>> .their
 			&& a.wordBasedSuggestions === b.wordBasedSuggestions
 			&& a.suggestSelection === b.suggestSelection
 			&& a.suggestFontSize === b.suggestFontSize
@@ -1933,6 +1949,12 @@
 			suggestOnTriggerCharacters: _boolean(opts.suggestOnTriggerCharacters, defaults.suggestOnTriggerCharacters),
 			acceptSuggestionOnEnter: _stringSet<'on' | 'smart' | 'off'>(opts.acceptSuggestionOnEnter, defaults.acceptSuggestionOnEnter, ['on', 'smart', 'off']),
 			acceptSuggestionOnCommitCharacter: _boolean(opts.acceptSuggestionOnCommitCharacter, defaults.acceptSuggestionOnCommitCharacter),
+<<<<<<< .our
+=======
+			snippetSuggestions: _stringSet<'top' | 'bottom' | 'inline' | 'none'>(opts.snippetSuggestions, defaults.snippetSuggestions, ['top', 'bottom', 'inline', 'none']),
+			findWidget: _stringSet<'default' | 'top' | 'bottom'>(opts.findWidget, defaults.findWidget, ['default', 'top', 'bottom']),
+			emptySelectionClipboard: _boolean(opts.emptySelectionClipboard, defaults.emptySelectionClipboard),
+>>>>>>> .their
 			wordBasedSuggestions: _boolean(opts.wordBasedSuggestions, defaults.wordBasedSuggestions),
 			suggestSelection: _stringSet<'first' | 'recentlyUsed' | 'recentlyUsedByPrefix'>(opts.suggestSelection, defaults.suggestSelection, ['first', 'recentlyUsed', 'recentlyUsedByPrefix']),
 			suggestFontSize: _clampedInt(opts.suggestFontSize, defaults.suggestFontSize, 0, 1000),
@@ -2515,6 +2537,12 @@
 		suggestOnTriggerCharacters: true,
 		acceptSuggestionOnEnter: 'on',
 		acceptSuggestionOnCommitCharacter: true,
+<<<<<<< .our
+=======
+		snippetSuggestions: 'inline',
+		findWidget: 'default',
+		emptySelectionClipboard: true,
+>>>>>>> .their
 		wordBasedSuggestions: true,
 		suggestSelection: 'recentlyUsed',
 		suggestFontSize: 0,
removed in local
  base   100644 74d52635a45a88b57e36a396e5edcd476d8630a7 src/vs/editor/contrib/find/browser/findWidget.css
  their  100644 38a12717f57f9deec7a136d3bccfd88f638bd7a4 src/vs/editor/contrib/find/browser/findWidget.css
removed in local
  base   100644 e909b466c000735604c4afb18477e0e690b42ec4 src/vs/editor/contrib/find/browser/findWidget.ts
  their  100644 4f57bf85ab9857e5240dff8511bfaa0e741f5a4c src/vs/editor/contrib/find/browser/findWidget.ts
changed in both
  base   100644 43916db530ced43c8604b3ed7e8696102ae9d31b src/vs/monaco.d.ts
  our    100644 76dcf491ff9c1973ad61bf5d423713bb1a3b4e44 src/vs/monaco.d.ts
  their  100644 0efdc63770888b96c92a3df1b030a7376cef592c src/vs/monaco.d.ts
@@ -2899,6 +2899,10 @@
 		 */
 		snippetSuggestions?: 'top' | 'bottom' | 'inline' | 'none';
 		/**
+		 * Control where the findWidget is shown;
+		 */
+		findWidget?: 'default' | 'top' | 'bottom';
+		/**
 		 * Copying without a selection copies the current line.
 		 */
 		emptySelectionClipboard?: boolean;
@@ -3259,6 +3263,12 @@
 		readonly suggestOnTriggerCharacters: boolean;
 		readonly acceptSuggestionOnEnter: 'on' | 'smart' | 'off';
 		readonly acceptSuggestionOnCommitCharacter: boolean;
+<<<<<<< .our
+=======
+		readonly snippetSuggestions: 'top' | 'bottom' | 'inline' | 'none';
+		readonly findWidget: 'default' | 'top' | 'bottom';
+		readonly emptySelectionClipboard: boolean;
+>>>>>>> .their
 		readonly wordBasedSuggestions: boolean;
 		readonly suggestSelection: 'first' | 'recentlyUsed' | 'recentlyUsedByPrefix';
 		readonly suggestFontSize: number;
@@ -3593,7 +3603,15 @@
 		/**
 		 * Position the overlay widget in the top center
 		 */
+<<<<<<< .our
 		TOP_CENTER = 2
+=======
+		TOP_CENTER = 2,
+		/**
+		 * Position the overlay widget in the top center
+		 */
+		BOTTOM_STICK = 3,
+>>>>>>> .their
 	}
 
 	/**
@@ -3604,6 +3622,7 @@
 		 * The position preference for the overlay widget.
 		 */
 		preference: OverlayWidgetPositionPreference;
+		reRender?: boolean;
 	}
 
 	/**
changed in both
  base   100644 32dca3259a40460f5ff1f471bab745452d684d41 src/vs/platform/telemetry/common/telemetryUtils.ts
  our    100644 83a4326ca5e511e1b955212a7929341083ae29ff src/vs/platform/telemetry/common/telemetryUtils.ts
  their  100644 40edea496a6b7d77c80290210d379c1e098a2338 src/vs/platform/telemetry/common/telemetryUtils.ts
@@ -123,11 +123,15 @@
 	'editor.acceptSuggestionOnEnter',
 	'editor.acceptSuggestionOnCommitCharacter',
 	'editor.snippetSuggestions',
+<<<<<<< .our
 	'editor.emptySelectionClipboard',
 	'editor.wordBasedSuggestions',
 	'editor.suggestSelection',
 	'editor.suggestFontSize',
 	'editor.suggestLineHeight',
+=======
+	'editor.findWidget',
+>>>>>>> .their
 	'editor.selectionHighlight',
 	'editor.occurrencesHighlight',
 	'editor.overviewRulerLanes',
