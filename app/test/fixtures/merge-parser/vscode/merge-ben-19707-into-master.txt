changed in both
  base   100644 e37142cbab4cc21d66760f0e3657c907f7dc4342 build/gulpfile.vscode.js
  our    100644 d79071e56bcfc53b3448052cc08bd7247bd7e789 build/gulpfile.vscode.js
  their  100644 68db2ef28bffaca7e6f8635d64f7c9a98a1909a9 build/gulpfile.vscode.js
@@ -297,8 +297,11 @@
 			.pipe(util.cleanNodeModule('windows-mutex', ['binding.gyp', 'build/**', 'src/**'], ['**/*.node']))
 			.pipe(util.cleanNodeModule('native-keymap', ['binding.gyp', 'build/**', 'src/**', 'deps/**'], ['**/*.node']))
 			.pipe(util.cleanNodeModule('native-is-elevated', ['binding.gyp', 'build/**', 'src/**', 'deps/**'], ['**/*.node']))
+<<<<<<< .our
 			.pipe(util.cleanNodeModule('native-watchdog', ['binding.gyp', 'build/**', 'src/**'], ['**/*.node']))
 			.pipe(util.cleanNodeModule('spdlog', ['binding.gyp', 'build/**', 'deps/**', 'src/**', 'test/**'], ['**/*.node']))
+=======
+>>>>>>> .their
 			.pipe(util.cleanNodeModule('jschardet', ['dist/**']))
 			.pipe(util.cleanNodeModule('windows-foreground-love', ['binding.gyp', 'build/**', 'src/**'], ['**/*.node']))
 			.pipe(util.cleanNodeModule('windows-process-tree', ['binding.gyp', 'build/**', 'src/**'], ['**/*.node']))
removed in local
  base   100644 ef084f4913e7f22ffb3737a557d6a42eed63492d npm-shrinkwrap.json
  their  100644 fda17327b08352ce1cb22a958158e07d3d5eb1e7 npm-shrinkwrap.json
changed in both
  base   100644 59026697ac9f412d7ed6efa48f8fb8bda9525048 package.json
  our    100644 d0e982ce0b76c5b1b5eb02b673e459e47f3353a4 package.json
  their  100644 06ec255e4bc3737db612fd03afc2f97794ab3569 package.json
@@ -36,6 +36,7 @@
     "jschardet": "1.6.0",
     "keytar": "4.2.1",
     "minimist": "1.2.0",
+<<<<<<< .our
     "native-is-elevated": "^0.2.1",
     "native-keymap": "1.2.5",
     "native-watchdog": "0.3.0",
@@ -52,6 +53,19 @@
     "vscode-xterm": "3.7.0-beta4",
     "winreg": "^1.2.4",
     "yauzl": "^2.9.1"
+=======
+    "native-keymap": "1.2.1",
+    "node-pty": "0.6.2",
+    "semver": "4.3.6",
+    "v8-profiler": "jrieken/v8-profiler#vscode",
+    "vscode-debugprotocol": "1.18.0",
+    "vscode-ripgrep": "0.0.11",
+    "vscode-textmate": "^3.1.3",
+    "winreg": "1.2.0",
+    "xterm": "Tyriar/xterm.js#vscode-release/1.11",
+    "yauzl": "2.3.1",
+    "native-is-elevated": "^0.2.0"
+>>>>>>> .their
   },
   "devDependencies": {
     "7zip": "0.0.6",
added in both
  our    100644 1b79764d6a056be641849643f89589afe991457c src/typings/native-is-elevated.d.ts
  their  100644 d9ea0a111c3134d55c22fc3f16e8be8b8ed81e59 src/typings/native-is-elevated.d.ts
@@ -1,8 +1,11 @@
+<<<<<<< .our
 /*---------------------------------------------------------------------------------------------
  *  Copyright (c) Microsoft Corporation. All rights reserved.
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
+=======
+>>>>>>> .their
 declare module 'native-is-elevated' {
 	function isElevated(): boolean;
 
changed in both
  base   100644 cb712577c795a82dcfa91263e48db79bc1c6efe0 src/vs/workbench/browser/parts/titlebar/titlebarPart.ts
  our    100644 9a4bc78f8bfb46964c500453932b1dd3cffe5d15 src/vs/workbench/browser/parts/titlebar/titlebarPart.ts
  their  100644 d3057291cb770b31a883074b1dc458170137b852 src/vs/workbench/browser/parts/titlebar/titlebarPart.ts
@@ -17,12 +17,19 @@
 import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
 import { StandardMouseEvent } from 'vs/base/browser/mouseEvent';
 import { IAction, Action } from 'vs/base/common/actions';
+<<<<<<< .our
 import { IConfigurationService, IConfigurationChangeEvent } from 'vs/platform/configuration/common/configuration';
 import { IEditorService } from 'vs/workbench/services/editor/common/editorService';
+=======
+import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
+import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
+import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';
+>>>>>>> .their
 import { IDisposable, dispose } from 'vs/base/common/lifecycle';
 import * as nls from 'vs/nls';
 import { EditorInput, toResource, Verbosity } from 'vs/workbench/common/editor';
 import { IEnvironmentService } from 'vs/platform/environment/common/environment';
+<<<<<<< .our
 import { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';
 import { IThemeService, registerThemingParticipant, ITheme, ICssStyleCollector } from 'vs/platform/theme/common/themeService';
 import { TITLE_BAR_ACTIVE_BACKGROUND, TITLE_BAR_ACTIVE_FOREGROUND, TITLE_BAR_INACTIVE_FOREGROUND, TITLE_BAR_INACTIVE_BACKGROUND, TITLE_BAR_BORDER } from 'vs/workbench/common/theme';
@@ -36,16 +43,36 @@
 import { template, getBaseLabel } from 'vs/base/common/labels';
 import { IUriLabelService } from 'vs/platform/uriLabel/common/uriLabel';
 import { Event } from 'vs/base/common/event';
+=======
+import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
+import { Verbosity } from 'vs/platform/editor/common/editor';
+import { IThemeService } from 'vs/platform/theme/common/themeService';
+import { TITLE_BAR_ACTIVE_BACKGROUND, TITLE_BAR_ACTIVE_FOREGROUND, TITLE_BAR_INACTIVE_FOREGROUND, TITLE_BAR_INACTIVE_BACKGROUND } from 'vs/workbench/common/theme';
+import { isWindows } from 'vs/base/common/platform';
+
+export interface ITitleProperties {
+	isPure: boolean;
+	isAdmin: boolean;
+}
+>>>>>>> .their
 
 export class TitlebarPart extends Part implements ITitleService {
 
 	_serviceBrand: any;
 
+<<<<<<< .our
 	private static readonly NLS_UNSUPPORTED = nls.localize('patchedWindowTitle', "[Unsupported]");
 	private static readonly NLS_USER_IS_ADMIN = isWindows ? nls.localize('userIsAdmin', "[Administrator]") : nls.localize('userIsSudo', "[Superuser]");
 	private static readonly NLS_EXTENSION_HOST = nls.localize('devExtensionWindowTitlePrefix', "[Extension Development Host]");
 	private static readonly TITLE_DIRTY = '\u25cf ';
 	private static readonly TITLE_SEPARATOR = isMacintosh ? ' â€” ' : ' - '; // macOS uses special - separator
+=======
+	private static NLS_UNSUPPORTED = nls.localize('patchedWindowTitle', "[Unsupported]");
+	private static NLS_USER_IS_ADMIN = nls.localize('userIsAdmin', "(Administrator)");
+	private static NLS_EXTENSION_HOST = nls.localize('devExtensionWindowTitlePrefix', "[Extension Development Host]");
+	private static TITLE_DIRTY = '\u25cf ';
+	private static TITLE_SEPARATOR = ' - ';
+>>>>>>> .their
 
 	private titleContainer: Builder;
 	private title: Builder;
@@ -70,6 +97,10 @@
 
 	private isInactive: boolean;
 
+<<<<<<< .our
+=======
+	private titleTemplate: string;
+>>>>>>> .their
 	private properties: ITitleProperties;
 	private activeEditorListeners: IDisposable[];
 
@@ -79,7 +110,12 @@
 		@IWindowService private windowService: IWindowService,
 		@IConfigurationService private configurationService: IConfigurationService,
 		@IWindowsService private windowsService: IWindowsService,
+<<<<<<< .our
 		@IEditorService private editorService: IEditorService,
+=======
+		@IWorkbenchEditorService private editorService: IWorkbenchEditorService,
+		@IEditorGroupService private editorGroupService: IEditorGroupService,
+>>>>>>> .their
 		@IEnvironmentService private environmentService: IEnvironmentService,
 		@IWorkspaceContextService private contextService: IWorkspaceContextService,
 		@IInstantiationService private instantiationService: IInstantiationService,
@@ -94,6 +130,18 @@
 		this.registerListeners();
 	}
 
+<<<<<<< .our
+=======
+	private init(): void {
+
+		// Read initial config
+		this.onConfigurationChanged();
+
+		// Initial window title
+		this.setTitle(this.getWindowTitle());
+	}
+
+>>>>>>> .their
 	private registerListeners(): void {
 		this._register(addDisposableListener(window, EventType.BLUR, () => this.onBlur()));
 		this._register(addDisposableListener(window, EventType.FOCUS, () => this.onFocus()));
@@ -181,14 +229,21 @@
 			title = this.environmentService.appNameLong;
 		}
 
+<<<<<<< .our
 		if (this.properties.isAdmin) {
 			title = `${title} ${TitlebarPart.NLS_USER_IS_ADMIN}`;
 		}
 
+=======
+>>>>>>> .their
 		if (!this.properties.isPure) {
 			title = `${title} ${TitlebarPart.NLS_UNSUPPORTED}`;
 		}
 
+		if (isWindows && this.properties.isAdmin) {
+			title = `${title} ${TitlebarPart.NLS_USER_IS_ADMIN}`;
+		}
+
 		// Extension Development Host gets a special title to identify itself
 		if (this.environmentService.isExtensionDevelopment) {
 			title = `${TitlebarPart.NLS_EXTENSION_HOST} - ${title}`;
@@ -461,7 +516,16 @@
 		return actions;
 	}
 
+<<<<<<< .our
 	setTitle(title: string): void {
+=======
+	public updateProperties(properties: ITitleProperties): void {
+		this.properties = properties;
+		this.setTitle(this.getWindowTitle());
+	}
+
+	public setTitle(title: string): void {
+>>>>>>> .their
 
 		// Always set the native window title to identify us properly to the OS
 		window.document.title = title;
changed in both
  base   100644 8d790905d271360945dbc86ca9403f7611652a04 src/vs/workbench/electron-browser/shell.ts
  our    100644 33bea4a0ca07789e5913902a82c7d187af26b943 src/vs/workbench/electron-browser/shell.ts
  their  100644 79b38c5c856c5f24114c6a5a18946fb86acc2d33 src/vs/workbench/electron-browser/shell.ts
@@ -34,10 +34,15 @@
 import { MarkerService } from 'vs/platform/markers/common/markerService';
 import { IModelService } from 'vs/editor/common/services/modelService';
 import { ModelServiceImpl } from 'vs/editor/common/services/modelServiceImpl';
+<<<<<<< .our
 import { CodeEditorService } from 'vs/workbench/services/codeEditor/browser/codeEditorService';
 import { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';
 import { IntegrityServiceImpl } from 'vs/platform/integrity/node/integrityServiceImpl';
 import { IIntegrityService } from 'vs/platform/integrity/common/integrity';
+=======
+import { CodeEditorServiceImpl } from 'vs/editor/browser/services/codeEditorServiceImpl';
+import { ICodeEditorService } from 'vs/editor/common/services/codeEditorService';
+>>>>>>> .their
 import { EditorWorkerServiceImpl } from 'vs/editor/common/services/editorWorkerServiceImpl';
 import { IEditorWorkerService } from 'vs/editor/common/services/editorWorkerService';
 import { ExtensionService } from 'vs/workbench/services/extensions/electron-browser/extensionService';
@@ -417,11 +422,16 @@
 
 		serviceCollection.set(ISearchHistoryService, new SyncDescriptor(SearchHistoryService));
 
+<<<<<<< .our
 		serviceCollection.set(IWorkbenchIssueService, new SyncDescriptor(WorkbenchIssueService));
 
 		serviceCollection.set(ICodeEditorService, new SyncDescriptor(CodeEditorService));
 
 		serviceCollection.set(IOpenerService, new SyncDescriptor(OpenerService));
+=======
+		const updateChannel = mainProcessClient.getChannel('update');
+		serviceCollection.set(IUpdateService, new SyncDescriptor(UpdateChannelClient, updateChannel));
+>>>>>>> .their
 
 		serviceCollection.set(IIntegrityService, new SyncDescriptor(IntegrityServiceImpl));
 
changed in both
  base   100644 b609fb275de23787d86c43882fe92e7acbc6d59c src/vs/workbench/electron-browser/workbench.ts
  our    100644 78add76eb65984b5c27c1721cb6482b45327e839 src/vs/workbench/electron-browser/workbench.ts
  their  100644 de63203e9030c28435fc8649e772dd2017758a6f src/vs/workbench/electron-browser/workbench.ts
@@ -37,8 +37,17 @@
 import { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';
 import { QuickInputService } from 'vs/workbench/browser/parts/quickinput/quickInput';
 import { getServices } from 'vs/platform/instantiation/common/extensions';
+<<<<<<< .our
 import { Position, Parts, IPartService, ILayoutOptions, IDimension } from 'vs/workbench/services/part/common/partService';
 import { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';
+=======
+import { IUntitledEditorService } from 'vs/workbench/services/untitled/common/untitledEditorService';
+import { WorkbenchEditorService } from 'vs/workbench/services/editor/browser/editorService';
+import { Position, Parts, IPartService, ILayoutOptions } from 'vs/workbench/services/part/common/partService';
+import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
+import { IntegrityServiceImpl } from 'vs/platform/integrity/node/integrityServiceImpl';
+import { IIntegrityService } from 'vs/platform/integrity/common/integrity';
+>>>>>>> .their
 import { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';
 import { ContextMenuService as NativeContextMenuService } from 'vs/workbench/services/contextview/electron-browser/contextmenuService';
 import { ContextMenuService as HTMLContextMenuService } from 'vs/platform/contextview/browser/contextMenuService';
@@ -201,11 +210,16 @@
 	private contextKeyService: IContextKeyService;
 	private keybindingService: IKeybindingService;
 	private backupFileService: IBackupFileService;
+<<<<<<< .our
 	private fileService: IFileService;
 	private quickInput: QuickInputService;
 
 	private workbenchLayout: WorkbenchLayout;
 
+=======
+	private integrityService: IIntegrityService;
+	private configurationEditingService: IConfigurationEditingService;
+>>>>>>> .their
 	private titlebarPart: TitlebarPart;
 	private activitybarPart: ActivitybarPart;
 	private sidebarPart: SidebarPart;
@@ -333,6 +347,10 @@
 		// Services we contribute
 		serviceCollection.set(IPartService, this);
 
+		// Integrity
+		this.integrityService = this.instantiationService.createInstance(IntegrityServiceImpl);
+		serviceCollection.set(IIntegrityService, this.integrityService);
+
 		// Clipboard
 		serviceCollection.set(IClipboardService, new ClipboardService());
 
@@ -1027,6 +1045,8 @@
 		const titlebarContainer = this.createPart(Identifiers.TITLEBAR_PART, ['part', 'titlebar'], 'contentinfo');
 
 		this.titlebarPart.create(titlebarContainer);
+
+		// TODO resolve integrity and isAdmin after timeout
 	}
 
 	private createActivityBarPart(): void {
