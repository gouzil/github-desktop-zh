changed in both
  base   100644 da803391a973399fb94e5558711c81b08163b994 src/vs/workbench/parts/debug/browser/loadedScriptsView.ts
  our    100644 780b5ebb659f0555d2292809a3fc8a6d6586d54b src/vs/workbench/parts/debug/browser/loadedScriptsView.ts
  their  100644 d5f424be6299e7708d25d9f5c55009341cd0b18b src/vs/workbench/parts/debug/browser/loadedScriptsView.ts
@@ -38,11 +38,16 @@
 
 class BaseTreeItem {
 
+<<<<<<< .our
 	private _showedMoreThanOne: boolean;
+=======
+	private _id: string;
+>>>>>>> .their
 	private _children: { [key: string]: BaseTreeItem; };
 	private _source: Source;
 
 	constructor(private _parent: BaseTreeItem, private _label: string) {
+<<<<<<< .our
 		this._children = {};
 		this._showedMoreThanOne = false;
 	}
@@ -62,12 +67,30 @@
 
 	remove(key: string): void {
 		delete this._children[key];
+=======
+		this._id = this._parent ? `${this._parent._id}/${this._label}` : this._label;
+		this._children = {};
+	}
+
+	getLabel() {
+		const child = this.oneChild();
+		if (child) {
+			const sep = this instanceof RootFolderTreeItem ? ' â€¢ ' : '/';
+			return `${this._label}${sep}${child.getLabel()}`;
+		}
+		return this._label;
+	}
+
+	getId(): string {
+		return this._id;
+>>>>>>> .their
 	}
 
 	getTemplateId(): string {
 		return SOURCE_TEMPLATE_ID;
 	}
 
+<<<<<<< .our
 	// a dynamic ID based on the parent chain; required for reparenting (see #55448)
 	getId(): string {
 		const parent = this.getParent();
@@ -87,6 +110,17 @@
 	}
 
 	// skips intermediate single-child nodes
+=======
+	getChildren(): TPromise<BaseTreeItem[]> {
+		const child = this.oneChild();
+		if (child) {
+			return child.getChildren();
+		}
+		const array = Object.keys(this._children).map(key => this._children[key]);
+		return TPromise.as(array.sort((a, b) => this.compare(a, b)));
+	}
+
+>>>>>>> .their
 	hasChildren(): boolean {
 		const child = this.oneChild();
 		if (child) {
@@ -95,6 +129,7 @@
 		return Object.keys(this._children).length > 0;
 	}
 
+<<<<<<< .our
 	// skips intermediate single-child nodes
 	getChildren(): TPromise<BaseTreeItem[]> {
 		const child = this.oneChild();
@@ -134,6 +169,31 @@
 			return child.getSource();
 		}
 		return this._source;
+=======
+	getSource() {
+		const child = this.oneChild();
+		if (child) {
+			return child.getSource();
+		}
+		return this._source;
+	}
+
+	setSource(session: ISession, source: Source): void {
+		this._source = source;
+	}
+
+	createIfNeeded<T extends BaseTreeItem>(key: string, factory: (parent: BaseTreeItem, label: string) => T): T {
+		let child = <T>this._children[key];
+		if (!child) {
+			child = factory(this, key);
+			this._children[key] = child;
+		}
+		return child;
+	}
+
+	remove(key: string): void {
+		delete this._children[key];
+>>>>>>> .their
 	}
 
 	protected compare(a: BaseTreeItem, b: BaseTreeItem): number {
@@ -144,15 +204,22 @@
 	}
 
 	private oneChild(): BaseTreeItem {
+<<<<<<< .our
 		if (SMART && !this._showedMoreThanOne) {
+=======
+		if (SMART && !(this instanceof RootTreeItem)) {
+>>>>>>> .their
 			const keys = Object.keys(this._children);
 			if (keys.length === 1) {
 				return this._children[keys[0]];
 			}
+<<<<<<< .our
 			// if a node had more than one child once, it will never be skipped again
 			if (keys.length > 1) {
 				this._showedMoreThanOne = true;
 			}
+=======
+>>>>>>> .their
 		}
 		return undefined;
 	}
@@ -171,13 +238,40 @@
 
 class RootTreeItem extends BaseTreeItem {
 
+<<<<<<< .our
 	constructor(private _debugModel: IModel, private _environmentService: IEnvironmentService, private _contextService: IWorkspaceContextService) {
 		super(undefined, 'Root');
+=======
+	private _showedMoreThanOne: boolean;
+
+	constructor(private _debugModel: IModel, private _environmentService: IEnvironmentService, private _contextService: IWorkspaceContextService) {
+		super(undefined, 'Root');
+		this._showedMoreThanOne = false;
+>>>>>>> .their
 		this._debugModel.getSessions().forEach(session => {
 			this.add(session);
 		});
 	}
 
+<<<<<<< .our
+=======
+	hasChildren(): boolean {
+		return true;
+	}
+
+	getChildren(): TPromise<BaseTreeItem[]> {
+		return super.getChildren().then(children => {
+			const size = children.length;
+			if (!this._showedMoreThanOne && size === 1) {
+				// skip session if there is only one
+				return children[0].getChildren();
+			}
+			this._showedMoreThanOne = size > 1;
+			return children;
+		});
+	}
+
+>>>>>>> .their
 	add(session: ISession): SessionTreeItem {
 		return this.createIfNeeded(session.getId(), () => new SessionTreeItem(this, session, this._environmentService, this._contextService));
 	}
@@ -196,10 +290,13 @@
 		this._session = session;
 	}
 
+<<<<<<< .our
 	getHoverLabel(): string {
 		return undefined;
 	}
 
+=======
+>>>>>>> .their
 	getTemplateId(): string {
 		return SESSION_TEMPLATE_ID;
 	}
@@ -230,6 +327,12 @@
 		return super.compare(a, b);
 	}
 
+<<<<<<< .our
+=======
+	/**
+	 * Return an ordinal number for folders
+	 */
+>>>>>>> .their
 	private category(item: BaseTreeItem): number {
 
 		// workspace scripts come at the beginning in "folder" order
@@ -286,6 +389,12 @@
 
 		let x: BaseTreeItem = this;
 		path.split(/[\/\\]/).forEach((segment, i) => {
+<<<<<<< .our
+=======
+			if (segment.length === 0) {	// macOS or unix path
+				segment = '/';
+			}
+>>>>>>> .their
 			if (i === 0 && folder) {
 				x = x.createIfNeeded(folder.name, parent => new RootFolderTreeItem(parent, folder));
 			} else if (i === 0 && url) {
@@ -377,18 +486,27 @@
 
 			clearTimeout(timeout);
 			timeout = setTimeout(() => {
+<<<<<<< .our
 				if (this.tree) {
 					this.tree.refresh(root, true);
 				}
+=======
+				this.tree.refresh(root, true);
+>>>>>>> .their
 			}, 300);
 		}));
 
 		this.disposables.push(this.debugService.onDidEndSession(session => {
+<<<<<<< .our
 			clearTimeout(timeout);
 			root.remove(session.getId());
 			if (this.tree) {
 				this.tree.refresh(root, false);
 			}
+=======
+			root.remove(session.getId());
+			this.tree.refresh(root, false);
+>>>>>>> .their
 		}));
 	}
 
@@ -422,7 +540,11 @@
 	}
 
 	getParent(tree: ITree, element: any): TPromise<any> {
+<<<<<<< .our
 		return element.getParent();
+=======
+		return TPromise.as(null);
+>>>>>>> .their
 	}
 
 	shouldAutoexpand?(tree: ITree, element: any): boolean {
@@ -486,17 +608,29 @@
 	}
 
 	private renderSession(session: SessionTreeItem, data: ISessionTemplateData): void {
+<<<<<<< .our
 		data.session.title = nls.localize('loadedScriptsSession', "Session");
+=======
+		data.session.title = 'session';
+>>>>>>> .their
 		data.session.textContent = session.getLabel();
 	}
 
 	private renderSource(source: BaseTreeItem, data: ISourceTemplateData): void {
+<<<<<<< .our
 		data.source.title = source.getHoverLabel();
+=======
+		data.source.title = 'source';
+>>>>>>> .their
 		data.source.textContent = source.getLabel();
 	}
 
 	private renderNode(node: BaseTreeItem, data: INodeTemplateData): void {
+<<<<<<< .our
 		data.node.title = node.getHoverLabel();
+=======
+		data.node.title = 'node';
+>>>>>>> .their
 		data.node.textContent = node.getLabel();
 	}
 }
changed in both
  base   100644 8db643264cde812839cbc62922a7879e95479774 src/vs/workbench/parts/debug/common/debug.ts
  our    100644 6af33b36e60bc4ed9fd12760518ea3ad7586a202 src/vs/workbench/parts/debug/common/debug.ts
  their  100644 0d62b0df93db2a6b66222a2de470c977e720fab0 src/vs/workbench/parts/debug/common/debug.ts
changed in both
  base   100644 3ec47d67994408fceb068a8f41544f0a7d6165b6 src/vs/workbench/parts/debug/electron-browser/debugService.ts
  our    100644 a5e2dcee7a0eb14bc388d84c6c7cac591067b1b2 src/vs/workbench/parts/debug/electron-browser/debugService.ts
  their  100644 1e4a2db28bceab742e1469359b45090d46b7447c src/vs/workbench/parts/debug/electron-browser/debugService.ts
changed in both
  base   100644 1e7a2fd9db2f6018839848dd26fd099693f51bfc src/vs/workbench/parts/debug/electron-browser/rawDebugSession.ts
  our    100644 93891ff0b4ea9e2eac2605dcf9af9a084b4cb222 src/vs/workbench/parts/debug/electron-browser/rawDebugSession.ts
  their  100644 5e9785e36c85aa19267c06900fafe388080b843e src/vs/workbench/parts/debug/electron-browser/rawDebugSession.ts
changed in both
  base   100644 ceb4cc25a49bf74d4fc737342e0ffec5c925c680 src/vs/workbench/parts/debug/test/common/mockDebug.ts
  our    100644 f92a322a3a036508e656bfcc26cb44dbda385b53 src/vs/workbench/parts/debug/test/common/mockDebug.ts
  their  100644 b186fce4eb8018b946dbb44a1fd900be4ffa21a2 src/vs/workbench/parts/debug/test/common/mockDebug.ts
