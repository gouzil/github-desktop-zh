merged
  result 100644 5a070d6acd031c5302f80713aa624bea695a3890 src/typings/v8-inspect-profiler.d.ts
  our    100644 50449c7ae10dff078a4e6e78013fe4f399b69e0c src/typings/v8-inspect-profiler.d.ts
@@ -31,7 +31,18 @@
 		stop(afterDelay?: number): PromiseLike<ProfileResult>;
 	}
 
-	export function startProfiling(options: { port: number, tries?: number, retyWait?: number }): PromiseLike<ProfilingSession>;
+	export interface Target {
+		description: string,
+    	devtoolsFrontendUrl: string,
+		id: string,
+		title: string,
+		type: string,
+		url: string,
+		webSocketDebuggerUrl: string
+	}
+
+	export function listTabs(options: { port: number, tries?: number, retyWait?: number }): PromiseLike<Target[]>;
+	export function startProfiling(options: { port: number, tries?: number, retyWait?: number, chooseTab?: (targets: Target[]) => any }): PromiseLike<ProfilingSession>;
 	export function writeProfile(profile: ProfileResult, name?: string): PromiseLike<void>;
 	export function rewriteAbsolutePaths(profile, replaceWith?);
 }
changed in both
  base   100644 6f979c4c459b9e1de0a15a582215b4656decfa0d src/vs/base/common/strings.ts
  our    100644 5cb6ea767546631fc484ca1e7c18929880db834d src/vs/base/common/strings.ts
  their  100644 c6d3d91d9033f3a6b6ad3e1ceb38fcfed130994c src/vs/base/common/strings.ts
@@ -21,7 +21,7 @@
 /**
  * @returns the provided number with the given number of preceding zeros.
  */
-export function pad(n: number, l: number, char: string = '0'): string {
+export function pad(n: number | string, l: number, char: string = '0'): string {
 	let str = '' + n;
 	let r = [str];
 
changed in both
  base   100644 94e6cfb01dc526cc409b2a5ff8350029e9a40d8d src/vs/base/node/ports.ts
  our    100644 49f2f47b1551add965a0be8e6129de1eabedc3c3 src/vs/base/node/ports.ts
  their  100644 cc6389a5ff65173d9ef965dd8d41f6bab8d9fa05 src/vs/base/node/ports.ts
@@ -41,6 +41,11 @@
 	});
 }
 
+export function findRandomFreePort(): Thenable<number> {
+	const port = Math.floor(Math.random() * (20000 - 9000) + 9000);
+	return findFreePort(port, 10, 5000);
+}
+
 function doFindFreePort(startPort: number, giveUpAfter: number, clb: (port: number) => void): void {
 	if (giveUpAfter === 0) {
 		return clb(0);
changed in both
  base   100644 23813aeaec64938af444d5c2521a9dc21247ecc7 src/vs/code/electron-main/diagnostics.ts
  our    100644 3bb9e182899533e24fe8967328f2174571df8e45 src/vs/code/electron-main/diagnostics.ts
  their  100644 120c4a6afa432d5793c5cb454fdf1084510504fd src/vs/code/electron-main/diagnostics.ts
@@ -123,6 +123,9 @@
 	return systemInfo;
 }
 
+const DEBUG_FLAGS_PATTERN = /\s--(inspect|debug)(-brk)?(=([0-9]+))/;
+const RENDERER_DEBUG_PATTERN = /--remote-debugging-port=([0-9]+)/;
+
 export function printDiagnostics(info: IMainProcessInfo): Promise<any> {
 	return listProcesses(info.mainPID).then(rootProcess => {
 
@@ -269,7 +272,7 @@
 
 	const output: string[] = [];
 
-	output.push('CPU %\tMem MB\t   PID\tProcess');
+	output.push('CPU %\tMem MB\t   PID\t Port\tProcess');
 
 	if (rootProcess) {
 		formatProcessItem(mapPidToWindowTitle, output, rootProcess, 0);
@@ -278,7 +281,7 @@
 	return output.join('\n');
 }
 
-function formatProcessItem(mapPidToWindowTitle: Map<number, string>, output: string[], item: ProcessItem, indent: number): void {
+function formatProcessItem(mapPidToWindowTitle: Map<number, string>, output: string[], item: ProcessItem, indent: number, rendererDebugPort?: string): void {
 	const isRoot = (indent === 0);
 
 	const MB = 1024 * 1024;
@@ -287,6 +290,10 @@
 	let name: string;
 	if (isRoot) {
 		name = `${product.applicationName} main`;
+		let matches = RENDERER_DEBUG_PATTERN.exec(item.cmd);
+		if (matches && matches.length === 2) {
+			rendererDebugPort = matches[1];
+		}
 	} else {
 		name = `${repeat('  ', indent)} ${item.name}`;
 
@@ -294,11 +301,22 @@
 			name = `${name} (${mapPidToWindowTitle.get(item.pid)})`;
 		}
 	}
+
+	const matches = DEBUG_FLAGS_PATTERN.exec(item.cmd);
+	let debugPort = '';
+	if (matches && matches.length === 5 && matches[4]) {
+		debugPort = matches[4];
+	}
+
+	if ((item.name === 'window' || item.name === 'shared-process') && rendererDebugPort) {
+		debugPort = rendererDebugPort;
+	}
+
 	const memory = process.platform === 'win32' ? item.mem : (os.totalmem() * (item.mem / 100));
-	output.push(`${pad(Number(item.load.toFixed(0)), 5, ' ')}\t${pad(Number((memory / MB).toFixed(0)), 6, ' ')}\t${pad(Number((item.pid).toFixed(0)), 6, ' ')}\t${name}`);
+	output.push(`${pad(Number(item.load.toFixed(0)), 5, ' ')}\t${pad(Number((memory / MB).toFixed(0)), 6, ' ')}\t${pad(Number((item.pid).toFixed(0)), 6, ' ')}\t${pad(debugPort, 6, ' ')}\t${name}`);
 
 	// Recurse into children if any
 	if (Array.isArray(item.children)) {
-		item.children.forEach(child => formatProcessItem(mapPidToWindowTitle, output, child, indent + 1));
+		item.children.forEach(child => formatProcessItem(mapPidToWindowTitle, output, child, indent + 1, rendererDebugPort));
 	}
 }
changed in both
  base   100644 4da3a6af5fca5cdb9a6db0c81d1c7e3165817537 src/vs/code/node/cli.ts
  our    100644 3ca3fd9ec9479918271b1fd5d7cd262e40dae630 src/vs/code/node/cli.ts
  their  100644 379628b02bf782cdeb08cdc5aa33088ac0497984 src/vs/code/node/cli.ts
@@ -14,9 +14,10 @@
 import * as os from 'os';
 import * as fs from 'fs';
 import { whenDeleted } from 'vs/base/node/pfs';
-import { findFreePort } from 'vs/base/node/ports';
+import { findFreePort, findRandomFreePort } from 'vs/base/node/ports';
 import { resolveTerminalEncoding } from 'vs/base/node/encoding';
 import * as iconv from 'iconv-lite';
+import { cpuProfile } from './cpuProfile';
 import { writeFileAndFlushSync } from 'vs/base/node/extfs';
 import { isWindows } from 'vs/base/common/platform';
 
@@ -49,10 +50,9 @@
 	// Version Info
 	else if (args.version) {
 		console.log(`${pkg.version}\n${product.commit}\n${process.arch}`);
-	}
-
-	// Extensions Management
-	else if (shouldSpawnCliProcess(args)) {
+	} else if (args['cpu-profile']) {
+		return cpuProfile(args['cpu-profile']);
+	} else if (shouldSpawnCliProcess(args)) {
 		const mainCli = new TPromise<IMainCli>(c => require(['vs/code/node/cliProcessMain'], c));
 		return mainCli.then(cli => cli.main(args));
 	}
@@ -306,11 +306,18 @@
 			});
 		}
 
+<<<<<<< .our
 		if (args['js-flags']) {
 			const match = /max_old_space_size=(\d+)/g.exec(args['js-flags']);
 			if (match && !args['max-memory']) {
 				argv.push(`--max-memory=${match[1]}`);
 			}
+=======
+		if (args['inspect-all']) {
+			argv.push(`--inspect=${await findRandomFreePort()}`);
+			argv.push(`--remote-debugging-port=${await findRandomFreePort()}`);
+			argv.push(`--inspect-search=${await findRandomFreePort()}`);
+>>>>>>> .their
 		}
 
 		const options = {
@@ -318,9 +325,13 @@
 			env
 		};
 
+<<<<<<< .our
 		if (typeof args['upload-logs'] !== 'undefined') {
 			options['stdio'] = ['pipe', 'pipe', 'pipe'];
 		} else if (!verbose) {
+=======
+		if (!verbose && !args['inspect-all']) {
+>>>>>>> .their
 			options['stdio'] = 'ignore';
 		}
 
added in remote
  their  100644 ec34c2292d4767e3efcb809a21dd8825d7141148 src/vs/code/node/cpuProfile.ts
@@ -0,0 +1,104 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import * as paths from 'path';
+import * as os from 'os';
+import { TPromise } from 'vs/base/common/winjs.base';
+import * as readline from 'readline';
+import { Target } from 'v8-inspect-profiler';
+import { isNumber } from 'vs/base/common/types';
+
+async function chooseRendererProcess(targets: Target[]): Promise<number> {
+	if (!targets || targets.length === 0) {
+		return TPromise.as(-1);
+	}
+	if (targets.length > 1) {
+		let askForChooseTab = '? Which process do you want to profile\n';
+		for (let i = 0, len = targets.length; i < len; i++) {
+			if (targets[i].title.indexOf('sharedProcess.html') === 0) {
+				askForChooseTab += `${i}. shared-process\n`;
+			} else {
+				askForChooseTab += `${i}. window (${targets[i].title})\n`;
+			}
+		}
+
+		console.log(askForChooseTab);
+
+		return new TPromise<number>((resolve, reject) => {
+			var rl = readline.createInterface(process.stdin, process.stdout);
+			rl.setPrompt('> ');
+			rl.prompt();
+			let targetTab = -1;
+			rl.on('line', function (line) {
+				let tabNumber = Number(line);
+				if (isNumber(tabNumber) && tabNumber >= 0 && tabNumber < targets.length) {
+					targetTab = tabNumber;
+					rl.close();
+				} else {
+					console.log('Please provide valid number ;)');
+					rl.prompt();
+				}
+			}).on('close', function () {
+				if (targetTab === -1) {
+					process.exit(0);
+				} else {
+					resolve(targetTab);
+				}
+			});
+		});
+	} else {
+		return TPromise.as(0);
+	}
+}
+
+export async function cpuProfile(debugPortStr: string): Promise<void> {
+	let debugPort = Number(debugPortStr);
+
+	if (!isNumber(debugPort)) {
+		console.error(`${debugPort} is invalid. Run with "--status" to get list of valid ports.`);
+		return;
+	}
+
+	const profiler = await import('v8-inspect-profiler');
+	const targets = await profiler.listTabs({ port: debugPort });
+	if (targets.length < 1) {
+		return;
+	}
+
+	return chooseRendererProcess(targets).then(async tabNumber => {
+		let options;
+		if (tabNumber >= 0 && tabNumber < targets.length) {
+			options = {
+				port: debugPort, chooseTab: (targets) => {
+					const target = targets[tabNumber];
+					return target;
+				}
+			};
+		} else {
+			options = { port: debugPort };
+		}
+
+		console.log('Profiling started, press Ctrl+C to stop.');
+		const targetProcess = await profiler.startProfiling(options);
+		const filenamePrefix = paths.join(os.homedir(), `CPU-${new Date().toISOString().replace(/[\-:]/g, '')}.cpuprofile`);
+
+		return new TPromise(c => {
+			process.on('SIGINT', async () => {
+				let suffix = '';
+				let profileTargetProcess = await targetProcess.stop();
+
+				if (!process.env['VSCODE_DEV']) {
+					profileTargetProcess = profiler.rewriteAbsolutePaths(profileTargetProcess, 'piiRemoved');
+					suffix = '.txt';
+				}
+
+				await profiler.writeProfile(profileTargetProcess, `${filenamePrefix}${suffix}`);
+				console.log(`\nCPU Profile written to ${filenamePrefix}${suffix}`);
+				c(null);
+				process.exit(0);
+			});
+		});
+	});
+}
\ No newline at end of file
changed in both
  base   100644 d3fc28397ffb8b2c75af214abad3d4f5c47a01dd src/vs/platform/environment/common/environment.ts
  our    100644 52431b2e260012bfee9b7964e1e56089ce2601ab src/vs/platform/environment/common/environment.ts
  their  100644 8f453b2f9721da960e256e41f6171536bbf4295d src/vs/platform/environment/common/environment.ts
@@ -27,7 +27,11 @@
 	performance?: boolean;
 	'prof-startup'?: string;
 	'prof-startup-prefix'?: string;
+<<<<<<< .our
 	'prof-append-timers'?: string;
+=======
+	'cpu-profile'?: string;
+>>>>>>> .their
 	verbose?: boolean;
 	log?: string;
 	logExtensionHostCommunication?: boolean;
@@ -57,12 +61,17 @@
 	'disable-updates'?: string;
 	'disable-crash-reporter'?: string;
 	'skip-add-to-recently-opened'?: boolean;
+<<<<<<< .our
 	'max-memory'?: number;
 	'file-write'?: boolean;
 	'file-chmod'?: boolean;
 	'upload-logs'?: string;
 	'driver'?: string;
 	'driver-verbose'?: boolean;
+=======
+	'inspect-all'?: boolean;
+	'write-elevated-helper'?: boolean;
+>>>>>>> .their
 }
 
 export const IEnvironmentService = createDecorator<IEnvironmentService>('environmentService');
changed in both
  base   100644 d546e1511ecb750f414f79dbd1552ce1fb5b6db9 src/vs/platform/environment/node/argv.ts
  our    100644 7183c2471eb1043a8263fbc1a8a7863b41344622 src/vs/platform/environment/node/argv.ts
  their  100644 787b02337ea006a55db6acca211221d44ea94214 src/vs/platform/environment/node/argv.ts
@@ -33,8 +33,12 @@
 		'enable-proposed-api',
 		'export-default-configuration',
 		'install-source',
+<<<<<<< .our
 		'upload-logs',
 		'driver'
+=======
+		'cpu-profile'
+>>>>>>> .their
 	],
 	boolean: [
 		'help',
@@ -64,6 +68,7 @@
 		'disable-updates',
 		'disable-crash-reporter',
 		'skip-add-to-recently-opened',
+		'inspect-all',
 		'status',
 		'file-write',
 		'file-chmod',
@@ -177,8 +182,16 @@
 	'--inspect-extensions': localize('inspect-extensions', "Allow debugging and profiling of extensions. Check the developer tools for the connection URI."),
 	'--inspect-brk-extensions': localize('inspect-brk-extensions', "Allow debugging and profiling of extensions with the extension host being paused after start. Check the developer tools for the connection URI."),
 	'--disable-gpu': localize('disableGPU', "Disable GPU hardware acceleration."),
+<<<<<<< .our
 	'--upload-logs': localize('uploadLogs', "Uploads logs from current session to a secure endpoint."),
 	'--max-memory': localize('maxMemory', "Max memory size for a window (in Mbytes).")
+=======
+	'-s, --status': localize('status', "Print process usage and diagnostics information."),
+	'-v, --version': localize('version', "Print version."),
+	'-h, --help': localize('help', "Print usage."),
+	'--inspect-all': localize('inspect-all', "Start processes in debug mode and print debug ports to console"),
+	'--cpu-profile <port>': localize('cpu-profile', "Collect CPU profile from debug port. Run with \"--status\" to get list of valid ports.")
+>>>>>>> .their
 };
 
 export function formatOptions(options: { [name: string]: string; }, columns: number): string {
added in remote
  their  100644 e8dff05baeb722c39fe923f9427f07a46b8554b2 src/vs/workbench/parts/performance/electron-browser/cpu.contribution.ts
@@ -0,0 +1,42 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import { localize } from 'vs/nls';
+import { CommandsRegistry } from 'vs/platform/commands/common/commands';
+import { MenuRegistry, MenuId } from 'vs/platform/actions/common/actions';
+import { IWindowsService } from 'vs/platform/windows/common/windows';
+import { findFreePort } from 'vs/base/node/ports';
+
+CommandsRegistry.registerCommand('workbench.reload.debug', async accessor => {
+	const windowService = accessor.get(IWindowsService);
+
+	let argv = [];
+	const portMain = await findFreePort(9222, 10, 6000);
+	const portRenderer = await findFreePort(portMain + 1, 10, 6000);
+	const portExthost = await findFreePort(portRenderer + 1, 10, 6000);
+	const portSearch = await findFreePort(portExthost + 1, 10, 6000);
+
+	if (!portMain || !portRenderer || !portExthost || !portSearch) {
+		console.error('Failed to find free ports for profiler to connect to do.');
+		return;
+	}
+
+	argv.push('--inspect-all');
+	argv.push(`--inspect=${portMain}`);
+	argv.push(`--remote-debugging-port=${portRenderer}`);
+	argv.push(`--inspect-extensions=${portExthost}`);
+	argv.push(`--inspect-search=${portSearch}`);
+
+
+	windowService.relaunch({
+		addArgs: argv
+	});
+});
+
+MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: 'workbench.reload.debug', title: localize('workbench.reload.debug', "Reload Workspace in Debug Mode") } });
+
+MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: 'workbench.profile.debug', title: localize('workbench.profile.debug', "Profile Processes") } });
changed in both
  base   100644 2bf830a0f1becf0c6f78b71c997c1c10c6ba8818 src/vs/workbench/parts/terminal/electron-browser/terminalInstance.ts
  our    100644 04d9dcba251cf79c28429027cda3ca3b0c10a29c src/vs/workbench/parts/terminal/electron-browser/terminalInstance.ts
  their  100644 e6d96d1fecb50c092193e85e49f7fdbbb03b81c1 src/vs/workbench/parts/terminal/electron-browser/terminalInstance.ts
@@ -27,6 +27,7 @@
 import { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';
 import { ansiColorIdentifiers, TERMINAL_BACKGROUND_COLOR, TERMINAL_FOREGROUND_COLOR, TERMINAL_CURSOR_FOREGROUND_COLOR, TERMINAL_CURSOR_BACKGROUND_COLOR, TERMINAL_SELECTION_BACKGROUND_COLOR } from 'vs/workbench/parts/terminal/common/terminalColorRegistry';
 import { PANEL_BACKGROUND } from 'vs/workbench/common/theme';
+<<<<<<< .our
 import { IConfigurationService, ConfigurationTarget } from 'vs/platform/configuration/common/configuration';
 import { IEditorOptions } from 'vs/editor/common/config/editorOptions';
 import { INotificationService, Severity, IPromptChoice } from 'vs/platform/notification/common/notification';
@@ -39,6 +40,15 @@
 // which suggests the fallback DOM-based renderer
 const SLOW_CANVAS_RENDER_THRESHOLD = 50;
 const NUMBER_OF_FRAMES_TO_MEASURE = 20;
+=======
+import { IEnvironmentService } from 'vs/platform/environment/common/environment';
+import { findRandomFreePort } from 'vs/base/node/ports';
+import { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';
+import { IWorkspaceContextService, IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';
+
+/** The amount of time to consider terminal errors to be related to the launch */
+const LAUNCHING_DURATION = 500;
+>>>>>>> .their
 
 let Terminal: typeof XTermTerminal;
 
@@ -117,6 +127,7 @@
 		private readonly _configHelper: TerminalConfigHelper,
 		private _container: HTMLElement,
 		private _shellLaunchConfig: IShellLaunchConfig,
+<<<<<<< .our
 		@IContextKeyService private readonly _contextKeyService: IContextKeyService,
 		@IKeybindingService private readonly _keybindingService: IKeybindingService,
 		@INotificationService private readonly _notificationService: INotificationService,
@@ -127,6 +138,19 @@
 		@IConfigurationService private readonly _configurationService: IConfigurationService,
 		@ILogService private _logService: ILogService,
 		@IStorageService private readonly _storageService: IStorageService
+=======
+		@IContextKeyService private _contextKeyService: IContextKeyService,
+		@IKeybindingService private _keybindingService: IKeybindingService,
+		@IMessageService private _messageService: IMessageService,
+		@IPanelService private _panelService: IPanelService,
+		@IInstantiationService private _instantiationService: IInstantiationService,
+		@IClipboardService private _clipboardService: IClipboardService,
+		@IHistoryService private _historyService: IHistoryService,
+		@IThemeService private _themeService: IThemeService,
+		@IEnvironmentService private _envService: IEnvironmentService,
+		@IConfigurationResolverService private _configurationResolverService: IConfigurationResolverService,
+		@IWorkspaceContextService private _workspaceContextService: IWorkspaceContextService
+>>>>>>> .their
 	) {
 		this._disposables = [];
 		this._skipTerminalCommands = [];
@@ -141,6 +165,7 @@
 		this._logService.trace(`terminalInstance#ctor (id: ${this.id})`, this._shellLaunchConfig);
 
 		this._initDimensions();
+<<<<<<< .our
 		if (!this.shellLaunchConfig.isRendererOnly) {
 			this._createProcess();
 		} else {
@@ -163,12 +188,23 @@
 				this.updateAccessibilitySupport();
 			}
 		}));
+=======
+		this._initialCwd = this._getCwd(this._shellLaunchConfig, this._historyService.getLastActiveWorkspaceRoot('file'));
+		this._xtermReadyPromise = this._createProcessAndXterm();
+		this.attachToElement(this._container);
+>>>>>>> .their
 	}
 
 	public addDisposable(disposable: lifecycle.IDisposable): void {
 		this._disposables.push(disposable);
 	}
 
+	private async _createProcessAndXterm(): TPromise<void> {
+		let _createProcessPromise = this._envService.args['inspect-all'] ? this._createProcessInDebugMode() : TPromise.as(this._createProcess());
+		await _createProcessPromise;
+		await this._createXterm();
+	}
+
 	private _initDimensions(): void {
 		// The terminal panel needs to have been created
 		if (!this._container) {
@@ -300,6 +336,7 @@
 			this._xterm.writeln(this._shellLaunchConfig.initialText);
 		}
 		this._xterm.winptyCompatInit();
+<<<<<<< .our
 		this._xterm.on('linefeed', () => this._onLineFeed());
 		if (this._processManager) {
 			this._processManager.onProcessData(data => this._onProcessData(data));
@@ -349,6 +386,33 @@
 	}
 
 	public _attachToElement(container: HTMLElement): void {
+=======
+		this._xterm.on('lineFeed', () => this._onLineFeed());
+		this._xterm.on('data', (data) => {
+			if (this._processId) {
+				// Send data if the pty is ready
+				this._process.send({
+					event: 'input',
+					data
+				});
+			} else {
+				// If the pty is not ready, queue the data received from
+				// xterm.js until the pty is ready
+				this._preLaunchInputQueue += data;
+			}
+			return false;
+		});
+		this._linkHandler = this._instantiationService.createInstance(TerminalLinkHandler, this._xterm, platform.platform, this._initialCwd);
+		this._linkHandler.registerLocalLinkHandler();
+		this._instanceDisposables.push(this._themeService.onThemeChange(theme => this._updateTheme(theme)));
+	}
+
+	public attachToElement(container: HTMLElement): void {
+		// Only attach xterm.js to the DOM if the terminal panel has been opened before.
+		if (!container) {
+			return;
+		}
+>>>>>>> .their
 		this._xtermReadyPromise.then(() => {
 			if (this._wrapperElement) {
 				throw new Error('The terminal instance has already been attached to a container');
@@ -709,6 +773,7 @@
 		this._terminalHasTextContextKey.set(isActive && this.hasSelection());
 	}
 
+<<<<<<< .our
 	protected _createProcess(): void {
 		this._processManager = this._instantiationService.createInstance(TerminalProcessManager, this._id, this._configHelper);
 		this._processManager.onProcessReady(() => this._onProcessIdReady.fire(this));
@@ -716,6 +781,43 @@
 		this._processManager.createProcess(this._shellLaunchConfig, this._cols, this._rows);
 
 		this._processManager.onProcessData(data => this._onData.fire(data));
+=======
+	protected _createProcessInDebugMode() {
+		return findRandomFreePort().then(port => {
+			console.log(`Terminal process running in inspect mode using port: ${port}`);
+			this._createProcess(port);
+		});
+	}
+
+	protected _createProcess(port?: number): void {
+		const locale = this._configHelper.config.setLocaleVariables ? platform.locale : undefined;
+		if (!this._shellLaunchConfig.executable) {
+			this._configHelper.mergeDefaultShellPathAndArgs(this._shellLaunchConfig);
+		}
+
+		const lastActiveWorkspaceRootUri = this._historyService.getLastActiveWorkspaceRoot('file');
+
+		// Resolve env vars from config and shell
+		const lastActiveWorkspaceRoot = this._workspaceContextService.getWorkspaceFolder(lastActiveWorkspaceRootUri);
+		const platformKey = platform.isWindows ? 'windows' : (platform.isMacintosh ? 'osx' : 'linux');
+		const envFromConfig = TerminalInstance.resolveConfigurationVariables(this._configurationResolverService, { ...this._configHelper.config.env[platformKey] }, lastActiveWorkspaceRoot);
+		const envFromShell = TerminalInstance.resolveConfigurationVariables(this._configurationResolverService, { ...this._shellLaunchConfig.env }, lastActiveWorkspaceRoot);
+		this._shellLaunchConfig.env = envFromShell;
+
+		// Merge process env with the env from config
+		const parentEnv = { ...process.env };
+		TerminalInstance.mergeEnvironments(parentEnv, envFromConfig);
+
+		// Continue env initialization, merging in the env from the launch
+		// config and adding keys that are needed to create the process
+		const env = TerminalInstance.createTerminalEnv(parentEnv, this._shellLaunchConfig, this._initialCwd, locale, this._cols, this._rows);
+		this._process = cp.fork(Uri.parse(require.toUrl('bootstrap')).fsPath, ['--type=terminal'], {
+			env,
+			cwd: Uri.parse(path.dirname(require.toUrl('../node/terminalProcess'))).fsPath,
+			execArgv: port ? [`--inspect=${port}`] : []
+		});
+		this._processState = ProcessState.LAUNCHING;
+>>>>>>> .their
 
 		if (this._shellLaunchConfig.name) {
 			this.setTitle(this._shellLaunchConfig.name, false);
@@ -724,6 +826,25 @@
 			this.setTitle(this._shellLaunchConfig.executable, true);
 			this._messageTitleDisposable = this._processManager.onProcessTitle(title => this.setTitle(title ? title : '', true));
 		}
+<<<<<<< .our
+=======
+		this._process.on('message', message => this._onPtyMessage(message));
+		this._process.on('exit', exitCode => this._onPtyProcessExit(exitCode));
+		setTimeout(() => {
+			if (this._processState === ProcessState.LAUNCHING) {
+				this._processState = ProcessState.RUNNING;
+			}
+		}, LAUNCHING_DURATION);
+
+		if (platform.isWindows) {
+			this._processReady.then(() => {
+				if (!this._isDisposed) {
+					this._windowsShellHelper = new WindowsShellHelper(this._processId, this, this._xterm);
+				}
+			});
+		}
+	}
+>>>>>>> .their
 
 		if (platform.isWindows) {
 			this._processManager.ptyProcessReady.then(() => {
@@ -736,12 +857,33 @@
 		}
 	}
 
+<<<<<<< .our
 	private _onProcessData(data: string): void {
 		if (this._widgetManager) {
 			this._widgetManager.closeMessage();
 		}
 		if (this._xterm) {
 			this._xterm.write(data);
+=======
+	private _onPtyMessage(message: { type: string, content: string }): void {
+		if (message.type === 'data') {
+			if (this._widgetManager) {
+				this._widgetManager.closeMessage();
+			}
+			this._xtermReadyPromise.then(() => this._xterm.write(message.content));
+		} else if (message.type === 'pid') {
+			this._processId = parseInt(message.content, 10);
+
+			// Send any queued data that's waiting
+			if (this._preLaunchInputQueue.length > 0) {
+				this._process.send({
+					event: 'input',
+					data: this._preLaunchInputQueue
+				});
+				this._preLaunchInputQueue = null;
+			}
+			this._onProcessIdReady.fire(this);
+>>>>>>> .their
 		}
 	}
 
@@ -834,11 +976,18 @@
 		// Initialize new process
 		const oldTitle = this._title;
 		this._shellLaunchConfig = shell;
-		this._createProcess();
+		if (this._envService.args['inspect-all']) {
+			this._createProcessInDebugMode();
+		} else {
+			this._createProcess();
+		}
 		if (oldTitle !== this._title) {
 			this.setTitle(this._title, true);
 		}
+<<<<<<< .our
 		this._processManager.onProcessData(data => this._onProcessData(data));
+=======
+>>>>>>> .their
 
 		// Clean up waitOnExit state
 		if (this._isExiting && this._shellLaunchConfig.waitOnExit) {
@@ -846,8 +995,6 @@
 			this._isExiting = false;
 		}
 
-		// Set the new shell launch config
-		this._shellLaunchConfig = shell;
 	}
 
 	private _sendRendererInput(input: string): void {
removed in local
  base   100644 a7f066b25bd56c0e72dcf449320bc7d719933150 src/vs/workbench/parts/terminal/test/electron-browser/terminalInstance.test.ts
  their  100644 2dbfc9385382adb94e61d3919e48055fa0599610 src/vs/workbench/parts/terminal/test/electron-browser/terminalInstance.test.ts
changed in both
  base   100644 4e881ab0b2ffa612f2278abbf2e1c43cbbf0e529 src/vs/workbench/services/extensions/electron-browser/extensionHost.ts
  our    100644 e30e323957d4065215ca39593ac4ac26251c0480 src/vs/workbench/services/extensions/electron-browser/extensionHost.ts
  their  100644 26db4cfa8d58bd4c934c8822c6afe815770e3ed7 src/vs/workbench/services/extensions/electron-browser/extensionHost.ts
@@ -10,7 +10,12 @@
 import * as objects from 'vs/base/common/objects';
 import { TPromise } from 'vs/base/common/winjs.base';
 import { isWindows, isLinux } from 'vs/base/common/platform';
+<<<<<<< .our
 import { findFreePort } from 'vs/base/node/ports';
+=======
+import { findRandomFreePort, findFreePort } from 'vs/base/node/ports';
+import { IMessageService, Severity } from 'vs/platform/message/common/message';
+>>>>>>> .their
 import { ILifecycleService, ShutdownEvent } from 'vs/platform/lifecycle/common/lifecycle';
 import { IWindowsService, IWindowService } from 'vs/platform/windows/common/windows';
 import { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';
@@ -289,12 +294,17 @@
 		} else {
 			return TPromise.as({ expected: undefined, actual: 0 });
 		}
+
+		const findPort = this._environmentService.args['inspect-all'] ? findRandomFreePort() : findFreePort(startPort, 10 /* try 10 ports */, 5000 /* try up to 5 seconds */);
+
 		return new TPromise((c, e) => {
-			return findFreePort(startPort, 10 /* try 10 ports */, 5000 /* try up to 5 seconds */).then(port => {
+			return findPort.then(port => {
 				if (!port) {
 					console.warn('%c[Extension Host] %cCould not find a free port for debugging', 'color: blue', 'color: black');
 				} else {
-					if (expected && port !== expected) {
+					if (this._environmentService.args['inspect-all']) {
+						console.log(`Extension host running in inspect mode using port: ${port}`);
+					} else if (expected && port !== expected) {
 						console.warn(`%c[Extension Host] %cProvided debugging port ${expected} is not free, using ${port} instead.`, 'color: blue', 'color: black');
 					}
 					if (this._isExtensionDevDebugBrk) {
changed in both
  base   100644 8b75deae37f611d9abe4c41ad2f8af9a234ac0f9 src/vs/workbench/workbench.main.ts
  our    100644 184ccb27ce759508b970ffbffaf64adb3d96ca2f src/vs/workbench/workbench.main.ts
  their  100644 f82071c76a684e8774bc2f8df7a4da7e86c8528e src/vs/workbench/workbench.main.ts
@@ -124,6 +124,7 @@
 import 'vs/workbench/parts/surveys/electron-browser/languageSurveys.contribution';
 
 import 'vs/workbench/parts/performance/electron-browser/performance.contribution';
+import 'vs/workbench/parts/performance/electron-browser/cpu.contribution';
 
 import 'vs/workbench/parts/cli/electron-browser/cli.contribution';
 
