changed in both
  base   100644 70c4b3ae231d8ff01a89e68336202be6b3ef6030 src/vs/base/common/paths.ts
  our    100644 e5ed22fb7b905feb482624e3e7f407091cdf1024 src/vs/base/common/paths.ts
  their  100644 af5284647d721f4363aa4adb42f559f2b7aaff82 src/vs/base/common/paths.ts
@@ -319,6 +319,9 @@
 }
 
 export function isEqual(pathA: string, pathB: string, ignoreCase?: boolean): boolean {
+	pathA = normalize(pathA);
+	pathB = normalize(pathB);
+
 	const identityEquals = (pathA === pathB);
 	if (!ignoreCase || identityEquals) {
 		return identityEquals;
@@ -344,6 +347,9 @@
 		return false;
 	}
 
+	path = normalize(path);
+	candidate = normalize(candidate);
+
 	if (ignoreCase) {
 		const beginsWith = startsWithIgnoreCase(path, candidate);
 		if (!beginsWith) {
changed in both
  base   100644 45814e12d24d6b98f0f284268c26935fcf801218 src/vs/base/common/resources.ts
  our    100644 53357fe29f5f8919d794f7850dfaffd61f179591 src/vs/base/common/resources.ts
  their  100644 48651112bbaf7d0e735714e736363379ae7e090f src/vs/base/common/resources.ts
@@ -5,11 +5,15 @@
 'use strict';
 
 import * as paths from 'vs/base/common/paths';
+<<<<<<< .our
 import URI from 'vs/base/common/uri';
 import { equalsIgnoreCase } from 'vs/base/common/strings';
 import { Schemas } from 'vs/base/common/network';
 import { isLinux, isWindows } from 'vs/base/common/platform';
 import { CharCode } from 'vs/base/common/charCode';
+=======
+import uri from 'vs/base/common/uri';
+>>>>>>> .their
 
 export function getComparisonKey(resource: URI): string {
 	return hasToIgnoreCase(resource) ? resource.toString().toLowerCase() : resource.toString();
@@ -56,11 +60,11 @@
 		return false;
 	}
 
-	if (ignoreCase) {
-		return equalsIgnoreCase(first.toString(), second.toString());
+	if (first.scheme === second.scheme && first.authority === second.authority) {
+		return paths.isEqual(first.path, second.path, ignoreCase);
 	}
 
-	return first.toString() === second.toString();
+	return false;
 }
 
 export function basename(resource: URI): string {
changed in both
  base   100644 afcf1bbefb3cce59b98b033038529b6e8de501d3 src/vs/workbench/parts/files/common/explorerModel.ts
  our    100644 49d64d0a561cfc89077f412464843a7b0f047e1f src/vs/workbench/parts/files/common/explorerModel.ts
  their  100644 31fc24bd827444a06de0e8ae026f419f50a68e14 src/vs/workbench/parts/files/common/explorerModel.ts
@@ -7,7 +7,6 @@
 
 import URI from 'vs/base/common/uri';
 import * as paths from 'vs/base/common/paths';
-import * as resources from 'vs/base/common/resources';
 import { ResourceMap } from 'vs/base/common/map';
 import { isLinux } from 'vs/base/common/platform';
 import { IFileStat } from 'vs/platform/files/common/files';
@@ -157,7 +156,11 @@
 			// the folder is fully resolved if either it has a list of children or the client requested this by using the resolveTo
 			// array of resource path to resolve.
 			stat.isDirectoryResolved = !!raw.children || (!!resolveTo && resolveTo.some((r) => {
+<<<<<<< .our
 				return resources.isEqualOrParent(r, stat.resource, resources.hasToIgnoreCase(r));
+=======
+				return !!stat.find(r);
+>>>>>>> .their
 			}));
 
 			// Recurse into children
changed in both
  base   100644 ea60112f840405e2c3afe63a982e63c94a691094 src/vs/workbench/parts/files/electron-browser/views/explorerView.ts
  our    100644 40850fe8f725373739fb0ea2990aa0abb55de3ae src/vs/workbench/parts/files/electron-browser/views/explorerView.ts
  their  100644 69078f74e0129c17abadd998f00a06510e8b4f83 src/vs/workbench/parts/files/electron-browser/views/explorerView.ts
@@ -41,8 +41,12 @@
 import { DelayedDragHandler } from 'vs/base/browser/dnd';
 import { Schemas } from 'vs/base/common/network';
 import { INotificationService } from 'vs/platform/notification/common/notification';
+<<<<<<< .our
 import { IEditorService } from 'vs/workbench/services/editor/common/editorService';
 import { IViewletPanelOptions } from 'vs/workbench/browser/parts/views/panelViewlet';
+=======
+import { equalsIgnoreCase } from 'vs/base/common/strings';
+>>>>>>> .their
 
 export interface IExplorerViewOptions extends IViewletViewOptions {
 	viewletState: FileViewletState;
@@ -879,11 +883,15 @@
 	private getResolvedDirectories(stat: ExplorerItem, resolvedDirectories: URI[]): void {
 		if (stat.isDirectoryResolved) {
 			if (!stat.isRoot) {
-
+				const areEqual = (first: string, second: string) => isLinux ? first === second : equalsIgnoreCase(first, second);
 				// Drop those path which are parents of the current one
 				for (let i = resolvedDirectories.length - 1; i >= 0; i--) {
-					const resource = resolvedDirectories[i];
-					if (resources.isEqualOrParent(stat.resource, resource, !isLinux /* ignorecase */)) {
+					const resourceStr = resolvedDirectories[i].toString();
+					let statToCompare = stat;
+					while (statToCompare && !areEqual(statToCompare.resource.toString(), resourceStr)) {
+						statToCompare = statToCompare.parent;
+					}
+					if (statToCompare) {
 						resolvedDirectories.splice(i);
 					}
 				}
