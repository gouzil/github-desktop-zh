changed in both
  base   100644 8bd391086c63e7d2c0212c0525f2937ee7bfb4da build/builtInExtensions.json
  our    100644 b3efcd2cc657706605008661521b555c93a32c16 build/builtInExtensions.json
  their  100644 ffd89036c8803c4cd97ebe92149bd3d48d2cba51 build/builtInExtensions.json
@@ -6,7 +6,11 @@
 	},
 	{
 		"name": "ms-vscode.node-debug2",
+<<<<<<< .our
 		"version": "1.27.0",
+=======
+		"version": "1.25.6",
+>>>>>>> .their
 		"repo": "https://github.com/Microsoft/vscode-node-debug2"
 	}
 ]
changed in both
  base   100644 846455906afa95e037dce6798b5213966ce8222d build/win32/code.iss
  our    100644 4be0ea854b517dc4646718ab1545b6dfa704cf00 build/win32/code.iss
  their  100644 40a402dfb4dc4799a91a25f70178ced5a46cf55d build/win32/code.iss
changed in both
  base   100644 5feec27bcfc2c4423c8b8df0ea93b29e4a03f1f7 extensions/typescript-language-features/src/features/refactor.ts
  our    100644 bdc5d4eb25e59b5aa85a3091db10f2ddd3528cf0 extensions/typescript-language-features/src/features/refactor.ts
  their  100644 c4bc4b58116fd214087fb5dd24aecf94330c65b5 extensions/typescript-language-features/src/features/refactor.ts
@@ -12,7 +12,11 @@
 import TelemetryReporter from '../utils/telemetry';
 import * as typeConverters from '../utils/typeConverters';
 import FormattingOptionsManager from './fileConfigurationManager';
+<<<<<<< .our
 import { nulToken } from '../utils/cancellation';
+=======
+import TelemetryReporter from '../utils/telemetry';
+>>>>>>> .their
 
 
 class ApplyRefactoringCommand implements Command {
changed in both
  base   100644 ac25ee879a5702b5417dbfcd118e424f1f6dcf09 extensions/typescript-language-features/src/features/updatePathsOnRename.ts
  our    100644 44c05cd7b4a3cb2ce3e58d0e3c657b60db530ec0 extensions/typescript-language-features/src/features/updatePathsOnRename.ts
  their  100644 6f2d1265275352fbd64631ff254616c125d2e07a extensions/typescript-language-features/src/features/updatePathsOnRename.ts
@@ -81,6 +81,7 @@
 		this.client.bufferSyncSupport.closeResource(targetResource);
 		this.client.bufferSyncSupport.openTextDocument(document);
 
+<<<<<<< .our
 		if (!this.client.apiVersion.gte(API.v300) && !fs.lstatSync(newResource.fsPath).isDirectory()) {
 			// Workaround for https://github.com/Microsoft/vscode/issues/52967
 			// Never attempt to update import paths if the file does not contain something the looks like an export
@@ -95,6 +96,16 @@
 			} catch {
 				// noop
 			}
+=======
+		// Workaround for https://github.com/Microsoft/vscode/issues/52967
+		// Never attempt to update import paths if the file does not contain something the looks like an export
+		const tree = await this.client.execute('navtree', { file: newFile });
+		const hasExport = (node: Proto.NavigationTree): boolean => {
+			return !!node.kindModifiers.match(/\bexport\b/g) || !!(node.childItems && node.childItems.some(hasExport));
+		};
+		if (!tree.body || !tree.body || !hasExport(tree.body)) {
+			return;
+>>>>>>> .their
 		}
 
 		const edits = await this.getEditsForFileRename(targetFile, document, oldFile, newFile);
changed in both
  base   100644 1776fd1b8fc5bc4ce1baae7cccfb464b1443de0f extensions/typescript-language-features/src/languageProvider.ts
  our    100644 aad5f1a3a446efc89ad145359c7294d5f16b3463 extensions/typescript-language-features/src/languageProvider.ts
  their  100644 2d7cde5e693fbf4775515d3d4676e5aebb5588a3 extensions/typescript-language-features/src/languageProvider.ts
@@ -57,6 +57,7 @@
 
 		const cachedResponse = new CachedNavTreeResponse();
 
+<<<<<<< .our
 		this._register((await import('./features/completions')).register(selector, this.client, this.typingsStatus, this.fileConfigurationManager, this.commandManager));
 		this._register((await import('./features/definitions')).register(selector, this.client));
 		this._register((await import('./features/directiveCommentCompletions')).register(selector, this.client));
@@ -78,6 +79,29 @@
 		this._register((await import('./features/tagClosing')).register(selector, this.description.id, this.client));
 		this._register((await import('./features/typeDefinitions')).register(selector, this.client));
 		this._register((await import('./features/workspaceSymbols')).register(this.client, this.description.modeIds));
+=======
+		this.disposables.push((await import('./features/completions')).register(selector, this.client, this.typingsStatus, this.fileConfigurationManager, this.commandManager));
+		this.disposables.push((await import('./features/definitions')).register(selector, this.client));
+		this.disposables.push((await import('./features/directiveCommentCompletions')).register(selector, this.client));
+		this.disposables.push((await import('./features/documentHighlight')).register(selector, this.client));
+		this.disposables.push((await import('./features/documentSymbol')).register(selector, this.client));
+		this.disposables.push((await import('./features/folding')).register(selector, this.client));
+		this.disposables.push((await import('./features/formatting')).register(selector, this.description.id, this.client, this.fileConfigurationManager));
+		this.disposables.push((await import('./features/hover')).register(selector, this.client));
+		this.disposables.push((await import('./features/implementations')).register(selector, this.client));
+		this.disposables.push((await import('./features/implementationsCodeLens')).register(selector, this.description.id, this.client, cachedResponse));
+		this.disposables.push((await import('./features/jsDocCompletions')).register(selector, this.client, this.commandManager));
+		this.disposables.push((await import('./features/organizeImports')).register(selector, this.client, this.commandManager, this.fileConfigurationManager));
+		this.disposables.push((await import('./features/quickFix')).register(selector, this.client, this.fileConfigurationManager, this.commandManager, this.diagnosticsManager, this.telemetryReporter));
+		this.disposables.push((await import('./features/refactor')).register(selector, this.client, this.fileConfigurationManager, this.commandManager, this.telemetryReporter));
+		this.disposables.push((await import('./features/references')).register(selector, this.client));
+		this.disposables.push((await import('./features/referencesCodeLens')).register(selector, this.description.id, this.client, cachedResponse));
+		this.disposables.push((await import('./features/rename')).register(selector, this.client));
+		this.disposables.push((await import('./features/signatureHelp')).register(selector, this.client));
+		this.disposables.push((await import('./features/tagCompletion')).register(selector, this.client));
+		this.disposables.push((await import('./features/typeDefinitions')).register(selector, this.client));
+		this.disposables.push((await import('./features/workspaceSymbols')).register(this.client, this.description.modeIds));
+>>>>>>> .their
 	}
 
 	private configurationChanged(): void {
changed in both
  base   100644 6cc9a4487690489ab1f2354751ff2b534f871738 package.json
  our    100644 d0e982ce0b76c5b1b5eb02b673e459e47f3353a4 package.json
  their  100644 d5958777d145aaad96624386e3f1fcd8e387dce2 package.json
@@ -1,7 +1,12 @@
 {
   "name": "code-oss-dev",
+<<<<<<< .our
   "version": "1.27.0",
   "distro": "a4155d9780fbbc94ead6cb3017dd0fc3806c57b8",
+=======
+  "version": "1.25.1",
+  "distro": "7ee5cda9f4f44b2ba1f1ab290e48f86416914794",
+>>>>>>> .their
   "author": {
     "name": "Microsoft Corporation"
   },
changed in both
  base   100644 624bf52f0c1d18fe9c041c022bb840e64e96edd5 src/main.js
  our    100644 711217d64e2bdc43f33652d0bed34caa052cc331 src/main.js
  their  100644 7d265511c5057fed461012fddcb80006cedd137e src/main.js
changed in both
  base   100644 6f40d22b0a0d9c894087116b422adb9e70c03ec7 src/vs/base/browser/ui/grid/gridview.ts
  our    100644 98a9d0ef79cfcb2cccb8ea7ccc636cfb83feac92 src/vs/base/browser/ui/grid/gridview.ts
  their  100644 12619fee81c6d0fc863b46f8528e505c8d4b6492 src/vs/base/browser/ui/grid/gridview.ts
changed in both
  base   100644 50027d9528e91fb0da84b95631ae65eac487eaac src/vs/code/electron-browser/sharedProcess/sharedProcessMain.ts
  our    100644 547d1bd99d6c12bde8243ed7766b2a76f887438c src/vs/code/electron-browser/sharedProcess/sharedProcessMain.ts
  their  100644 6b7d5948a5b2b35ef32ed8aea90ac98d519d8692 src/vs/code/electron-browser/sharedProcess/sharedProcessMain.ts
@@ -43,6 +43,7 @@
 import { DialogChannelClient } from 'vs/platform/dialogs/common/dialogIpc';
 import { IDialogService } from 'vs/platform/dialogs/common/dialogs';
 import { IDisposable, dispose } from 'vs/base/common/lifecycle';
+import { DefaultURITransformer } from 'vs/base/common/uriIpc';
 
 export interface ISharedProcessConfiguration {
 	readonly machineId: string;
@@ -122,7 +123,7 @@
 
 		instantiationService2.invokeFunction(accessor => {
 			const extensionManagementService = accessor.get(IExtensionManagementService);
-			const channel = new ExtensionManagementChannel(extensionManagementService);
+			const channel = new ExtensionManagementChannel(extensionManagementService, DefaultURITransformer);
 			server.registerChannel('extensions', channel);
 
 			// clean up deprecated extensions
changed in both
  base   100644 36aaa892ac0481a15e372be30383908b56430da0 src/vs/editor/common/config/editorOptions.ts
  our    100644 3a51038033803eb3e426c81c8416ce7c260eb272 src/vs/editor/common/config/editorOptions.ts
  their  100644 8849311e709a14c62dc77ba93331e2969f08e1f5 src/vs/editor/common/config/editorOptions.ts
changed in both
  base   100644 abdc0f2abd00809e900889eaeac08528308457ff src/vs/editor/contrib/contextmenu/contextmenu.ts
  our    100644 75de2e1c6d180db9f729c47c03810626364e32ea src/vs/editor/contrib/contextmenu/contextmenu.ts
  their  100644 a3467f32a75eb8b3b2b61853dd3424719022f4e7 src/vs/editor/contrib/contextmenu/contextmenu.ts
changed in both
  base   100644 41851050fb938f6ddce65964858a77fbffd8f896 src/vs/monaco.d.ts
  our    100644 76dcf491ff9c1973ad61bf5d423713bb1a3b4e44 src/vs/monaco.d.ts
  their  100644 f39717228d6c28b007f82d48ebe7581f96081e75 src/vs/monaco.d.ts
changed in both
  base   100644 c4b1e0f958cfbbec0a0675bf94187c9848646de2 src/vs/platform/actions/common/actions.ts
  our    100644 f0ba370d22dfa5eb5e51b75ad8f132f6de5991a7 src/vs/platform/actions/common/actions.ts
  their  100644 e05cc8aa5fe0a0cfd259305f15f9ee1393d3104e src/vs/platform/actions/common/actions.ts
@@ -100,7 +100,6 @@
 	static readonly MenubarTasksMenu = new MenuId();
 	static readonly MenubarPreferencesMenu = new MenuId();
 	static readonly MenubarHelpMenu = new MenuId();
-	static readonly MenubarTerminalMenu = new MenuId();
 
 	readonly id: string = String(MenuId.ID++);
 }
changed in both
  base   100644 882efb29b222defebde1b72f6ecb3808fa3890fc src/vs/platform/extensionManagement/common/extensionManagementIpc.ts
  our    100644 4180af7c8a32f8775cf853609b970a93be7c71ba src/vs/platform/extensionManagement/common/extensionManagementIpc.ts
  their  100644 fa3e8c9e7c4e60e86a7cccff0479e63ba95ba136 src/vs/platform/extensionManagement/common/extensionManagementIpc.ts
@@ -33,7 +33,7 @@
 	onUninstallExtension: Event<IExtensionIdentifier>;
 	onDidUninstallExtension: Event<DidUninstallExtensionEvent>;
 
-	constructor(private service: IExtensionManagementService) {
+	constructor(private service: IExtensionManagementService, private uriTransformer: IURITransformer) {
 		this.onInstallExtension = buffer(service.onInstallExtension, true);
 		this.onDidInstallExtension = buffer(service.onDidInstallExtension, true);
 		this.onUninstallExtension = buffer(service.onUninstallExtension, true);
@@ -68,6 +68,10 @@
 	private _transform(extension: ILocalExtension): ILocalExtension {
 		return extension ? { ...extension, ...{ location: URI.revive(extension.location) } } : extension;
 	}
+
+	private _transform(extension: ILocalExtension): ILocalExtension {
+		return extension ? { ...extension, ...{ location: URI.revive(this.uriTransformer.transformIncoming(extension.location)) } } : extension;
+	}
 }
 
 export class ExtensionManagementChannelClient implements IExtensionManagementService {
changed in both
  base   100644 45c911be480d4252b5c2feb3f631a409891f6a5e src/vs/workbench/api/electron-browser/mainThreadTask.ts
  our    100644 a1b5243fa6c16f6ebb0cd18d9a073d52f0a691f4 src/vs/workbench/api/electron-browser/mainThreadTask.ts
  their  100644 754f6c50b7c309f9ef34d57f473e15fad3c532fc src/vs/workbench/api/electron-browser/mainThreadTask.ts
changed in both
  base   100644 28d47fa6e1503c8f44ed0d526835093c701dee55 src/vs/workbench/browser/parts/editor/editorPart.ts
  our    100644 eac59365565330f2b5e7b163c09f8ed328092b53 src/vs/workbench/browser/parts/editor/editorPart.ts
  their  100644 7ecdc0e61c001d20cff0489f4b1da532d006b30b src/vs/workbench/browser/parts/editor/editorPart.ts
removed in local
  base   100644 8d877ddba773ea69380df960922c3c7696804bd2 src/vs/workbench/browser/parts/menubar/menubar.contribution.ts
  their  100644 13625f8f7aa72355b66c9b041d1a66efd9442098 src/vs/workbench/browser/parts/menubar/menubar.contribution.ts
removed in local
  base   100644 af50fa982b4df3c156e9d16ac924dfb3c2972d28 src/vs/workbench/browser/parts/menubar/menubarPart.ts
  their  100644 1417435ebcfcc61bf7460d804d67d2f4c32c1ac7 src/vs/workbench/browser/parts/menubar/menubarPart.ts
changed in both
  base   100644 20bec65ef18bc36171eee04262e753b68e7662bc src/vs/workbench/common/editor/textEditorModel.ts
  our    100644 9b21ddc8f8f66d45e79211963d5f02e9dc7e9bc2 src/vs/workbench/common/editor/textEditorModel.ts
  their  100644 122b13bbd7da2f4454dc51dca86e22373449daad src/vs/workbench/common/editor/textEditorModel.ts
@@ -74,6 +74,7 @@
 	protected createTextEditorModel(value: ITextBufferFactory, resource?: URI, modeId?: string): TPromise<EditorModel> {
 		const firstLineText = this.getFirstLineText(value);
 		const mode = this.getOrCreateMode(this.modeService, modeId, firstLineText);
+
 		return TPromise.as(this.doCreateTextEditorModel(value, mode, resource));
 	}
 
@@ -141,7 +142,15 @@
 		return !!this.textEditorModelHandle;
 	}
 
+<<<<<<< .our
 	dispose(): void {
+=======
+	public isReadonly(): boolean {
+		return true;
+	}
+
+	public dispose(): void {
+>>>>>>> .their
 		if (this.modelDisposeListener) {
 			this.modelDisposeListener.dispose(); // dispose this first because it will trigger another dispose() otherwise
 			this.modelDisposeListener = null;
changed in both
  base   100644 c7033b68d95e91540e5a93f87828bde2d6a19834 src/vs/workbench/common/editor/untitledEditorModel.ts
  our    100644 9515354418102e8a1da9c4f6fb0af8ad6b6a19e6 src/vs/workbench/common/editor/untitledEditorModel.ts
  their  100644 8251ebe8bf4efff8891bf4a2064f8900af4d6029 src/vs/workbench/common/editor/untitledEditorModel.ts
@@ -205,7 +205,18 @@
 		this.contentChangeEventScheduler.schedule();
 	}
 
+<<<<<<< .our
 	isReadonly(): boolean {
 		return false;
+=======
+	public isReadonly(): boolean {
+		return false;
+	}
+
+	public dispose(): void {
+		super.dispose();
+
+		this.toDispose = dispose(this.toDispose);
+>>>>>>> .their
 	}
 }
changed in both
  base   100644 ac68914351a9871cc813542915a1d0e379a9d74a src/vs/workbench/electron-browser/workbench.ts
  our    100644 78add76eb65984b5c27c1721cb6482b45327e839 src/vs/workbench/electron-browser/workbench.ts
  their  100644 e24cc4a9842713ab60a2dbd7abd0afc655cc381f src/vs/workbench/electron-browser/workbench.ts
@@ -1204,10 +1204,14 @@
 	getTitleBarOffset(): number {
 		let offset = 0;
 		if (this.isVisible(Parts.TITLEBAR_PART)) {
+<<<<<<< .our
 			offset = this.workbenchLayout.partLayoutInfo.titlebar.height;
 			if (isMacintosh || this.menubarVisibility === 'hidden') {
 				offset /= browser.getZoomFactor();
 			}
+=======
+			offset = this.getContainer(Parts.TITLEBAR_PART).getBoundingClientRect().height;
+>>>>>>> .their
 		}
 
 		return offset;
changed in both
  base   100644 60d0dda62027c05d2add84db47791887b955a87e src/vs/workbench/parts/debug/electron-browser/debugEditorContribution.ts
  our    100644 f5f797f7475b4322938933d0cca753c44a16a722 src/vs/workbench/parts/debug/electron-browser/debugEditorContribution.ts
  their  100644 992050fd3387e420c0042756dd9180fde4e1afbb src/vs/workbench/parts/debug/electron-browser/debugEditorContribution.ts
@@ -47,7 +47,10 @@
 import { IDialogService } from 'vs/platform/dialogs/common/dialogs';
 import { getHover } from 'vs/editor/contrib/hover/getHover';
 import { IEditorHoverOptions } from 'vs/editor/common/config/editorOptions';
+<<<<<<< .our
 import { CancellationToken } from 'vs/base/common/cancellation';
+=======
+>>>>>>> .their
 
 const HOVER_DELAY = 300;
 const LAUNCH_JSON_REGEX = /launch\.json$/;
changed in both
  base   100644 784c508d624f46c7a3eb48d26984fdaa1a12c336 src/vs/workbench/parts/extensions/electron-browser/extensionTipsService.ts
  our    100644 6f9d4a74f5feb07a450341f183980ee0a10455a9 src/vs/workbench/parts/extensions/electron-browser/extensionTipsService.ts
  their  100644 fbaf724d4ad850ce9bc05970da8d952e476728c8 src/vs/workbench/parts/extensions/electron-browser/extensionTipsService.ts
changed in both
  base   100644 087b2553530b5e8800ff17836ff9495cd93ca4b5 src/vs/workbench/parts/extensions/electron-browser/extensionsActions.ts
  our    100644 645a6674587a8dca8742c11040e726c40a9702ff src/vs/workbench/parts/extensions/electron-browser/extensionsActions.ts
  their  100644 8af34dabf3b7a37d9cc7a493424a857e01eee402 src/vs/workbench/parts/extensions/electron-browser/extensionsActions.ts
@@ -909,7 +909,12 @@
 		@IExtensionsWorkbenchService private extensionsWorkbenchService: IExtensionsWorkbenchService,
 		@IWindowService private windowService: IWindowService,
 		@IExtensionService private extensionService: IExtensionService,
+<<<<<<< .our
 		@IExtensionEnablementService private extensionEnablementService: IExtensionEnablementService
+=======
+		@IExtensionEnablementService private extensionEnablementService: IExtensionEnablementService,
+		@IExtensionManagementServerService private extensionManagementServerService: IExtensionManagementServerService
+>>>>>>> .their
 	) {
 		super('extensions.reload', localize('reloadAction', "Reload"), ReloadAction.DisabledClass, false);
 		this.throttler = new Throttler();
@@ -945,6 +950,7 @@
 
 		if (installed && installed.local) {
 			if (runningExtension) {
+<<<<<<< .our
 				const isDifferentVersionRunning = this.extension.version !== runningExtension.version;
 				if (isDifferentVersionRunning && !isDisabled) {
 					// Requires reload to run the updated extension
@@ -959,6 +965,27 @@
 					this.tooltip = localize('postDisableTooltip', "Reload to deactivate");
 					this.reloadMessage = localize('postDisableMessage', "Reload this window to deactivate the extension '{0}'?", this.extension.displayName);
 					return;
+=======
+				const runningExtensionServer = this.extensionManagementServerService.getExtensionManagementServer(runningExtension.extensionLocation);
+				const installedExtensionServer = this.extensionManagementServerService.getExtensionManagementServer(installed.local.location);
+				const isSameLocation = runningExtensionServer.location.toString() === installedExtensionServer.location.toString();
+				if (isSameLocation) {
+					const isDifferentVersionRunning = this.extension.version !== runningExtension.version;
+					if (isDifferentVersionRunning && !isDisabled) {
+						// Requires reload to run the updated extension
+						this.enabled = true;
+						this.tooltip = localize('postUpdateTooltip', "Reload to update");
+						this.reloadMessage = localize('postUpdateMessage', "Reload this window to activate the updated extension '{0}'?", this.extension.displayName);
+						return;
+					}
+					if (isDisabled) {
+						// Requires reload to disable the extension
+						this.enabled = true;
+						this.tooltip = localize('postDisableTooltip', "Reload to deactivate");
+						this.reloadMessage = localize('postDisableMessage', "Reload this window to deactivate the extension '{0}'?", this.extension.displayName);
+						return;
+					}
+>>>>>>> .their
 				}
 			} else {
 				if (!isDisabled) {
changed in both
  base   100644 f90c3f99801ba2dae0efb6a0bad811b1664eadcb src/vs/workbench/parts/extensions/electron-browser/extensionsList.ts
  our    100644 f6663b8a9bc979c4729f336a07398208f26c4aab src/vs/workbench/parts/extensions/electron-browser/extensionsList.ts
  their  100644 1f032611899e9e86ac54575598b7213e0ed40eaa src/vs/workbench/parts/extensions/electron-browser/extensionsList.ts
@@ -148,7 +148,11 @@
 		this.extensionService.getExtensions().then(runningExtensions => {
 			if (installed && installed.local) {
 				const installedExtensionServer = this.extensionManagementServerService.getExtensionManagementServer(installed.local.location);
+<<<<<<< .our
 				const isSameExtensionRunning = runningExtensions.some(e => areSameExtensions(e, extension) && installedExtensionServer.authority === this.extensionManagementServerService.getExtensionManagementServer(e.extensionLocation).authority);
+=======
+				const isSameExtensionRunning = runningExtensions.some(e => areSameExtensions(e, extension) && installedExtensionServer.location.toString() === this.extensionManagementServerService.getExtensionManagementServer(e.extensionLocation).location.toString());
+>>>>>>> .their
 				toggleClass(data.root, 'disabled', !isSameExtensionRunning);
 			} else {
 				removeClass(data.root, 'disabled');
changed in both
  base   100644 2fd5061fa0ef59bea2ef621a53b4b18462cb2ab6 src/vs/workbench/parts/extensions/electron-browser/extensionsViews.ts
  our    100644 3bfb6cffba943bf68a9fa9c24fb1903c66dd3fad src/vs/workbench/parts/extensions/electron-browser/extensionsViews.ts
  their  100644 e61c9d9603ab58041119d9c9bfe55f32f2b9fecd src/vs/workbench/parts/extensions/electron-browser/extensionsViews.ts
changed in both
  base   100644 c8cf45c864489525c5ca5ac9282ec9bb725b9fc4 src/vs/workbench/parts/extensions/node/extensionsWorkbenchService.ts
  our    100644 dde370485c80817a804989c810abe2f1db9c0966 src/vs/workbench/parts/extensions/node/extensionsWorkbenchService.ts
  their  100644 b09e7e2b83eda3dce6e61d19528ca8c01654a074 src/vs/workbench/parts/extensions/node/extensionsWorkbenchService.ts
@@ -18,7 +18,11 @@
 import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
 import {
 	IExtensionManagementService, IExtensionGalleryService, ILocalExtension, IGalleryExtension, IQueryOptions, IExtensionManifest,
+<<<<<<< .our
 	InstallExtensionEvent, DidInstallExtensionEvent, LocalExtensionType, DidUninstallExtensionEvent, IExtensionEnablementService, IExtensionIdentifier, EnablementState, IExtensionManagementServerService
+=======
+	InstallExtensionEvent, DidInstallExtensionEvent, LocalExtensionType, DidUninstallExtensionEvent, IExtensionEnablementService, IExtensionIdentifier, EnablementState, IExtensionTipsService, ExtensionRecommendationSource, IExtensionRecommendation, IExtensionManagementServerService
+>>>>>>> .their
 } from 'vs/platform/extensionManagement/common/extensionManagement';
 import { getGalleryExtensionIdFromLocal, getGalleryExtensionTelemetryData, getLocalExtensionTelemetryData, areSameExtensions, getMaliciousExtensionsSet } from 'vs/platform/extensionManagement/common/extensionManagementUtil';
 import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
@@ -392,6 +396,10 @@
 		@ILogService private logService: ILogService,
 		@IProgressService2 private progressService: IProgressService2,
 		@IExtensionService private runtimeExtensionService: IExtensionService,
+<<<<<<< .our
+=======
+		@IExtensionTipsService private extensionTipsService: IExtensionTipsService,
+>>>>>>> .their
 		@IExtensionManagementServerService private extensionManagementServerService: IExtensionManagementServerService
 	) {
 		this.stateProvider = ext => this.getExtensionState(ext);
@@ -921,7 +929,11 @@
 				const installed = this.installed.filter(e => e.id === extension.id)[0];
 				if (installed) {
 					const server = this.extensionManagementServerService.getExtensionManagementServer(local.location);
+<<<<<<< .our
 					const existingLocal = installed.locals.filter(l => this.extensionManagementServerService.getExtensionManagementServer(l.location).authority === server.authority)[0];
+=======
+					const existingLocal = installed.locals.filter(l => this.extensionManagementServerService.getExtensionManagementServer(l.location).location.toString() === server.location.toString())[0];
+>>>>>>> .their
 					if (existingLocal) {
 						const locals = [...installed.locals];
 						locals.splice(installed.locals.indexOf(existingLocal), 1, local);
changed in both
  base   100644 3b4181ae3261b1fc6f1c4101e552a0737fdbc10b src/vs/workbench/parts/files/electron-browser/views/explorerViewer.ts
  our    100644 e0204febe1f4826a27ae39de6c0363afc38b208d src/vs/workbench/parts/files/electron-browser/views/explorerViewer.ts
  their  100644 3f363cbdbd20a083f904c78afcaef17a97acc0ee src/vs/workbench/parts/files/electron-browser/views/explorerViewer.ts
changed in both
  base   100644 2944b605a8c79c885040f28e9aea7b0f4ce8537e src/vs/workbench/parts/localizations/electron-browser/localizations.contribution.ts
  our    100644 052de75c677677d839ae5533561df1d9238d3218 src/vs/workbench/parts/localizations/electron-browser/localizations.contribution.ts
  their  100644 340f821e0f471b5fe1c903386515436c2aa2b392 src/vs/workbench/parts/localizations/electron-browser/localizations.contribution.ts
@@ -119,8 +119,17 @@
 					return;
 				}
 
+<<<<<<< .our
 				this.galleryService.query({ text: `tag:lp-${locale}` }).then(tagResult => {
 					if (tagResult.total === 0) {
+=======
+				const extensionIdPostfix = this.getPossibleChineseMapping(locale);
+				const ceintlExtensionSearch = this.galleryService.query({ names: [`MS-CEINTL.vscode-language-pack-${extensionIdPostfix}`], pageSize: 1 });
+				const tagSearch = this.galleryService.query({ text: `tag:lp-${locale}`, pageSize: 1 });
+
+				TPromise.join([ceintlExtensionSearch, tagSearch]).then(([ceintlResult, tagResult]) => {
+					if (ceintlResult.total === 0 && tagResult.total === 0) {
+>>>>>>> .their
 						return;
 					}
 
changed in both
  base   100644 d3e4aafb4b2489b636b76f422808928cdb0c614b src/vs/workbench/parts/preferences/browser/media/settingsEditor2.css
  our    100644 4110f029469987a0e2ace30d646c3e131c94b3df src/vs/workbench/parts/preferences/browser/media/settingsEditor2.css
  their  100644 b3b54ddc0cc8819221ba656ab1ea6db9f11777ed src/vs/workbench/parts/preferences/browser/media/settingsEditor2.css
@@ -145,6 +145,10 @@
 	display: none;
 }
 
+.settings-editor.search-mode > .settings-body .settings-tree-container {
+	max-width: 1100px;
+}
+
 .settings-editor.narrow > .settings-body .settings-toc-container {
 	display: none;
 }
changed in both
  base   100644 e86b79e6e54b305bee0ea2280bed13919947971b src/vs/workbench/parts/preferences/browser/settingsTree.ts
  our    100644 480a73351c9d0eb61722fdd061a2a00dcd5a9574 src/vs/workbench/parts/preferences/browser/settingsTree.ts
  their  100644 ac53257f46e9fb1fbbe9d88968ea4e3cc217a18b src/vs/workbench/parts/preferences/browser/settingsTree.ts
changed in both
  base   100644 f1dcc32c086e0e516f5ce4d907200f95e09c4b64 src/vs/workbench/parts/update/electron-browser/releaseNotesEditor.ts
  our    100644 c3c0cf180a612dfd0808a2c895eadf00aadfc391 src/vs/workbench/parts/update/electron-browser/releaseNotesEditor.ts
  their  100644 573b50f75fba7303d9887c5a26a3fab9a2b3bebb src/vs/workbench/parts/update/electron-browser/releaseNotesEditor.ts
