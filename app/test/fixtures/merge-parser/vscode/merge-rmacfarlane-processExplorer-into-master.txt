changed in both
  base   100644 ff35e0a5a6f58dfa842f69afa08f7d56aefdf191 build/gulpfile.vscode.js
  our    100644 d79071e56bcfc53b3448052cc08bd7247bd7e789 build/gulpfile.vscode.js
  their  100644 9fa7fc9f28f84549c66ac41a85fe209a85b579ed build/gulpfile.vscode.js
changed in both
  base   100644 0293acbb5be3dd8dcf391fa728b4bac721b46e7a src/vs/code/buildfile.js
  our    100644 1a39a0a0c2c617f7e302734407fb543448b242df src/vs/code/buildfile.js
  their  100644 2ff372605b728473dec330e4a8a59b5b35913bf1 src/vs/code/buildfile.js
@@ -11,7 +11,11 @@
 	if (Array.isArray(exclude) && exclude.length > 0) {
 		excludes = excludes.concat(exclude);
 	}
+<<<<<<< .our
 	result.exclude = excludes;
+=======
+	result.exclude= excludes;
+>>>>>>> .their
 
 	return result;
 }
@@ -23,8 +27,11 @@
 		createModuleDescription('vs/code/node/cliProcessMain', ['vs/code/node/cli']),
 		createModuleDescription('vs/code/electron-browser/issue/issueReporterMain', []),
 		createModuleDescription('vs/code/electron-browser/sharedProcess/sharedProcessMain', []),
+<<<<<<< .our
 		createModuleDescription('vs/code/electron-browser/issue/issueReporterMain', []),
 		createModuleDescription('vs/platform/driver/node/driver', []),
+=======
+>>>>>>> .their
 		createModuleDescription('vs/code/electron-browser/processExplorer/processExplorerMain', [])
 	];
 };
added in both
  our    100644 012740110f45d7bebe1733902d087bf2e0bafb76 src/vs/code/electron-browser/processExplorer/media/processExplorer.css
  their  100644 6f38b441592fd287119dd364b34e6007ba327421 src/vs/code/electron-browser/processExplorer/media/processExplorer.css
@@ -43,18 +43,26 @@
 	border-bottom: 1px solid #cccccc;
 	padding: .5rem;
 	border-top: 1px solid #cccccc;
+<<<<<<< .our
 	cursor: default;
+=======
+	text-align: center;
+>>>>>>> .their
 }
 td {
 	padding: .25rem;
 	vertical-align: top;
+<<<<<<< .our
 	cursor: default;
+=======
+>>>>>>> .their
 }
 
 .centered {
 	text-align: center;
 }
 
+<<<<<<< .our
 .nameLabel{
 	text-align: left;
 }
@@ -62,6 +70,10 @@
 .data {
 	white-space: pre;
 	padding-left: .5rem;
+=======
+.data {
+	white-space: pre;
+>>>>>>> .their
 }
 
 tbody > tr:hover {
added in both
  our    100644 0a798fb876db2ef86a3c96b2afe9c5018d68f178 src/vs/code/electron-browser/processExplorer/processExplorer.js
  their  100644 1fdb4bb8296f1b9458ae472882782731f1f08bfe src/vs/code/electron-browser/processExplorer/processExplorer.js
@@ -45,8 +45,11 @@
 	});
 }
 
+<<<<<<< .our
 const writeFile = (file, content) => new Promise((c, e) => fs.writeFile(file, content, 'utf8', err => err ? e(err) : c()));
 
+=======
+>>>>>>> .their
 function main() {
 	const args = parseURLQueryArgs();
 	const configuration = JSON.parse(args['config'] || '{}') || {};
@@ -104,6 +107,7 @@
 				let json = JSON.parse(content);
 				bundles[bundle] = json;
 				cb(undefined, json);
+<<<<<<< .our
 			}).catch((error) => {
 				try {
 					if (nlsConfig._corruptedFile) {
@@ -113,6 +117,10 @@
 					cb(error, undefined);
 				}
 			});
+=======
+			})
+			.catch(cb);
+>>>>>>> .their
 		};
 	}
 
added in both
  our    100644 fe402f187926e157ed73b15fc022dd347b897753 src/vs/code/electron-browser/processExplorer/processExplorerMain.ts
  their  100644 1fb3ca60b3be3567e297bdc70ebfcdafbcdf563d src/vs/code/electron-browser/processExplorer/processExplorerMain.ts
@@ -7,17 +7,28 @@
 
 import 'vs/css!./media/processExplorer';
 import { listProcesses, ProcessItem } from 'vs/base/node/ps';
+<<<<<<< .our
 import { remote, webFrame, ipcRenderer, clipboard } from 'electron';
+=======
+import { remote, webFrame } from 'electron';
+>>>>>>> .their
 import { repeat } from 'vs/base/common/strings';
 import { totalmem } from 'os';
 import product from 'vs/platform/node/product';
 import { localize } from 'vs/nls';
+<<<<<<< .our
 import { ProcessExplorerStyles, ProcessExplorerData } from 'vs/platform/issue/common/issue';
+=======
+import { ProcessExplorerData, ProcessExplorerStyles } from '../../../platform/issue/common/issue';
+>>>>>>> .their
 import * as browser from 'vs/base/browser/browser';
 import * as platform from 'vs/base/common/platform';
 
 let processList: any[];
+<<<<<<< .our
 let mapPidToWindowTitle = new Map<number, string>();
+=======
+>>>>>>> .their
 
 function getProcessList(rootProcess: ProcessItem) {
 	const processes: any[] = [];
@@ -34,6 +45,7 @@
 
 	const MB = 1024 * 1024;
 
+<<<<<<< .our
 	let name = item.name;
 	if (isRoot) {
 		name = `${product.applicationName} main`;
@@ -45,6 +57,10 @@
 	}
 
 	// Format name with indent
+=======
+	// Format name with indent
+	const name = isRoot ? `${product.applicationName} main` : item.name;
+>>>>>>> .their
 	const formattedName = isRoot ? name : `${repeat('    ', indent)} ${name}`;
 	const memory = process.platform === 'win32' ? item.mem : (totalmem() * (item.mem / 100));
 	processes.push({
@@ -85,7 +101,11 @@
 			<th class="cpu">${localize('cpu', "CPU %")}</th>
 			<th class="memory">${localize('memory', "Memory (MB)")}</th>
 			<th class="pid">${localize('pid', "pid")}</th>
+<<<<<<< .our
 			<th class="nameLabel">${localize('name', "Name")}</th>
+=======
+			<th>${localize('name', "Name")}</th>
+>>>>>>> .their
 		</tr>`;
 
 	processList.forEach(p => {
@@ -137,22 +157,34 @@
 function showContextMenu(e) {
 	e.preventDefault();
 
+<<<<<<< .our
 	const menu = new remote.Menu();
 
 	const pid = parseInt(e.currentTarget.id);
 	if (pid && typeof pid === 'number') {
+=======
+	const pid = parseInt(e.currentTarget.id);
+	if (pid && typeof pid === 'number') {
+		const menu = new remote.Menu();
+>>>>>>> .their
 		menu.append(new remote.MenuItem({
 			label: localize('killProcess', "Kill Process"),
 			click() {
 				process.kill(pid, 'SIGTERM');
 			}
+<<<<<<< .our
 		}));
+=======
+		})
+		);
+>>>>>>> .their
 
 		menu.append(new remote.MenuItem({
 			label: localize('forceKillProcess', "Force Kill Process"),
 			click() {
 				process.kill(pid, 'SIGKILL');
 			}
+<<<<<<< .our
 		}));
 
 		menu.append(new remote.MenuItem({
@@ -191,12 +223,20 @@
 	}
 
 	menu.popup({ window: remote.getCurrentWindow() });
+=======
+		})
+		);
+
+		menu.popup(remote.getCurrentWindow());
+	}
+>>>>>>> .their
 }
 
 export function startup(data: ProcessExplorerData): void {
 	applyStyles(data.styles);
 	applyZoom(data.zoomLevel);
 
+<<<<<<< .our
 	// Map window process pids to titles, annotate process names with this when rendering to distinguish between them
 	ipcRenderer.on('windowsInfoResponse', (event, windows) => {
 		mapPidToWindowTitle = new Map<number, string>();
@@ -219,6 +259,20 @@
 			}
 		});
 	}, 1200);
+=======
+	setInterval(() => listProcesses(remote.process.pid).then(processes => {
+		processList = getProcessList(processes);
+		updateProcessInfo(processList);
+
+		const tableRows = document.getElementsByTagName('tr');
+		for (let i = 0; i < tableRows.length; i++) {
+			const tableRow = tableRows[i];
+			tableRow.addEventListener('click', (e) => {
+				showContextMenu(e);
+			});
+		}
+	}), 1200);
+>>>>>>> .their
 
 
 	document.onkeydown = (e: KeyboardEvent) => {
changed in both
  base   100644 46d965ac212d1e44f38e25668f1f39ed8d174e86 src/vs/code/electron-main/menus.ts
  our    100644 9d5657cff26b159c842f9790d6387967d829e168 src/vs/code/electron-main/menus.ts
  their  100644 dad88c4fc00eaf68009d2543ca4966a10f919592 src/vs/code/electron-main/menus.ts
changed in both
  base   100644 8955b50b076ab2a5cc7e07be65443a0272be447b src/vs/platform/issue/common/issue.ts
  our    100644 46d378dc8d4cd7b20dfb66315d50d0a50e0a12c9 src/vs/platform/issue/common/issue.ts
  their  100644 228bcdfefb1192358d83a30c0c7e462408fce07b src/vs/platform/issue/common/issue.ts
@@ -11,8 +11,11 @@
 
 export const IIssueService = createDecorator<IIssueService>('issueService');
 
+<<<<<<< .our
 // Since data sent through the service is serialized to JSON, functions will be lost, so Color objects
 // should not be sent as their 'toString' method will be stripped. Instead convert to strings before sending.
+=======
+>>>>>>> .their
 export interface WindowStyles {
 	backgroundColor: string;
 	color: string;
changed in both
  base   100644 99d73534b5ed94685df395f29c2c944456111cb7 src/vs/platform/issue/common/issueIpc.ts
  our    100644 d45c1d870ee3c63db989f023028363c389abbdeb src/vs/platform/issue/common/issueIpc.ts
  their  100644 d804c6579fe48c96cbf9135b4e6bd850d4420858 src/vs/platform/issue/common/issueIpc.ts
@@ -8,7 +8,10 @@
 import { TPromise } from 'vs/base/common/winjs.base';
 import { IChannel } from 'vs/base/parts/ipc/common/ipc';
 import { IIssueService, IssueReporterData, ProcessExplorerData } from './issue';
+<<<<<<< .our
 import { Event } from 'vs/base/common/event';
+=======
+>>>>>>> .their
 
 export interface IIssueChannel extends IChannel {
 	call(command: 'openIssueReporter', arg: IssueReporterData): TPromise<void>;
changed in both
  base   100644 7232efc90fba37c39218bdf0b4f7f30cbcdf8d70 src/vs/platform/issue/electron-main/issueService.ts
  our    100644 cebb4e612373900c38659291fafa9b78f51e1be1 src/vs/platform/issue/electron-main/issueService.ts
  their  100644 1d589bf8f165f7fdde42bd0e01ec155e245d36d7 src/vs/platform/issue/electron-main/issueService.ts
@@ -51,6 +51,7 @@
 		});
 
 		this._issueParentWindow = BrowserWindow.getFocusedWindow();
+<<<<<<< .our
 		const position = this.getWindowPosition(this._issueParentWindow, 700, 800);
 		if (!this._issueWindow) {
 			this._issueWindow = new BrowserWindow({
@@ -95,6 +96,18 @@
 			this.launchService.getMainProcessInfo().then(info => {
 				event.sender.send('windowsInfoResponse', info.windows);
 			});
+=======
+		const position = this.getWindowPosition(this._issueParentWindow, 800, 900);
+		this._issueWindow = new BrowserWindow({
+			width: position.width,
+			height: position.height,
+			minWidth: 300,
+			minHeight: 200,
+			x: position.x,
+			y: position.y,
+			title: localize('issueReporter', "Issue Reporter"),
+			backgroundColor: data.styles.backgroundColor || DEFAULT_BACKGROUND_COLOR
+>>>>>>> .their
 		});
 
 		// Create as singleton
@@ -154,6 +167,56 @@
 		return TPromise.as(null);
 	}
 
+<<<<<<< .our
+=======
+	openProcessExplorer(data: ProcessExplorerData): TPromise<void> {
+		// Create as singleton
+		if (!this._processExplorerWindow) {
+			const position = this.getWindowPosition(BrowserWindow.getFocusedWindow(), 800, 300);
+			this._processExplorerWindow = new BrowserWindow({
+				skipTaskbar: true,
+				resizable: true,
+				width: position.width,
+				height: position.height,
+				minWidth: 300,
+				minHeight: 200,
+				x: position.x,
+				y: position.y,
+				backgroundColor: data.styles.backgroundColor,
+				title: localize('processExplorer', "Process Explorer")
+			});
+
+			this._processExplorerWindow.setMenuBarVisibility(false);
+
+			const windowConfiguration = {
+				appRoot: this.environmentService.appRoot,
+				nodeCachedDataDir: this.environmentService.nodeCachedDataDir,
+				windowId: this._processExplorerWindow.id,
+				userEnv: this.userEnv,
+				machineId: this.machineId,
+				data
+			};
+
+			const environment = parseArgs(process.argv);
+			const config = objects.assign(environment, windowConfiguration);
+			for (let key in config) {
+				if (config[key] === void 0 || config[key] === null || config[key] === '') {
+					delete config[key]; // only send over properties that have a true value
+				}
+			}
+
+			this._processExplorerWindow.loadURL(`${require.toUrl('vs/code/electron-browser/processExplorer/processExplorer.html')}?config=${encodeURIComponent(JSON.stringify(config))}`);
+
+			this._processExplorerWindow.on('close', () => this._processExplorerWindow = void 0);
+		}
+
+		// Focus
+		this._processExplorerWindow.focus();
+
+		return TPromise.as(null);
+	}
+
+>>>>>>> .their
 	private getWindowPosition(parentWindow: BrowserWindow, defaultWidth: number, defaultHeight: number) {
 		// We want the new window to open on the same display that the parent is in
 		let displayToUse: Electron.Display;
changed in both
  base   100644 3e0b42414dbca7cb2a53b42f1de850d2096e7864 src/vs/workbench/electron-browser/actions.ts
  our    100644 bdd05d8bf604885479f782703b020131fa80ea9f src/vs/workbench/electron-browser/actions.ts
  their  100644 7abd5ddb6b14dcd5622e52de12789c71da8a24f1 src/vs/workbench/electron-browser/actions.ts
@@ -573,8 +573,31 @@
 }
 
 export class OpenProcessExplorer extends Action {
+<<<<<<< .our
 	static readonly ID = 'workbench.action.openProcessExplorer';
 	static readonly LABEL = nls.localize('openProcessExplorer', "Open Process Explorer");
+=======
+	public static readonly ID = 'workbench.action.openProcessExplorer';
+	public static readonly LABEL = nls.localize('openProcessExplorer', "Open Process Explorer");
+
+	constructor(
+		id: string,
+		label: string,
+		@IWorkbenchIssueService private issueService: IWorkbenchIssueService
+	) {
+		super(id, label);
+	}
+
+	public run(): TPromise<boolean> {
+		return this.issueService.openProcessExplorer()
+			.then(() => true);
+	}
+}
+
+export class ReportPerformanceIssueUsingReporterAction extends Action {
+	public static readonly ID = 'workbench.action.reportPerformanceIssueUsingReporter';
+	public static readonly LABEL = nls.localize('reportPerformanceIssue', "Report Performance Issue");
+>>>>>>> .their
 
 	constructor(
 		id: string,
changed in both
  base   100644 c57c28d3c1bb0293419659984deebe6587347a7b src/vs/workbench/electron-browser/main.contribution.ts
  our    100644 b5ea1f2025fd492a8d56b60ad98cd59a2319f383 src/vs/workbench/electron-browser/main.contribution.ts
  their  100644 26d69e9073941d91aad39bd4a289c21ee466a9f1 src/vs/workbench/electron-browser/main.contribution.ts
@@ -14,10 +14,17 @@
 import { IWorkbenchActionRegistry, Extensions } from 'vs/workbench/common/actions';
 import { KeyMod, KeyChord, KeyCode } from 'vs/base/common/keyCodes';
 import { isWindows, isLinux, isMacintosh } from 'vs/base/common/platform';
+<<<<<<< .our
 import { KeybindingsReferenceAction, OpenDocumentationUrlAction, OpenIntroductoryVideosUrlAction, OpenTipsAndTricksUrlAction, OpenIssueReporterAction, ReportPerformanceIssueUsingReporterAction, ZoomResetAction, ZoomOutAction, ZoomInAction, ToggleFullScreenAction, ToggleMenuBarAction, CloseWorkspaceAction, CloseCurrentWindowAction, SwitchWindow, NewWindowAction, NavigateUpAction, NavigateDownAction, NavigateLeftAction, NavigateRightAction, IncreaseViewSizeAction, DecreaseViewSizeAction, ToggleSharedProcessAction, QuickSwitchWindow, QuickOpenRecentAction, inRecentFilesPickerContextKey, ShowAboutDialogAction, InspectContextKeysAction, OpenProcessExplorer, OpenTwitterUrlAction, OpenRequestFeatureUrlAction, OpenPrivacyStatementUrlAction, OpenLicenseUrlAction, OpenRecentAction } from 'vs/workbench/electron-browser/actions';
 import { registerCommands, QUIT_ID } from 'vs/workbench/electron-browser/commands';
 import { AddRootFolderAction, GlobalRemoveRootFolderAction, OpenWorkspaceAction, SaveWorkspaceAsAction, OpenWorkspaceConfigFileAction, DuplicateWorkspaceInNewWindowAction, OpenFileFolderAction, OpenFileAction, OpenFolderAction } from 'vs/workbench/browser/actions/workspaceActions';
 import { ContextKeyExpr, RawContextKey } from 'vs/platform/contextkey/common/contextkey';
+=======
+import { KeybindingsReferenceAction, OpenDocumentationUrlAction, OpenIntroductoryVideosUrlAction, OpenTipsAndTricksUrlAction, OpenIssueReporterAction, ReportPerformanceIssueUsingReporterAction, ZoomResetAction, ZoomOutAction, ZoomInAction, ToggleFullScreenAction, ToggleMenuBarAction, CloseWorkspaceAction, CloseCurrentWindowAction, SwitchWindow, NewWindowAction, NavigateUpAction, NavigateDownAction, NavigateLeftAction, NavigateRightAction, IncreaseViewSizeAction, DecreaseViewSizeAction, ShowStartupPerformance, ToggleSharedProcessAction, QuickSwitchWindow, QuickOpenRecentAction, inRecentFilesPickerContextKey, ShowAboutDialogAction, InspectContextKeysAction, OpenProcessExplorer } from 'vs/workbench/electron-browser/actions';
+import { registerCommands } from 'vs/workbench/electron-browser/commands';
+import { AddRootFolderAction, GlobalRemoveRootFolderAction, OpenWorkspaceAction, SaveWorkspaceAsAction, OpenWorkspaceConfigFileAction, OpenFolderAsWorkspaceInNewWindowAction, OpenFileFolderAction, OpenFileAction, OpenFolderAction } from 'vs/workbench/browser/actions/workspaceActions';
+import { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';
+>>>>>>> .their
 import { inQuickOpenContext, getQuickNavigateHandler } from 'vs/workbench/browser/parts/quickopen/quickopen';
 import { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';
 import { CommandsRegistry } from 'vs/platform/commands/common/commands';
changed in both
  base   100644 7e78f2904a5c547fc6b7faeea41d14ee8d7ce4b0 src/vs/workbench/services/issue/electron-browser/workbenchIssueService.ts
  our    100644 a3e9e3727bdc52ce0808231122074450038ff33a src/vs/workbench/services/issue/electron-browser/workbenchIssueService.ts
  their  100644 80d5a39cad23ae86c5da178146939c725f236353 src/vs/workbench/services/issue/electron-browser/workbenchIssueService.ts
@@ -8,7 +8,11 @@
 import { IssueReporterStyles, IIssueService, IssueReporterData } from 'vs/platform/issue/common/issue';
 import { TPromise } from 'vs/base/common/winjs.base';
 import { ITheme, IThemeService } from 'vs/platform/theme/common/themeService';
+<<<<<<< .our
 import { textLinkForeground, inputBackground, inputBorder, inputForeground, buttonBackground, buttonHoverBackground, buttonForeground, inputValidationErrorBorder, foreground, inputActiveOptionBorder, scrollbarSliderActiveBackground, scrollbarSliderBackground, scrollbarSliderHoverBackground, editorBackground, editorForeground, listHoverBackground, listHoverForeground, listHighlightForeground, textLinkActiveForeground } from 'vs/platform/theme/common/colorRegistry';
+=======
+import { textLinkForeground, inputBackground, inputBorder, inputForeground, buttonBackground, buttonHoverBackground, buttonForeground, inputValidationErrorBorder, foreground, inputActiveOptionBorder, scrollbarSliderActiveBackground, scrollbarSliderBackground, scrollbarSliderHoverBackground, editorBackground, editorForeground, listHoverBackground, listHoverForeground, listHighlightForeground } from 'vs/platform/theme/common/colorRegistry';
+>>>>>>> .their
 import { SIDE_BAR_BACKGROUND } from 'vs/workbench/common/theme';
 import { IExtensionManagementService, IExtensionEnablementService, LocalExtensionType } from 'vs/platform/extensionManagement/common/extensionManagement';
 import { webFrame } from 'electron';
changed in both
  base   100644 31396c2aa56afa1fe7b2e59339aaafeaf07db6f9 tslint.json
  our    100644 1fcafd325b6f3d6c1add5a7ecd5f5623468d2ddd tslint.json
  their  100644 9a59614556ed9baaf53fc994e2338e20db70e384 tslint.json
