changed in both
  base   100644 8f167afc9049e8db15fd3175ce33a6ad4738b9f1 OSSREADME.json
  our    100644 e15cccabcadbd5afb0980967f0af53c135710fc0 OSSREADME.json
  their  100644 ddfe2a1fa05af54ab5c44aeb8a7cdcafcf729f19 OSSREADME.json
@@ -51,7 +51,11 @@
 },
 {
 	"name": "electron",
+<<<<<<< .our
 	"version": "2.0.7",
+=======
+	"version": "2.0.5",
+>>>>>>> .their
 	"license": "MIT",
 	"repositoryURL": "https://github.com/electron/electron",
 	"isProd": true
changed in both
  base   100644 663f81987ccc076e4b3e08e95663fdd475e09b93 build/builtInExtensions.json
  our    100644 b3efcd2cc657706605008661521b555c93a32c16 build/builtInExtensions.json
  their  100644 e607dada4f85a5d32fa133c9fb0ea836f3a1d185 build/builtInExtensions.json
@@ -6,7 +6,11 @@
 	},
 	{
 		"name": "ms-vscode.node-debug2",
+<<<<<<< .our
 		"version": "1.27.0",
+=======
+		"version": "1.26.8",
+>>>>>>> .their
 		"repo": "https://github.com/Microsoft/vscode-node-debug2"
 	}
 ]
changed in both
  base   100644 218d4cdf8f58d8f370dd8b3f3b672dfaf2b362a1 build/monaco/monaco.d.ts.recipe
  our    100644 bebfe72348463fbdce9848d9655a5909083f9f7d build/monaco/monaco.d.ts.recipe
  their  100644 5a8f18c5cc391f101ca62a71bcf71a6e0720004f build/monaco/monaco.d.ts.recipe
changed in both
  base   100644 256ca1ff53480886408bcb4fbdde1694daf85c94 build/monaco/package.json
  our    100644 efd919085b2ffc82da8d810c609a9ed217bffb35 build/monaco/package.json
  their  100644 602e72b3160e741e9edbeb7f1ec07c61025492ea build/monaco/package.json
@@ -1,7 +1,11 @@
 {
   "name": "monaco-editor-core",
   "private": true,
+<<<<<<< .our
   "version": "0.14.3",
+=======
+  "version": "0.14.6",
+>>>>>>> .their
   "description": "A browser based code editor",
   "author": "Microsoft Corporation",
   "license": "MIT",
changed in both
  base   100644 4a4588e38b35333ba0d79b6b7a3f80a890cbf3bb package.json
  our    100644 d0e982ce0b76c5b1b5eb02b673e459e47f3353a4 package.json
  their  100644 2815fd49ac1e7295ddf0a9cae0394b2c4453d469 package.json
@@ -1,7 +1,12 @@
 {
   "name": "code-oss-dev",
+<<<<<<< .our
   "version": "1.27.0",
   "distro": "a4155d9780fbbc94ead6cb3017dd0fc3806c57b8",
+=======
+  "version": "1.26.0",
+  "distro": "73cb7173636931afba8d741be343ceafb11a177e",
+>>>>>>> .their
   "author": {
     "name": "Microsoft Corporation"
   },
@@ -49,7 +54,11 @@
     "vscode-nsfw": "1.0.17",
     "vscode-ripgrep": "1.1.0",
     "vscode-textmate": "^4.0.1",
+<<<<<<< .our
     "vscode-xterm": "3.7.0-beta4",
+=======
+    "vscode-xterm": "3.6.0-beta13",
+>>>>>>> .their
     "winreg": "^1.2.4",
     "yauzl": "^2.9.1"
   },
changed in both
  base   100644 221640196a1cb0a1a1210b6db54b3c80745b02cb src/vs/base/browser/ui/menu/menu.css
  our    100644 bea8dd197779b2014b71574a98c635196409f288 src/vs/base/browser/ui/menu/menu.css
  their  100644 4f0c0152caa1bf00b563c9284792e99cfb19e4dd src/vs/base/browser/ui/menu/menu.css
changed in both
  base   100644 c09f6334b7f4654eacac6cfeb531defabef081f3 src/vs/base/common/resources.ts
  our    100644 53357fe29f5f8919d794f7850dfaffd61f179591 src/vs/base/common/resources.ts
  their  100644 af2d8eaa6a157d980ae81406148fe28fc4ea1dbf src/vs/base/common/resources.ts
changed in both
  base   100644 1b10a58da57e62ebfcbf4235da835802bbb3c050 src/vs/code/electron-main/app.ts
  our    100644 c0185b039e95315e65379ca7cda7ff397219bdf9 src/vs/code/electron-main/app.ts
  their  100644 a52ce64b90dbb29413f31e75d30df26f5dfeaaca src/vs/code/electron-main/app.ts
@@ -63,10 +63,15 @@
 import { IMenubarService } from 'vs/platform/menubar/common/menubar';
 import { MenubarService } from 'vs/platform/menubar/electron-main/menubarService';
 import { MenubarChannel } from 'vs/platform/menubar/common/menubarIpc';
+<<<<<<< .our
 import { IUriLabelService } from 'vs/platform/uriLabel/common/uriLabel';
 import { CodeMenu } from 'vs/code/electron-main/menus';
 import { hasArgs } from 'vs/platform/environment/node/argv';
 import { RunOnceScheduler } from 'vs/base/common/async';
+=======
+import { IUriDisplayService } from 'vs/platform/uriDisplay/common/uriDisplay';
+import { CodeMenu } from 'vs/code/electron-main/menus';
+>>>>>>> .their
 
 export class CodeApplication {
 
changed in both
  base   100644 b4bd6f0412ba41d3832e7c6c08b5ded48bc13c7a src/vs/code/electron-main/menubar.ts
  our    100644 1bbfd9834bb83d9b49a3ce4b6f9cd46089cd2168 src/vs/code/electron-main/menubar.ts
  their  100644 5605ff20117fd1390258d6c9f76e72f18eec8c26 src/vs/code/electron-main/menubar.ts
@@ -252,15 +252,6 @@
 			menubar.append(gotoMenuItem);
 		}
 
-		// Terminal
-		const terminalMenu = new Menu();
-		const terminalMenuItem = new MenuItem({ label: this.mnemonicLabel(nls.localize({ key: 'mTerminal', comment: ['&& denotes a mnemonic'] }, "Ter&&minal")), submenu: terminalMenu });
-
-		if (this.shouldDrawMenu('Terminal')) {
-			this.setMenuById(terminalMenu, 'Terminal');
-			menubar.append(terminalMenuItem);
-		}
-
 		// Debug
 		const debugMenu = new Menu();
 		const debugMenuItem = new MenuItem({ label: this.mnemonicLabel(nls.localize({ key: 'mDebug', comment: ['&& denotes a mnemonic'] }, "&&Debug")), submenu: debugMenu });
added in both
  our    100644 9d5657cff26b159c842f9790d6387967d829e168 src/vs/code/electron-main/menus.ts
  their  100644 07a51698a469b440a4760891886ca431b4fd1e24 src/vs/code/electron-main/menus.ts
@@ -24,7 +24,11 @@
 import { IHistoryMainService } from 'vs/platform/history/common/history';
 import { IWorkspaceIdentifier, getWorkspaceLabel, ISingleFolderWorkspaceIdentifier, isSingleFolderWorkspaceIdentifier, isWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';
 import URI from 'vs/base/common/uri';
+<<<<<<< .our
 import { IUriLabelService } from 'vs/platform/uriLabel/common/uriLabel';
+=======
+import { IUriDisplayService } from 'vs/platform/uriDisplay/common/uriDisplay';
+>>>>>>> .their
 
 interface IMenuItemClickHandler {
 	inDevTools: (contents: Electron.WebContents) => void;
@@ -68,7 +72,11 @@
 		@IEnvironmentService private environmentService: IEnvironmentService,
 		@ITelemetryService private telemetryService: ITelemetryService,
 		@IHistoryMainService private historyMainService: IHistoryMainService,
+<<<<<<< .our
 		@IUriLabelService private uriLabelService: IUriLabelService
+=======
+		@IUriDisplayService private uriDisplayService: IUriDisplayService
+>>>>>>> .their
 	) {
 		this.nativeTabMenuItems = [];
 
@@ -242,11 +250,14 @@
 		const gotoMenuItem = new MenuItem({ label: this.mnemonicLabel(nls.localize({ key: 'mGoto', comment: ['&& denotes a mnemonic'] }, "&&Go")), submenu: gotoMenu });
 		this.setGotoMenu(gotoMenu);
 
+<<<<<<< .our
 		// Terminal
 		const terminalMenu = new Menu();
 		const terminalMenuItem = new MenuItem({ label: this.mnemonicLabel(nls.localize({ key: 'mTerminal', comment: ['&& denotes a mnemonic'] }, "Ter&&minal")), submenu: terminalMenu });
 		this.setTerminalMenu(terminalMenu);
 
+=======
+>>>>>>> .their
 		// Debug
 		const debugMenu = new Menu();
 		const debugMenuItem = new MenuItem({ label: this.mnemonicLabel(nls.localize({ key: 'mDebug', comment: ['&& denotes a mnemonic'] }, "&&Debug")), submenu: debugMenu });
@@ -280,7 +291,10 @@
 		menubar.append(selectionMenuItem);
 		menubar.append(viewMenuItem);
 		menubar.append(gotoMenuItem);
+<<<<<<< .our
 		menubar.append(terminalMenuItem);
+=======
+>>>>>>> .their
 		menubar.append(debugMenuItem);
 		menubar.append(taskMenuItem);
 
@@ -438,8 +452,12 @@
 	}
 
 	private getPreferencesMenu(): Electron.MenuItem {
+<<<<<<< .our
 		const settings = this.createMenuItem(nls.localize({ key: 'miOpenSettings', comment: ['&& denotes a mnemonic'] }, "&&Settings"), 'workbench.action.openSettings');
 		const extensions = this.createMenuItem(nls.localize({ key: 'miOpenExtensions', comment: ['&& denotes a mnemonic'] }, '&&Extensions'), 'workbench.view.extensions');
+=======
+		const settings = this.createMenuItem(nls.localize({ key: 'miOpenSettings', comment: ['&& denotes a mnemonic'] }, "&&Settings"), 'workbench.action.openSettings2');
+>>>>>>> .their
 		const kebindingSettings = this.createMenuItem(nls.localize({ key: 'miOpenKeymap', comment: ['&& denotes a mnemonic'] }, "&&Keyboard Shortcuts"), 'workbench.action.openGlobalKeybindings');
 		const keymapExtensions = this.createMenuItem(nls.localize({ key: 'miOpenKeymapExtensions', comment: ['&& denotes a mnemonic'] }, "&&Keymap Extensions"), 'workbench.extensions.action.showRecommendedKeymapExtensions');
 		const snippetsSettings = this.createMenuItem(nls.localize({ key: 'miOpenSnippets', comment: ['&& denotes a mnemonic'] }, "User &&Snippets"), 'workbench.action.openSnippets');
@@ -448,7 +466,10 @@
 
 		const preferencesMenu = new Menu();
 		preferencesMenu.append(settings);
+<<<<<<< .our
 		preferencesMenu.append(extensions);
+=======
+>>>>>>> .their
 		preferencesMenu.append(__separator__());
 		preferencesMenu.append(kebindingSettings);
 		preferencesMenu.append(keymapExtensions);
@@ -496,6 +517,7 @@
 		let label: string;
 		let uri: URI;
 		if (isSingleFolderWorkspaceIdentifier(workspace)) {
+<<<<<<< .our
 			label = unmnemonicLabel(getWorkspaceLabel(workspace, this.environmentService, this.uriLabelService, { verbose: true }));
 			uri = workspace;
 		} else if (isWorkspaceIdentifier(workspace)) {
@@ -504,6 +526,16 @@
 		} else {
 			uri = URI.file(workspace);
 			label = unmnemonicLabel(this.uriLabelService.getLabel(uri));
+=======
+			label = unmnemonicLabel(getWorkspaceLabel(workspace, this.environmentService, this.uriDisplayService, { verbose: true }));
+			uri = workspace;
+		} else if (isWorkspaceIdentifier(workspace)) {
+			label = getWorkspaceLabel(workspace, this.environmentService, this.uriDisplayService, { verbose: true });
+			uri = URI.file(workspace.configPath);
+		} else {
+			uri = URI.file(workspace);
+			label = unmnemonicLabel(this.uriDisplayService.getLabel(uri));
+>>>>>>> .their
 		}
 
 		return new MenuItem(this.likeAction(commandId, {
@@ -882,6 +914,7 @@
 		].forEach(item => gotoMenu.append(item));
 	}
 
+<<<<<<< .our
 	private setTerminalMenu(terminalMenu: Electron.Menu): void {
 		const newTerminal = this.createMenuItem(nls.localize({ key: 'miNewTerminal', comment: ['&& denotes a mnemonic'] }, "&&New Terminal"), 'workbench.action.terminal.new');
 		const splitTerminal = this.createMenuItem(nls.localize({ key: 'miSplitTerminal', comment: ['&& denotes a mnemonic'] }, "&&Split Terminal"), 'workbench.action.terminal.split');
@@ -912,6 +945,8 @@
 		menuItems.forEach(item => terminalMenu.append(item));
 	}
 
+=======
+>>>>>>> .their
 	private setDebugMenu(debugMenu: Electron.Menu): void {
 		const start = this.createMenuItem(nls.localize({ key: 'miStartDebugging', comment: ['&& denotes a mnemonic'] }, "&&Start Debugging"), 'workbench.action.debug.start');
 		const startWithoutDebugging = this.createMenuItem(nls.localize({ key: 'miStartWithoutDebugging', comment: ['&& denotes a mnemonic'] }, "Start &&Without Debugging"), 'workbench.action.debug.run');
@@ -973,7 +1008,10 @@
 		if (this.currentEnableNativeTabs) {
 			const hasMultipleWindows = this.windowsMainService.getWindowCount() > 1;
 
+<<<<<<< .our
 			this.nativeTabMenuItems.push(this.createMenuItem(nls.localize('mNewTab', "New Tab"), 'workbench.action.newWindowTab'));
+=======
+>>>>>>> .their
 			this.nativeTabMenuItems.push(this.createMenuItem(nls.localize('mShowPreviousTab', "Show Previous Tab"), 'workbench.action.showPreviousWindowTab', hasMultipleWindows));
 			this.nativeTabMenuItems.push(this.createMenuItem(nls.localize('mShowNextTab', "Show Next Tab"), 'workbench.action.showNextWindowTab', hasMultipleWindows));
 			this.nativeTabMenuItems.push(this.createMenuItem(nls.localize('mMoveTabToNewWindow', "Move Tab to New Window"), 'workbench.action.moveWindowTabToNewWindow', hasMultipleWindows));
@@ -1319,4 +1357,8 @@
 
 function __separator__(): Electron.MenuItem {
 	return new MenuItem({ type: 'separator' });
+<<<<<<< .our
+}
+=======
 }
+>>>>>>> .their
changed in both
  base   100644 a2a5757426433a58882519095d01091fcc97d142 src/vs/editor/contrib/folding/folding.ts
  our    100644 520ad0ac57dad552f186000fca1b8457e0771fd8 src/vs/editor/contrib/folding/folding.ts
  their  100644 13751401c44ede6edd49d0b3f51408f2354316eb src/vs/editor/contrib/folding/folding.ts
changed in both
  base   100644 d20f7346b8326a4d00670897365b6dea446c054f src/vs/editor/standalone/browser/simpleServices.ts
  our    100644 231c2e182c38126cc58ce28e0a84a2cea202f8d7 src/vs/editor/standalone/browser/simpleServices.ts
  their  100644 b3d9dbf7f14deea56fc5121808fe9861d8383a98 src/vs/editor/standalone/browser/simpleServices.ts
@@ -45,7 +45,11 @@
 import { IModelService } from 'vs/editor/common/services/modelService';
 import { EditOperation } from 'vs/editor/common/core/editOperation';
 import { localize } from 'vs/nls';
+<<<<<<< .our
 import { IUriLabelService, UriLabelRules } from 'vs/platform/uriLabel/common/uriLabel';
+=======
+import { IUriDisplayService, UriDisplayRules } from 'vs/platform/uriDisplay/common/uriDisplay';
+>>>>>>> .their
 
 export class SimpleModel implements ITextEditorModel {
 
@@ -592,11 +596,19 @@
 	}
 }
 
+<<<<<<< .our
 export class SimpleUriLabelService implements IUriLabelService {
 	_serviceBrand: any;
 
 	private readonly _onDidRegisterFormater: Emitter<{ scheme: string, formater: UriLabelRules }> = new Emitter<{ scheme: string, formater: UriLabelRules }>();
 	public readonly onDidRegisterFormater: Event<{ scheme: string, formater: UriLabelRules }> = this._onDidRegisterFormater.event;
+=======
+export class SimpleUriDisplayService implements IUriDisplayService {
+	_serviceBrand: any;
+
+	private readonly _onDidRegisterFormater: Emitter<{ scheme: string, formater: UriDisplayRules }> = new Emitter<{ scheme: string, formater: UriDisplayRules }>();
+	public readonly onDidRegisterFormater: Event<{ scheme: string, formater: UriDisplayRules }> = this._onDidRegisterFormater.event;
+>>>>>>> .their
 
 	public getLabel(resource: URI, relative?: boolean): string {
 		if (resource.scheme === 'file') {
@@ -605,7 +617,11 @@
 		return resource.path;
 	}
 
+<<<<<<< .our
 	public registerFormater(schema: string, formater: UriLabelRules): IDisposable {
+=======
+	public registerFormater(schema: string, formater: UriDisplayRules): IDisposable {
+>>>>>>> .their
 		throw new Error('Not implemented');
 	}
 }
changed in both
  base   100644 d3275d83f30e9ba73179496cbe99b2d65d40c7d0 src/vs/editor/standalone/browser/standaloneServices.ts
  our    100644 d20dc25b60e240a7a8b6703b158753e12dd5c6f5 src/vs/editor/standalone/browser/standaloneServices.ts
  their  100644 49375edbcffdabff108dfa98e62ad36358493a23 src/vs/editor/standalone/browser/standaloneServices.ts
@@ -33,7 +33,11 @@
 import {
 	SimpleConfigurationService, SimpleResourceConfigurationService, SimpleMenuService,
 	SimpleProgressService, StandaloneCommandService, StandaloneKeybindingService, SimpleNotificationService,
+<<<<<<< .our
 	StandaloneTelemetryService, SimpleWorkspaceContextService, SimpleDialogService, SimpleBulkEditService, SimpleUriLabelService
+=======
+	StandaloneTelemetryService, SimpleWorkspaceContextService, SimpleDialogService, SimpleBulkEditService, SimpleUriDisplayService
+>>>>>>> .their
 } from 'vs/editor/standalone/browser/simpleServices';
 import { ContextKeyService } from 'vs/platform/contextkey/browser/contextKeyService';
 import { IMenuService } from 'vs/platform/actions/common/actions';
@@ -44,7 +48,11 @@
 import { IDialogService } from 'vs/platform/dialogs/common/dialogs';
 import { IListService, ListService } from 'vs/platform/list/browser/listService';
 import { IBulkEditService } from 'vs/editor/browser/services/bulkEditService';
+<<<<<<< .our
 import { IUriLabelService } from 'vs/platform/uriLabel/common/uriLabel';
+=======
+import { IUriDisplayService } from 'vs/platform/uriDisplay/common/uriDisplay';
+>>>>>>> .their
 
 export interface IEditorOverrideServices {
 	[index: string]: any;
@@ -122,7 +130,11 @@
 
 	export const contextService = define(IWorkspaceContextService, () => new SimpleWorkspaceContextService());
 
+<<<<<<< .our
 	export const uriLabelService = define(IUriLabelService, () => new SimpleUriLabelService());
+=======
+	export const uriDisplayService = define(IUriDisplayService, () => new SimpleUriDisplayService());
+>>>>>>> .their
 
 	export const telemetryService = define(ITelemetryService, () => new StandaloneTelemetryService());
 
changed in both
  base   100644 438105b4d899d3ed6bd3351c7997c86b3e364248 src/vs/monaco.d.ts
  our    100644 76dcf491ff9c1973ad61bf5d423713bb1a3b4e44 src/vs/monaco.d.ts
  their  100644 b167c46390106623adecc441fb5674baa85cc80d src/vs/monaco.d.ts
merged
  result 100644 5bb9d8adba33a0c638cc28e059bc992ac40add8b src/vs/platform/actions/common/actions.ts
  our    100644 f0ba370d22dfa5eb5e51b75ad8f132f6de5991a7 src/vs/platform/actions/common/actions.ts
@@ -100,7 +100,6 @@
 	static readonly MenubarTasksMenu = new MenuId();
 	static readonly MenubarPreferencesMenu = new MenuId();
 	static readonly MenubarHelpMenu = new MenuId();
-	static readonly MenubarTerminalMenu = new MenuId();
 
 	readonly id: string = String(MenuId.ID++);
 }
changed in both
  base   100644 796cfaffb92a7933b73b49d3d7031e8a3ca9edd6 src/vs/platform/history/electron-main/historyMainService.ts
  our    100644 3f2657d385162e51b58c9ce88c62add6ba3ec1a3 src/vs/platform/history/electron-main/historyMainService.ts
  their  100644 518916342b01071767f2ff5be57db947566195ce src/vs/platform/history/electron-main/historyMainService.ts
@@ -26,12 +26,20 @@
 
 interface ISerializedRecentlyOpened {
 	workspaces2: (IWorkspaceIdentifier | string)[]; // IWorkspaceIdentifier or URI.toString()
+<<<<<<< .our
 	files2: string[]; // files as URI.toString()
 }
 
 interface ILegacySerializedRecentlyOpened {
 	workspaces: (IWorkspaceIdentifier | string | UriComponents)[]; // legacy (UriComponents was also supported for a few insider builds)
 	files: string[]; // files as paths
+=======
+	files: string[];
+>>>>>>> .their
+}
+
+interface ILegacySerializedRecentlyOpened {
+	workspaces: (IWorkspaceIdentifier | string | UriComponents)[]; // legacy (UriComponents was also supported for a few insider builds)
 }
 
 export class HistoryMainService implements IHistoryMainService {
@@ -271,7 +279,10 @@
 					}
 				}
 			} else if (Array.isArray(storedRecents.workspaces)) {
+<<<<<<< .our
 				// TODO@martin legacy support can be removed at some point (6 month?)
+=======
+>>>>>>> .their
 				// format of 1.25 and before
 				for (const workspace of storedRecents.workspaces) {
 					if (typeof workspace === 'string') {
@@ -284,6 +295,7 @@
 					}
 				}
 			}
+<<<<<<< .our
 			if (Array.isArray(storedRecents.files2)) {
 				for (const file of storedRecents.files2) {
 					if (typeof file === 'string') {
@@ -294,6 +306,12 @@
 				for (const file of storedRecents.files) {
 					if (typeof file === 'string') {
 						result.files.push(URI.file(file));
+=======
+			if (Array.isArray(storedRecents.files)) {
+				for (const file of storedRecents.files) {
+					if (typeof file === 'string') {
+						result.files.push(file);
+>>>>>>> .their
 					}
 				}
 			}
@@ -302,7 +320,11 @@
 	}
 
 	private saveRecentlyOpened(recent: IRecentlyOpened): void {
+<<<<<<< .our
 		const serialized: ISerializedRecentlyOpened = { workspaces2: [], files2: [] };
+=======
+		const serialized: ISerializedRecentlyOpened = { workspaces2: [], files: recent.files };
+>>>>>>> .their
 		for (const workspace of recent.workspaces) {
 			if (isSingleFolderWorkspaceIdentifier(workspace)) {
 				serialized.workspaces2.push(workspace.toString());
@@ -310,9 +332,12 @@
 				serialized.workspaces2.push(workspace);
 			}
 		}
+<<<<<<< .our
 		for (const file of recent.files) {
 			serialized.files2.push(file.toString());
 		}
+=======
+>>>>>>> .their
 		this.stateService.setItem(HistoryMainService.recentlyOpenedStorageKey, serialized);
 	}
 
changed in both
  base   100644 b4ed6f55eab488ad1302bbc7e30d7ffe795635f7 src/vs/platform/node/product.ts
  our    100644 dbb84fd473f8212ea96a20a8f12d66c5b703786a src/vs/platform/node/product.ts
  their  100644 a3dce3929b2bca1fa088832dc9ee386e46db7224 src/vs/platform/node/product.ts
changed in both
  base   100644 b1543ed3d2f9f297cb6222076ea75e8d4a0186da src/vs/platform/theme/common/colorRegistry.ts
  our    100644 674f67411d4ee542ee937fac9146ef0768ec982d src/vs/platform/theme/common/colorRegistry.ts
  their  100644 8d984bd6f21c8450d851a4c038289b73296eec90 src/vs/platform/theme/common/colorRegistry.ts
@@ -223,6 +223,14 @@
 
 export const progressBarBackground = registerColor('progressBar.background', { dark: Color.fromHex('#0E70C0'), light: Color.fromHex('#0E70C0'), hc: contrastBorder }, nls.localize('progressBarBackground', "Background color of the progress bar that can show for long running operations."));
 
+<<<<<<< .our
+=======
+export const breadcrumbsForeground = registerColor('breadcrumb.foreground', { light: Color.fromHex('#6C6C6C').transparent(.7), dark: Color.fromHex('#CCCCCC').transparent(.7), hc: Color.white.transparent(.7) }, nls.localize('breadcrumbsFocusForeground', "Color of focused breadcrumb items."));
+export const breadcrumbsFocusForeground = registerColor('breadcrumb.focusForeground', { light: '#6C6C6C', dark: '#CCCCCC', hc: Color.white }, nls.localize('breadcrumbsFocusForeground', "Color of focused breadcrumb items."));
+export const breadcrumbsActiveSelectionForeground = registerColor('breadcrumb.activeSelectionForeground', { light: '#6C6C6C', dark: '#CCCCCC', hc: Color.white }, nls.localize('breadcrumbsSelectedForegound', "Color of selected breadcrumb items."));
+export const breadcrumbsPickerBackground = registerColor('breadcrumbPicker.background', { light: '#ECECEC', dark: '#252526', hc: Color.black }, nls.localize('breadcrumbsSelectedBackground', "Background color of breadcrumb item picker."));
+
+>>>>>>> .their
 /**
  * Editor background color.
  * Because of bug https://monacotools.visualstudio.com/DefaultCollection/Monaco/_workitems/edit/13254
changed in both
  base   100644 98eaf7888ca700629ba1266892ad9135c5089abf src/vs/workbench/api/node/apiCommands.ts
  our    100644 d04d6b2334c914b4573cb10d4adea8925172017a src/vs/workbench/api/node/apiCommands.ts
  their  100644 1d46c8c81858850247cb86a79ae2c7d5b6385825 src/vs/workbench/api/node/apiCommands.ts
@@ -12,6 +12,7 @@
 import { ITextEditorOptions } from 'vs/platform/editor/common/editor';
 import { EditorViewColumn } from 'vs/workbench/api/shared/editor';
 import { EditorGroupLayout } from 'vs/workbench/services/group/common/editorGroupsService';
+import { isWindows } from 'vs/base/common/platform';
 
 // -----------------------------------------------------------------
 // The following commands are registered on both sides separately.
@@ -49,11 +50,18 @@
 		if (!uri) {
 			return executor.executeCommand('_files.pickFolderAndOpen', forceNewWindow);
 		}
+<<<<<<< .our
 		let correctedUri = isMalformedFileUri(uri);
 		if (correctedUri) {
 			// workaround for #55916 and #55891, will be removed in 1.28
 			console.warn(`'vscode.openFolder' command invoked with an invalid URI (file:// scheme missing): '${uri}'. Converted to a 'file://' URI: ${correctedUri}`);
 			uri = correctedUri;
+=======
+		if (!uri.scheme || isWindows && uri.scheme.match(/^[a-zA-Z]$/)) {
+			// workaround for #55916 and #55891, will be removed in 1.28
+			console.warn(`'vscode.openFolder' command invoked with an invalid URI (file:// scheme missing): '${uri}'. Converted to a 'file://' URI.`);
+			uri = URI.file(uri.toString());
+>>>>>>> .their
 		}
 
 		return executor.executeCommand('_files.windowOpen', [uri], forceNewWindow);
removed in local
  base   100644 39c87100cce551f263420f6904834d778e9e2aab src/vs/workbench/browser/parts/menubar/menubar.contribution.ts
  their  100644 04235f1557ddc62d458e20a7ae6f23675f8ef542 src/vs/workbench/browser/parts/menubar/menubar.contribution.ts
removed in local
  base   100644 b0cbfbf570f3193ab5f142bbbcca373b9c12cb5c src/vs/workbench/browser/parts/menubar/menubarPart.ts
  their  100644 2f7e0891892de9bf1d0e8e3cd9b1ad8c6074f822 src/vs/workbench/browser/parts/menubar/menubarPart.ts
changed in both
  base   100644 fcadf9c40ac723aede0e60047890e6cd8f6f9a13 src/vs/workbench/electron-browser/media/shell.css
  our    100644 1ce2598e143da86c4e183d8447113245812e5270 src/vs/workbench/electron-browser/media/shell.css
  their  100644 5279eeb084868a804849dcdf2b7a59fa40eb0ee4 src/vs/workbench/electron-browser/media/shell.css
@@ -81,12 +81,16 @@
 .monaco-shell .monaco-menu .monaco-action-bar.vertical .action-label:not(.separator),
 .monaco-shell .monaco-menu .monaco-action-bar.vertical .keybinding {
 	font-size: inherit;
+<<<<<<< .our
 	padding: 0 2em;
 }
 
 .monaco-shell .monaco-menu .monaco-action-bar.vertical .menu-item-check {
 	font-size: inherit;
 	width: 2em;
+=======
+	padding: 0 1.5em;
+>>>>>>> .their
 }
 
 .monaco-shell .monaco-menu .monaco-action-bar.vertical .action-label.separator {
changed in both
  base   100644 b8d45826a4489e21e6c35732d6afcf0085a73e68 src/vs/workbench/parts/debug/electron-browser/debugService.ts
  our    100644 a5e2dcee7a0eb14bc388d84c6c7cac591067b1b2 src/vs/workbench/parts/debug/electron-browser/debugService.ts
  their  100644 61162e90a69902a792aaf58874d941a1a57435cc src/vs/workbench/parts/debug/electron-browser/debugService.ts
@@ -171,7 +171,9 @@
 			} else {
 				const root = raw.root;
 				raw.disconnect().done(undefined, errors.onUnexpectedError);
-				this.doCreateSession(root, { resolved: session.configuration, unresolved: session.unresolvedConfiguration }, session.getId());
+				setTimeout(_ => {
+					this.doCreateSession(root, { resolved: session.configuration, unresolved: session.unresolvedConfiguration }, session.getId());
+				}, 1000);
 			}
 
 			return;
changed in both
  base   100644 8fc5ed3bca172f911cb941e7aa300e1d97bd1963 src/vs/workbench/parts/extensions/electron-browser/extensionsViews.ts
  our    100644 3bfb6cffba943bf68a9fa9c24fb1903c66dd3fad src/vs/workbench/parts/extensions/electron-browser/extensionsViews.ts
  their  100644 70edc1d5fabc96d5d5c5cd512c403afdba337619 src/vs/workbench/parts/extensions/electron-browser/extensionsViews.ts
changed in both
  base   100644 849d454f33dac6022061ddd66b34aa49cc0d4a06 src/vs/workbench/parts/splash/electron-browser/partsSplash.contribution.ts
  our    100644 5f76b802ea5a6e6aafeb989856a8672f1d126c9d src/vs/workbench/parts/splash/electron-browser/partsSplash.contribution.ts
  their  100644 4632aaf6efb6ed7dc220c62187dbb4c1320cda14 src/vs/workbench/parts/splash/electron-browser/partsSplash.contribution.ts
@@ -17,8 +17,12 @@
 import { IDisposable, dispose } from 'vs/base/common/lifecycle';
 import { debounceEvent } from 'vs/base/common/event';
 import { DEFAULT_EDITOR_MIN_DIMENSIONS } from 'vs/workbench/browser/parts/editor/editor';
+<<<<<<< .our
 import { ColorIdentifier, editorBackground, foreground } from 'vs/platform/theme/common/colorRegistry';
 import { Color } from 'vs/base/common/color';
+=======
+import { ColorIdentifier } from 'vs/platform/theme/common/colorRegistry';
+>>>>>>> .their
 
 class PartsSplash {
 
@@ -45,10 +49,14 @@
 	}
 
 	private _savePartsSplash() {
+<<<<<<< .our
 		const baseTheme = getThemeTypeSelector(this._themeService.getTheme().type);
 		const colorInfo = {
 			foreground: this._getThemeColor(foreground),
 			editorBackground: this._getThemeColor(editorBackground),
+=======
+		const colorInfo = {
+>>>>>>> .their
 			titleBarBackground: this._getThemeColor(themes.TITLE_BAR_ACTIVE_BACKGROUND),
 			activityBarBackground: this._getThemeColor(themes.ACTIVITY_BAR_BACKGROUND),
 			sideBarBackground: this._getThemeColor(themes.SIDE_BAR_BACKGROUND),
@@ -82,6 +90,12 @@
 		return color ? color.toString() : undefined;
 	}
 
+	private _getThemeColor(id: ColorIdentifier): string {
+		const theme = this._themeService.getTheme();
+		const color = theme.getColor(id);
+		return color ? color.toString() : undefined;
+	}
+
 	private _removePartsSplash(): void {
 		let element = document.getElementById(PartsSplash._splashElementId);
 		if (element) {
removed in remote
  base   100644 52498a02f5195349043389a3f51361135c2c0723 src/vs/workbench/parts/terminal/common/terminalMenu.ts
  our    100644 52498a02f5195349043389a3f51361135c2c0723 src/vs/workbench/parts/terminal/common/terminalMenu.ts
@@ -1,120 +0,0 @@
-/*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
-
-import * as nls from 'vs/nls';
-import { MenuRegistry, MenuId } from 'vs/platform/actions/common/actions';
-import { TERMINAL_COMMAND_ID } from 'vs/workbench/parts/terminal/common/terminalCommands';
-import { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';
-
-export function setupTerminalMenu() {
-
-	// View menu
-
-	MenuRegistry.appendMenuItem(MenuId.MenubarViewMenu, {
-		group: '4_panels',
-		command: {
-			id: TERMINAL_COMMAND_ID.TOGGLE,
-			title: nls.localize({ key: 'miToggleIntegratedTerminal', comment: ['&& denotes a mnemonic'] }, "&&Integrated Terminal")
-		},
-		order: 3
-	});
-
-	// Manage
-	const manageGroup = '1_manage';
-	MenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {
-		group: manageGroup,
-		command: {
-			id: TERMINAL_COMMAND_ID.NEW,
-			title: nls.localize({ key: 'miNewTerminal', comment: ['&& denotes a mnemonic'] }, "&&New Terminal")
-		},
-		order: 1
-	});
-	MenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {
-		group: manageGroup,
-		command: {
-			id: TERMINAL_COMMAND_ID.SPLIT,
-			title: nls.localize({ key: 'miSplitTerminal', comment: ['&& denotes a mnemonic'] }, "&&Split Terminal"),
-			precondition: ContextKeyExpr.has('terminalIsOpen')
-		},
-		order: 2
-	});
-
-	MenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {
-		group: manageGroup,
-		command: {
-			id: TERMINAL_COMMAND_ID.KILL,
-			title: nls.localize({ key: 'miKillTerminal', comment: ['&& denotes a mnemonic'] }, "&&Kill Terminal"),
-			precondition: ContextKeyExpr.has('terminalIsOpen')
-		},
-		order: 3
-	});
-
-	// Run
-	const runGroup = '2_run';
-	MenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {
-		group: runGroup,
-		command: {
-			id: TERMINAL_COMMAND_ID.CLEAR,
-			title: nls.localize({ key: 'miClear', comment: ['&& denotes a mnemonic'] }, "&&Clear"),
-			precondition: ContextKeyExpr.has('terminalIsOpen')
-		},
-		order: 1
-	});
-	MenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {
-		group: runGroup,
-		command: {
-			id: TERMINAL_COMMAND_ID.RUN_ACTIVE_FILE,
-			title: nls.localize({ key: 'miRunActiveFile', comment: ['&& denotes a mnemonic'] }, "Run &&Active File")
-		},
-		order: 2
-	});
-	MenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {
-		group: runGroup,
-		command: {
-			id: TERMINAL_COMMAND_ID.RUN_SELECTED_TEXT,
-			title: nls.localize({ key: 'miRunSelectedText', comment: ['&& denotes a mnemonic'] }, "Run &&Selected Text")
-		},
-		order: 3
-	});
-
-	// Navigation
-	const navigationGroup = '3_navigation';
-	MenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {
-		group: navigationGroup,
-		command: {
-			id: TERMINAL_COMMAND_ID.SCROLL_TO_PREVIOUS_COMMAND,
-			title: nls.localize({ key: 'miScrollToPreviousCommand', comment: ['&& denotes a mnemonic'] }, "Scroll To Previous Command"),
-			precondition: ContextKeyExpr.has('terminalIsOpen')
-		},
-		order: 1
-	});
-	MenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {
-		group: navigationGroup,
-		command: {
-			id: TERMINAL_COMMAND_ID.SCROLL_TO_NEXT_COMMAND,
-			title: nls.localize({ key: 'miScrollToNextCommand', comment: ['&& denotes a mnemonic'] }, "Scroll To Next Command"),
-			precondition: ContextKeyExpr.has('terminalIsOpen')
-		},
-		order: 2
-	});
-	MenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {
-		group: navigationGroup,
-		command: {
-			id: TERMINAL_COMMAND_ID.SELECT_TO_PREVIOUS_COMMAND,
-			title: nls.localize({ key: 'miSelectToPreviousCommand', comment: ['&& denotes a mnemonic'] }, "Select To Previous Command"),
-			precondition: ContextKeyExpr.has('terminalIsOpen')
-		},
-		order: 3
-	});
-	MenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {
-		group: navigationGroup,
-		command: {
-			id: TERMINAL_COMMAND_ID.SELECT_TO_NEXT_COMMAND,
-			title: nls.localize({ key: 'miSelectToNextCommand', comment: ['&& denotes a mnemonic'] }, "Select To Next Command"),
-			precondition: ContextKeyExpr.has('terminalIsOpen')
-		},
-		order: 4
-	});
-}
changed in both
  base   100644 4e288255067120a2f2e0e30d5b5c348f01427502 src/vs/workbench/parts/terminal/electron-browser/terminal.contribution.ts
  our    100644 9ef058f2994595d2b04a5e832c71a30592895aac src/vs/workbench/parts/terminal/electron-browser/terminal.contribution.ts
  their  100644 074c048a09cb976e2f5d590dbe917e65c877b811 src/vs/workbench/parts/terminal/electron-browser/terminal.contribution.ts
@@ -37,7 +37,6 @@
 import { TerminalPanel } from 'vs/workbench/parts/terminal/electron-browser/terminalPanel';
 import { TerminalPickerHandler } from 'vs/workbench/parts/terminal/browser/terminalQuickOpen';
 import { setupTerminalCommands, TERMINAL_COMMAND_ID } from 'vs/workbench/parts/terminal/common/terminalCommands';
-import { setupTerminalMenu } from 'vs/workbench/parts/terminal/common/terminalMenu';
 
 const quickOpenRegistry = (Registry.as<IQuickOpenRegistry>(QuickOpenExtensions.Quickopen));
 
@@ -535,6 +534,5 @@
 actionRegistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleEscapeSequenceLoggingAction, ToggleEscapeSequenceLoggingAction.ID, ToggleEscapeSequenceLoggingAction.LABEL), 'Terminal: Toggle Escape Sequence Logging', category);
 
 setupTerminalCommands();
-setupTerminalMenu();
 
 registerColors();
changed in both
  base   100644 2ce9bd83b960352f59226489b3f1ae767fe7a82d src/vs/workbench/parts/update/electron-browser/update.ts
  our    100644 2e468debc61fae01ce2d9c4b673a81993982cc62 src/vs/workbench/parts/update/electron-browser/update.ts
  their  100644 04edd26fd77e5fc54160c4dd3155caa68d3b45ea src/vs/workbench/parts/update/electron-browser/update.ts
@@ -249,10 +249,13 @@
 		@IOpenerService private openerService: IOpenerService,
 		@IUpdateService private updateService: IUpdateService
 	) {
+<<<<<<< .our
 		if (!environmentService.isBuilt) {
 			return;
 		}
 
+=======
+>>>>>>> .their
 		const neverShowAgain = new NeverShowAgain(WinUserSetupContribution.KEY_BOTH, this.storageService);
 
 		if (!neverShowAgain.shouldShow()) {
@@ -267,12 +270,22 @@
 			}
 
 			const handle = this.notificationService.prompt(
+<<<<<<< .our
 				severity.Info,
 				nls.localize('usersetupsystem', "You are running the system-wide installation of {0}, while having the user-wide distribution installed as well.", product.nameShort),
 				[
 					{ label: nls.localize('ok', "OK"), run: () => null },
 					{
 						label: nls.localize('okneveragain', "OK, Don't Show Again"),
+=======
+				severity.Warning,
+				nls.localize('usersetupsystem', "You are running the system-wide installation of {0}, while having the user-wide distribution installed as well. Make sure you're running the {0} version you expect.", product.nameShort),
+				[
+					{ label: nls.localize('ok', "OK"), run: () => null },
+					{
+						label: nls.localize('neveragain', "Don't Show Again"),
+						isSecondary: true,
+>>>>>>> .their
 						run: () => {
 							neverShowAgain.action.run(handle);
 							neverShowAgain.action.dispose();
changed in both
  base   100644 41e23fc99811fdb6c8d80ca026eef510574e9115 src/vs/workbench/services/textfile/common/textFileEditorModel.ts
  our    100644 6faef447dc315ab88c3c3c652840860db088fa46 src/vs/workbench/services/textfile/common/textFileEditorModel.ts
  their  100644 0c3642145b3164f68b07cbb474726b0f76c297bb src/vs/workbench/services/textfile/common/textFileEditorModel.ts
changed in both
  base   100644 b0b61b7a439360d1f66858259ab408ba819b2ea9 yarn.lock
  our    100644 b56aa332449f9eb6db4b03a16548d91df21604bb yarn.lock
  their  100644 79f54d1676d113d2142fe751cd1aa121ecbef2e3 yarn.lock
