changed in both
  base   100644 29c55f1e4398c37e27660f4ece9976cf551cd804 src/vs/platform/node/product.ts
  our    100644 dbb84fd473f8212ea96a20a8f12d66c5b703786a src/vs/platform/node/product.ts
  their  100644 c2d0ab485103b0decd8479198b2da31682ec534f src/vs/platform/node/product.ts
@@ -36,7 +36,11 @@
 	};
 	extensionTips: { [id: string]: string; };
 	extensionImportantTips: { [id: string]: { name: string; pattern: string; }; };
+<<<<<<< .our
 	exeBasedExtensionTips: { [id: string]: { friendlyName: string, windowsPath?: string, recommendations: string[] }; };
+=======
+	exeBasedExtensionTips: { [id: string]: any; };
+>>>>>>> .their
 	extensionKeywords: { [extension: string]: string[]; };
 	extensionAllowedBadgeProviders: string[];
 	extensionAllowedProposedApi: string[];
changed in both
  base   100644 3918fe5f9f03c9ec1cd687a7caf8069a54a87775 src/vs/workbench/parts/extensions/electron-browser/extensionTipsService.ts
  our    100644 6f9d4a74f5feb07a450341f183980ee0a10455a9 src/vs/workbench/parts/extensions/electron-browser/extensionTipsService.ts
  their  100644 869c71175a9d30718bd642261ff65e81f9459f3b src/vs/workbench/parts/extensions/electron-browser/extensionTipsService.ts
@@ -28,6 +28,7 @@
 import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
 import * as pfs from 'vs/base/node/pfs';
 import * as os from 'os';
+<<<<<<< .our
 import { flatten, distinct, shuffle, coalesce } from 'vs/base/common/arrays';
 import { IEnvironmentService } from 'vs/platform/environment/common/environment';
 import { guessMimeTypes, MIME_UNKNOWN } from 'vs/base/common/mime';
@@ -43,6 +44,9 @@
 import URI from 'vs/base/common/uri';
 import { areSameExtensions, getGalleryExtensionIdFromLocal } from 'vs/platform/extensionManagement/common/extensionManagementUtil';
 import { IExperimentService, ExperimentActionType, ExperimentState } from 'vs/workbench/parts/experiments/node/experimentService';
+=======
+import { flatten, distinct } from 'vs/base/common/arrays';
+>>>>>>> .their
 
 const milliSecondsInADay = 1000 * 60 * 60 * 24;
 const choiceNever = localize('neverShowAgain', "Don't Show Again");
@@ -113,9 +117,19 @@
 			return;
 		}
 
+<<<<<<< .our
 		if (product.extensionsGallery && product.extensionsGallery.recommendationsUrl) {
 			this._extensionsRecommendationsUrl = product.extensionsGallery.recommendationsUrl;
 		}
+=======
+		this._suggestTips();
+		this._suggestWorkspaceRecommendations();
+
+		// Executable based recommendations carry out a lot of file stats, so run them after 10 secs
+		// So that the startup is not affected
+		setTimeout(() => this._suggestBasedOnExecutables(this._exeBasedRecommendations), 10000);
+	}
+>>>>>>> .their
 
 		this.sessionSeed = +new Date();
 
@@ -286,6 +300,7 @@
 				}));
 	}
 
+<<<<<<< .our
 	private fetchExtensionRecommendationContents(): TPromise<{ contents: IExtensionsConfigContent, source: ExtensionRecommendationSource }[]> {
 		const workspace = this.contextService.getWorkspace();
 		return TPromise.join<{ contents: IExtensionsConfigContent, source: ExtensionRecommendationSource }>([
@@ -293,6 +308,9 @@
 			...workspace.folders.map(workspaceFolder => this.resolveWorkspaceFolderExtensionConfig(workspaceFolder).then(contents => contents ? { contents, source: workspaceFolder } : null))
 		]).then(contents => coalesce(contents));
 	}
+=======
+		const exeBased = distinct(this._exeBasedRecommendations);
+>>>>>>> .their
 
 	private resolveWorkspaceExtensionConfig(workspace: IWorkspace): TPromise<IExtensionsConfigContent | null> {
 		if (!workspace.configuration) {
@@ -801,6 +819,7 @@
 		);
 	}
 
+<<<<<<< .our
 	private fetchExecutableRecommendations(): TPromise<any> {
 		const homeDir = os.homedir();
 		let foundExecutables: Set<string> = new Set<string>();
@@ -815,11 +834,25 @@
 								this._exeBasedRecommendations[extensionId.toLowerCase()] = product.exeBasedExtensionTips[exeName]['friendlyName'];
 							}
 						});
+=======
+	private _suggestBasedOnExecutables(recommendations: string[]): void {
+		const homeDir = os.homedir();
+		let foundExecutables: Set<string> = new Set<string>();
+
+		let findExecutable = (exeName, path) => {
+			return pfs.fileExists(path).then(exists => {
+				if (!foundExecutables.has(exeName)) {
+					foundExecutables.add(exeName);
+					recommendations.push(...product.exeBasedExtensionTips[exeName]['recommendations']);
+>>>>>>> .their
 				}
 			});
 		};
 
+<<<<<<< .our
 		let promises: TPromise<any>[] = [];
+=======
+>>>>>>> .their
 		// Loop through recommended extensions
 		forEach(product.exeBasedExtensionTips, entry => {
 			if (typeof entry.value !== 'object' || !Array.isArray(entry.value['recommendations'])) {
@@ -832,6 +865,7 @@
 				if (!windowsPath || typeof windowsPath !== 'string') {
 					return;
 				}
+<<<<<<< .our
 				windowsPath = windowsPath.replace('%USERPROFILE%', process.env['USERPROFILE'])
 					.replace('%ProgramFiles(x86)%', process.env['ProgramFiles(x86)'])
 					.replace('%ProgramFiles%', process.env['ProgramFiles'])
@@ -844,6 +878,15 @@
 		});
 
 		return TPromise.join(promises);
+=======
+				windowsPath = windowsPath.replace('%USERPROFILE%', process.env['USERPROFILE']);
+				findExecutable(exeName, windowsPath);
+			} else {
+				findExecutable(exeName, paths.join('/usr/local/bin', exeName));
+				findExecutable(exeName, paths.join(homeDir, exeName));
+			}
+		});
+>>>>>>> .their
 	}
 
 	private setIgnoreRecommendationsConfig(configVal: boolean) {
