changed in both
  base   100644 998ebb4f37933426d1055845731602a7d70ea7a3 build/lib/compilation.js
  our    100644 ad73e2dcf7309fcc9c63b1c1b73c3f86ecac6dca build/lib/compilation.js
  their  100644 8474b052a0d08f25e61ad512941f1661b7ea5453 build/lib/compilation.js
@@ -63,8 +63,15 @@
 }
 function compileTask(src, out, build) {
     return function () {
+<<<<<<< .our
         var compile = createCompile(src, build, true);
         var srcPipe = es.merge(gulp.src(src + "/**", { base: "" + src }), gulp.src('node_modules/typescript/lib/lib.d.ts'));
+=======
+        var compile = createCompile(build, true);
+        var src = es.merge(gulp.src('src/**', { base: 'src' }), 
+        // gulp.src('node_modules/typescript/lib/lib.dom.d.ts'),
+        gulp.src('node_modules/typescript/lib/lib.es6.d.ts'));
+>>>>>>> .their
         // Do not write .d.ts files to disk, as they are not needed there.
         var dtsFilter = util.filter(function (data) { return !/\.d\.ts$/.test(data.path); });
         return srcPipe
@@ -78,8 +85,15 @@
 exports.compileTask = compileTask;
 function watchTask(out, build) {
     return function () {
+<<<<<<< .our
         var compile = createCompile('src', build);
         var src = es.merge(gulp.src('src/**', { base: 'src' }), gulp.src('node_modules/typescript/lib/lib.d.ts'));
+=======
+        var compile = createCompile(build);
+        var src = es.merge(gulp.src('src/**', { base: 'src' }), 
+        // gulp.src('node_modules/typescript/lib/lib.dom.d.ts'),
+        gulp.src('node_modules/typescript/lib/lib.es6.d.ts'));
+>>>>>>> .their
         var watchSrc = watch('src/**', { base: 'src' });
         // Do not write .d.ts files to disk, as they are not needed there.
         var dtsFilter = util.filter(function (data) { return !/\.d\.ts$/.test(data.path); });
changed in both
  base   100644 cedcb4155b67881275825f7d0442cf4877dba9ce build/lib/compilation.ts
  our    100644 33d8c11169093df0fd783c944e15dd2444a1594d build/lib/compilation.ts
  their  100644 5fce216ae74fa44e64ef516b998a5c745ce19467 build/lib/compilation.ts
@@ -76,9 +76,18 @@
 	return function () {
 		const compile = createCompile(src, build, true);
 
+<<<<<<< .our
 		const srcPipe = es.merge(
 			gulp.src(`${src}/**`, { base: `${src}` }),
 			gulp.src('node_modules/typescript/lib/lib.d.ts'),
+=======
+		const src = es.merge(
+			gulp.src('src/**', { base: 'src' }),
+			// gulp.src('node_modules/typescript/lib/lib.dom.d.ts'),
+			gulp.src('node_modules/typescript/lib/lib.es6.d.ts'),
+			// gulp.src('node_modules/typescript/lib/lib.dom.iterable.d.ts'),
+			// gulp.src('node_modules/typescript/lib/lib.scripthost.d.ts'),
+>>>>>>> .their
 		);
 
 		// Do not write .d.ts files to disk, as they are not needed there.
@@ -100,7 +109,10 @@
 
 		const src = es.merge(
 			gulp.src('src/**', { base: 'src' }),
-			gulp.src('node_modules/typescript/lib/lib.d.ts'),
+			// gulp.src('node_modules/typescript/lib/lib.dom.d.ts'),
+			gulp.src('node_modules/typescript/lib/lib.es6.d.ts'),
+			// gulp.src('node_modules/typescript/lib/lib.dom.iterable.d.ts'),
+			// gulp.src('node_modules/typescript/lib/lib.scripthost.d.ts'),
 		);
 		const watchSrc = watch('src/**', { base: 'src' });
 
merged
  result 100644 11324aadb556f9c88dacf6b35dd091fdb447fe4d src/tsconfig.json
  our    100644 408cad4917b111de7f66539f51d6de23be523d02 src/tsconfig.json
@@ -5,7 +5,14 @@
 		"noImplicitAny": false,
 		"removeComments": false,
 		"preserveConstEnums": true,
-		"target": "es5",
+		"target": "es6",
+		"lib": [
+			"dom",
+			"es5",
+			"es2015.promise",
+			"es2015.iterable",
+			"es2015.collection"
+		],
 		"sourceMap": false,
 		"experimentalDecorators": true,
 		"declaration": true,
@@ -14,12 +21,16 @@
 		"noImplicitThis": true,
 		"alwaysStrict": true,
 		"baseUrl": ".",
-		"outDir": "../out",
+		"outDir": "../out/vs",
 		"typeRoots": [
 			"typings"
 		]
 	},
 	"exclude": [
+		"typings/es6-promise.d.ts",
+		"typings/lib.ie11_safe_es6.d.ts",
+		"src/vs/base/common/winjs.polyfill.promise.ts",
+		"src/vs/base/test/common/winjs.polyfill.promise.test.ts",
 		"../out",
 		"../out-build",
 		"../out-vscode"
merged
  result 100644 9fb08a80011614f651dbf2e2fc5fb213ffa9acc3 src/typings/es6-promise.d.ts
  our    100644 f674baa6a874584a8deeeceadf649a4dce792604 src/typings/es6-promise.d.ts
@@ -81,4 +81,4 @@
 		export function polyfill(): void;
 	}
 	export = rsvp;
-}
+}
\ No newline at end of file
merged
  result 100644 69cce99eb05de77dbfbdd6a5d3c39abd730cdee4 src/vs/base/common/types.ts
  our    100644 5cae5c567f889b41d37bbc0ea343dbf8b434f818 src/vs/base/common/types.ts
@@ -162,8 +162,16 @@
  * any additional argument supplied.
  */
 export function create(ctor: Function, ...args: any[]): any {
-	let obj = Object.create(ctor.prototype);
-	ctor.apply(obj, args);
+	if (isES6Class(ctor)) {
+		return new (ctor as any)(...args);
+	} else {
+		let obj = Object.create(ctor.prototype);
+		ctor.apply(obj, args);
+		return obj;
+	}
+}
 
-	return obj;
+function isES6Class(func) {
+	// https://stackoverflow.com/questions/29093396/how-do-you-check-the-difference-between-an-ecmascript-6-class-and-function?answertab=votes#tab-top
+	return typeof func === 'function' && /^class\s/.test(Function.prototype.toString.call(func));
 }
