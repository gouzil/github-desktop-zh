changed in both
  base   100644 313e090044b1a07db59c28e930cf5d4b4dcd3571 src/vs/editor/common/editorCommon.ts
  our    100644 8ab17ce6977a746a13f9fe016e9948d332de49ca src/vs/editor/common/editorCommon.ts
  their  100644 22bff69581baa9e825895d55985d5e47fda3f2d0 src/vs/editor/common/editorCommon.ts
@@ -141,6 +141,758 @@
 	readonly modifiedEndColumn: number;
 }
 /**
+<<<<<<< .our
+=======
+ * A textual read-only model.
+ */
+export interface ITextModel {
+
+	/**
+	 * If true, the text model might contain RTL.
+	 * If false, the text model **contains only** contain LTR.
+	 * @internal
+	 */
+	mightContainRTL(): boolean;
+
+	/**
+	 * If true, the text model might contain non basic ASCII.
+	 * If false, the text model **contains only** basic ASCII.
+	 * @internal
+	 */
+	mightContainNonBasicASCII(): boolean;
+
+	/**
+	 * Get the resolved options for this model.
+	 */
+	getOptions(): TextModelResolvedOptions;
+
+	/**
+	 * Get the current version id of the model.
+	 * Anytime a change happens to the model (even undo/redo),
+	 * the version id is incremented.
+	 */
+	getVersionId(): number;
+
+	/**
+	 * Get the alternative version id of the model.
+	 * This alternative version id is not always incremented,
+	 * it will return the same values in the case of undo-redo.
+	 */
+	getAlternativeVersionId(): number;
+
+	/**
+	 * Replace the entire text buffer value contained in this model.
+	 */
+	setValue(newValue: string): void;
+
+	/**
+	 * Replace the entire text buffer value contained in this model.
+	 * @internal
+	 */
+	setValueFromTextSource(newValue: ITextSource): void;
+
+	/**
+	 * Get the text stored in this model.
+	 * @param eol The end of line character preference. Defaults to `EndOfLinePreference.TextDefined`.
+	 * @param preserverBOM Preserve a BOM character if it was detected when the model was constructed.
+	 * @return The text.
+	 */
+	getValue(eol?: EndOfLinePreference, preserveBOM?: boolean): string;
+
+	/**
+	 * Get the length of the text stored in this model.
+	 */
+	getValueLength(eol?: EndOfLinePreference, preserveBOM?: boolean): number;
+
+	/**
+	 * Check if the raw text stored in this model equals another raw text.
+	 * @internal
+	 */
+	equals(other: ITextSource): boolean;
+
+	/**
+	 * Get the text in a certain range.
+	 * @param range The range describing what text to get.
+	 * @param eol The end of line character preference. This will only be used for multiline ranges. Defaults to `EndOfLinePreference.TextDefined`.
+	 * @return The text.
+	 */
+	getValueInRange(range: IRange, eol?: EndOfLinePreference): string;
+
+	/**
+	 * Get the length of text in a certain range.
+	 * @param range The range describing what text length to get.
+	 * @return The text length.
+	 */
+	getValueLengthInRange(range: IRange): number;
+
+	/**
+	 * Splits characters in two buckets. First bucket (A) is of characters that
+	 * sit in lines with length < `LONG_LINE_BOUNDARY`. Second bucket (B) is of
+	 * characters that sit in lines with length >= `LONG_LINE_BOUNDARY`.
+	 * If count(B) > count(A) return true. Returns false otherwise.
+	 * @internal
+	 */
+	isDominatedByLongLines(): boolean;
+
+	/**
+	 * Get the number of lines in the model.
+	 */
+	getLineCount(): number;
+
+	/**
+	 * Get the text for a certain line.
+	 */
+	getLineContent(lineNumber: number): string;
+
+	/**
+	 * @internal
+	 */
+	getIndentLevel(lineNumber: number): number;
+
+	/**
+	 * @internal
+	 */
+	getIndentRanges(): IndentRange[];
+
+	/**
+	 * @internal
+	 */
+	getLineIndentGuide(lineNumber: number): number;
+
+	/**
+	 * Get the text for all lines.
+	 */
+	getLinesContent(): string[];
+
+	/**
+	 * Get the end of line sequence predominantly used in the text buffer.
+	 * @return EOL char sequence (e.g.: '\n' or '\r\n').
+	 */
+	getEOL(): string;
+
+	/**
+	 * Change the end of line sequence used in the text buffer.
+	 */
+	setEOL(eol: EndOfLineSequence): void;
+
+	/**
+	 * Get the minimum legal column for line at `lineNumber`
+	 */
+	getLineMinColumn(lineNumber: number): number;
+
+	/**
+	 * Get the maximum legal column for line at `lineNumber`
+	 */
+	getLineMaxColumn(lineNumber: number): number;
+
+	/**
+	 * Returns the column before the first non whitespace character for line at `lineNumber`.
+	 * Returns 0 if line is empty or contains only whitespace.
+	 */
+	getLineFirstNonWhitespaceColumn(lineNumber: number): number;
+
+	/**
+	 * Returns the column after the last non whitespace character for line at `lineNumber`.
+	 * Returns 0 if line is empty or contains only whitespace.
+	 */
+	getLineLastNonWhitespaceColumn(lineNumber: number): number;
+
+	/**
+	 * Create a valid position,
+	 */
+	validatePosition(position: IPosition): Position;
+
+	/**
+	 * Advances the given position by the given offest (negative offsets are also accepted)
+	 * and returns it as a new valid position.
+	 *
+	 * If the offset and position are such that their combination goes beyond the beginning or
+	 * end of the model, throws an exception.
+	 *
+	 * If the ofsset is such that the new position would be in the middle of a multi-byte
+	 * line terminator, throws an exception.
+	 */
+	modifyPosition(position: IPosition, offset: number): Position;
+
+	/**
+	 * Create a valid range.
+	 */
+	validateRange(range: IRange): Range;
+
+	/**
+	 * Converts the position to a zero-based offset.
+	 *
+	 * The position will be [adjusted](#TextDocument.validatePosition).
+	 *
+	 * @param position A position.
+	 * @return A valid zero-based offset.
+	 */
+	getOffsetAt(position: IPosition): number;
+
+	/**
+	 * Converts a zero-based offset to a position.
+	 *
+	 * @param offset A zero-based offset.
+	 * @return A valid [position](#Position).
+	 */
+	getPositionAt(offset: number): Position;
+
+	/**
+	 * Get a range covering the entire model
+	 */
+	getFullModelRange(): Range;
+
+	/**
+	 * Returns iff the model was disposed or not.
+	 */
+	isDisposed(): boolean;
+
+	/**
+	 * Only basic mode supports allowed on this model because it is simply too large.
+	 * (tokenization is allowed and other basic supports)
+	 * @internal
+	 */
+	isTooLargeForHavingARichMode(): boolean;
+
+	/**
+	 * The file is so large, that even tokenization is disabled.
+	 * @internal
+	 */
+	isTooLargeForTokenization(): boolean;
+
+	/**
+	 * Search the model.
+	 * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.
+	 * @param searchOnlyEditableRange Limit the searching to only search inside the editable range of the model.
+	 * @param isRegex Used to indicate that `searchString` is a regular expression.
+	 * @param matchCase Force the matching to match lower/upper case exactly.
+	 * @param wordSeparators Force the matching to match entire words only. Pass null otherwise.
+	 * @param captureMatches The result will contain the captured groups.
+	 * @param limitResultCount Limit the number of results
+	 * @return The ranges where the matches are. It is empty if not matches have been found.
+	 */
+	findMatches(searchString: string, searchOnlyEditableRange: boolean, isRegex: boolean, matchCase: boolean, wordSeparators: string, captureMatches: boolean, limitResultCount?: number): FindMatch[];
+	/**
+	 * Search the model.
+	 * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.
+	 * @param searchScope Limit the searching to only search inside this range.
+	 * @param isRegex Used to indicate that `searchString` is a regular expression.
+	 * @param matchCase Force the matching to match lower/upper case exactly.
+	 * @param wordSeparators Force the matching to match entire words only. Pass null otherwise.
+	 * @param captureMatches The result will contain the captured groups.
+	 * @param limitResultCount Limit the number of results
+	 * @return The ranges where the matches are. It is empty if no matches have been found.
+	 */
+	findMatches(searchString: string, searchScope: IRange, isRegex: boolean, matchCase: boolean, wordSeparators: string, captureMatches: boolean, limitResultCount?: number): FindMatch[];
+	/**
+	 * Search the model for the next match. Loops to the beginning of the model if needed.
+	 * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.
+	 * @param searchStart Start the searching at the specified position.
+	 * @param isRegex Used to indicate that `searchString` is a regular expression.
+	 * @param matchCase Force the matching to match lower/upper case exactly.
+	 * @param wordSeparators Force the matching to match entire words only. Pass null otherwise.
+	 * @param captureMatches The result will contain the captured groups.
+	 * @return The range where the next match is. It is null if no next match has been found.
+	 */
+	findNextMatch(searchString: string, searchStart: IPosition, isRegex: boolean, matchCase: boolean, wordSeparators: string, captureMatches: boolean): FindMatch;
+	/**
+	 * Search the model for the previous match. Loops to the end of the model if needed.
+	 * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.
+	 * @param searchStart Start the searching at the specified position.
+	 * @param isRegex Used to indicate that `searchString` is a regular expression.
+	 * @param matchCase Force the matching to match lower/upper case exactly.
+	 * @param wordSeparators Force the matching to match entire words only. Pass null otherwise.
+	 * @param captureMatches The result will contain the captured groups.
+	 * @return The range where the previous match is. It is null if no previous match has been found.
+	 */
+	findPreviousMatch(searchString: string, searchStart: IPosition, isRegex: boolean, matchCase: boolean, wordSeparators: string, captureMatches: boolean): FindMatch;
+}
+
+export class FindMatch {
+	_findMatchBrand: void;
+
+	public readonly range: Range;
+	public readonly matches: string[];
+
+	/**
+	 * @internal
+	 */
+	constructor(range: Range, matches: string[]) {
+		this.range = range;
+		this.matches = matches;
+	}
+}
+
+export interface IReadOnlyModel extends ITextModel {
+	/**
+	 * Gets the resource associated with this editor model.
+	 */
+	readonly uri: URI;
+
+	/**
+	 * Get the language associated with this model.
+	 * @internal
+	 */
+	getLanguageIdentifier(): LanguageIdentifier;
+
+	/**
+	 * Get the language associated with this model.
+	 */
+	getModeId(): string;
+
+	/**
+	 * Get the word under or besides `position`.
+	 * @param position The position to look for a word.
+	 * @param skipSyntaxTokens Ignore syntax tokens, as identified by the mode.
+	 * @return The word under or besides `position`. Might be null.
+	 */
+	getWordAtPosition(position: IPosition): IWordAtPosition;
+
+	/**
+	 * Get the word under or besides `position` trimmed to `position`.column
+	 * @param position The position to look for a word.
+	 * @param skipSyntaxTokens Ignore syntax tokens, as identified by the mode.
+	 * @return The word under or besides `position`. Will never be null.
+	 */
+	getWordUntilPosition(position: IPosition): IWordAtPosition;
+}
+
+/**
+ * @internal
+ */
+export interface IFoundBracket {
+	range: Range;
+	open: string;
+	close: string;
+	isOpen: boolean;
+}
+
+/**
+ * A model that is tokenized.
+ */
+export interface ITokenizedModel extends ITextModel {
+
+	/**
+	 * Force tokenization information for `lineNumber` to be accurate.
+	 * @internal
+	 */
+	forceTokenization(lineNumber: number): void;
+
+	/**
+	 * Get the tokens for the line `lineNumber`.
+	 * The tokens might be inaccurate. Use `forceTokenization` to ensure accurate tokens.
+	 * @internal
+	 */
+	getLineTokens(lineNumber: number): LineTokens;
+
+	/**
+	 * Get the language associated with this model.
+	 * @internal
+	 */
+	getLanguageIdentifier(): LanguageIdentifier;
+
+	/**
+	 * Get the language associated with this model.
+	 */
+	getModeId(): string;
+
+	/**
+	 * Set the current language mode associated with the model.
+	 * @internal
+	 */
+	setMode(languageIdentifier: LanguageIdentifier): void;
+
+	/**
+	 * Returns the real (inner-most) language mode at a given position.
+	 * The result might be inaccurate. Use `forceTokenization` to ensure accurate tokens.
+	 * @internal
+	 */
+	getLanguageIdAtPosition(lineNumber: number, column: number): LanguageId;
+
+	/**
+	 * Get the word under or besides `position`.
+	 * @param position The position to look for a word.
+	 * @param skipSyntaxTokens Ignore syntax tokens, as identified by the mode.
+	 * @return The word under or besides `position`. Might be null.
+	 */
+	getWordAtPosition(position: IPosition): IWordAtPosition;
+
+	/**
+	 * Get the word under or besides `position` trimmed to `position`.column
+	 * @param position The position to look for a word.
+	 * @param skipSyntaxTokens Ignore syntax tokens, as identified by the mode.
+	 * @return The word under or besides `position`. Will never be null.
+	 */
+	getWordUntilPosition(position: IPosition): IWordAtPosition;
+
+	/**
+	 * Find the matching bracket of `request` up, counting brackets.
+	 * @param request The bracket we're searching for
+	 * @param position The position at which to start the search.
+	 * @return The range of the matching bracket, or null if the bracket match was not found.
+	 * @internal
+	 */
+	findMatchingBracketUp(bracket: string, position: IPosition): Range;
+
+	/**
+	 * Find the first bracket in the model before `position`.
+	 * @param position The position at which to start the search.
+	 * @return The info for the first bracket before `position`, or null if there are no more brackets before `positions`.
+	 * @internal
+	 */
+	findPrevBracket(position:IPosition): IFoundBracket;
+
+	/**
+	 * Find the first bracket in the model after `position`.
+	 * @param position The position at which to start the search.
+	 * @return The info for the first bracket after `position`, or null if there are no more brackets after `positions`.
+	 * @internal
+	 */
+	findNextBracket(position:IPosition): IFoundBracket;
+
+	/**
+	 * Given a `position`, if the position is on top or near a bracket,
+	 * find the matching bracket of that bracket and return the ranges of both brackets.
+	 * @param position The position at which to look for a bracket.
+	 * @internal
+	 */
+	matchBracket(position: IPosition): [Range, Range];
+}
+
+/**
+ * A model that can track markers.
+ */
+export interface ITextModelWithMarkers extends ITextModel {
+	/**
+	 * @internal
+	 */
+	_addMarker(internalDecorationId: number, lineNumber: number, column: number, stickToPreviousCharacter: boolean): string;
+	/**
+	 * @internal
+	 */
+	_changeMarker(id: string, newLineNumber: number, newColumn: number): void;
+	/**
+	 * @internal
+	 */
+	_changeMarkerStickiness(id: string, newStickToPreviousCharacter: boolean): void;
+	/**
+	 * @internal
+	 */
+	_getMarker(id: string): Position;
+	/**
+	 * @internal
+	 */
+	_removeMarker(id: string): void;
+}
+
+/**
+ * Describes the behavior of decorations when typing/editing near their edges.
+ * Note: Please do not edit the values, as they very carefully match `DecorationRangeBehavior`
+ */
+export enum TrackedRangeStickiness {
+	AlwaysGrowsWhenTypingAtEdges = 0,
+	NeverGrowsWhenTypingAtEdges = 1,
+	GrowsOnlyWhenTypingBefore = 2,
+	GrowsOnlyWhenTypingAfter = 3,
+}
+
+/**
+ * A model that can have decorations.
+ */
+export interface ITextModelWithDecorations {
+	/**
+	 * Change the decorations. The callback will be called with a change accessor
+	 * that becomes invalid as soon as the callback finishes executing.
+	 * This allows for all events to be queued up until the change
+	 * is completed. Returns whatever the callback returns.
+	 * @param ownerId Identifies the editor id in which these decorations should appear. If no `ownerId` is provided, the decorations will appear in all editors that attach this model.
+	 * @internal
+	 */
+	changeDecorations<T>(callback: (changeAccessor: IModelDecorationsChangeAccessor) => T, ownerId?: number): T;
+
+	/**
+	 * Perform a minimum ammount of operations, in order to transform the decorations
+	 * identified by `oldDecorations` to the decorations described by `newDecorations`
+	 * and returns the new identifiers associated with the resulting decorations.
+	 *
+	 * @param oldDecorations Array containing previous decorations identifiers.
+	 * @param newDecorations Array describing what decorations should result after the call.
+	 * @param ownerId Identifies the editor id in which these decorations should appear. If no `ownerId` is provided, the decorations will appear in all editors that attach this model.
+	 * @return An array containing the new decorations identifiers.
+	 */
+	deltaDecorations(oldDecorations: string[], newDecorations: IModelDeltaDecoration[], ownerId?: number): string[];
+
+	/**
+	 * Remove all decorations that have been added with this specific ownerId.
+	 * @param ownerId The owner id to search for.
+	 * @internal
+	 */
+	removeAllDecorationsWithOwnerId(ownerId: number): void;
+
+	/**
+	 * Get the options associated with a decoration.
+	 * @param id The decoration id.
+	 * @return The decoration options or null if the decoration was not found.
+	 */
+	getDecorationOptions(id: string): IModelDecorationOptions;
+
+	/**
+	 * Get the range associated with a decoration.
+	 * @param id The decoration id.
+	 * @return The decoration range or null if the decoration was not found.
+	 */
+	getDecorationRange(id: string): Range;
+
+	/**
+	 * Gets all the decorations for the line `lineNumber` as an array.
+	 * @param lineNumber The line number
+	 * @param ownerId If set, it will ignore decorations belonging to other owners.
+	 * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).
+	 * @return An array with the decorations
+	 */
+	getLineDecorations(lineNumber: number, ownerId?: number, filterOutValidation?: boolean): IModelDecoration[];
+
+	/**
+	 * Gets all the decorations for the lines between `startLineNumber` and `endLineNumber` as an array.
+	 * @param startLineNumber The start line number
+	 * @param endLineNumber The end line number
+	 * @param ownerId If set, it will ignore decorations belonging to other owners.
+	 * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).
+	 * @return An array with the decorations
+	 */
+	getLinesDecorations(startLineNumber: number, endLineNumber: number, ownerId?: number, filterOutValidation?: boolean): IModelDecoration[];
+
+	/**
+	 * Gets all the deocorations in a range as an array. Only `startLineNumber` and `endLineNumber` from `range` are used for filtering.
+	 * So for now it returns all the decorations on the same line as `range`.
+	 * @param range The range to search in
+	 * @param ownerId If set, it will ignore decorations belonging to other owners.
+	 * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).
+	 * @return An array with the decorations
+	 */
+	getDecorationsInRange(range: IRange, ownerId?: number, filterOutValidation?: boolean): IModelDecoration[];
+
+	/**
+	 * Gets all the decorations as an array.
+	 * @param ownerId If set, it will ignore decorations belonging to other owners.
+	 * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).
+	 */
+	getAllDecorations(ownerId?: number, filterOutValidation?: boolean): IModelDecoration[];
+}
+
+/**
+ * An editable text model.
+ */
+export interface IEditableTextModel extends ITextModelWithMarkers {
+
+	/**
+	 * Normalize a string containing whitespace according to indentation rules (converts to spaces or to tabs).
+	 */
+	normalizeIndentation(str: string): string;
+
+	/**
+	 * Get what is considered to be one indent (e.g. a tab character or 4 spaces, etc.).
+	 */
+	getOneIndent(): string;
+
+	/**
+	 * Change the options of this model.
+	 */
+	updateOptions(newOpts: ITextModelUpdateOptions): void;
+
+	/**
+	 * Detect the indentation options for this model from its content.
+	 */
+	detectIndentation(defaultInsertSpaces: boolean, defaultTabSize: number): void;
+
+	/**
+	 * Push a stack element onto the undo stack. This acts as an undo/redo point.
+	 * The idea is to use `pushEditOperations` to edit the model and then to
+	 * `pushStackElement` to create an undo/redo stop point.
+	 */
+	pushStackElement(): void;
+
+	/**
+	 * Push edit operations, basically editing the model. This is the preferred way
+	 * of editing the model. The edit operations will land on the undo stack.
+	 * @param beforeCursorState The cursor state before the edit operaions. This cursor state will be returned when `undo` or `redo` are invoked.
+	 * @param editOperations The edit operations.
+	 * @param cursorStateComputer A callback that can compute the resulting cursors state after the edit operations have been executed.
+	 * @return The cursor state returned by the `cursorStateComputer`.
+	 */
+	pushEditOperations(beforeCursorState: Selection[], editOperations: IIdentifiedSingleEditOperation[], cursorStateComputer: ICursorStateComputer): Selection[];
+
+	/**
+	 * Edit the model without adding the edits to the undo stack.
+	 * This can have dire consequences on the undo stack! See @pushEditOperations for the preferred way.
+	 * @param operations The edit operations.
+	 * @return The inverse edit operations, that, when applied, will bring the model back to the previous state.
+	 */
+	applyEdits(operations: IIdentifiedSingleEditOperation[]): IIdentifiedSingleEditOperation[];
+
+	/**
+	 * Undo edit operations until the first previous stop point created by `pushStackElement`.
+	 * The inverse edit operations will be pushed on the redo stack.
+	 * @internal
+	 */
+	undo(): Selection[];
+
+	/**
+	 * Redo edit operations until the next stop point created by `pushStackElement`.
+	 * The inverse edit operations will be pushed on the undo stack.
+	 * @internal
+	 */
+	redo(): Selection[];
+
+	/**
+	 * Set an editable range on the model.
+	 * @internal
+	 */
+	setEditableRange(range: IRange): void;
+
+	/**
+	 * Check if the model has an editable range.
+	 * @internal
+	 */
+	hasEditableRange(): boolean;
+
+	/**
+	 * Get the editable range on the model.
+	 * @internal
+	 */
+	getEditableRange(): Range;
+}
+
+/**
+ * A model.
+ */
+export interface IModel extends IReadOnlyModel, IEditableTextModel, ITextModelWithMarkers, ITokenizedModel, ITextModelWithDecorations {
+	/**
+	 * @deprecated Please use `onDidChangeContent` instead.
+	 * An event emitted when the contents of the model have changed.
+	 * @internal
+	 * @event
+	 */
+	onDidChangeRawContent(listener: (e: ModelRawContentChangedEvent) => void): IDisposable;
+	/**
+	 * An event emitted when the contents of the model have changed.
+	 * @event
+	 */
+	onDidChangeContent(listener: (e: IModelContentChangedEvent) => void): IDisposable;
+	/**
+	 * An event emitted when decorations of the model have changed.
+	 * @event
+	 */
+	onDidChangeDecorations(listener: (e: IModelDecorationsChangedEvent) => void): IDisposable;
+	/**
+	 * An event emitted when the model options have changed.
+	 * @event
+	 */
+	onDidChangeOptions(listener: (e: IModelOptionsChangedEvent) => void): IDisposable;
+	/**
+	 * An event emitted when the language associated with the model has changed.
+	 * @event
+	 */
+	onDidChangeLanguage(listener: (e: IModelLanguageChangedEvent) => void): IDisposable;
+	/**
+	 * An event emitted right before disposing the model.
+	 * @event
+	 */
+	onWillDispose(listener: () => void): IDisposable;
+
+	/**
+	 * @internal
+	 */
+	addBulkListener(listener: BulkListenerCallback): IDisposable;
+
+	/**
+	 * A unique identifier associated with this model.
+	 */
+	readonly id: string;
+
+	/**
+	 * Destroy this model. This will unbind the model from the mode
+	 * and make all necessary clean-up to release this object to the GC.
+	 * @internal
+	 */
+	destroy(): void;
+
+	/**
+	 * Destroy this model. This will unbind the model from the mode
+	 * and make all necessary clean-up to release this object to the GC.
+	 */
+	dispose(): void;
+
+	/**
+	 * @internal
+	 */
+	onBeforeAttached(): void;
+
+	/**
+	 * @internal
+	 */
+	onBeforeDetached(): void;
+
+	/**
+	 * Returns iff this model is attached to an editor or not.
+	 * @internal
+	 */
+	isAttachedToEditor(): boolean;
+}
+
+/**
+ * A model for the diff editor.
+ */
+export interface IDiffEditorModel {
+	/**
+	 * Original model.
+	 */
+	original: IModel;
+	/**
+	 * Modified model.
+	 */
+	modified: IModel;
+}
+
+/**
+ * An event describing that an editor has had its model reset (i.e. `editor.setModel()`).
+ */
+export interface IModelChangedEvent {
+	/**
+	 * The `uri` of the previous model or null.
+	 */
+	readonly oldModelUrl: URI;
+	/**
+	 * The `uri` of the new model or null.
+	 */
+	readonly newModelUrl: URI;
+}
+
+export interface IDimension {
+	width: number;
+	height: number;
+}
+
+/**
+ * A change
+ */
+export interface IChange {
+	readonly originalStartLineNumber: number;
+	readonly originalEndLineNumber: number;
+	readonly modifiedStartLineNumber: number;
+	readonly modifiedEndLineNumber: number;
+}
+/**
+ * A character level change.
+ */
+export interface ICharChange extends IChange {
+	readonly originalStartColumn: number;
+	readonly originalEndColumn: number;
+	readonly modifiedStartColumn: number;
+	readonly modifiedEndColumn: number;
+}
+/**
+>>>>>>> .their
  * A line change
  */
 export interface ILineChange extends IChange {
removed in local
  base   100644 47b9d0f2f0b4a5067ae7f63055b77caca2dd5176 src/vs/editor/contrib/smartSelect/common/smartSelect.ts
  their  100644 af05efa2df2fc3748af8949e72b8f261f3198076 src/vs/editor/contrib/smartSelect/common/smartSelect.ts
