changed in both
  base   100644 963da6581ec174b954726d270803bbb2b879510a extensions/markdown-language-features/package.json
  our    100644 31171b5aef917e82b3d8b1aa5796c001d210b57e extensions/markdown-language-features/package.json
  their  100644 98c8ac2b46b06add686074feb7994a371110d4ad extensions/markdown-language-features/package.json
@@ -26,6 +26,15 @@
 		"onWebviewPanel:markdown.preview"
 	],
 	"contributes": {
+		"webviews": [
+			{
+				"viewType": "markdown.preview",
+				"icon": {
+					"light": "./media/Preview.svg",
+					"dark": "./media/Preview_inverse.svg"
+				}
+			}
+		],
 		"commands": [
 			{
 				"command": "markdown.showPreview",
changed in both
  base   100644 c455d3339630a2358b99c57690f1898ec5b0c96d src/vs/workbench/parts/webview/electron-browser/webview.contribution.ts
  our    100644 45e3dab5b9a839ecf7d615694e1a5e4400ca2cec src/vs/workbench/parts/webview/electron-browser/webview.contribution.ts
  their  100644 29f34ec1e55191e73872c8a92574ffe23dbcdf9d src/vs/workbench/parts/webview/electron-browser/webview.contribution.ts
@@ -20,6 +20,7 @@
 import { WebviewEditor } from './webviewEditor';
 import { WebviewEditorInput } from './webviewEditorInput';
 import { IWebviewEditorService, WebviewEditorService } from './webviewEditorService';
+import './webviewExtensionPoint';
 
 (Registry.as<IEditorRegistry>(EditorExtensions.Editors)).registerEditor(new EditorDescriptor(
 	WebviewEditor,
changed in both
  base   100644 29ea5220e4daf14fef4b56f23d26f10fa739faa0 src/vs/workbench/parts/webview/electron-browser/webviewEditorInput.ts
  our    100644 912f937e607af2b55bc869f45cca4acff04b9ca6 src/vs/workbench/parts/webview/electron-browser/webviewEditorInput.ts
  their  100644 6de4d9829a324eca7765a6e691fabaa7da4afd7e src/vs/workbench/parts/webview/electron-browser/webviewEditorInput.ts
@@ -123,7 +123,11 @@
 	public getResource(): URI {
 		return URI.from({
 			scheme: 'webview-panel',
+<<<<<<< .our
 			path: `webview-panel/webview-${this._id}`
+=======
+			path: this.state ? `webview-panel/${this.state.viewType}` : ''
+>>>>>>> .their
 		});
 	}
 
added in remote
  their  100644 0d8975245e60f296ca7ae936aa3c02e046cff483 src/vs/workbench/parts/webview/electron-browser/webviewExtensionPoint.ts
@@ -0,0 +1,151 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import { join } from 'path';
+import * as dom from 'vs/base/browser/dom';
+import { IJSONSchema } from 'vs/base/common/jsonSchema';
+import { localize } from 'vs/nls';
+import { ExtensionMessageCollector, ExtensionsRegistry } from 'vs/workbench/services/extensions/common/extensionsRegistry';
+
+namespace schema {
+
+	export interface IUserFriendlyWebviewDescriptor {
+		viewType: string;
+		icon?: {
+			light: string;
+			dark: string;
+		};
+	}
+
+	export function isValidViewDescriptors(viewDescriptors: IUserFriendlyWebviewDescriptor[], collector: ExtensionMessageCollector): boolean {
+		if (!Array.isArray(viewDescriptors)) {
+			collector.error(localize('requirearray', "views must be an array"));
+			return false;
+		}
+
+		for (let descriptor of viewDescriptors) {
+			if (typeof descriptor.viewType !== 'string') {
+				collector.error(localize('requirestring', "property `{0}` is mandatory and must be of type `string`", 'viewType'));
+				return false;
+			}
+
+			if (descriptor.icon) {
+				if (typeof descriptor.icon.dark !== 'string') {
+					collector.error(localize('optstring', "property `{0}` can be omitted or must be of type `string`", 'icon.dark'));
+					return false;
+				}
+				if (typeof descriptor.icon.light !== 'string') {
+					collector.error(localize('optstring', "property `{0}` can be omitted or must be of type `string`", 'icon.light'));
+					return false;
+				}
+			}
+		}
+
+		return true;
+	}
+
+	const webviewDescriptor: IJSONSchema = {
+		type: 'object',
+		properties: {
+			viewType: {
+				description: localize('vscode.extension.contributes.webview.viewType', 'The unique identifier of the view.'),
+				type: 'string'
+			},
+			icon: {
+				type: 'object',
+				properties: {
+					light: {
+						type: 'string'
+					},
+					dark: {
+						type: 'string'
+					}
+				}
+			}
+		}
+	};
+
+	export const webviewsContribution: IJSONSchema = {
+		description: localize('vscode.extension.contributes.webviews', "Contributes webviews to the editor"),
+		type: 'array',
+		items: webviewDescriptor,
+		default: []
+	};
+}
+
+
+ExtensionsRegistry.registerExtensionPoint<schema.IUserFriendlyWebviewDescriptor[]>('webviews', [], schema.webviewsContribution)
+	.setHandler((extensions) => {
+		for (let extension of extensions) {
+			const { value, collector } = extension;
+
+			if (!schema.isValidViewDescriptors(value, collector)) {
+				return;
+			}
+
+			const viewIds: string[] = [];
+			const viewDescriptors: IWebviewDescriptor[] = value.map(item => {
+				const viewDescriptor = <IWebviewDescriptor>{
+					viewType: item.viewType,
+					icon: item.icon ? {
+						light: join(extension.description.extensionFolderPath, item.icon.light),
+						dark: join(extension.description.extensionFolderPath, item.icon.dark),
+					} : undefined
+				};
+
+				// validate
+				if (viewIds.indexOf(viewDescriptor.viewType) !== -1) {
+					collector.error(localize('duplicateView1', "Cannot register multiple webview with same viewtype `{0}`", viewDescriptor.viewType));
+					return null;
+				}
+				// if (registeredViews.some(v => v.id === viewDescriptor.id)) {
+				// 	collector.error(localize('duplicateView2', "A view with id `{0}` is already registered in the location `{1}`", viewDescriptor.id, viewDescriptor.location.id));
+				// 	return null;
+				// }
+
+				viewIds.push(viewDescriptor.viewType);
+				return viewDescriptor;
+			});
+
+			WebviewsRegistry.registerViews(viewDescriptors);
+		}
+	});
+
+export interface IWebviewDescriptor {
+	viewType: string;
+	icon?: {
+		light: string;
+		dark: string;
+	};
+}
+
+export const WebviewsRegistry = new class {
+	readonly _webviews = new Map<string, IWebviewDescriptor>();
+	_styleElement: HTMLStyleElement;
+
+	constructor() {
+		this._styleElement = dom.createStyleSheet();
+		this._styleElement.className = 'webview-icons';
+	}
+
+	public get(viewType: string): IWebviewDescriptor | undefined {
+		return this._webviews.get(viewType);
+	}
+
+	public registerViews(views: IWebviewDescriptor[]) {
+		const cssRules: string[] = [];
+		for (const view of views) {
+			this._webviews.set(view.viewType, view);
+			if (view.icon) {
+				cssRules.push(`.show-file-icons .${escapeCSS(view.viewType)}-name-file-icon::before { background-image: url(${view.icon.light}); }`);
+			}
+		}
+		this._styleElement.innerHTML = cssRules.join('\n');
+	}
+};
+
+function escapeCSS(str: string) {
+	return window['CSS'].escape(str);
+}
