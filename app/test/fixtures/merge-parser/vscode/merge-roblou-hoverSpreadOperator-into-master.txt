changed in both
  base   100644 c91609db06ae03c7c9d95846cd6b89136ffd8375 src/vs/workbench/parts/debug/electron-browser/debugHover.ts
  our    100644 6e43c34d40bb7d3287b2fbbc0d6ca55a55efddc4 src/vs/workbench/parts/debug/electron-browser/debugHover.ts
  their  100644 3cb7b0fac646b1fe4351f5256ca050a597740662 src/vs/workbench/parts/debug/electron-browser/debugHover.ts
@@ -4,6 +4,7 @@
  *--------------------------------------------------------------------------------------------*/
 
 import * as nls from 'vs/nls';
+import * as strings from 'vs/base/common/strings';
 import * as lifecycle from 'vs/base/common/lifecycle';
 import { TPromise } from 'vs/base/common/winjs.base';
 import { KeyCode } from 'vs/base/common/keyCodes';
@@ -33,6 +34,8 @@
 const $ = dom.$;
 const MAX_ELEMENTS_SHOWN = 18;
 
+const SPREAD_OPERATOR = '...';
+
 export class DebugHoverWidget implements IContentWidget {
 
 	public static readonly ID = 'debug.hoverWidget';
@@ -139,6 +142,58 @@
 		return this.domNode;
 	}
 
+<<<<<<< .our
+=======
+	private getExactExpressionRange(lineContent: string, range: Range): Range {
+		let matchingExpression: string = undefined;
+		let startOffset = 0;
+
+		// Some example supported expressions: myVar.prop, a.b.c.d, myVar?.prop, myVar->prop, MyClass::StaticProp, *myVar
+		// Match any character except a set of characters which often break interesting sub-expressions
+		let expression: RegExp = /([^()\[\]{}<>\s+\-/%~#^;=|,`!]|\->)+/g;
+		let result: RegExpExecArray = undefined;
+
+		// First find the full expression under the cursor
+		while (result = expression.exec(lineContent)) {
+			let match = result[0];
+			let start = result.index + 1;
+			let end = start + match.length;
+
+			if (strings.startsWith(match, SPREAD_OPERATOR)) {
+				match = strings.ltrim(match, SPREAD_OPERATOR);
+				start += SPREAD_OPERATOR.length;
+			}
+
+			if (start <= range.startColumn && end >= range.endColumn) {
+				matchingExpression = match;
+				startOffset = start;
+				break;
+			}
+		}
+
+		// If there are non-word characters after the cursor, we want to truncate the expression then.
+		// For example in expression 'a.b.c.d', if the focus was under 'b', 'a.b' would be evaluated.
+		if (matchingExpression) {
+			let subExpression: RegExp = /\w+/g;
+			let subExpressionResult: RegExpExecArray = undefined;
+			while (subExpressionResult = subExpression.exec(matchingExpression)) {
+				let subEnd = subExpressionResult.index + 1 + startOffset + subExpressionResult[0].length;
+				if (subEnd >= range.endColumn) {
+					break;
+				}
+			}
+
+			if (subExpressionResult) {
+				matchingExpression = matchingExpression.substring(0, subExpression.lastIndex);
+			}
+		}
+
+		return matchingExpression ?
+			new Range(range.startLineNumber, startOffset, range.endLineNumber, startOffset + matchingExpression.length - 1) :
+			new Range(range.startLineNumber, 0, range.endLineNumber, 0);
+	}
+
+>>>>>>> .their
 	public showAt(range: Range, focus: boolean): TPromise<void> {
 		const pos = range.getStartPosition();
 
