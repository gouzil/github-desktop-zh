changed in both
  base   100644 6b4cdd2855fdc2ea9a399d83362633cdb5db8117 build/gulpfile.hygiene.js
  our    100644 6a4cd05d17fefc0e6fdc6e8d0fd2997f3c2894ff build/gulpfile.hygiene.js
  their  100644 742c276d7b5d15212c2bc118b50a060e819370b0 build/gulpfile.hygiene.js
@@ -104,6 +104,7 @@
 	'!**/*.disabled',
 	'!**/*.code-workspace',
 	'!build/**/*.init',
+	'!resources/linux/snap/electron-launch',
 	'!resources/linux/snap/snapcraft.yaml',
 	'!resources/linux/snap/electron-launch',
 	'!resources/win32/bin/code.js',
changed in both
  base   100644 ecbc45df32009bc47b5bee870738165f6823dcfa build/gulpfile.vscode.linux.js
  our    100644 49f2cad8ad7356d234ea195099b657b71e99718a build/gulpfile.vscode.linux.js
  their  100644 63776f8efcae2c7fb93cb3afc9381e4b2ce44a3b build/gulpfile.vscode.linux.js
@@ -180,17 +180,21 @@
 			.pipe(rename(`usr/share/pixmaps/${product.applicationName}.png`));
 
 		const code = gulp.src(binaryDir + '/**/*', { base: binaryDir })
-			.pipe(rename(function (p) { p.dirname = 'usr/share/' + product.applicationName + '/' + p.dirname; }));
+			.pipe(rename(function (p) { p.dirname = `usr/share/${product.applicationName}/${p.dirname}`; }));
 
 		const snapcraft = gulp.src('resources/linux/snap/snapcraft.yaml', { base: '.' })
 			.pipe(replace('@@NAME@@', product.applicationName))
-			.pipe(replace('@@VERSION@@', packageJson.version))
+			.pipe(replace('@@VERSION@@', `${packageJson.version}-${linuxPackageRevision}`))
 			.pipe(rename('snap/snapcraft.yaml'));
 
+		const snapUpdate = gulp.src('resources/linux/snap/snapUpdate.sh', { base: '.' })
+			.pipe(replace('@@NAME@@', product.applicationName))
+			.pipe(rename(`usr/share/${product.applicationName}/snapUpdate.sh`));
+
 		const electronLaunch = gulp.src('resources/linux/snap/electron-launch', { base: '.' })
 			.pipe(rename('electron-launch'));
 
-		const all = es.merge(desktop, icon, code, snapcraft, electronLaunch);
+		const all = es.merge(desktop, icon, code, snapcraft, electronLaunch, snapUpdate);
 
 		return all.pipe(vfs.dest(destination));
 	};
@@ -200,7 +204,8 @@
 	const snapBuildPath = getSnapBuildPath(arch);
 	const snapFilename = `${product.applicationName}-${packageJson.version}-${linuxPackageRevision}-${arch}.snap`;
 	return shell.task([
-		`chmod +x ${snapBuildPath}/electron-launch`,
+		`chmod a+x ${snapBuildPath}/electron-launch ${snapBuildPath}/usr/share/${product.applicationName}/snapUpdate.sh`,
+		`snapcraft --version`,
 		`cd ${snapBuildPath} && snapcraft snap --output ../${snapFilename}`
 	]);
 }
removed in local
  base   100755 cc1bb74d01fde092d01ce67236f06d3b38e6c786 build/tfs/common/node.sh
  their  100755 c6cabcf6124bbe20b21866d24683d4afcb048556 build/tfs/common/node.sh
removed in local
  base   100755 e23049b5cf4d693f75e408e546cd2109963166cd build/tfs/linux/build.sh
  their  100755 f6327f28756ae178b960ac8c292cce2a15e9f0fc build/tfs/linux/build.sh
added in remote
  their  100755 750ab13175fd2ed92ea4f1b1e3a12ae0d785ff38 build/tfs/linux/release-snap.sh
@@ -0,0 +1,54 @@
+#!/bin/bash
+
+. ./scripts/env.sh
+. ./build/tfs/common/common.sh
+
+step "Build snap package" \
+	npm run gulp -- "vscode-linux-$ARCH-build-snap"
+
+# Variables
+PLATFORM_LINUX="linux-$ARCH"
+PLATFORM_SNAP="linux-snap-$ARCH"
+REPO="`pwd`"
+ROOT="$REPO/.."
+BUILDNAME="VSCode-$PLATFORM_LINUX"
+BUILD="$ROOT/$BUILDNAME"
+PACKAGEJSON="$BUILD/resources/app/package.json"
+VERSION=$(node -p "require(\"$PACKAGEJSON\").version")
+
+SNAP_FILENAME="$(ls $REPO/.build/linux/snap/$ARCH/ | grep .snap)"
+SNAP_PATH="$REPO/.build/linux/snap/$ARCH/$SNAP_FILENAME"
+
+step "Publish Snap package" \
+	node build/tfs/common/publish.js $VSCODE_QUALITY $PLATFORM_SNAP package $SNAP_FILENAME $VERSION true $SNAP_PATH
+
+if [ -z "$VSCODE_QUALITY" ]; then
+	echo "VSCODE_QUALITY is not set, skipping repo package publish"
+else
+	if [ -z "$SNAPCRAFT_LOGIN" ] || [ -z "$SNAPCRAFT_MACAROON" ] || [ -z "$SNAPCRAFT_UNBOUND_DISCHARGE" ]; then
+		echo "SNAPCRAFT* env vars not set, skipping repo package publish"
+	else
+		IS_FROZEN="$(node build/tfs/linux/frozen-check.js $VSCODE_QUALITY)"
+		AUTO_RELEASE=0
+		if [ "$IS_FROZEN" != "true" ]; then
+			if [ "$BUILD_SOURCEBRANCH" = "master" ] || [ "$BUILD_SOURCEBRANCH" = "refs/heads/master" ]; then
+				if [[ $BUILD_QUEUEDBY = *"Project Collection Service Accounts"* || $BUILD_QUEUEDBY = *"Microsoft.VisualStudio.Services.TFS"* ]]; then
+					if [ "$VSCODE_QUALITY" = "insider" ]; then
+						AUTO_RELEASE=1
+					fi
+				fi
+			fi
+		fi
+
+		LOGIN_FILE=snapcraft_login_file
+		echo -e '[login.ubuntu.com]\nmacaroon = '$SNAPCRAFT_MACAROON'\nunbound_discharge = '$SNAPCRAFT_UNBOUND_DISCHARGE'\nemail = '$VSCODE_SNAP_LOGIN'\n' > $LOGIN_FILE
+		snapcraft login --with $LOGIN_FILE
+		if [ "$AUTO_RELEASE" = "1" ]; then
+			echo "Pushing and releasing to Snap Store stable channel"
+			snapcraft push $SNAP_PATH --release stable
+		else
+			echo "Pushing to Snap Store"
+			snapcraft push $SNAP_PATH
+		fi
+	fi
+fi
\ No newline at end of file
removed in local
  base   100755 1025ac9df48ca335a1732fa1bf13c1237eeb92f0 build/tfs/linux/release.sh
  their  100755 09e76099758fe27f53b9fdcb4cf49f40185ee769 build/tfs/linux/release.sh
added in remote
  their  100644 f2632e12f9b83f4e1320d634578e8bcdce011132 build/tfs/linux/x64-snap/Dockerfile
@@ -0,0 +1,71 @@
+FROM microsoft/vsts-agent:ubuntu-16.04-standard
+MAINTAINER Daniel Imms <daimms@microsoft.com>
+
+ARG DEBIAN_FRONTEND=noninteractive
+RUN apt-get update
+
+# Dependencies
+RUN apt-get install -y build-essential \
+  gcc-multilib \
+  g++-multilib \
+  git \
+  dpkg-dev \
+  zip \
+  rpm \
+  createrepo \
+  python-gtk2 \
+  jq \
+  xvfb \
+  fakeroot \
+  libgtk2.0-0 \
+  libgconf-2-4 \
+  libnss3 \
+  libasound2 \
+  libxtst6 \
+  libfuse2 \
+  libnotify-bin \
+  libx11-dev \
+  libxss1 \
+  libx11-xcb-dev \
+  libxkbfile-dev \
+  bc \
+  bsdmainutils \
+  libsecret-1-dev
+
+# Xvfb
+# Thanks https://medium.com/@griggheo/running-headless-selenium-webdriver-tests-in-docker-containers-342fdbabf756
+ADD ./xvfb.init /etc/init.d/xvfb
+RUN chmod +x /etc/init.d/xvfb
+RUN update-rc.d xvfb defaults
+
+# dbus
+RUN ln -sf /bin/dbus-daemon /usr/bin/dbus-daemon
+
+# nvm
+ENV NVM_DIR /usr/local/nvm
+RUN curl https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash
+
+# snapcraft
+# From https://github.com/snapcore/snapcraft/tree/master/docker
+RUN apt-get update && \
+  apt-get dist-upgrade --yes && \
+  apt-get install --yes \
+  curl sudo squashfs-tools && \
+  curl -L $(curl -H 'X-Ubuntu-Series: 16' 'https://api.snapcraft.io/api/v1/snaps/details/core' | jq '.download_url' -r) --output core.snap && \
+  mkdir -p /snap/core && unsquashfs -d /snap/core/current core.snap && rm core.snap && \
+  curl -L $(curl -H 'X-Ubuntu-Series: 16' 'https://api.snapcraft.io/api/v1/snaps/details/snapcraft?channel=beta' | jq '.download_url' -r) --output snapcraft.snap && \
+  mkdir -p /snap/snapcraft && unsquashfs -d /snap/snapcraft/current snapcraft.snap && rm snapcraft.snap && \
+  mkdir -p /snap/bin && \
+  echo "#!/bin/sh" > /snap/bin/snapcraft && \
+  echo 'exec $SNAP/usr/bin/python3 $SNAP/bin/snapcraft "$@"' >> /snap/bin/snapcraft && \
+  chmod a+x /snap/bin/snapcraft && \
+  apt-get autoclean --yes && \
+  apt-get clean --yes
+ENV SNAP=/snap/snapcraft/current
+ENV SNAP_NAME=snapcraft
+ENV SNAP_VERSION=beta
+ENV PATH=/snap/bin:$PATH
+# Required by click.
+ENV LC_ALL C.UTF-8
+
+CMD (service xvfb start; service dbus start; export DISPLAY=:10; ./start.sh "16.04")
\ No newline at end of file
added in remote
  their  100755 65f825b2b6e6f869ef7c665310e15e6ac3648bf6 build/tfs/linux/x64-snap/run-agent.sh
@@ -0,0 +1,15 @@
+#!/bin/bash
+
+if [ ! -f pat ]; then
+	echo "Error: file pat not found"
+	exit 1
+fi
+
+docker run \
+  -e VSTS_ACCOUNT="monacotools" \
+  -e VSTS_TOKEN="$(cat pat)" \
+  -e VSTS_AGENT="tb-lnx-x64-snap" \
+  -e VSTS_POOL="linux-x64-ubuntu-16-04-snap" \
+  -e VSTS_WORK="/var/vsts/work" \
+  --name "tb-lnx-x64-snap" \
+  -it daimms-snap-agent:latest
\ No newline at end of file
added in remote
  their  100644 4d77d253a26496c7c60b3c2bb5ff9c6ca054631d build/tfs/linux/x64-snap/xvfb.init
@@ -0,0 +1,53 @@
+#!/bin/bash
+#
+# /etc/rc.d/init.d/xvfbd
+#
+# chkconfig: 345 95 28
+# description: Starts/Stops X Virtual Framebuffer server
+# processname: Xvfb
+#
+### BEGIN INIT INFO
+# Provides:          xvfb
+# Required-Start:    $remote_fs $syslog
+# Required-Stop:     $remote_fs $syslog
+# Default-Start:     2 3 4 5
+# Default-Stop:      0 1 6
+# Short-Description: Start xvfb at boot time
+# Description:       Enable xvfb provided by daemon.
+### END INIT INFO
+
+[ "${NETWORKING}" = "no" ] && exit 0
+
+PROG="/usr/bin/Xvfb"
+PROG_OPTIONS=":10 -ac"
+PROG_OUTPUT="/tmp/Xvfb.out"
+
+case "$1" in
+	start)
+		echo "Starting : X Virtual Frame Buffer "
+		$PROG $PROG_OPTIONS>>$PROG_OUTPUT 2>&1 &
+		disown -ar
+	;;
+	stop)
+		echo "Shutting down : X Virtual Frame Buffer"
+		killproc $PROG
+		RETVAL=$?
+		[ $RETVAL -eq 0 ] && /bin/rm -f /var/lock/subsys/Xvfb
+		/var/run/Xvfb.pid
+		echo
+	;;
+	restart|reload)
+		$0 stop
+		$0 start
+		RETVAL=$?
+	;;
+	status)
+		status Xvfb
+		RETVAL=$?
+	;;
+	*)
+		echo $"Usage: $0 (start|stop|restart|reload|status)"
+		exit 1
+esac
+
+exit $RETVAL
\ No newline at end of file
merged
  result 100644 9a164d7dfa3acfc38cc582916f16d6ca83df4da1 resources/linux/snap/electron-launch
  our    100644 65c91d6fc1b6656b93527087287c210d80d0794a resources/linux/snap/electron-launch
@@ -1,3 +1,6 @@
 #!/bin/sh
 
+# Create $XDG_RUNTIME_DIR if it doesn't exist
+[ -n "$XDG_RUNTIME_DIR" ] && mkdir -p $XDG_RUNTIME_DIR -m 700
+
 exec "$@" --executed-from="$(pwd)" --pid=$$
added in remote
  their  100755 c182e036a62309b015c8d8b3f01625c9022cc53d resources/linux/snap/snapUpdate.sh
@@ -0,0 +1,2 @@
+sleep 5
+code-insiders /Users/daimms/dev/Microsoft/vscode/OSSREADME.json
\ No newline at end of file
merged
  result 100644 2f596682a9ea3cf7e34fe75165c2c1563361f47d resources/linux/snap/snapcraft.yaml
  our    100644 e8a5d48fdf116ecbce8019b7af8c8532fd5b340b resources/linux/snap/snapcraft.yaml
@@ -26,8 +26,12 @@
       # desktop-gtk2 deps below
       - libxkbcommon0
       - libgtk2.0-0
-      # - unity-gtk2-module
+      - libgdk-pixbuf2.0-0
+      - libglib2.0-bin
+      - libgtk2.0-bin
+      - unity-gtk2-module
       - libappindicator1
+      - xdg-user-dirs
     prime:
       - -usr/share/dh-python
   electron-launch:
changed in both
  base   100644 12d660bb203b3c3ee596cbd2af55035386a9cd01 src/vs/platform/update/electron-main/updateService.linux.ts
  our    100644 87c60c5d4360ea55dff2b83145f098b858b83c75 src/vs/platform/update/electron-main/updateService.linux.ts
  their  100644 dc8ecc10a670f7846e5818e556dd42ec437b35bb src/vs/platform/update/electron-main/updateService.linux.ts
@@ -17,6 +17,9 @@
 import { asJson } from 'vs/base/node/request';
 import { TPromise } from 'vs/base/common/winjs.base';
 import { shell } from 'electron';
+import { realpath } from 'vs/base/node/pfs';
+import * as path from 'path';
+import { spawn } from 'child_process';
 
 export class LinuxUpdateService extends AbstractUpdateService {
 
@@ -44,10 +47,28 @@
 
 		this.setState(State.CheckingForUpdates(context));
 
-		this.requestService.request({ url: this.url })
-			.then<IUpdate>(asJson)
-			.then(update => {
-				if (!update || !update.url || !update.version || !update.productVersion) {
+		if (process.env.SNAP && process.env.SNAP_REVISION) {
+			this.checkForSnapUpdate();
+		} else {
+			this.requestService.request({ url: this.url })
+				.then<IUpdate>(asJson)
+				.then(update => {
+					if (!update || !update.url || !update.version || !update.productVersion) {
+						/* __GDPR__
+								"update:notAvailable" : {
+									"explicit" : { "classification": "SystemMetaData", "purpose": "FeatureInsight" }
+								}
+							*/
+						this.telemetryService.publicLog('update:notAvailable', { explicit: !!context });
+
+						this.setState(State.Idle);
+					} else {
+						this.setState(State.AvailableForDownload(update));
+					}
+				})
+				.then(null, err => {
+					this.logService.error(err);
+
 					/* __GDPR__
 							"update:notAvailable" : {
 								"explicit" : { "classification": "SystemMetaData", "purpose": "FeatureInsight", "isMeasurement": true }
@@ -55,6 +76,7 @@
 						*/
 					this.telemetryService.publicLog('update:notAvailable', { explicit: !!context });
 
+<<<<<<< .our
 					this.setState(State.Idle(UpdateType.Archive));
 				} else {
 					this.setState(State.AvailableForDownload(update));
@@ -71,6 +93,25 @@
 				this.telemetryService.publicLog('update:notAvailable', { explicit: !!context });
 				this.setState(State.Idle(UpdateType.Archive));
 			});
+=======
+					this.setState(State.Idle);
+				});
+		}
+	}
+
+	private checkForSnapUpdate() {
+		// If the application was installed as a snap, updates happen in the
+		// background automatically, we just need to check to see if an update
+		// has already happened.
+		realpath(`/snap/${product.applicationName}/current`).then(resolvedCurrentSnapPath => {
+			const currentRevision = path.basename(resolvedCurrentSnapPath);
+			if (process.env.SNAP_REVISION !== currentRevision) {
+				this.setState(State.Ready(null));
+			} else {
+				this.setState(State.Idle);
+			}
+		});
+>>>>>>> .their
 	}
 
 	protected doDownloadUpdate(state: AvailableForDownload): TPromise<void> {
@@ -85,4 +126,14 @@
 		this.setState(State.Idle(UpdateType.Archive));
 		return TPromise.as(null);
 	}
+
+	protected doQuitAndInstall(): void {
+		this.logService.trace('update#quitAndInstall(): running raw#quitAndInstall()');
+
+		// Allow 3 seconds for VS Code to close
+		spawn('bash', ['-c', path.join(process.env.SNAP, `usr/share/${product.applicationName}/snapUpdate.sh`)], {
+			detached: true,
+			stdio: ['ignore', 'ignore', 'ignore']
+		});
+	}
 }
changed in both
  base   100644 93cf12eeb33a49f292b2edb150e19eab0a6e730f src/vs/workbench/parts/update/electron-browser/update.ts
  our    100644 2e468debc61fae01ce2d9c4b673a81993982cc62 src/vs/workbench/parts/update/electron-browser/update.ts
  their  100644 55677909c525efefdc5a06d43fa95e863b624bc0 src/vs/workbench/parts/update/electron-browser/update.ts
@@ -535,6 +535,7 @@
 			return;
 		}
 
+<<<<<<< .our
 		// windows user fast updates and mac
 		this.notificationService.prompt(
 			severity.Info,
@@ -554,6 +555,25 @@
 				}
 			}]
 		);
+=======
+		// TODO: Clean up
+		let releaseNotesAction: ShowReleaseNotesAction;
+		if (update) {
+			releaseNotesAction = this.instantiationService.createInstance(ShowReleaseNotesAction, update.productVersion);
+		}
+
+		const applyUpdateAction = new Action('update.applyUpdate', nls.localize('updateNow', "Update Now"), undefined, true, () =>
+			this.updateService.quitAndInstall());
+
+		const handle = this.notificationService.notify({
+			severity: severity.Info,
+			message: nls.localize('updateAvailableAfterRestart', "Restart {0} to apply the latest update.", product.nameLong),
+			actions: {
+				primary: releaseNotesAction ? [applyUpdateAction, NotNowAction, releaseNotesAction] : [applyUpdateAction, NotNowAction]
+			}
+		});
+		once(handle.onDidDispose)(() => applyUpdateAction, releaseNotesAction);
+>>>>>>> .their
 	}
 
 	private shouldShowNotification(): boolean {
