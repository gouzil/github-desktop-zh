removed in local
  base   100644 fe6200c00a381a228c0a13d80b7b9d01926b6616 extensions/vscode-api-tests/src/languages.test.ts
  their  100644 4ffb3b1afc7e4453f87233093202ad29fe52bcab extensions/vscode-api-tests/src/languages.test.ts
removed in local
  base   100644 8ffd713d0d7dd320cc34b8297519671204531605 src/vs/editor/browser/standalone/standaloneEditor.ts
  their  100644 f99c9ed5634f47c6270a3038a84f62867a845088 src/vs/editor/browser/standalone/standaloneEditor.ts
removed in local
  base   100644 56b322a27b088990fa5ca22b25c8ebc3fc459ad4 src/vs/editor/browser/standalone/standaloneServices.ts
  their  100644 a312ef552a7a3f1fca598afb5a9426d1168d27b6 src/vs/editor/browser/standalone/standaloneServices.ts
removed in local
  base   100644 2510a7ae3ec21f8dbf28ba84ab002cea9b2a7824 src/vs/editor/contrib/links/browser/links.ts
  their  100644 26e46e5bcebb076c5eae2a6d3f82773833fa3f03 src/vs/editor/contrib/links/browser/links.ts
added in remote
  their  100644 45cf63fd7eea46d4bf041328cf6692a89d925b8b src/vs/platform/opener/browser/opener.contribution.ts
@@ -0,0 +1,12 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import {registerSingleton} from 'vs/platform/instantiation/common/extensions';
+import {OpenerService} from 'vs/platform/opener/browser/openerService';
+import {IOpenerService} from 'vs/platform/opener/common/opener';
+
+registerSingleton(IOpenerService, OpenerService);
added in remote
  their  100644 8fccde385454e5daab4915d7a58210effecf79fe src/vs/platform/opener/browser/openerService.ts
@@ -0,0 +1,73 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import URI from 'vs/base/common/uri';
+import {parse} from 'vs/base/common/marshalling';
+import {Schemas} from 'vs/base/common/network';
+import {TPromise} from 'vs/base/common/winjs.base';
+import {IEditorService} from 'vs/platform/editor/common/editor';
+import {ICommandService, CommandsRegistry} from 'vs/platform/commands/common/commands';
+import {IOpenerService} from '../common/opener';
+
+export class OpenerService implements IOpenerService {
+
+	_serviceBrand: any;
+
+	constructor(
+		@IEditorService private _editorService: IEditorService,
+		@ICommandService private _commandService: ICommandService
+	) {
+		//
+	}
+
+	open(resource: URI, options?: { openToSide?: boolean }): TPromise<any> {
+
+		const {scheme, path, query, fragment} = resource;
+		let promise: TPromise<any>;
+		if (scheme === Schemas.http || scheme === Schemas.https) {
+			// open http
+			window.open(resource.toString(true));
+
+		} else if (scheme === 'command' && CommandsRegistry.getCommand(path)) {
+			// execute as command
+			let args: any = [];
+			try {
+				args = parse(query);
+				if (!Array.isArray(args)) {
+					args = [args];
+				}
+			} catch (e) {
+				//
+			}
+			promise = this._commandService.executeCommand(path, ...args);
+
+		} else {
+			promise = this._editorService.resolveEditorModel({ resource }).then(model => {
+				if (!model) {
+					return;
+				}
+				let selection: {
+					startLineNumber: number;
+					startColumn: number;
+				};
+				const match = /^L?(\d+)(?:,(\d+))?/.exec(fragment);
+				if (match) {
+					// support file:///some/file.js#73,84
+					// support file:///some/file.js#L73
+					selection = {
+						startLineNumber: parseInt(match[1]),
+						startColumn: match[2] ? parseInt(match[2]) : 1
+					};
+					// remove fragment
+					resource = resource.with({ fragment: '' });
+				}
+				return this._editorService.openEditor({ resource, options: { selection, } }, options && options.openToSide);
+			});
+		}
+
+		return TPromise.as(promise).then(undefined, err => { }); // !ignores all errors
+	}
+}
changed in both
  base   100644 046b4f53a63025a47d3508e8ebd03153a722c163 src/vs/platform/opener/common/opener.ts
  our    100644 44e165950378af40bde0851a71ea2624c9acd83a src/vs/platform/opener/common/opener.ts
  their  100644 975a8ee2e1a9714edc760fdd60c138f8926111cc src/vs/platform/opener/common/opener.ts
added in remote
  their  100644 550890079125c0fd1101c1d702065782873e64d3 src/vs/platform/opener/test/browser/openerService.test.ts
@@ -0,0 +1,120 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import URI from 'vs/base/common/uri';
+import * as assert from 'assert';
+import {TPromise} from 'vs/base/common/winjs.base';
+import {IEditorService, ITextEditorModel, IResourceInput} from 'vs/platform/editor/common/editor';
+import {ICommandService, NullCommandService, CommandsRegistry} from 'vs/platform/commands/common/commands';
+import {OpenerService} from 'vs/platform/opener/browser/openerService';
+
+suite('OpenerService', function () {
+
+	let lastInput: IResourceInput;
+
+	const editorService = new class implements IEditorService {
+		_serviceBrand: any;
+		openEditor(input: IResourceInput): any {
+			lastInput = input;
+		}
+		resolveEditorModel(): any {
+			return TPromise.as(<ITextEditorModel>{});
+		}
+	};
+
+
+	let lastCommand: { id: string, args: any[] };
+
+	const commandService = new class implements ICommandService {
+		_serviceBrand: any;
+		executeCommand(id: string, ...args: any[]): TPromise<any> {
+			lastCommand = { id, args };
+			return TPromise.as(undefined);
+		}
+	};
+
+	setup(function () {
+		lastInput = undefined;
+		lastCommand = undefined;
+	});
+
+	test('delegate to editorService, scheme:///fff', function () {
+		const openerService = new OpenerService(editorService, NullCommandService);
+		openerService.open(URI.parse('another:///somepath'));
+		assert.equal(lastInput.options.selection, undefined);
+	});
+
+	test('delegate to editorService, scheme:///fff#L123', function () {
+
+		const openerService = new OpenerService(editorService, NullCommandService);
+
+		openerService.open(URI.parse('file:///somepath#L23'));
+		assert.equal(lastInput.options.selection.startLineNumber, 23);
+		assert.equal(lastInput.options.selection.startColumn, 1);
+		assert.equal(lastInput.options.selection.endLineNumber, undefined);
+		assert.equal(lastInput.options.selection.endColumn, undefined);
+		assert.equal(lastInput.resource.fragment, '');
+
+		openerService.open(URI.parse('another:///somepath#L23'));
+		assert.equal(lastInput.options.selection.startLineNumber, 23);
+		assert.equal(lastInput.options.selection.startColumn, 1);
+
+		openerService.open(URI.parse('another:///somepath#L23,45'));
+		assert.equal(lastInput.options.selection.startLineNumber, 23);
+		assert.equal(lastInput.options.selection.startColumn, 45);
+		assert.equal(lastInput.options.selection.endLineNumber, undefined);
+		assert.equal(lastInput.options.selection.endColumn, undefined);
+		assert.equal(lastInput.resource.fragment, '');
+	});
+
+	test('delegate to editorService, scheme:///fff#123,123', function () {
+
+		const openerService = new OpenerService(editorService, NullCommandService);
+
+		openerService.open(URI.parse('file:///somepath#23'));
+		assert.equal(lastInput.options.selection.startLineNumber, 23);
+		assert.equal(lastInput.options.selection.startColumn, 1);
+		assert.equal(lastInput.options.selection.endLineNumber, undefined);
+		assert.equal(lastInput.options.selection.endColumn, undefined);
+		assert.equal(lastInput.resource.fragment, '');
+
+		openerService.open(URI.parse('file:///somepath#23,45'));
+		assert.equal(lastInput.options.selection.startLineNumber, 23);
+		assert.equal(lastInput.options.selection.startColumn, 45);
+		assert.equal(lastInput.options.selection.endLineNumber, undefined);
+		assert.equal(lastInput.options.selection.endColumn, undefined);
+		assert.equal(lastInput.resource.fragment, '');
+	});
+
+	test('delegate to commandsService, command:someid', function () {
+
+		const openerService = new OpenerService(editorService, commandService);
+
+		// unknown command
+		openerService.open(URI.parse('command:foobar'));
+		assert.equal(lastCommand, undefined);
+		assert.equal(lastInput.resource.toString(), 'command:foobar');
+		assert.equal(lastInput.options.selection, undefined);
+
+		const id = `aCommand${Math.random()}`;
+		CommandsRegistry.registerCommand(id, function () { });
+
+		openerService.open(URI.parse('command:' + id));
+		assert.equal(lastCommand.id, id);
+		assert.equal(lastCommand.args.length, 0);
+
+		openerService.open(URI.parse('command:' + id).with({ query: '123' }));
+		assert.equal(lastCommand.id, id);
+		assert.equal(lastCommand.args.length, 1);
+		assert.equal(lastCommand.args[0], '123');
+
+		openerService.open(URI.parse('command:' + id).with({ query: JSON.stringify([12, true]) }));
+		assert.equal(lastCommand.id, id);
+		assert.equal(lastCommand.args.length, 2);
+		assert.equal(lastCommand.args[0], 12);
+		assert.equal(lastCommand.args[1], true);
+	});
+});
\ No newline at end of file
changed in both
  base   100644 dab90f9e538d13da9bd35825c8aa12e0b86fb919 src/vs/workbench/api/node/extHostDiagnostics.ts
  our    100644 75b3d97675283039cfa9e9be38c3fd0ec200e1b7 src/vs/workbench/api/node/extHostDiagnostics.ts
  their  100644 ed6ca50b7a2f689d0e06a4d76a3cce1fcbebcd15 src/vs/workbench/api/node/extHostDiagnostics.ts
@@ -4,16 +4,27 @@
  *--------------------------------------------------------------------------------------------*/
 'use strict';
 
+<<<<<<< .our
 import { localize } from 'vs/nls';
 import { IMarkerData, MarkerSeverity } from 'vs/platform/markers/common/markers';
+=======
+import {localize} from 'vs/nls';
+import {IThreadService} from 'vs/workbench/services/thread/common/threadService';
+import {IMarkerData} from 'vs/platform/markers/common/markers';
+>>>>>>> .their
 import URI from 'vs/base/common/uri';
 import * as vscode from 'vscode';
+<<<<<<< .our
 import { MainContext, MainThreadDiagnosticsShape, ExtHostDiagnosticsShape, IMainContext } from './extHost.protocol';
 import { DiagnosticSeverity } from './extHostTypes';
 import * as converter from './extHostTypeConverters';
 import { mergeSort } from 'vs/base/common/arrays';
 import { Event, Emitter, debounceEvent, mapEvent } from 'vs/base/common/event';
 import { keys } from 'vs/base/common/map';
+=======
+import {MainContext, MainThreadDiagnosticsShape, ExtHostDiagnosticsShape} from './extHost.protocol';
+import {DiagnosticSeverity} from './extHostTypes';
+>>>>>>> .their
 
 export class DiagnosticCollection implements vscode.DiagnosticCollection {
 
@@ -110,6 +121,7 @@
 			let diagnostics = this._data.get(uri.toString());
 			if (diagnostics) {
 
+<<<<<<< .our
 				// no more than N diagnostics per file
 				if (diagnostics.length > this._maxDiagnosticsPerFile) {
 					marker = [];
@@ -119,6 +131,17 @@
 							if (diagnostic.severity === order[i]) {
 								const len = marker.push(converter.Diagnostic.from(diagnostic));
 								if (len === this._maxDiagnosticsPerFile) {
+=======
+				// no more than 250 diagnostics per file
+				if (diagnostics.length > DiagnosticCollection._maxDiagnosticsPerFile) {
+					marker = [];
+					const order = [DiagnosticSeverity.Error, DiagnosticSeverity.Warning, DiagnosticSeverity.Information, DiagnosticSeverity.Hint];
+					orderLoop: for (let i = 0; i < 4; i++) {
+						for (const diagnostic of diagnostics) {
+							if (diagnostic.severity === order[i]) {
+								const len = marker.push(DiagnosticCollection._toMarkerData(diagnostic));
+								if (len === DiagnosticCollection._maxDiagnosticsPerFile) {
+>>>>>>> .their
 									break orderLoop;
 								}
 							}
@@ -127,15 +150,24 @@
 
 					// add 'signal' marker for showing omitted errors/warnings
 					marker.push({
+<<<<<<< .our
 						severity: MarkerSeverity.Info,
 						message: localize({ key: 'limitHit', comment: ['amount of errors/warning skipped due to limits'] }, "Not showing {0} further errors and warnings.", diagnostics.length - this._maxDiagnosticsPerFile),
+=======
+						severity: Severity.Error,
+						message: localize('limitHit', "Not showing {0} further errors and warnings.", diagnostics.length - DiagnosticCollection._maxDiagnosticsPerFile),
+>>>>>>> .their
 						startLineNumber: marker[marker.length - 1].startLineNumber,
 						startColumn: marker[marker.length - 1].startColumn,
 						endLineNumber: marker[marker.length - 1].endLineNumber,
 						endColumn: marker[marker.length - 1].endColumn
 					});
 				} else {
+<<<<<<< .our
 					marker = diagnostics.map(converter.Diagnostic.from);
+=======
+					marker = diagnostics.map(DiagnosticCollection._toMarkerData);
+>>>>>>> .their
 				}
 			}
 
changed in both
  base   100644 4d3efd2310fb267e1b146584276716b01c806320 src/vs/workbench/electron-browser/shell.ts
  our    100644 33bea4a0ca07789e5913902a82c7d187af26b943 src/vs/workbench/electron-browser/shell.ts
  their  100644 9897ba3accbb8550e5d0bce0c004773f9dd41ce5 src/vs/workbench/electron-browser/shell.ts
@@ -22,6 +22,7 @@
 import { ITelemetryAppenderChannel, TelemetryAppenderClient } from 'vs/platform/telemetry/common/telemetryIpc';
 import { TelemetryService, ITelemetryServiceConfig } from 'vs/platform/telemetry/common/telemetryService';
 import ErrorTelemetry from 'vs/platform/telemetry/browser/errorTelemetry';
+<<<<<<< .our
 import { ElectronWindow } from 'vs/workbench/electron-browser/window';
 import { resolveWorkbenchCommonProperties } from 'vs/platform/telemetry/node/workbenchCommonProperties';
 import { IWindowsService, IWindowService, IWindowConfiguration } from 'vs/platform/windows/common/windows';
@@ -96,6 +97,61 @@
 import { SearchHistoryService } from 'vs/workbench/services/search/node/searchHistoryService';
 import { MulitExtensionManagementService } from 'vs/platform/extensionManagement/common/multiExtensionManagement';
 import { ExtensionManagementServerService } from 'vs/workbench/services/extensions/node/extensionManagementServerService';
+=======
+import {resolveWorkbenchCommonProperties} from 'vs/platform/telemetry/node/workbenchCommonProperties';
+import {ElectronIntegration} from 'vs/workbench/electron-browser/integration';
+import {Update} from 'vs/workbench/electron-browser/update';
+import {WorkspaceStats} from 'vs/workbench/services/telemetry/common/workspaceStats';
+import {IWindowService, WindowService} from 'vs/workbench/services/window/electron-browser/windowService';
+import {MessageService} from 'vs/workbench/services/message/electron-browser/messageService';
+import {RequestService} from 'vs/workbench/services/request/node/requestService';
+import {IConfigurationService} from 'vs/platform/configuration/common/configuration';
+import {FileService} from 'vs/workbench/services/files/electron-browser/fileService';
+import {SearchService} from 'vs/workbench/services/search/node/searchService';
+import {LifecycleService} from 'vs/workbench/services/lifecycle/electron-browser/lifecycleService';
+import {MainThreadService} from 'vs/workbench/services/thread/electron-browser/threadService';
+import {MarkerService} from 'vs/platform/markers/common/markerService';
+import {IModelService} from 'vs/editor/common/services/modelService';
+import {ModelServiceImpl} from 'vs/editor/common/services/modelServiceImpl';
+import {ICompatWorkerService} from 'vs/editor/common/services/compatWorkerService';
+import {MainThreadCompatWorkerService} from 'vs/editor/common/services/compatWorkerServiceMain';
+import {CodeEditorServiceImpl} from 'vs/editor/browser/services/codeEditorServiceImpl';
+import {ICodeEditorService} from 'vs/editor/common/services/codeEditorService';
+import {EditorWorkerServiceImpl} from 'vs/editor/common/services/editorWorkerServiceImpl';
+import {IEditorWorkerService} from 'vs/editor/common/services/editorWorkerService';
+import {MainProcessExtensionService} from 'vs/workbench/api/node/mainThreadExtensionService';
+import {IOptions} from 'vs/workbench/common/options';
+import {IStorageService} from 'vs/platform/storage/common/storage';
+import {ServiceCollection} from 'vs/platform/instantiation/common/serviceCollection';
+import {InstantiationService} from 'vs/platform/instantiation/common/instantiationService';
+import {IContextViewService} from 'vs/platform/contextview/browser/contextView';
+import {IEventService} from 'vs/platform/event/common/event';
+import {IFileService} from 'vs/platform/files/common/files';
+import {ILifecycleService} from 'vs/platform/lifecycle/common/lifecycle';
+import {IMarkerService} from 'vs/platform/markers/common/markers';
+import {IMessageService, Severity} from 'vs/platform/message/common/message';
+import {IRequestService} from 'vs/platform/request/common/request';
+import {ISearchService} from 'vs/platform/search/common/search';
+import {IThreadService} from 'vs/workbench/services/thread/common/threadService';
+import {ICommandService} from 'vs/platform/commands/common/commands';
+import {CommandService} from 'vs/platform/commands/common/commandService';
+import {IWorkspaceContextService, IConfiguration, IWorkspace} from 'vs/platform/workspace/common/workspace';
+import {IExtensionService} from 'vs/platform/extensions/common/extensions';
+import {MainThreadModeServiceImpl} from 'vs/editor/common/services/modeServiceImpl';
+import {IModeService} from 'vs/editor/common/services/modeService';
+import {IUntitledEditorService, UntitledEditorService} from 'vs/workbench/services/untitled/common/untitledEditorService';
+import {CrashReporter} from 'vs/workbench/electron-browser/crashReporter';
+import {IThemeService} from 'vs/workbench/services/themes/common/themeService';
+import {ThemeService} from 'vs/workbench/services/themes/electron-browser/themeService';
+import {getDelayedChannel} from 'vs/base/parts/ipc/common/ipc';
+import {connect} from 'vs/base/parts/ipc/node/ipc.net';
+import {IExtensionManagementChannel, ExtensionManagementChannelClient} from 'vs/platform/extensionManagement/common/extensionManagementIpc';
+import {IExtensionManagementService} from 'vs/platform/extensionManagement/common/extensionManagement';
+import {ReloadWindowAction} from 'vs/workbench/electron-browser/actions';
+
+// self registering services
+import 'vs/platform/opener/browser/opener.contribution';
+>>>>>>> .their
 
 /**
  * Services that we require for the Shell
added in remote
  their  100644 999f59de4998d342ce8faebdb86d5e4085ff66c8 src/vs/workbench/test/node/api/extHostDiagnostics.test.ts
@@ -0,0 +1,189 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import * as assert from 'assert';
+import URI from 'vs/base/common/uri';
+import Severity from 'vs/base/common/severity';
+import {DiagnosticCollection} from 'vs/workbench/api/node/extHostDiagnostics';
+import {Diagnostic, DiagnosticSeverity, Range} from 'vs/workbench/api/node/extHostTypes';
+import {MainThreadDiagnosticsShape} from 'vs/workbench/api/node/extHost.protocol';
+import {TPromise} from 'vs/base/common/winjs.base';
+import {IMarkerData} from 'vs/platform/markers/common/markers';
+
+suite('ExtHostDiagnostics', () => {
+
+	class DiagnosticsShape extends MainThreadDiagnosticsShape {
+		$changeMany(owner: string, entries: [URI, IMarkerData[]][]): TPromise<any> {
+			return TPromise.as(null);
+		}
+		$clear(owner: string): TPromise<any> {
+			return TPromise.as(null);
+		}
+	};
+
+	test('disposeCheck', function () {
+
+		const collection = new DiagnosticCollection('test', new DiagnosticsShape());
+
+		collection.dispose();
+		collection.dispose(); // that's OK
+		assert.throws(() => collection.name);
+		assert.throws(() => collection.clear());
+		assert.throws(() => collection.delete(URI.parse('aa:bb')));
+		assert.throws(() => collection.forEach(() => { ; }));
+		assert.throws(() => collection.get(URI.parse('aa:bb')));
+		assert.throws(() => collection.has(URI.parse('aa:bb')));
+		assert.throws(() => collection.set(URI.parse('aa:bb'), []));
+		assert.throws(() => collection.set(URI.parse('aa:bb'), undefined));
+	});
+
+
+	test('diagnostic collection, forEach, clear, has', function () {
+		let collection = new DiagnosticCollection('test', new DiagnosticsShape());
+		assert.equal(collection.name, 'test');
+		collection.dispose();
+		assert.throws(() => collection.name);
+
+		let c = 0;
+		collection = new DiagnosticCollection('test', new DiagnosticsShape());
+		collection.forEach(() => c++);
+		assert.equal(c, 0);
+
+		collection.set(URI.parse('foo:bar'), [
+			new Diagnostic(new Range(0, 0, 1, 1), 'message-1'),
+			new Diagnostic(new Range(0, 0, 1, 1), 'message-2')
+		]);
+		collection.forEach(() => c++);
+		assert.equal(c, 1);
+
+		c = 0;
+		collection.clear();
+		collection.forEach(() => c++);
+		assert.equal(c, 0);
+
+		collection.set(URI.parse('foo:bar1'), [
+			new Diagnostic(new Range(0, 0, 1, 1), 'message-1'),
+			new Diagnostic(new Range(0, 0, 1, 1), 'message-2')
+		]);
+		collection.set(URI.parse('foo:bar2'), [
+			new Diagnostic(new Range(0, 0, 1, 1), 'message-1'),
+			new Diagnostic(new Range(0, 0, 1, 1), 'message-2')
+		]);
+		collection.forEach(() => c++);
+		assert.equal(c, 2);
+
+		assert.ok(collection.has(URI.parse('foo:bar1')));
+		assert.ok(collection.has(URI.parse('foo:bar2')));
+		assert.ok(!collection.has(URI.parse('foo:bar3')));
+		collection.delete(URI.parse('foo:bar1'));
+		assert.ok(!collection.has(URI.parse('foo:bar1')));
+
+		collection.dispose();
+	});
+
+	test('diagnostic collection, immutable read', function () {
+		let collection = new DiagnosticCollection('test', new DiagnosticsShape());
+		collection.set(URI.parse('foo:bar'), [
+			new Diagnostic(new Range(0, 0, 1, 1), 'message-1'),
+			new Diagnostic(new Range(0, 0, 1, 1), 'message-2')
+		]);
+
+		let array = collection.get(URI.parse('foo:bar'));
+		assert.throws(() => array.length = 0);
+		assert.throws(() => array.pop());
+		assert.throws(() => array[0] = new Diagnostic(new Range(0, 0, 0, 0), 'evil'));
+
+		collection.forEach((uri, array) => {
+			assert.throws(() => array.length = 0);
+			assert.throws(() => array.pop());
+			assert.throws(() => array[0] = new Diagnostic(new Range(0, 0, 0, 0), 'evil'));
+		});
+
+		array = collection.get(URI.parse('foo:bar'));
+		assert.equal(array.length, 2);
+
+		collection.dispose();
+	});
+
+
+	test('diagnostics collection, set with dupliclated tuples', function () {
+		let collection = new DiagnosticCollection('test', new DiagnosticsShape());
+		let uri = URI.parse('sc:hightower');
+		collection.set([
+			[uri, [new Diagnostic(new Range(0, 0, 0, 1), 'message-1')]],
+			[URI.parse('some:thing'), [new Diagnostic(new Range(0, 0, 1, 1), 'something')]],
+			[uri, [new Diagnostic(new Range(0, 0, 0, 1), 'message-2')]],
+		]);
+
+		let array = collection.get(uri);
+		assert.equal(array.length, 2);
+		let [first, second] = array;
+		assert.equal(first.message, 'message-1');
+		assert.equal(second.message, 'message-2');
+
+		// clear
+		collection.delete(uri);
+		assert.ok(!collection.has(uri));
+
+		// bad tuple clears 1/2
+		collection.set([
+			[uri, [new Diagnostic(new Range(0, 0, 0, 1), 'message-1')]],
+			[URI.parse('some:thing'), [new Diagnostic(new Range(0, 0, 1, 1), 'something')]],
+			[uri, undefined]
+		]);
+		assert.ok(!collection.has(uri));
+
+		// clear
+		collection.delete(uri);
+		assert.ok(!collection.has(uri));
+
+		// bad tuple clears 2/2
+		collection.set([
+			[uri, [new Diagnostic(new Range(0, 0, 0, 1), 'message-1')]],
+			[URI.parse('some:thing'), [new Diagnostic(new Range(0, 0, 1, 1), 'something')]],
+			[uri, undefined],
+			[uri, [new Diagnostic(new Range(0, 0, 0, 1), 'message-2')]],
+			[uri, [new Diagnostic(new Range(0, 0, 0, 1), 'message-3')]],
+		]);
+
+		array = collection.get(uri);
+		assert.equal(array.length, 2);
+		[first, second] = array;
+		assert.equal(first.message, 'message-2');
+		assert.equal(second.message, 'message-3');
+
+		collection.dispose();
+	});
+
+
+	test('diagnostic capping', function () {
+
+		let lastEntries: [URI, IMarkerData[]][];
+		let collection = new DiagnosticCollection('test', new class extends DiagnosticsShape {
+			$changeMany(owner: string, entries: [URI, IMarkerData[]][]): TPromise<any> {
+				lastEntries = entries;
+				return super.$changeMany(owner, entries);
+			}
+		});
+		let uri = URI.parse('aa:bb');
+
+		let diagnostics: Diagnostic[] = [];
+		for (let i = 0; i < 500; i++) {
+			diagnostics.push(new Diagnostic(new Range(i, 0, i + 1, 0), `error#${i}`, i < 300
+				? DiagnosticSeverity.Warning
+				: DiagnosticSeverity.Error));
+		}
+
+		collection.set(uri, diagnostics);
+		assert.equal(collection.get(uri).length, 500);
+		assert.equal(lastEntries.length, 1);
+		assert.equal(lastEntries[0][1].length, 251);
+		assert.equal(lastEntries[0][1][0].severity, Severity.Error);
+		assert.equal(lastEntries[0][1][200].severity, Severity.Warning);
+		assert.equal(lastEntries[0][1][250].severity, Severity.Error);
+	});
+});
\ No newline at end of file
