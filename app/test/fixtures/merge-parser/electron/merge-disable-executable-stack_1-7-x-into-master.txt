added in both
  our    100644 6d44d618aabcce04c60344f2274dec5b0c2a1f68 .circleci/config.yml
  their  100644 057acfd93df62e6396b9968efd39b195dd10cfb3 .circleci/config.yml
@@ -1,3 +1,4 @@
+<<<<<<< .our
 notify-slack-failure: &notify-slack-failure
   run:
     name: Send a slack notification on failure
@@ -348,10 +349,13 @@
   docker:
     - image: electronbuilds/electron:0.0.8
   <<: *build-steps
+=======
+>>>>>>> .their
 
 version: 2
 jobs:
   electron-linux-arm:
+<<<<<<< .our
     environment:
       TARGET_ARCH: arm
     <<: *build-defaults
@@ -668,12 +672,323 @@
       GN_EXTRA_ARGS: 'is_mas_build = true'
     <<: *gn-mac-build-machine
     <<: *gn-mac-build-steps
+=======
+    docker:
+      - image: electronbuilds/electron:0.0.7
+        environment:
+          TARGET_ARCH: arm
+    resource_class: 2xlarge
+    steps:
+      - checkout
+      - run:
+          name: Check for release
+          command: |
+            if [ -n "${RUN_RELEASE_BUILD}" ]; then
+              echo 'release build triggered from api'
+              echo 'export ELECTRON_RELEASE=1 TRIGGERED_BY_API=1' >> $BASH_ENV
+            fi
+      - run:
+         name: Bootstrap
+         command: |
+           if [ "$ELECTRON_RELEASE" == "1" ]; then
+              echo 'Bootstrapping Electron for release build'
+              script/bootstrap.py --target_arch=$TARGET_ARCH
+           else
+              echo 'Bootstrapping Electron for debug build'
+              script/bootstrap.py --target_arch=$TARGET_ARCH --dev
+           fi
+      - run: npm run lint
+      - run:
+         name: Build
+         command: |
+           if [ "$ELECTRON_RELEASE" == "1" ]; then
+              echo 'Building Electron for release'
+              script/build.py -c R
+           else
+              echo 'Building Electron for debug'
+              script/build.py -c D
+           fi
+      - run:
+          name: Create distribution
+          command: |
+             if [ "$ELECTRON_RELEASE" == "1" ]; then
+                echo 'Creating Electron release distribution'
+                script/create-dist.py
+             else
+                echo 'Skipping create distribution because build is not for release'
+             fi
+      - run:
+          name: Upload distribution
+          command: |
+             if [ "$ELECTRON_RELEASE" == "1" ] && [ "$TRIGGERED_BY_API" != "1" ]; then
+                echo 'Uploading Electron release distribution to github releases'
+                script/upload.py
+             elif [ "$ELECTRON_RELEASE" == "1" ] && [ "$TRIGGERED_BY_API" == "1" ]; then
+                echo 'Uploading Electron release distribution to s3'
+                script/upload.py --upload_to_s3
+             else
+                echo 'Skipping upload distribution because build is not for release'
+             fi
+      - run:
+          name: Zip out directory
+          command: |
+            if [ "$ELECTRON_RELEASE" != "1" ]; then
+              zip -r electron.zip out/D
+            fi
+      - persist_to_workspace:
+          root: /home/builduser
+          paths:
+            - project/out
+      - store_artifacts:
+          path: electron.zip
+  electron-linux-ia32:
+    docker:
+      - image: electronbuilds/electron:0.0.7
+        environment:
+          TARGET_ARCH: ia32
+          DISPLAY: ':99.0'
+    resource_class: xlarge
+    steps:
+      - checkout
+      - run:
+          name: Setup for headless testing
+          command: sh -e /etc/init.d/xvfb start
+      - run:
+          name: Check for release
+          command: |
+            if [ -n "${RUN_RELEASE_BUILD}" ]; then
+              echo 'release build triggered from api'
+              echo 'export ELECTRON_RELEASE=1 TRIGGERED_BY_API=1' >> $BASH_ENV
+            fi
+      - run:
+         name: Bootstrap
+         command: |
+           if [ "$ELECTRON_RELEASE" == "1" ]; then
+              echo 'Bootstrapping Electron for release build'
+              script/bootstrap.py --target_arch=$TARGET_ARCH
+           else
+              echo 'Bootstrapping Electron for debug build'
+              script/bootstrap.py --target_arch=$TARGET_ARCH --dev
+           fi
+      - run: npm run lint
+      - run:
+         name: Build
+         command: |
+           if [ "$ELECTRON_RELEASE" == "1" ]; then
+              echo 'Building Electron for release'
+              script/build.py -c R
+           else
+              echo 'Building Electron for debug'
+              script/build.py -c D
+           fi
+      - run:
+          name: Create distribution
+          command: |
+             if [ "$ELECTRON_RELEASE" == "1" ]; then
+                echo 'Creating Electron release distribution'
+                script/create-dist.py
+             else
+                echo 'Skipping create distribution because build is not for release'
+             fi
+      - run:
+          name: Upload distribution
+          command: |
+             if [ "$ELECTRON_RELEASE" == "1" ] && [ "$TRIGGERED_BY_API" != "1" ]; then
+                echo 'Uploading Electron release distribution to github releases'
+                script/upload.py
+             elif [ "$ELECTRON_RELEASE" == "1" ] && [ "$TRIGGERED_BY_API" == "1" ]; then
+                echo 'Uploading Electron release distribution to s3'
+                script/upload.py --upload_to_s3
+             else
+                echo 'Skipping upload distribution because build is not for release'
+             fi
+      - run:
+          name: Test
+          environment:
+            MOCHA_FILE: junit/test-results.xml
+            MOCHA_REPORTER: mocha-junit-reporter
+          command: |
+             if [ "$ELECTRON_RELEASE" != "1" ]; then
+                echo 'Testing Electron debug build'
+                out/D/electron --version
+                mkdir junit
+                script/test.py --ci --rebuild_native_modules
+             else
+                echo 'Skipping testing on release build'
+             fi
+      - run:
+          name: Verify FFmpeg
+          command: |
+             if [ "$ELECTRON_RELEASE" != "1" ]; then
+                echo 'Verifying ffmpeg on debug build'
+                script/verify-ffmpeg.py
+             else
+                echo 'Skipping verify ffmpeg on release build'
+             fi
+      - store_test_results:
+          path: junit
+      - store_artifacts:
+          path: junit
+  electron-linux-mips64el:
+    docker:
+      - image: electronbuilds/electron:0.0.7
+        environment:
+          TARGET_ARCH: mips64el
+    resource_class: xlarge
+    steps:
+      - checkout
+      - run:
+          name: Check for release
+          command: |
+            if [ -n "${RUN_RELEASE_BUILD}" ]; then
+              echo 'release build triggered from api'
+              echo 'export ELECTRON_RELEASE=1 TRIGGERED_BY_API=1' >> $BASH_ENV
+            fi
+      - run:
+         name: Bootstrap
+         command: |
+           if [ "$ELECTRON_RELEASE" == "1" ]; then
+              echo 'Bootstrapping Electron for release build'
+              script/bootstrap.py --target_arch=$TARGET_ARCH
+           else
+              echo 'Bootstrapping Electron for debug build'
+              script/bootstrap.py --target_arch=$TARGET_ARCH --dev
+           fi
+      - run: npm run lint
+      - run:
+         name: Build
+         command: |
+           if [ "$ELECTRON_RELEASE" == "1" ]; then
+              echo 'Building Electron for release'
+              script/build.py -c R
+           else
+              echo 'Building Electron for debug'
+              script/build.py -c D
+           fi
+      - run:
+          name: Create distribution
+          command: |
+             if [ "$ELECTRON_RELEASE" == "1" ]; then
+                echo 'Creating Electron release distribution'
+                script/create-dist.py
+             else
+                echo 'Skipping create distribution because build is not for release'
+             fi
+      - run:
+          name: Upload distribution
+          command: |
+             if [ "$ELECTRON_RELEASE" == "1" ] && [ "$TRIGGERED_BY_API" != "1" ]; then
+                echo 'Uploading Electron release distribution to github releases'
+                script/upload.py
+             elif [ "$ELECTRON_RELEASE" == "1" ] && [ "$TRIGGERED_BY_API" == "1" ]; then
+                echo 'Uploading Electron release distribution to s3'
+                script/upload.py --upload_to_s3
+             else
+                echo 'Skipping upload distribution because build is not for release'
+             fi
+
+  electron-linux-x64:
+    docker:
+      - image: electronbuilds/electron:0.0.7
+        environment:
+          TARGET_ARCH: x64
+          DISPLAY: ':99.0'
+    resource_class: xlarge
+    steps:
+      - checkout
+      - run:
+          name: Setup for headless testing
+          command: sh -e /etc/init.d/xvfb start
+      - run:
+          name: Check for release
+          command: |
+            if [ -n "${RUN_RELEASE_BUILD}" ]; then
+              echo 'release build triggered from api'
+              echo 'export ELECTRON_RELEASE=1 TRIGGERED_BY_API=1' >> $BASH_ENV
+            fi
+      - run:
+         name: Bootstrap
+         command: |
+           if [ "$ELECTRON_RELEASE" == "1" ]; then
+              echo 'Bootstrapping Electron for release build'
+              script/bootstrap.py --target_arch=$TARGET_ARCH
+           else
+              echo 'Bootstrapping Electron for debug build'
+              script/bootstrap.py --target_arch=$TARGET_ARCH --dev
+           fi
+      - run: npm run lint
+      - run:
+         name: Build
+         command: |
+           if [ "$ELECTRON_RELEASE" == "1" ]; then
+              echo 'Building Electron for release'
+              script/build.py -c R
+           else
+              echo 'Building Electron for debug'
+              script/build.py -c D
+           fi
+      - run:
+          name: Create distribution
+          command: |
+             if [ "$ELECTRON_RELEASE" == "1" ]; then
+                echo 'Creating Electron release distribution'
+                script/create-dist.py
+             else
+                echo 'Skipping create distribution because build is not for release'
+             fi
+      - run:
+          name: Upload distribution
+          command: |
+             if [ "$ELECTRON_RELEASE" == "1" ] && [ "$TRIGGERED_BY_API" != "1" ]; then
+                echo 'Uploading Electron release distribution to github releases'
+                script/upload.py
+             elif [ "$ELECTRON_RELEASE" == "1" ] && [ "$TRIGGERED_BY_API" == "1" ]; then
+                echo 'Uploading Electron release distribution to s3'
+                script/upload.py --upload_to_s3
+             else
+                echo 'Skipping upload distribution because build is not for release'
+             fi
+      - run:
+          name: Test
+          environment:
+            MOCHA_FILE: junit/test-results.xml
+            MOCHA_REPORTER: mocha-junit-reporter
+          command: |
+             if [ "$ELECTRON_RELEASE" != "1" ]; then
+                echo 'Testing Electron debug build'
+                mkdir junit
+                script/test.py --ci --rebuild_native_modules
+             else
+                echo 'Skipping testing on release build'
+             fi
+      - run:
+          name: Verify FFmpeg
+          command: |
+             if [ "$ELECTRON_RELEASE" != "1" ]; then
+                echo 'Verifying ffmpeg on debug build'
+                script/verify-ffmpeg.py
+             else
+                echo 'Skipping verify ffmpeg on release build'
+             fi
+      - run:
+          name: Generate Typescript Definitions
+          command: npm run create-typescript-definitions
+      - store_test_results:
+          path: junit
+      - store_artifacts:
+          path: junit
+      - store_artifacts:
+          path: out/electron.d.ts
+      - store_artifacts:
+          path: out/electron-api.json
+>>>>>>> .their
 
 workflows:
   version: 2
   build-arm:
     jobs:
       - electron-linux-arm
+<<<<<<< .our
       - electron-linux-arm-test:
           requires:
             - electron-linux-arm
@@ -683,12 +998,15 @@
       - electron-linux-arm64-test:
           requires:
             - electron-linux-arm64
+=======
+>>>>>>> .their
   build-ia32:
     jobs:
       - electron-linux-ia32
   build-x64:
     jobs:
       - electron-linux-x64
+<<<<<<< .our
   build-osx-x64:
     jobs:
       - electron-osx-x64
@@ -745,3 +1063,5 @@
       - electron-gn-linux-arm64-release-fyi
       - electron-gn-mas-release-fyi
       - electron-gn-osx-release-fyi
+=======
+>>>>>>> .their
added in remote
  their  100644 51ad1b492dcbbd0c79bb9986bac35f1e3a007c2a Jenkinsfile
@@ -0,0 +1,44 @@
+pipeline {
+  agent none
+  stages {
+    stage('Build') {
+      parallel {
+        stage('electron-osx-x64') {
+            agent {
+              label 'osx'
+            }
+            steps {
+              sh 'script/bootstrap.py --target_arch=x64 --dev'
+              sh 'npm run lint'
+              sh 'script/build.py -c D'
+              sh 'script/test.py --ci --rebuild_native_modules'
+            }
+            post {
+              always {
+                cleanWs()
+              }
+            }
+        }
+        stage('electron-mas-x64') {
+          agent {
+            label 'osx'
+          }
+          environment {
+            MAS_BUILD = '1'
+          }
+          steps {
+            sh 'script/bootstrap.py --target_arch=x64 --dev'
+            sh 'npm run lint'
+            sh 'script/build.py -c D'
+            sh 'script/test.py --ci --rebuild_native_modules'
+          }
+          post {
+            always {
+              cleanWs()
+            }
+          }
+        }
+      }
+    }
+  }
+}
changed in both
  base   100644 e1603fa5942f7b000c3385648530255032e775a2 atom/app/atom_library_main.h
  our    100644 2c7a27caa20a411558010c3c58bd78e7850c0737 atom/app/atom_library_main.h
  their  100644 63d285bb5e4838578d23505d7738c9ac88575df1 atom/app/atom_library_main.h
@@ -9,7 +9,12 @@
 
 #if defined(OS_MACOSX)
 extern "C" {
+<<<<<<< .our
 __attribute__((visibility("default"))) int AtomMain(int argc, char* argv[]);
+=======
+__attribute__((visibility("default")))
+int AtomMain(int argc, char* argv[]);
+>>>>>>> .their
 
 #ifdef ENABLE_RUN_AS_NODE
 __attribute__((visibility("default"))) int AtomInitializeICUandStartNode(
changed in both
  base   100644 7ee7522934689937f7be7b0f866134bf611c7d69 atom/app/atom_library_main.mm
  our    100644 57a519fcd0db28548ea75034cf92191161183385 atom/app/atom_library_main.mm
  their  100644 ae096acd4a931d397e285643d36580625dde14bf atom/app/atom_library_main.mm
@@ -14,6 +14,10 @@
 #include "brightray/common/mac/main_application_bundle.h"
 #include "content/public/app/content_main.h"
 
+<<<<<<< .our
+=======
+#if defined(OS_MACOSX)
+>>>>>>> .their
 int AtomMain(int argc, char* argv[]) {
   atom::AtomMainDelegate delegate;
   content::ContentMainParams params(&delegate);
changed in both
  base   100644 de8e2b6068786b21f45e2a04490e46c8ffb15656 atom/app/atom_main.cc
  our    100644 fc77100d9acb58221c35f364c4db7866a44d347d atom/app/atom_main.cc
  their  100644 a9f39ab51547c6e86e47449b11250827e961abde atom/app/atom_main.cc
@@ -71,7 +71,11 @@
 
 #ifdef _DEBUG
   // Don't display assert dialog boxes in CI test runs
+<<<<<<< .our
   static const char* kCI = "ELECTRON_CI";
+=======
+  static const auto kCI = "ELECTRON_CI";
+>>>>>>> .their
   bool is_ci = IsEnvSet(kCI);
   if (!is_ci) {
     for (int i = 0; i < arguments.argc; ++i) {
@@ -88,6 +92,7 @@
 
     _CrtSetReportMode(_CRT_ASSERT, _CRTDBG_MODE_DEBUG | _CRTDBG_MODE_FILE);
     _CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);
+<<<<<<< .our
 
     _set_error_mode(_OUT_TO_STDERR);
   }
@@ -98,6 +103,14 @@
 #else
   bool run_as_node = false;
 #endif
+=======
+
+    _set_error_mode(_OUT_TO_STDERR);
+  }
+#endif
+
+  bool run_as_node = IsEnvSet(kRunAsNode);
+>>>>>>> .their
 
   // Make sure the output is printed to console.
   if (run_as_node || !IsEnvSet("ELECTRON_NO_ATTACH_CONSOLE"))
@@ -117,7 +130,13 @@
   // from within the CRT's atexit facility, ensuring the heap functions are
   // still active. The second invocation from the OS loader will be a no-op.
   extern void NTAPI OnThreadExit(PVOID module, DWORD reason, PVOID reserved);
+<<<<<<< .our
   atexit([]() { OnThreadExit(nullptr, DLL_THREAD_DETACH, nullptr); });
+=======
+  atexit([]() {
+    OnThreadExit(nullptr, DLL_THREAD_DETACH, nullptr);
+  });
+>>>>>>> .their
 #endif
 
 #ifdef ENABLE_RUN_AS_NODE
@@ -132,10 +151,14 @@
     auto ret = atom::NodeMain(argv.size(), argv.data());
     std::for_each(argv.begin(), argv.end(), free);
     return ret;
+<<<<<<< .our
   }
 #endif
 
   if (IsEnvSet("ELECTRON_INTERNAL_CRASH_SERVICE")) {
+=======
+  } else if (IsEnvSet("ELECTRON_INTERNAL_CRASH_SERVICE")) {
+>>>>>>> .their
     return crash_service::Main(cmd);
   }
 
@@ -156,7 +179,10 @@
 #elif defined(OS_LINUX)  // defined(OS_WIN)
 
 int main(int argc, char* argv[]) {
+<<<<<<< .our
 #ifdef ENABLE_RUN_AS_NODE
+=======
+>>>>>>> .their
   if (IsEnvSet(kRunAsNode)) {
     base::i18n::InitializeICU();
     base::AtExitManager atexit_manager;
@@ -175,7 +201,10 @@
 #else  // defined(OS_LINUX)
 
 int main(int argc, char* argv[]) {
+<<<<<<< .our
 #ifdef ENABLE_RUN_AS_NODE
+=======
+>>>>>>> .their
   if (IsEnvSet(kRunAsNode)) {
     return AtomInitializeICUandStartNode(argc, argv);
   }
added in both
  our    100644 23e870cf4a32aecfc246a81edad46971b4456a55 atom/app/command_line_args.cc
  their  100644 a5f0183991a2df7890c4d389a3fcd4b99e0574e0 atom/app/command_line_args.cc
@@ -2,15 +2,30 @@
 // Use of this source code is governed by the MIT license that can be
 // found in the LICENSE file.
 
+<<<<<<< .our
 #include "atom/app/command_line_args.h"
 
+=======
+#include <string>
+
+#include "atom/app/command_line_args.h"
+
+#include "base/strings/string_util.h"
+#include "base/strings/utf_string_conversions.h"
+#include "content/public/common/content_switches.h"
+
+>>>>>>> .their
 namespace {
 
 bool IsUrlArg(const base::CommandLine::CharType* arg) {
   // the first character must be a letter for this to be a URL
   auto c = *arg;
   if (('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')) {
+<<<<<<< .our
     for (auto* p = arg + 1; *p; ++p) {
+=======
+    for (auto p = arg + 1; *p; ++p) {
+>>>>>>> .their
       c = *p;
 
       // colon indicates that the argument starts with a URI scheme
@@ -31,12 +46,1323 @@
   return false;
 }
 
+<<<<<<< .our
+=======
+const char* blacklist[] = {
+  // node
+  "inspect",
+  "inspect-brk",
+
+
+  // chromium switches:
+  // find ./ \( -name "*switches.cc" -o -name "*switch_list.h" \) \
+  //   | xargs grep -P --no-filename '"\S+"[);]$' \
+  //   | perl -pe 's|^.*?"(\S+)"[);]$|  "$1",|'; \
+  //   | LANG="C" sort | uniq
+  "/prefetch:1",
+  "/prefetch:2",
+  "/prefetch:3",
+  "/prefetch:4",
+  "/prefetch:5",
+  "/prefetch:6",
+  "/prefetch:8",
+  "0",
+  "?",
+  "BlacklistOnly",
+  "ChromeOSMemoryPressureHandling",
+  "Disabled",
+  "NewProfileManagement",
+  "OnlineCheckOnly",
+  "SafeSites",
+  "accept-resource-provider",
+  "adaboost",
+  "aec-refined-adaptive-filter",
+  "agc-startup-min-volume",
+  "aggressive",
+  "aggressive-cache-discard",
+  "aggressive-tab-discard",
+  "all-toolchains",
+  "allow-cross-origin-auth-prompt",
+  "allow-external-pages",
+  "allow-failed-policy-fetch-for-test",
+  "allow-file-access-from-files",
+  "allow-hidden-media-playback",
+  "allow-http-background-page",
+  "allow-http-screen-capture",
+  "allow-insecure-localhost",
+  "allow-legacy-extension-manifests",
+  "allow-loopback-in-peer-connection",
+  "allow-nacl-crxfs-api",
+  "allow-nacl-file-handle-api",
+  "allow-nacl-socket-api",
+  "allow-no-sandbox-job",
+  "allow-outdated-plugins",
+  "allow-ra-in-dev-mode",
+  "allow-running-insecure-content",
+  "allow-sandbox-debugging",
+  "allow-silent-push",
+  "alsa-check-close-timeout",
+  "alsa-enable-upsampling",
+  "alsa-fixed-output-sample-rate",
+  "alsa-input-device",
+  "alsa-output-avail-min",
+  "alsa-output-buffer-size",
+  "alsa-output-device",
+  "alsa-output-period-size",
+  "alsa-output-start-threshold",
+  "also-emit-success-logs",
+  "always-authorize-plugins",
+  "always-on",
+  "always-use-complex-text",
+  "alwaystrue",
+  "android-fonts-path",
+  "android-stderr-port",
+  "android-stdin-port",
+  "android-stdout-port",
+  "angle",
+  "app",
+  "app-auto-launched",
+  "app-id",
+  "app-mode-auth-code",
+  "app-mode-oauth-token",
+  "app-mode-oem-manifest",
+  "app-shell-allow-roaming",
+  "app-shell-host-window-size",
+  "app-shell-preferred-network",
+  "app-shell-refresh-token",
+  "app-shell-user",
+  "apple",
+  "apps-gallery-download-url",
+  "apps-gallery-update-url",
+  "apps-gallery-url",
+  "apps-keep-chrome-alive-in-tests",
+  "arc-availability",
+  "arc-available",
+  "args",
+  "artifacts-dir",
+  "ash-adjustable-large-cursor",
+  "ash-animate-from-boot-splash-screen",
+  "ash-constrain-pointer-to-root",
+  "ash-copy-host-background-at-boot",
+  "ash-debug-shortcuts",
+  "ash-dev-shortcuts",
+  "ash-disable-maximize-mode-window-backdrop",
+  "ash-disable-screen-orientation-lock",
+  "ash-disable-touch-exploration-mode",
+  "ash-enable-docked-windows",
+  "ash-enable-magnifier-key-scroller",
+  "ash-enable-mirrored-screen",
+  "ash-enable-palette-on-all-displays",
+  "ash-enable-software-mirroring",
+  "ash-enable-unified-desktop",
+  "ash-force-enable-palette",
+  "ash-hide-notifications-for-factory",
+  "ash-host-window-bounds",
+  "ash-shelf-color",
+  "ash-touch-hud",
+  "ash-webui-init",
+  "attestation-server",
+  "audio-buffer-size",
+  "aura-legacy-power-button",
+  "auth-ext-path",
+  "auth-server-whitelist",
+  "auth-spnego-account-type",
+  "auto",
+  "auto-open-devtools-for-tabs",
+  "auto-select-desktop-capture-source",
+  "blink-settings",
+  "bootstrap",
+  "browser-subprocess-path",
+  "browser-test",
+  "bwsi",
+  "bypass-app-banner-engagement-checks",
+  "canvas-msaa-sample-count",
+  "cast-initial-screen-height",
+  "cast-initial-screen-width",
+  "cc-layer-tree-test-long-timeout",
+  "cc-layer-tree-test-no-timeout",
+  "cc-rebaseline-pixeltests",
+  "cellular-first",
+  "cellular-only",
+  "check-for-update-interval",
+  "check-layout-test-sys-deps",
+  "child-process",
+  "child-wallpaper-large",
+  "child-wallpaper-small",
+  "cipher-suite-blacklist",
+  "class",
+  "clear-token-service",
+  "cloud-print-file",
+  "cloud-print-file-type",
+  "cloud-print-job-title",
+  "cloud-print-print-ticket",
+  "cloud-print-setup-proxy",
+  "cloud-print-url",
+  "cloud-print-xmpp-endpoint",
+  "color",
+  "compensate-for-unstable-pinch-zoom",
+  "compile-shader-always-succeeds",
+  "component-updater",
+  "connectivity-check-url",
+  "conservative",
+  "content-image-texture-target",
+  "content-shell-host-window-size",
+  "controller",
+  "crash-dumps-dir",
+  "crash-on-failure",
+  "crash-on-hang-threads",
+  "crash-server-url",
+  "crash-test",
+  "crashpad-handler",
+  "create-browser-on-startup-for-tests",
+  "create-default-gl-context",
+  "cros-region",
+  "cros-regions-mode",
+  "crosh-command",
+  "cryptauth-http-host",
+  "custom-devtools-frontend",
+  "custom-launcher-page",
+  "custom_summary",
+  "d3d11",
+  "d3d9",
+  "daemon",
+  "dark_muted",
+  "dark_vibrant",
+  "data-path",
+  "data-reduction-proxy-config-url",
+  "data-reduction-proxy-enable-quic-on-non-core-proxies",
+  "data-reduction-proxy-experiment",
+  "data-reduction-proxy-http-proxies",
+  "data-reduction-proxy-lo-fi",
+  "data-reduction-proxy-pingback-url",
+  "data-reduction-proxy-secure-proxy-check-url",
+  "data-reduction-proxy-server-experiments-disabled",
+  "data-reduction-proxy-warmup-url",
+  "dbus-stub",
+  "debug-devtools",
+  "debug-enable-frame-toggle",
+  "debug-packed-apps",
+  "debug-print",
+  "default",
+  "default-tile-height",
+  "default-tile-width",
+  "default-wallpaper-is-oem",
+  "default-wallpaper-large",
+  "default-wallpaper-small",
+  "demo",
+  "derelict-detection-timeout",
+  "derelict-idle-timeout",
+  "desktop",
+  "desktop-window-1080p",
+  "deterministic-fetch",
+  "device-management-url",
+  "device-scale-factor",
+  "devtools-flags",
+  "diagnostics",
+  "diagnostics-format",
+  "diagnostics-recovery",
+  "disable",
+  "disable-2d-canvas-clip-aa",
+  "disable-2d-canvas-image-chromium",
+  "disable-3d-apis",
+  "disable-accelerated-2d-canvas",
+  "disable-accelerated-jpeg-decoding",
+  "disable-accelerated-mjpeg-decode",
+  "disable-accelerated-video-decode",
+  "disable-account-consistency",
+  "disable-add-to-shelf",
+  "disable-app-info-dialog-mac",
+  "disable-app-list-dismiss-on-blur",
+  "disable-app-window-cycling",
+  "disable-appcontainer",
+  "disable-arc-data-wipe",
+  "disable-arc-opt-in-verification",
+  "disable-audio-support-for-desktop-share",
+  "disable-autofill-keyboard-accessory-view",
+  "disable-avfoundation-overlays",
+  "disable-background-networking",
+  "disable-background-timer-throttling",
+  "disable-backgrounding-occluded-windows",
+  "disable-backing-store-limit",
+  "disable-blink-features",
+  "disable-boot-animation",
+  "disable-breakpad",
+  "disable-browser-task-scheduler",
+  "disable-bundled-ppapi-flash",
+  "disable-canvas-aa",
+  "disable-captive-portal-bypass-proxy",
+  "disable-cast-streaming-hw-encoding",
+  "disable-clear-browsing-data-counters",
+  "disable-client-side-phishing-detection",
+  "disable-cloud-import",
+  "disable-component-cloud-policy",
+  "disable-component-extensions-with-background-pages",
+  "disable-component-update",
+  "disable-composited-antialiasing",
+  "disable-contextual-search",
+  "disable-d3d11",
+  "disable-databases",
+  "disable-datasaver-prompt",
+  "disable-default-apps",
+  "disable-demo-mode",
+  "disable-device-disabling",
+  "disable-device-discovery-notifications",
+  "disable-dinosaur-easter-egg",
+  "disable-direct-composition",
+  "disable-directwrite-for-ui",
+  "disable-display-color-calibration",
+  "disable-display-list-2d-canvas",
+  "disable-distance-field-text",
+  "disable-domain-blocking-for-3d-apis",
+  "disable-domain-reliability",
+  "disable-download-image-renaming",
+  "disable-drive-search-in-app-launcher",
+  "disable-dwm-composition",
+  "disable-eol-notification",
+  "disable-es3-apis",
+  "disable-es3-gl-context",
+  "disable-extensions",
+  "disable-extensions-except",
+  "disable-extensions-file-access-check",
+  "disable-extensions-http-throttling",
+  "disable-fast-web-scroll-view-insets",
+  "disable-features",
+  "disable-field-trial-config",
+  "disable-file-system",
+  "disable-flash-3d",
+  "disable-flash-stage3d",
+  "disable-fullscreen-low-power-mode",
+  "disable-fullscreen-tab-detaching",
+  "disable-gaia-services",
+  "disable-gesture-editing",
+  "disable-gesture-requirement-for-media-playback",
+  "disable-gesture-requirement-for-presentation",
+  "disable-gesture-typing",
+  "disable-gl-drawing-for-tests",
+  "disable-gl-error-limit",
+  "disable-gl-extensions",
+  "disable-glsl-translator",
+  "disable-gpu",
+  "disable-gpu-async-worker-context",
+  "disable-gpu-compositing",
+  "disable-gpu-driver-bug-workarounds",
+  "disable-gpu-early-init",
+  "disable-gpu-memory-buffer-compositor-resources",
+  "disable-gpu-memory-buffer-video-frames",
+  "disable-gpu-process-crash-limit",
+  "disable-gpu-program-cache",
+  "disable-gpu-rasterization",
+  "disable-gpu-sandbox",
+  "disable-gpu-shader-disk-cache",
+  "disable-gpu-vsync",
+  "disable-gpu-watchdog",
+  "disable-hang-monitor",
+  "disable-hid-detection-on-oobe",
+  "disable-hide-inactive-stacked-tab-close-buttons",
+  "disable-histogram-customizer",
+  "disable-hosted-app-shim-creation",
+  "disable-hosted-apps-in-windows",
+  "disable-http2",
+  "disable-in-process-stack-traces",
+  "disable-infobars",
+  "disable-input-ime-api",
+  "disable-input-view",
+  "disable-ios-password-generation",
+  "disable-ios-password-suggestions",
+  "disable-ios-physical-web",
+  "disable-javascript-harmony-shipping",
+  "disable-kill-after-bad-ipc",
+  "disable-lcd-text",
+  "disable-legacy-window",
+  "disable-local-storage",
+  "disable-logging",
+  "disable-login-animations",
+  "disable-low-end-device-mode",
+  "disable-low-latency-dxva",
+  "disable-low-res-tiling",
+  "disable-lru-snapshot-cache",
+  "disable-mac-overlays",
+  "disable-mac-views-native-app-windows",
+  "disable-main-frame-before-activation",
+  "disable-md-oobe",
+  "disable-media-session-api",
+  "disable-media-suspend",
+  "disable-merge-key-char-events",
+  "disable-minimize-on-second-launcher-item-click",
+  "disable-mojo-renderer",
+  "disable-mtp-write-support",
+  "disable-multi-display-layout",
+  "disable-namespace-sandbox",
+  "disable-native-gpu-memory-buffers",
+  "disable-network-portal-notification",
+  "disable-new-bookmark-apps",
+  "disable-new-channel-switcher-ui",
+  "disable-new-kiosk-ui",
+  "disable-new-korean-ime",
+  "disable-new-profile-management",
+  "disable-new-zip-unpacker",
+  "disable-notifications",
+  "disable-ntp-popular-sites",
+  "disable-nv12-dxgi-video",
+  "disable-offer-store-unmasked-wallet-cards",
+  "disable-offer-upload-credit-cards",
+  "disable-office-editing-component-extension",
+  "disable-offline-auto-reload",
+  "disable-offline-auto-reload-visible-only",
+  "disable-overlay-scrollbar",
+  "disable-overscroll-edge-effect",
+  "disable-panel-fitting",
+  "disable-partial-raster",
+  "disable-password-generation",
+  "disable-payment-request",
+  "disable-pepper-3d",
+  "disable-pepper-3d-image-chromium",
+  "disable-per-monitor-dpi",
+  "disable-permission-action-reporting",
+  "disable-permissions-api",
+  "disable-physical-keyboard-autocorrect",
+  "disable-pinch",
+  "disable-pnacl-crash-throttling",
+  "disable-popup-blocking",
+  "disable-prefer-compositing-to-lcd-text",
+  "disable-presentation-api",
+  "disable-print-preview",
+  "disable-prompt-on-repost",
+  "disable-pull-to-refresh-effect",
+  "disable-push-api-background-mode",
+  "disable-quic",
+  "disable-reading-from-canvas",
+  "disable-remote-core-animation",
+  "disable-remote-fonts",
+  "disable-remote-playback-api",
+  "disable-renderer-accessibility",
+  "disable-renderer-backgrounding",
+  "disable-renderer-priority-management",
+  "disable-resize-lock",
+  "disable-rgba-4444-textures",
+  "disable-rollback-option",
+  "disable-rtc-smoothness-algorithm",
+  "disable-screen-orientation-lock",
+  "disable-search-geolocation-disclosure",
+  "disable-seccomp-filter-sandbox",
+  "disable-settings-window",
+  "disable-setuid-sandbox",
+  "disable-shader-name-hashing",
+  "disable-shared-workers",
+  "disable-signin-scoped-device-id",
+  "disable-single-click-autofill",
+  "disable-slimming-paint-invalidation",
+  "disable-smart-virtual-keyboard",
+  "disable-smooth-scrolling",
+  "disable-software-rasterizer",
+  "disable-speech-api",
+  "disable-suggestions-ui",
+  "disable-sync",
+  "disable-sync-app-list",
+  "disable-sync-types",
+  "disable-system-timezone-automatic-detection",
+  "disable-tab-for-desktop-share",
+  "disable-tab-strip-autoscroll-new-tabs",
+  "disable-threaded-animation",
+  "disable-threaded-compositing",
+  "disable-threaded-scrolling",
+  "disable-touch-adjustment",
+  "disable-touch-drag-drop",
+  "disable-translate",
+  "disable-translate-new-ux",
+  "disable-usb-keyboard-detect",
+  "disable-v8-idle-tasks",
+  "disable-vaapi-accelerated-video-encode",
+  "disable-views-rect-based-targeting",
+  "disable-virtual-keyboard-overscroll",
+  "disable-voice-input",
+  "disable-volume-adjust-sound",
+  "disable-wake-on-wifi",
+  "disable-web-notification-custom-layouts",
+  "disable-web-security",
+  "disable-webgl",
+  "disable-webgl-image-chromium",
+  "disable-webrtc-encryption",
+  "disable-webrtc-hw-decoding",
+  "disable-webrtc-hw-encoding",
+  "disable-webrtc-hw-vp8-encoding",
+  "disable-win32k-lockdown",
+  "disable-xss-auditor",
+  "disable-zero-browsers-open-for-tests",
+  "disable-zero-copy",
+  "disable-zero-copy-dxgi-video",
+  "disabled",
+  "disk-cache-dir",
+  "disk-cache-size",
+  "display",
+  "dmg-device",
+  "dns-log-details",
+  "dom-automation",
+  "dotfile",
+  "duck-flash",
+  "dump-browser-histograms",
+  "dump-dom",
+  "eafe-path",
+  "eafe-url",
+  "early-tracing",
+  "easy-unlock-app-path",
+  "edge-touch-filtering",
+  "egl",
+  "elevate",
+  "embedded-extension-options",
+  "emphasize-titles-in-omnibox-dropdown",
+  "emulate-shader-precision",
+  "enable-accelerated-2d-canvas",
+  "enable-accelerated-vpx-decode",
+  "enable-accessibility-tab-switcher",
+  "enable-account-consistency",
+  "enable-ad",
+  "enable-adaptive-selection-handle-orientation",
+  "enable-add-to-shelf",
+  "enable-aggressive-domstorage-flushing",
+  "enable-android-wallpapers-app",
+  "enable-app-info-dialog-mac",
+  "enable-app-list",
+  "enable-app-window-cycling",
+  "enable-appcontainer",
+  "enable-arc",
+  "enable-arc-oobe-optin",
+  "enable-audio-debug-recordings-from-extension",
+  "enable-autofill-keyboard-accessory-view",
+  "enable-automation",
+  "enable-benchmarking",
+  "enable-ble-advertising-in-apps",
+  "enable-blink-features",
+  "enable-bookmark-undo",
+  "enable-browser-side-navigation",
+  "enable-browser-task-scheduler",
+  "enable-canvas-2d-dynamic-rendering-mode-switching",
+  "enable-checker-imaging",
+  "enable-chromevox-arc-support",
+  "enable-clear-browsing-data-counters",
+  "enable-cloud-print-proxy",
+  "enable-cloud-print-xps",
+  "enable-color-correct-rendering",
+  "enable-color-correct-rendering-default-mode",
+  "enable-consumer-kiosk",
+  "enable-content-intent-detection",
+  "enable-contextual-search",
+  "enable-crash-reporter",
+  "enable-crash-reporter-for-testing",
+  "enable-crx-hash-check",
+  "enable-data-reduction-proxy-bypass-warning",
+  "enable-data-reduction-proxy-carrier-test",
+  "enable-data-reduction-proxy-force-pingback",
+  "enable-data-reduction-proxy-lite-page",
+  "enable-data-reduction-proxy-savings-promo",
+  "enable-datasaver-prompt",
+  "enable-default-media-session",
+  "enable-device-discovery-notifications",
+  "enable-devtools-experiments",
+  "enable-display-list-2d-canvas",
+  "enable-distance-field-text",
+  "enable-distillability-service",
+  "enable-dom-distiller",
+  "enable-domain-reliability",
+  "enable-download-image-renaming",
+  "enable-drive-search-in-app-launcher",
+  "enable-drm-atomic",
+  "enable-embedded-extension-options",
+  "enable-es3-apis",
+  "enable-exclusive-audio",
+  "enable-experimental-accessibility-features",
+  "enable-experimental-canvas-features",
+  "enable-experimental-extension-apis",
+  "enable-experimental-input-view-features",
+  "enable-experimental-web-platform-features",
+  "enable-extension-activity-log-testing",
+  "enable-extension-activity-logging",
+  "enable-extension-assets-sharing",
+  "enable-fast-unload",
+  "enable-fast-web-scroll-view-insets",
+  "enable-features",
+  "enable-first-run-ui-transitions",
+  "enable-floating-virtual-keyboard",
+  "enable-font-antialiasing",
+  "enable-fullscreen-tab-detaching",
+  "enable-fullscreen-toolbar-reveal",
+  "enable-google-branded-context-menu",
+  "enable-gpu-async-worker-context",
+  "enable-gpu-benchmarking",
+  "enable-gpu-client-logging",
+  "enable-gpu-client-tracing",
+  "enable-gpu-command-logging",
+  "enable-gpu-debugging",
+  "enable-gpu-driver-debug-logging",
+  "enable-gpu-memory-buffer-compositor-resources",
+  "enable-gpu-memory-buffer-video-frames",
+  "enable-gpu-rasterization",
+  "enable-gpu-service-logging",
+  "enable-gpu-service-tracing",
+  "enable-grouped-history",
+  "enable-hardware-overlays",
+  "enable-harfbuzz-rendertext",
+  "enable-hdr-output",
+  "enable-heap-profiling",
+  "enable-hosted-app-quit-notification",
+  "enable-hosted-apps-in-windows",
+  "enable-hosted-mode",
+  "enable-hotword-hardware",
+  "enable-hung-renderer-infobar",
+  "enable-inband-text-tracks",
+  "enable-input-ime-api",
+  "enable-ios-handoff-to-other-devices",
+  "enable-ios-password-generation",
+  "enable-ios-physical-web",
+  "enable-kiosk-mode",
+  "enable-layer-lists",
+  "enable-lcd-text",
+  "enable-leak-detection",
+  "enable-local-file-accesses",
+  "enable-local-sync-backend",
+  "enable-logging",
+  "enable-longpress-drag-selection",
+  "enable-low-end-device-mode",
+  "enable-low-res-tiling",
+  "enable-lru-snapshot-cache",
+  "enable-mac-views-native-app-windows",
+  "enable-main-frame-before-activation",
+  "enable-md-feedback",
+  "enable-md-policy-page",
+  "enable-media-suspend",
+  "enable-merge-key-char-events",
+  "enable-message-center-always-scroll-up-upon-notification-removal",
+  "enable-nacl",
+  "enable-nacl-debug",
+  "enable-nacl-nonsfi-mode",
+  "enable-native-cups",
+  "enable-native-gpu-memory-buffers",
+  "enable-natural-scroll-default",
+  "enable-navigation-tracing",
+  "enable-net-benchmarking",
+  "enable-network-information",
+  "enable-network-portal-notification",
+  "enable-new-bookmark-apps",
+  "enable-ntp-popular-sites",
+  "enable-ntp-search-engine-country-detection",
+  "enable-offer-store-unmasked-wallet-cards",
+  "enable-offer-upload-credit-cards",
+  "enable-offline-auto-reload",
+  "enable-offline-auto-reload-visible-only",
+  "enable-osk-overscroll",
+  "enable-overlay-scrollbar",
+  "enable-override-bookmarks-ui",
+  "enable-partial-raster",
+  "enable-password-generation",
+  "enable-payment-request",
+  "enable-pepper-testing",
+  "enable-per-monitor-dpi",
+  "enable-permission-action-reporting",
+  "enable-physical-keyboard-autocorrect",
+  "enable-pinch",
+  "enable-pixel-output-in-tests",
+  "enable-plugin-placeholder-testing",
+  "enable-potentially-annoying-security-features",
+  "enable-power-overlay",
+  "enable-precache",
+  "enable-precise-memory-info",
+  "enable-prefer-compositing-to-lcd-text",
+  "enable-print-browser",
+  "enable-print-preview-register-promos",
+  "enable-profile-shortcut-manager",
+  "enable-profiling",
+  "enable-proximity-auth-bluetooth-low-energy-discovery",
+  "enable-proximity-auth-proximity-detection",
+  "enable-push-api-background-mode",
+  "enable-quic",
+  "enable-reader-mode-toolbar-icon",
+  "enable-refresh-token-annotation-request",
+  "enable-request-tablet-site",
+  "enable-rgba-4444-textures",
+  "enable-sandbox",
+  "enable-sandbox-logging",
+  "enable-screenshot-testing-with-mode",
+  "enable-scripts-require-action",
+  "enable-scroll-prediction",
+  "enable-service-manager-tracing",
+  "enable-settings-window",
+  "enable-sgi-video-sync",
+  "enable-single-click-autofill",
+  "enable-site-engagement-eviction-policy",
+  "enable-site-settings",
+  "enable-skia-benchmarking",
+  "enable-slimming-paint-invalidation",
+  "enable-slimming-paint-v2",
+  "enable-smooth-scrolling",
+  "enable-spatial-navigation",
+  "enable-spdy-proxy-auth",
+  "enable-speech-dispatcher",
+  "enable-spelling-feedback-field-trial",
+  "enable-spotlight-actions",
+  "enable-stats-collection-bindings",
+  "enable-stats-table",
+  "enable-strict-mixed-content-checking",
+  "enable-strict-powerful-feature-restrictions",
+  "enable-suggestions-ui",
+  "enable-suggestions-with-substring-match",
+  "enable-supervised-user-managed-bookmarks-folder",
+  "enable-swap-buffers-with-bounds",
+  "enable-sync-app-list",
+  "enable-sync-articles",
+  "enable-tab-audio-muting",
+  "enable-tcp-fastopen",
+  "enable-tether",
+  "enable-threaded-compositing",
+  "enable-threaded-texture-mailboxes",
+  "enable-thumbnail-retargeting",
+  "enable-tile-compression",
+  "enable-touch-calibration-setting",
+  "enable-touch-drag-drop",
+  "enable-touch-support-for-screen-magnifier",
+  "enable-touchpad-three-finger-click",
+  "enable-touchview",
+  "enable-trace-app-source",
+  "enable-tracing",
+  "enable-tracing-output",
+  "enable-translate-new-ux",
+  "enable-true-color-rendering",
+  "enable-ui-devtools",
+  "enable-use-zoom-for-dsf",
+  "enable-user-controlled-alternate-protocol-ports",
+  "enable-user-metrics",
+  "enable-usermedia-screen-capturing",
+  "enable-video-player-chromecast-support",
+  "enable-viewport",
+  "enable-virtual-keyboard",
+  "enable-vp9-in-mp4",
+  "enable-vtune-support",
+  "enable-vulkan",
+  "enable-wayland-server",
+  "enable-web-notification-custom-layouts",
+  "enable-webfonts-intervention-trigger",
+  "enable-webfonts-intervention-v2",
+  "enable-webgl-draft-extensions",
+  "enable-webgl-image-chromium",
+  "enable-webrtc-event-logging-from-extension",
+  "enable-webrtc-stun-origin",
+  "enable-webvr",
+  "enable-wifi-credential-sync",
+  "enable-win7-webrtc-hw-h264-decoding",
+  "enable-zero-copy",
+  "enabled",
+  "enabled-2g",
+  "enabled-3g",
+  "enabled-slow2g",
+  "encode-binary",
+  "enforce",
+  "enforce-gl-minimums",
+  "enforce-webrtc-ip-permission-check",
+  "enforce_strict",
+  "enterprise-disable-arc",
+  "enterprise-enable-forced-re-enrollment",
+  "enterprise-enable-zero-touch-enrollment",
+  "enterprise-enrollment-initial-modulus",
+  "enterprise-enrollment-modulus-limit",
+  "error-console",
+  "explicitly-allowed-ports",
+  "expose-internals-for-testing",
+  "extension-content-verification",
+  "extension-process",
+  "extensions-install-verification",
+  "extensions-multi-account",
+  "extensions-not-webstore",
+  "extensions-on-chrome-urls",
+  "extensions-update-frequency",
+  "extra-search-query-params",
+  "fail-on-unused-args",
+  "fake-variations-channel",
+  "false",
+  "fast",
+  "fast-start",
+  "feedback-server",
+  "field-trial-handle",
+  "first-exec-after-boot",
+  "flag-switches-begin",
+  "flag-switches-end",
+  "font-cache-shared-handle",
+  "force-android-app-mode",
+  "force-app-mode",
+  "force-desktop-ios-promotion",
+  "force-dev-mode-highlighting",
+  "force-device-scale-factor",
+  "force-display-list-2d-canvas",
+  "force-fieldtrial-params",
+  "force-fieldtrials",
+  "force-first-run",
+  "force-first-run-ui",
+  "force-gpu-mem-available-mb",
+  "force-gpu-rasterization",
+  "force-happiness-tracking-system",
+  "force-load-easy-unlock-app-in-tests",
+  "force-local-ntp",
+  "force-login-manager-in-tests",
+  "force-mediafoundation",
+  "force-overlay-fullscreen-video",
+  "force-pnacl-subzero",
+  "force-renderer-accessibility",
+  "force-show-update-menu-badge",
+  "force-show-update-menu-item",
+  "force-system-compositor-mode",
+  "force-ui-direction",
+  "force-variation-ids",
+  "force-video-overlays",
+  "force-wave-audio",
+  "force-webrtc-ip-handling-policy",
+  "full-memory-crash-report",
+  "gaia-url",
+  "gcm-checkin-url",
+  "gcm-mcs-endpoint",
+  "gcm-registration-url",
+  "generate-accessibility-test-expectations",
+  "gl",
+  "gl-composited-texture-quad-border",
+  "gl-shader-interm-output",
+  "gles",
+  "golden-screenshots-dir",
+  "google-apis-url",
+  "google-base-url",
+  "google-doodle-url",
+  "google-profile-info",
+  "google-url",
+  "gpu-active-device-id",
+  "gpu-active-vendor-id",
+  "gpu-device-id",
+  "gpu-driver-bug-workarounds",
+  "gpu-driver-date",
+  "gpu-driver-vendor",
+  "gpu-driver-version",
+  "gpu-launcher",
+  "gpu-no-complete-info-collection",
+  "gpu-no-context-lost",
+  "gpu-process",
+  "gpu-program-cache-size-kb",
+  "gpu-rasterization-msaa-sample-count",
+  "gpu-sandbox-allow-sysv-shm",
+  "gpu-sandbox-failures-fatal",
+  "gpu-sandbox-start-early",
+  "gpu-secondary-device-ids",
+  "gpu-secondary-vendor-ids",
+  "gpu-startup-dialog",
+  "gpu-testing-device-id",
+  "gpu-testing-driver-date",
+  "gpu-testing-gl-renderer",
+  "gpu-testing-gl-vendor",
+  "gpu-testing-gl-version",
+  "gpu-testing-os-version",
+  "gpu-testing-secondary-device-ids",
+  "gpu-testing-secondary-vendor-ids",
+  "gpu-testing-vendor-id",
+  "gpu-vendor-id",
+  "guest-wallpaper-large",
+  "guest-wallpaper-small",
+  "h",
+  "has-chromeos-diamond-key",
+  "headless",
+  "help",
+  "hide",
+  "hide-icons",
+  "hide-scrollbars",
+  "history-entry-requires-user-gesture",
+  "homedir",
+  "homepage",
+  "host",
+  "host-pairing-oobe",
+  "host-resolver-retry-attempts",
+  "host-resolver-rules",
+  "host-rules",
+  "icu-data-dir",
+  "ignore-autocomplete-off-autofill",
+  "ignore-certificate-errors",
+  "ignore-gpu-blacklist",
+  "ignore-missing-cdm-host-file",
+  "ignore-urlfetcher-cert-requests",
+  "ignore-user-profile-mapping-for-tests",
+  "in-process-gpu",
+  "incognito",
+  "inert-visual-viewport",
+  "input",
+  "inspect",
+  "inspect-brk",
+  "install-chrome-app",
+  "install-supervised-user-whitelists",
+  "instant-process",
+  "interests-url",
+  "invalidation-use-gcm-channel",
+  "ipc-connection-timeout",
+  "ipc-dump-directory",
+  "ipc-fuzzer-testcase",
+  "is-running-in-mash",
+  "isolate-extensions",
+  "isolate-sites-for-testing",
+  "javascript-harmony",
+  "js-flags",
+  "keep-alive-for-test",
+  "kiosk",
+  "kiosk-printing",
+  "lang",
+  "last-launched-app",
+  "light_muted",
+  "light_vibrant",
+  "load-and-launch-app",
+  "load-apps",
+  "load-extension",
+  "load-media-router-component-extension",
+  "local-heuristics-only-for-password-generation",
+  "local-ntp-reload",
+  "local-sync-backend-dir",
+  "log-gpu-control-list-decisions",
+  "log-level",
+  "log-net-log",
+  "login-manager",
+  "login-profile",
+  "login-user",
+  "lso-url",
+  "ltr",
+  "main-frame-resizes-are-orientation-changes",
+  "make-chrome-default",
+  "make-default-browser",
+  "managed-user-id",
+  "managed-user-sync-token",
+  "mark-non-secure-as",
+  "markdown",
+  "market-url-for-testing",
+  "mash",
+  "material",
+  "material-design-ink-drop-animation-speed",
+  "material-hybrid",
+  "max-gum-fps",
+  "max-untiled-layer-height",
+  "max-untiled-layer-width",
+  "media-cache-size",
+  "mem-pressure-system-reserved-kb",
+  "memory-metrics",
+  "memory-pressure-off",
+  "memory-pressure-thresholds",
+  "memory-pressure-thresholds-mb",
+  "message-center-changes-while-open",
+  "metrics-client-id",
+  "metrics-recording-only",
+  "mhtml-generator-option",
+  "mock",
+  "mojo-channel-token",
+  "mojo-local-storage",
+  "mojo-pipe-token",
+  "monitoring-destination-id",
+  "mse-audio-buffer-size-limit",
+  "mse-video-buffer-size-limit",
+  "mute-audio",
+  "nacl-broker",
+  "nacl-dangerous-no-sandbox-nonsfi",
+  "nacl-debug-mask",
+  "nacl-gdb",
+  "nacl-gdb-script",
+  "nacl-loader",
+  "nacl-loader-nonsfi",
+  "native",
+  "native-crx-bindings",
+  "net-log-capture-mode",
+  "netifs-to-ignore",
+  "network-country-iso",
+  "new-profile-management",
+  "new-window",
+  "no-default-browser-check",
+  "no-experiments",
+  "no-first-run",
+  "no-managed-user-acknowledgment-check",
+  "no-network-profile-warning",
+  "no-pings",
+  "no-proxy-server",
+  "no-referrers",
+  "no-sandbox",
+  "no-service-autorun",
+  "no-startup-window",
+  "no-use-mus-in-renderer",
+  "no-wifi",
+  "no-zygote",
+  "nocolor",
+  "noerrdialogs",
+  "non-material",
+  "non-secure",
+  "none",
+  "normal_muted",
+  "normal_vibrant",
+  "note-taking-app-ids",
+  "ntp-snippets-add-incomplete",
+  "ntp-switch-to-existing-tab",
+  "null",
+  "num-pac-threads",
+  "num-raster-threads",
+  "oauth2-client-id",
+  "oauth2-client-secret",
+  "off",
+  "on",
+  "oobe-bootstrapping-master",
+  "oobe-guest-session",
+  "oobe-skip-postlogin",
+  "oobe-timer-interval",
+  "open-ash",
+  "opengraph",
+  "origin-to-force-quic-on",
+  "origin-trial-disabled-features",
+  "origin-trial-disabled-tokens",
+  "origin-trial-public-key",
+  "original-process-start-time",
+  "osmesa",
+  "output",
+  "override",
+  "override-metrics-upload-url",
+  "override-plugin-power-saver-for-testing",
+  "override-use-software-gl-for-tests",
+  "overscroll-history-navigation",
+  "ozone-dump-file",
+  "ozone-platform",
+  "pack-extension",
+  "pack-extension-key",
+  "parent-profile",
+  "parent-window",
+  "passive-listeners-default",
+  "password-store",
+  "permission-request-api-scope",
+  "permission-request-api-url",
+  "power-stub",
+  "ppapi",
+  "ppapi-antialiased-text-enabled",
+  "ppapi-broker",
+  "ppapi-flash-args",
+  "ppapi-flash-path",
+  "ppapi-flash-version",
+  "ppapi-in-process",
+  "ppapi-plugin-launcher",
+  "ppapi-startup-dialog",
+  "ppapi-subpixel-rendering-setting",
+  "precache-config-settings-url",
+  "precache-manifest-url-prefix",
+  "prerender-from-omnibox",
+  "previous-app",
+  "primary",
+  "primordial-pipe-token",
+  "privet-ipv6-only",
+  "process-per-site",
+  "process-per-tab",
+  "process-service-name",
+  "product-version",
+  "profile-directory",
+  "profiler-timing",
+  "profiling-at-start",
+  "profiling-file",
+  "profiling-flush",
+  "progress-bar-animation",
+  "progress-bar-completion",
+  "prompt-for-external-extensions",
+  "proxy-auto-detect",
+  "proxy-bypass-list",
+  "proxy-pac-url",
+  "proxy-server",
+  "q",
+  "quic-connection-options",
+  "quic-host-whitelist",
+  "quic-max-packet-length",
+  "quic-version",
+  "rdp_desktop_session",
+  "reader-mode-feedback",
+  "reader-mode-heuristics",
+  "rebaseline-pixel-tests",
+  "reduce-security-for-testing",
+  "reduced-referrer-granularity",
+  "register-font-files",
+  "register-pepper-plugins",
+  "relauncher",
+  "remote-debugging-address",
+  "remote-debugging-port",
+  "remote-debugging-socket-name",
+  "remote-debugging-targets",
+  "renderer",
+  "renderer-client-id",
+  "renderer-cmd-prefix",
+  "renderer-process-limit",
+  "renderer-startup-dialog",
+  "renderer-wait-for-java-debugger",
+  "repl",
+  "report-vp9-as-an-unsupported-mime-type",
+  "require-audio-hardware-for-testing",
+  "reset-app-list-install-state",
+  "reset-variation-state",
+  "restore-last-session",
+  "root",
+  "root-layer-scrolls",
+  "rtl",
+  "run-layout-test",
+  "runtime-deps-list-file",
+  "safebrowsing-disable-auto-update",
+  "safebrowsing-disable-download-protection",
+  "safebrowsing-disable-extension-blacklist",
+  "safebrowsing-manual-download-blacklist",
+  "sandbox-ipc",
+  "save-page-as-mhtml",
+  "saveas-menu-label",
+  "screen-config",
+  "screenshot",
+  "script-executable",
+  "scripts-require-action",
+  "scroll-end-effect",
+  "secondary",
+  "secondary-display-layout",
+  "secondary-ui-md",
+  "service",
+  "service-overrides",
+  "service-request-channel-token",
+  "shared-files",
+  "shill-stub",
+  "show-app-list",
+  "show-autofill-signatures",
+  "show-autofill-type-predictions",
+  "show-component-extension-options",
+  "show-composited-layer-borders",
+  "show-fps-counter",
+  "show-icons",
+  "show-layer-animation-bounds",
+  "show-mac-overlay-borders",
+  "show-overdraw-feedback",
+  "show-paint-rects",
+  "show-property-changed-rects",
+  "show-saved-copy",
+  "show-screenspace-rects",
+  "show-surface-damage-rects",
+  "show_summary",
+  "silent-debugger-extension-api",
+  "silent-launch",
+  "simulate-critical-update",
+  "simulate-elevated-recovery",
+  "simulate-outdated",
+  "simulate-outdated-no-au",
+  "simulate-upgrade",
+  "single-process",
+  "site-per-process",
+  "skip-gpu-data-loading",
+  "skip-nostore-all",
+  "skip-nostore-main",
+  "skip-reencoding-on-skp-capture",
+  "slow",
+  "slow-connections-only",
+  "slow-down-raster-scale-factor",
+  "sms-test-messages",
+  "spdy-proxy-auth-fallback",
+  "spdy-proxy-auth-origin",
+  "spdy-proxy-auth-value",
+  "spelling-service-feedback-interval-seconds",
+  "spelling-service-feedback-url",
+  "ssl-key-log-file",
+  "ssl-version-max",
+  "ssl-version-min",
+  "stable-release-mode",
+  "start-fullscreen",
+  "start-maximized",
+  "start-stack-profiler",
+  "started",
+  "stub",
+  "stub-cros-settings",
+  "supports-dual-gpus",
+  "swiftshader",
+  "swiftshader-path",
+  "swiftshader-webgl",
+  "sync-allow-insecure-xmpp-connection",
+  "sync-deferred-startup-timeout-seconds",
+  "sync-disable-deferred-startup",
+  "sync-enable-get-update-avoidance",
+  "sync-notification-host-port",
+  "sync-on-draw-hardware",
+  "sync-short-initial-retry-override",
+  "sync-short-nudge-delay-for-test",
+  "sync-url",
+  "system-developer-mode",
+  "system-log-upload-frequency",
+  "tab-management-experiment-type-disabled",
+  "tab-management-experiment-type-elderberry",
+  "task-profiler",
+  "team-drives",
+  "test-auto-update-ui",
+  "test-child-process",
+  "test-cros-gaia-id-migration",
+  "test-do-not-initialize-icu",
+  "test-gl-lib",
+  "test-launcher-batch-limit",
+  "test-launcher-bot-mode",
+  "test-launcher-debug-launcher",
+  "test-launcher-filter-file",
+  "test-launcher-force-run-broken-tests",
+  "test-launcher-jobs",
+  "test-launcher-list-tests",
+  "test-launcher-output",
+  "test-launcher-print-test-stdio",
+  "test-launcher-print-writable-path",
+  "test-launcher-retry-limit",
+  "test-launcher-shard-index",
+  "test-launcher-summary-output",
+  "test-launcher-timeout",
+  "test-launcher-total-shards",
+  "test-launcher-trace",
+  "test-name",
+  "test-tiny-timeout",
+  "test-type",
+  "testing-fixed-http-port",
+  "testing-fixed-https-port",
+  "threads",
+  "time",
+  "timeout",
+  "tls1",
+  "tls1.1",
+  "tls1.2",
+  "tls1.3",
+  "top-chrome-md",
+  "top-controls-hide-threshold",
+  "top-controls-show-threshold",
+  "top-document-isolation",
+  "touch-calibration",
+  "touch-devices",
+  "touch-events",
+  "touch-noise-filtering",
+  "touch-selection-strategy",
+  "trace-config-file",
+  "trace-export-events-to-etw",
+  "trace-shutdown",
+  "trace-shutdown-file",
+  "trace-startup",
+  "trace-startup-duration",
+  "trace-startup-file",
+  "trace-to-console",
+  "trace-to-file",
+  "trace-to-file-name",
+  "trace-upload-url",
+  "tracelog",
+  "translate-ranker-model-url",
+  "translate-script-url",
+  "translate-security-origin",
+  "true",
+  "try-chrome-again",
+  "try-supported-channel-layouts",
+  "type",
+  "ui-disable-partial-swap",
+  "ui-enable-layer-lists",
+  "ui-enable-rgba-4444-textures",
+  "ui-enable-zero-copy",
+  "ui-prioritize-in-gpu-process",
+  "ui-show-fps-counter",
+  "ui-show-layer-animation-bounds",
+  "ui-show-layer-borders",
+  "ui-show-paint-rects",
+  "ui-show-property-changed-rects",
+  "ui-show-screenspace-rects",
+  "ui-show-surface-damage-rects",
+  "ui-slow-animations",
+  "ui-test-action-max-timeout",
+  "ui-test-action-timeout",
+  "uninstall",
+  "unlimited-storage",
+  "unsafe-pac-url",
+  "unsafely-treat-insecure-origin-as-secure",
+  "use-angle",
+  "use-cras",
+  "use-fake-device-for-media-stream",
+  "use-fake-ui-for-media-stream",
+  "use-file-for-fake-audio-capture",
+  "use-file-for-fake-video-capture",
+  "use-first-display-as-internal",
+  "use-gl",
+  "use-gpu-in-tests",
+  "use-mobile-user-agent",
+  "use-mock-keychain",
+  "use-new-virtual-keyboard-behavior",
+  "use-passthrough-cmd-decoder",
+  "use-simple-cache-backend",
+  "use-test-config",
+  "use_new_features_summary",
+  "user-agent",
+  "user-always-affiliated",
+  "user-data-dir",
+  "utility",
+  "utility-allowed-dir",
+  "utility-cmd-prefix",
+  "utility-run-elevated",
+  "v",
+  "v8-cache-options",
+  "v8-cache-strategies-for-cache-storage",
+  "validate-crx",
+  "validate-input-event-stream",
+  "variations-server-url",
+  "version",
+  "video-image-texture-target",
+  "video-threads",
+  "video-underflow-threshold-ms",
+  "viewer-launch-via-appid",
+  "virtual-time-budget",
+  "vmodule",
+  "wait-for-debugger",
+  "wait-for-debugger-children",
+  "wake-on-wifi-packet",
+  "wallet-service-use-sandbox",
+  "watcher",
+  "waveout-buffers",
+  "webapk-server-url",
+  "webrtc-stun-probe-trial",
+  "webview-enable-safebrowsing-support",
+  "webview-sandboxed-renderer",
+  "whitelisted-extension-id",
+  "win-jumplist-action",
+  "window-position",
+  "window-size",
+  "window-workspace",
+  "windows10-custom-titlebar",
+  "windows8-search",
+  "winhttp-proxy-resolver",
+  "wm-window-animations-disabled",
+  "zygote",
+  "zygote-cmd-prefix"
+};
+
+bool IsBlacklistedArg(const base::CommandLine::CharType* arg) {
+#if defined(OS_WIN)
+  const auto converted = base::WideToUTF8(arg);
+  const char* a = converted.c_str();
+#else
+  const char* a = arg;
+#endif
+
+  static const char* prefixes[] = {"--", "-", "/"};
+
+  int prefix_length = 0;
+  for (auto& prefix : prefixes) {
+    if (base::StartsWith(a, prefix, base::CompareCase::SENSITIVE)) {
+      prefix_length = strlen(prefix);
+      break;
+    }
+  }
+
+  if (prefix_length > 0) {
+    a += prefix_length;
+    std::string switch_name =
+        base::ToLowerASCII(base::StringPiece(a, strcspn(a, "=")));
+    for (auto& item : blacklist) {
+      if (switch_name == item)
+        return true;
+    }
+  }
+
+  return false;
+}
+
+>>>>>>> .their
 }  // namespace
 
 namespace atom {
 
 bool CheckCommandLineArguments(int argc, base::CommandLine::CharType** argv) {
   const base::CommandLine::StringType dashdash(2, '-');
+<<<<<<< .our
   bool block_args = false;
   for (int i = 0; i < argc; ++i) {
     if (argv[i] == dashdash)
@@ -45,6 +1371,17 @@
       return false;
     } else if (IsUrlArg(argv[i])) {
       block_args = true;
+=======
+  bool block_blacklisted_args = false;
+  for (int i = 0; i < argc; ++i) {
+    if (argv[i] == dashdash)
+      break;
+    if (block_blacklisted_args) {
+      if (IsBlacklistedArg(argv[i]))
+        return false;
+    } else if (IsUrlArg(argv[i])) {
+      block_blacklisted_args = true;
+>>>>>>> .their
     }
   }
   return true;
added in both
  our    100644 2c0acc1648ff3b4bc574f000643069f8ef8e94bb atom/app/command_line_args.h
  their  100644 1f5fd756868898e7a304c754d89625059d36441f atom/app/command_line_args.h
@@ -14,3 +14,7 @@
 }  // namespace atom
 
 #endif  // ATOM_APP_COMMAND_LINE_ARGS_H_
+<<<<<<< .our
+=======
+
+>>>>>>> .their
changed in both
  base   100644 06d4dd8aaf5b1d64db4b8b6a1ed11f67ab5e9835 atom/browser/api/atom_api_app.cc
  our    100644 089a2b63d1bae3afebea925582a3aac81ddeaa4f atom/browser/api/atom_api_app.cc
  their  100644 620abed67081a04788d03f358f787ad0bb7502df atom/browser/api/atom_api_app.cc
@@ -618,7 +618,10 @@
 }
 
 void App::OnPreMainMessageLoopRun() {
+<<<<<<< .our
   content::BrowserChildProcessObserver::Add(this);
+=======
+>>>>>>> .their
   if (process_singleton_) {
     process_singleton_->OnBrowserReady();
   }
changed in both
  base   100644 694a3e3047303a953f098610504c65ce7b4c9003 atom/browser/api/atom_api_app.h
  our    100644 ee0ad42c05fe33be17146b79cbe3422953516621 atom/browser/api/atom_api_app.h
  their  100644 15141391e067d1b44a45255a1b5cca265ea0b5a8 atom/browser/api/atom_api_app.h
changed in both
  base   100644 7496b8389aceee1db3a028b86d50a7bdc56d375b atom/browser/api/atom_api_notification.cc
  our    100644 06d22455c7024a41799d5003a755588bb67437a9 atom/browser/api/atom_api_notification.cc
  their  100644 ef5b9ce1296a3e6f535ae1f77614028ca4dfa6d9 atom/browser/api/atom_api_notification.cc
@@ -72,7 +72,10 @@
     opts.Get("hasReply", &has_reply_);
     opts.Get("actions", &actions_);
     opts.Get("sound", &sound_);
+<<<<<<< .our
     opts.Get("closeButtonText", &close_button_text_);
+=======
+>>>>>>> .their
   }
 }
 
@@ -123,8 +126,13 @@
   return actions_;
 }
 
+<<<<<<< .our
 base::string16 Notification::GetCloseButtonText() const {
   return close_button_text_;
+=======
+base::string16 Notification::GetSound() const {
+  return sound_;
+>>>>>>> .their
 }
 
 // Setters
@@ -161,8 +169,13 @@
   actions_ = actions;
 }
 
+<<<<<<< .our
 void Notification::SetCloseButtonText(const base::string16& text) {
   close_button_text_ = text;
+=======
+void Notification::SetSound(const base::string16& new_sound) {
+  sound_ = new_sound;
+>>>>>>> .their
 }
 
 void Notification::NotificationAction(int index) {
@@ -211,7 +224,10 @@
       options.reply_placeholder = reply_placeholder_;
       options.actions = actions_;
       options.sound = sound_;
+<<<<<<< .our
       options.close_button_text = close_button_text_;
+=======
+>>>>>>> .their
       notification_->Show(options);
     }
   }
@@ -241,8 +257,13 @@
       .SetProperty("sound", &Notification::GetSound, &Notification::SetSound)
       .SetProperty("actions", &Notification::GetActions,
                    &Notification::SetActions)
+<<<<<<< .our
       .SetProperty("closeButtonText", &Notification::GetCloseButtonText,
                    &Notification::SetCloseButtonText);
+=======
+      .SetProperty("sound", &Notification::GetSound,
+                   &Notification::SetSound);
+>>>>>>> .their
 }
 
 }  // namespace api
changed in both
  base   100644 9c2dcd4b5107932ab668464d6199f7a3193100f0 atom/browser/api/atom_api_notification.h
  our    100644 91a5b72c983c95b20315384091048e50ad08d27f atom/browser/api/atom_api_notification.h
  their  100644 d4679e7c2c90df3b8e20cd95c8e3a96a412b2492 atom/browser/api/atom_api_notification.h
@@ -56,7 +56,11 @@
   base::string16 GetReplyPlaceholder() const;
   base::string16 GetSound() const;
   std::vector<brightray::NotificationAction> GetActions() const;
+<<<<<<< .our
   base::string16 GetCloseButtonText() const;
+=======
+  base::string16 GetSound() const;
+>>>>>>> .their
 
   // Prop Setters
   void SetTitle(const base::string16& new_title);
@@ -67,7 +71,11 @@
   void SetReplyPlaceholder(const base::string16& new_reply_placeholder);
   void SetSound(const base::string16& sound);
   void SetActions(const std::vector<brightray::NotificationAction>& actions);
+<<<<<<< .our
   void SetCloseButtonText(const base::string16& text);
+=======
+  void SetSound(const base::string16& sound);
+>>>>>>> .their
 
  private:
   base::string16 title_;
@@ -81,7 +89,11 @@
   base::string16 reply_placeholder_;
   base::string16 sound_;
   std::vector<brightray::NotificationAction> actions_;
+<<<<<<< .our
   base::string16 close_button_text_;
+=======
+  base::string16 sound_;
+>>>>>>> .their
 
   brightray::NotificationPresenter* presenter_;
 
changed in both
  base   100644 a23d2817b87df8c7bfb63465afbb8b0852bd8b2f atom/browser/api/atom_api_web_contents.cc
  our    100644 20a1ac2e672f08ffea528b6e094ba530ff8083d1 atom/browser/api/atom_api_web_contents.cc
  their  100644 95fb99a2351be4df43415302bca700042a4c9f16 atom/browser/api/atom_api_web_contents.cc
@@ -397,8 +397,8 @@
     options.Get("transparent", &transparent);
 
     content::WebContents::CreateParams params(session->browser_context());
-    auto* view = new OffScreenWebContentsView(
-        transparent, base::Bind(&WebContents::OnPaint, base::Unretained(this)));
+    auto* view = new OffScreenWebContentsView(transparent,
+        base::Bind(&WebContents::OnPaint, base::Unretained(this)));
     params.view = view;
     params.delegate_view = view;
 
@@ -1742,7 +1742,12 @@
     return;
 
 #if defined(ENABLE_OSR)
+<<<<<<< .our
   auto* osr_wcv = GetOffScreenWebContentsView();
+=======
+  const auto* wc_impl = static_cast<content::WebContentsImpl*>(web_contents());
+  auto* osr_wcv = static_cast<OffScreenWebContentsView*>(wc_impl->GetView());
+>>>>>>> .their
   if (osr_wcv)
     osr_wcv->SetPainting(true);
 #endif
@@ -1753,7 +1758,12 @@
     return;
 
 #if defined(ENABLE_OSR)
+<<<<<<< .our
   auto* osr_wcv = GetOffScreenWebContentsView();
+=======
+  const auto* wc_impl = static_cast<content::WebContentsImpl*>(web_contents());
+  auto* osr_wcv = static_cast<OffScreenWebContentsView*>(wc_impl->GetView());
+>>>>>>> .their
   if (osr_wcv)
     osr_wcv->SetPainting(false);
 #endif
@@ -1764,7 +1774,13 @@
     return false;
 
 #if defined(ENABLE_OSR)
+<<<<<<< .our
   auto* osr_wcv = GetOffScreenWebContentsView();
+=======
+  const auto* wc_impl = static_cast<content::WebContentsImpl*>(web_contents());
+  auto* osr_wcv = static_cast<OffScreenWebContentsView*>(wc_impl->GetView());
+
+>>>>>>> .their
   return osr_wcv && osr_wcv->IsPainting();
 #else
   return false;
@@ -1776,7 +1792,13 @@
     return;
 
 #if defined(ENABLE_OSR)
+<<<<<<< .our
   auto* osr_wcv = GetOffScreenWebContentsView();
+=======
+  const auto* wc_impl = static_cast<content::WebContentsImpl*>(web_contents());
+  auto* osr_wcv = static_cast<OffScreenWebContentsView*>(wc_impl->GetView());
+
+>>>>>>> .their
   if (osr_wcv)
     osr_wcv->SetFrameRate(frame_rate);
 #endif
@@ -1787,7 +1809,13 @@
     return 0;
 
 #if defined(ENABLE_OSR)
+<<<<<<< .our
   auto* osr_wcv = GetOffScreenWebContentsView();
+=======
+  const auto* wc_impl = static_cast<content::WebContentsImpl*>(web_contents());
+  auto* osr_wcv = static_cast<OffScreenWebContentsView*>(wc_impl->GetView());
+
+>>>>>>> .their
   return osr_wcv ? osr_wcv->GetFrameRate() : 0;
 #else
   return 0;
@@ -1871,6 +1899,7 @@
   return mate::ConvertToV8(isolate, *web_preferences->preference());
 }
 
+<<<<<<< .our
 v8::Local<v8::Value> WebContents::GetLastWebPreferences(
     v8::Isolate* isolate) const {
   auto* web_preferences = WebContentsPreferences::From(web_contents());
@@ -1880,6 +1909,17 @@
 }
 
 v8::Local<v8::Value> WebContents::GetOwnerBrowserWindow() const {
+=======
+v8::Local<v8::Value> WebContents::GetLastWebPreferences(v8::Isolate* isolate) {
+  WebContentsPreferences* web_preferences =
+      WebContentsPreferences::FromWebContents(web_contents());
+  if (!web_preferences)
+    return v8::Null(isolate);
+  return mate::ConvertToV8(isolate, *web_preferences->last_web_preferences());
+}
+
+v8::Local<v8::Value> WebContents::GetOwnerBrowserWindow() {
+>>>>>>> .their
   if (owner_window())
     return BrowserWindow::From(isolate(), owner_window());
   else
changed in both
  base   100644 1270a0ce2c79edab0c1be08450f06eef7b8cdd49 atom/browser/api/atom_api_web_contents.h
  our    100644 7939f8268aa8c3371623e0c15f3b6001d7f1efa4 atom/browser/api/atom_api_web_contents.h
  their  100644 99e64f8ff8d9dc41eadc8d022d149e68679382f7 atom/browser/api/atom_api_web_contents.h
@@ -234,8 +234,13 @@
   v8::Local<v8::Value> GetPreloadPath(v8::Isolate* isolate) const;
 
   // Returns the web preferences of current WebContents.
+<<<<<<< .our
   v8::Local<v8::Value> GetWebPreferences(v8::Isolate* isolate) const;
   v8::Local<v8::Value> GetLastWebPreferences(v8::Isolate* isolate) const;
+=======
+  v8::Local<v8::Value> GetWebPreferences(v8::Isolate* isolate);
+  v8::Local<v8::Value> GetLastWebPreferences(v8::Isolate* isolate);
+>>>>>>> .their
 
   // Returns the owner window.
   v8::Local<v8::Value> GetOwnerBrowserWindow() const;
changed in both
  base   100644 61c97f2c35ce3c9e76cee59f9e4becd9649c993b atom/browser/atom_browser_client.cc
  our    100644 57c4ee582405e6d501ec23940ccb10689ecd64a1 atom/browser/atom_browser_client.cc
  their  100644 713b1bc6ec037aaa9f845b98d26a959d7d7688bc atom/browser/atom_browser_client.cc
@@ -27,6 +27,7 @@
 #include "base/command_line.h"
 #include "base/environment.h"
 #include "base/files/file_util.h"
+#include "base/path_service.h"
 #include "base/stl_util.h"
 #include "base/strings/string_number_conversions.h"
 #include "base/strings/string_util.h"
@@ -296,6 +297,7 @@
     base::CommandLine* command_line,
     int process_id) {
   // Make sure we're about to launch a known executable
+<<<<<<< .our
   {
     base::FilePath child_path;
     PathService::Get(content::CHILD_PROCESS_EXE, &child_path);
@@ -303,6 +305,11 @@
     base::ThreadRestrictions::ScopedAllowIO allow_io;
     CHECK(base::MakeAbsoluteFilePath(command_line->GetProgram()) == child_path);
   }
+=======
+  base::FilePath child_path;
+  PathService::Get(content::CHILD_PROCESS_EXE, &child_path);
+  CHECK(base::MakeAbsoluteFilePath(command_line->GetProgram()) == child_path);
+>>>>>>> .their
 
   std::string process_type =
       command_line->GetSwitchValueASCII(::switches::kProcessType);
changed in both
  base   100644 190898fdef9afb08c5110185136d3016bfd7edc2 atom/browser/atom_browser_main_parts.cc
  our    100644 5229b19ca9af7845a3f2f13b7e0913f633b68b1d atom/browser/atom_browser_main_parts.cc
  their  100644 89ab75c33cbe8bac8b50be241ae0ac82ea000ac6 atom/browser/atom_browser_main_parts.cc
@@ -223,7 +223,10 @@
   Browser::Get()->DidFinishLaunching(base::DictionaryValue());
 #endif
 
+<<<<<<< .our
   // Notify observers that main thread message loop was initialized.
+=======
+>>>>>>> .their
   Browser::Get()->PreMainMessageLoopRun();
 }
 
changed in both
  base   100644 c714dc1f46ab633127a65a997e1adca4b240d2e8 atom/browser/browser.cc
  our    100644 ce35de64d60c6767ac52596c1b32e7bde5ceefa0 atom/browser/browser.cc
  their  100644 1e4bc5e8e72c21735530960fe617e07c3afeaa0c atom/browser/browser.cc
changed in both
  base   100644 2204eafdd5503ab90c67659c2d3c377dd745cc68 atom/browser/browser.h
  our    100644 aed7d25c37da59c0dd5e09940a064c329353a0b2 atom/browser/browser.h
  their  100644 d0f929caf1792c3e62bc7e6f52ad9cf0b9655a91 atom/browser/browser.h
@@ -238,7 +238,13 @@
 
   void PreMainMessageLoopRun();
 
+<<<<<<< .our
   void AddObserver(BrowserObserver* obs) { observers_.AddObserver(obs); }
+=======
+  void AddObserver(BrowserObserver* obs) {
+    observers_.AddObserver(obs);
+  }
+>>>>>>> .their
 
   void RemoveObserver(BrowserObserver* obs) { observers_.RemoveObserver(obs); }
 
changed in both
  base   100644 3e50fc228b9ad5699dba2e2ecb70ee6212d6e5c1 atom/browser/browser_observer.h
  our    100644 d518e8d6a7c6e8e30c09498883719a58c8a9f5e8 atom/browser/browser_observer.h
  their  100644 fce24d8ac792e2262b1c5097d3b82bccfb0c2ca7 atom/browser/browser_observer.h
changed in both
  base   100644 1ad07a90869708c653e38f0ee7924bcff761419d atom/browser/mac/atom_application_delegate.mm
  our    100644 683f7a84bcaa2c47bb78cf299314a5afeb15639b atom/browser/mac/atom_application_delegate.mm
  their  100644 ccf51133ce2594f2095455e2f30172ffcf7f2f72 atom/browser/mac/atom_application_delegate.mm
@@ -8,13 +8,21 @@
 #import "atom/browser/mac/atom_application.h"
 #include "atom/browser/mac/dict_util.h"
 #include "base/allocator/allocator_shim.h"
+<<<<<<< .our
 #include "base/allocator/buildflags.h"
+=======
+#include "base/allocator/features.h"
+>>>>>>> .their
 #include "base/mac/mac_util.h"
 #include "base/mac/scoped_objc_class_swizzler.h"
 #include "base/strings/sys_string_conversions.h"
 #include "base/values.h"
 
+<<<<<<< .our
 #if BUILDFLAG(USE_ALLOCATOR_SHIM)
+=======
+#if BUILDFLAG(USE_EXPERIMENTAL_ALLOCATOR_SHIM)
+>>>>>>> .their
 // On macOS 10.12, the IME system attempts to allocate a 2^64 size buffer,
 // which would typically cause an OOM crash. To avoid this, the problematic
 // method is swizzled out and the make-OOM-fatal bit is disabled for the
@@ -35,7 +43,11 @@
   base::allocator::SetCallNewHandlerOnMallocFailure(true);
 }
 @end
+<<<<<<< .our
 #endif  // BUILDFLAG(USE_ALLOCATOR_SHIM)
+=======
+#endif  // BUILDFLAG(USE_EXPERIMENTAL_ALLOCATOR_SHIM)
+>>>>>>> .their
 
 @implementation AtomApplicationDelegate
 
@@ -65,7 +77,11 @@
     atom::Browser::Get()->DidFinishLaunching(base::DictionaryValue());
   }
 
+<<<<<<< .our
 #if BUILDFLAG(USE_ALLOCATOR_SHIM)
+=======
+#if BUILDFLAG(USE_EXPERIMENTAL_ALLOCATOR_SHIM)
+>>>>>>> .their
   // Disable fatal OOM to hack around an OS bug https://crbug.com/654695.
   if (base::mac::IsOS10_12()) {
     g_swizzle_imk_input_session = new base::mac::ScopedObjCClassSwizzler(
changed in both
  base   100644 949e5e9ec96d42d75e975e6e4facc249079bce9e atom/browser/native_browser_view.cc
  our    100644 6460f2bfbd22f7809ce92325ffb36ddbe3512a9f atom/browser/native_browser_view.cc
  their  100644 c97fe683e6c56b17a32eede8d397d2c2d47efa2b atom/browser/native_browser_view.cc
changed in both
  base   100644 236f615c2b0664ee0c2f2c80182a1a6070956170 atom/browser/native_browser_view.h
  our    100644 56937e4c8c69e3605d2b6cc71a0877b74ff4e83d atom/browser/native_browser_view.h
  their  100644 7c154b60b00e25c42847ceefb98723b50ea03dd0 atom/browser/native_browser_view.h
@@ -48,7 +48,11 @@
 
   // Called when the window needs to update its draggable region.
   virtual void UpdateDraggableRegions(
+<<<<<<< .our
       const std::vector<gfx::Rect>& system_drag_exclude_areas) {}
+=======
+    const std::vector<gfx::Rect>& system_drag_exclude_areas) {}
+>>>>>>> .their
 
  protected:
   explicit NativeBrowserView(
changed in both
  base   100644 4e7aa429ce27ae12e495ab579247d2d244fdd18f atom/browser/native_browser_view_mac.h
  our    100644 726ca75433e8091a344ef8d731e51c27f8a23450 atom/browser/native_browser_view_mac.h
  their  100644 0b04edad729faa8e2f79b4653426db1d941dafe3 atom/browser/native_browser_view_mac.h
@@ -23,6 +23,8 @@
   void SetAutoResizeFlags(uint8_t flags) override;
   void SetBounds(const gfx::Rect& bounds) override;
   void SetBackgroundColor(SkColor color) override;
+  void UpdateDraggableRegions(
+      const std::vector<gfx::Rect>& system_drag_exclude_areas) override;
 
   void UpdateDraggableRegions(
       const std::vector<gfx::Rect>& system_drag_exclude_areas) override;
changed in both
  base   100644 2ce2adc1f4fe02a600c18c2c7b0852e1fcf27710 atom/browser/native_browser_view_mac.mm
  our    100644 0416e26e89f1e0f37366ef1798b4359da0729225 atom/browser/native_browser_view_mac.mm
  their  100644 3d77b2a84891a724336e83af2284543470a57cf1 atom/browser/native_browser_view_mac.mm
@@ -15,16 +15,25 @@
 
 @interface DragRegionView : NSView
 
+<<<<<<< .our
 @property(assign) NSPoint initialLocation;
+=======
+@property (assign) NSPoint initialLocation;
+>>>>>>> .their
 
 @end
 
 @interface NSWindow ()
+<<<<<<< .our
 - (void)performWindowDragWithEvent:(NSEvent*)event;
+=======
+- (void)performWindowDragWithEvent:(NSEvent *)event;
+>>>>>>> .their
 @end
 
 @implementation DragRegionView
 
+<<<<<<< .our
 @synthesize initialLocation;
 
 - (BOOL)mouseDownCanMoveWindow {
@@ -56,32 +65,67 @@
   }
 
   if (self.window.styleMask & NSFullScreenWindowMask) {
+=======
+- (BOOL)mouseDownCanMoveWindow
+{
+  return NO;
+}
+
+- (NSView *)hitTest:(NSPoint)aPoint
+{
+    // Pass-through events that don't hit one of the exclusion zones
+    for (NSView *exlusion_zones in [self subviews]) {
+      if ([exlusion_zones hitTest:aPoint])
+        return nil;
+    }
+
+    return self;
+}
+
+- (void)mouseDown:(NSEvent *)event
+{
+  if ([self.window respondsToSelector:@selector(performWindowDragWithEvent)]) {
+    [self.window performWindowDragWithEvent:event];
+>>>>>>> .their
     return;
   }
 
   self.initialLocation = [event locationInWindow];
 }
 
+<<<<<<< .our
 - (void)mouseDragged:(NSEvent*)theEvent {
+=======
+- (void)mouseDragged:(NSEvent *)theEvent
+{
+>>>>>>> .their
   if ([self.window respondsToSelector:@selector(performWindowDragWithEvent)]) {
     return;
   }
 
+<<<<<<< .our
   if (self.window.styleMask & NSFullScreenWindowMask) {
     return;
   }
 
+=======
+>>>>>>> .their
   NSPoint currentLocation = [NSEvent mouseLocation];
   NSPoint newOrigin;
 
   NSRect screenFrame = [[NSScreen mainScreen] frame];
+<<<<<<< .our
   NSSize screenSize = screenFrame.size;
   NSRect windowFrame = [self.window frame];
   NSSize windowSize = windowFrame.size;
+=======
+  NSRect windowFrame = [self.window frame];
+>>>>>>> .their
 
   newOrigin.x = currentLocation.x - self.initialLocation.x;
   newOrigin.y = currentLocation.y - self.initialLocation.y;
 
+<<<<<<< .our
   BOOL inMenuBar = (newOrigin.y + windowSize.height) >
                    (screenFrame.origin.y + screenSize.height);
   BOOL screenAboveMainScreen = false;
@@ -116,6 +160,11 @@
   if (inMenuBar && !screenAboveMainScreen) {
     newOrigin.y = screenFrame.origin.y +
                   (screenFrame.size.height - windowFrame.size.height);
+=======
+  // Don't let window get dragged up under the menu bar
+  if ((newOrigin.y + windowFrame.size.height) > (screenFrame.origin.y + screenFrame.size.height)) {
+    newOrigin.y = screenFrame.origin.y + (screenFrame.size.height - windowFrame.size.height);
+>>>>>>> .their
   }
 
   // Move the window to the new location
@@ -195,6 +244,7 @@
 }
 
 void NativeBrowserViewMac::UpdateDraggableRegions(
+<<<<<<< .our
     const std::vector<gfx::Rect>& drag_exclude_rects) {
   NSView* web_view = GetWebContents()->GetNativeView();
   NSView* inspectable_view = GetInspectableWebContentsView()->GetNativeView();
@@ -229,6 +279,58 @@
             initWithFrame:drag_region_view_exclude_rect]);
     [drag_region_view addSubview:exclude_drag_region_view];
   }
+=======
+    const std::vector<gfx::Rect>& system_drag_exclude_areas) {
+  NSView* webView = GetInspectableWebContentsView()->GetNativeView();
+
+  NSInteger superViewHeight = NSHeight([webView.superview bounds]);
+  NSInteger webViewHeight = NSHeight([webView bounds]);
+  NSInteger webViewWidth = NSWidth([webView bounds]);
+  NSInteger webViewX = NSMinX([webView frame]);
+  NSInteger webViewY = 0;
+
+  // Apple's NSViews have their coordinate system originate at the bottom left,
+  // meaning that we need to be a bit smarter when it comes to calculating our
+  // current top offset
+  if (webViewHeight > superViewHeight) {
+    webViewY = std::abs(webViewHeight - superViewHeight - (std::abs(NSMinY([webView frame]))));
+  } else {
+    webViewY = superViewHeight - NSMaxY([webView frame]);
+  }
+
+  // Remove all DraggableRegionViews that are added last time.
+  // Note that [webView subviews] returns the view's mutable internal array and
+  // it should be copied to avoid mutating the original array while enumerating
+  // it.
+  base::scoped_nsobject<NSArray> subviews([[webView subviews] copy]);
+  for (NSView* subview in subviews.get())
+    if ([subview isKindOfClass:[DragRegionView class]])
+      [subview removeFromSuperview];
+
+  // Create one giant NSView that is draggable.
+  base::scoped_nsobject<NSView> dragRegion(
+        [[DragRegionView alloc] initWithFrame:NSZeroRect]);
+    [dragRegion setFrame:NSMakeRect(0,
+                                    0,
+                                    webViewWidth,
+                                    webViewHeight)];
+
+  // Then, on top of that, add "exclusion zones"
+  for (auto iter = system_drag_exclude_areas.begin();
+       iter != system_drag_exclude_areas.end();
+       ++iter) {
+    base::scoped_nsobject<NSView> controlRegion(
+        [[ExcludeDragRegionView alloc] initWithFrame:NSZeroRect]);
+    [controlRegion setFrame:NSMakeRect(iter->x() - webViewX,
+                                       webViewHeight - iter->bottom() + webViewY,
+                                       iter->width(),
+                                       iter->height())];
+    [dragRegion addSubview:controlRegion];
+  }
+
+  // Add the DragRegion to the WebView
+  [webView addSubview:dragRegion];
+>>>>>>> .their
 }
 
 // static
changed in both
  base   100644 3dfb88d5398fc9c6c2985cd3df58c5a10ea56462 atom/browser/native_window_mac.h
  our    100644 44a78198f44cdba9875e3fb27c8e2c87eaa6f33b atom/browser/native_window_mac.h
  their  100644 45636eb7025e1c7250db17496e3553ce9422b2e4 atom/browser/native_window_mac.h
@@ -163,7 +163,16 @@
   void InternalSetParentWindow(NativeWindow* parent, bool attach);
   void ShowWindowButton(NSWindowButton button);
 
+<<<<<<< .our
   void SetForwardMouseMessages(bool forward);
+=======
+  void InstallView();
+  void UninstallView();
+
+  // Install the drag view, which will cover the whole window and decides
+  // whether we can drag.
+  void UpdateDraggableRegionViews(const std::vector<DraggableRegion>& regions);
+>>>>>>> .their
 
   AtomNSWindow* window_;  // Weak ref, managed by widget_.
 
changed in both
  base   100644 2719c672954ab0eb2b8090fb25c9c9965c99e410 atom/browser/native_window_mac.mm
  our    100644 004263ec127709067e903ffbf31003b8844226b4 atom/browser/native_window_mac.mm
  their  100644 a0af83de3574e3a86f1e0064c8212dd6c526d40d atom/browser/native_window_mac.mm
@@ -1387,10 +1387,45 @@
     [parent->GetNativeWindow() addChildWindow:window_ ordered:NSWindowAbove];
 }
 
+<<<<<<< .our
 void NativeWindowMac::ShowWindowButton(NSWindowButton button) {
   auto view = [window_ standardWindowButton:button];
   [view.superview addSubview:view positioned:NSWindowAbove relativeTo:nil];
 }
+=======
+  // Remove all ControlRegionViews that are added last time.
+  // Note that [webView subviews] returns the view's mutable internal array and
+  // it should be copied to avoid mutating the original array while enumerating
+  // it.
+  base::scoped_nsobject<NSArray> subviews([[webView subviews] copy]);
+  for (NSView* subview in subviews.get())
+    if ([subview isKindOfClass:[ControlRegionView class]])
+      [subview removeFromSuperview];
+
+  // Draggable regions is implemented by having the whole web view draggable
+  // (mouseDownCanMoveWindow) and overlaying regions that are not draggable.
+  std::vector<gfx::Rect> system_drag_exclude_areas =
+      CalculateNonDraggableRegions(regions, webViewWidth, webViewHeight);
+
+  if (browser_view_) {
+    browser_view_->UpdateDraggableRegions(system_drag_exclude_areas);
+  }
+
+  // Create and add a ControlRegionView for each region that needs to be
+  // excluded from the dragging.
+  for (std::vector<gfx::Rect>::const_iterator iter =
+           system_drag_exclude_areas.begin();
+       iter != system_drag_exclude_areas.end();
+       ++iter) {
+    base::scoped_nsobject<NSView> controlRegion(
+        [[ControlRegionView alloc] initWithFrame:NSZeroRect]);
+    [controlRegion setFrame:NSMakeRect(iter->x(),
+                                       webViewHeight - iter->bottom(),
+                                       iter->width(),
+                                       iter->height())];
+    [webView addSubview:controlRegion];
+  }
+>>>>>>> .their
 
 void NativeWindowMac::SetForwardMouseMessages(bool forward) {
   [window_ setAcceptsMouseMovedEvents:forward];
changed in both
  base   100644 ad02ed620d6d94ba15e7f8d154063a0968178110 atom/browser/net/asar/url_request_asar_job.cc
  our    100644 85eb2e1dd142b6d64aafb5350ae47603db989e8f atom/browser/net/asar/url_request_asar_job.cc
  their  100644 5c4472a315911a6c2da533b35d489f8f9da5cd53 atom/browser/net/asar/url_request_asar_job.cc
@@ -243,6 +243,24 @@
     meta_info->mime_type_result = net::GetWellKnownMimeTypeFromExtension(
         file_extension.substr(1), &meta_info->mime_type);
   }
+<<<<<<< .our
+=======
+
+  // We use GetWellKnownMimeTypeFromExtension() to ensure that configurations
+  // that may have been set by other programs on a user's machine don't affect
+  // the mime type returned (in particular, JS should always be
+  // (application/javascript). See https://crbug.com/797712. Using an accurate
+  // mime type is necessary at least for modules and sw, which enforce strict
+  // mime type requirements.
+  // TODO(deepak1556): Revert this when sw support is removed for file scheme.
+  base::FilePath::StringType file_extension = file_path.Extension();
+  if (file_extension.empty()) {
+    meta_info->mime_type_result = false;
+  } else {
+    meta_info->mime_type_result = net::GetWellKnownMimeTypeFromExtension(
+        file_extension.substr(1), &meta_info->mime_type);
+  }
+>>>>>>> .their
 }
 
 void URLRequestAsarJob::DidFetchMetaInfo(const FileMetaInfo* meta_info) {
changed in both
  base   100644 ff426dd08c8e39bcb23aeff2cdf03f2db414529e atom/browser/net/url_request_fetch_job.cc
  our    100644 68539433f4de80a96bc672de3a2834b299d6c04b atom/browser/net/url_request_fetch_job.cc
  their  100644 04d0ddd1e6af761c8e36d6cb93b99866a886457a atom/browser/net/url_request_fetch_job.cc
changed in both
  base   100644 c35e364236f68545a869ecfb34a6b9f496c0511f atom/browser/osr/osr_output_device.cc
  our    100644 e5c1e7fd95fc6443e77f86c86645c51ca36d0d9b atom/browser/osr/osr_output_device.cc
  their  100644 1234a17b842074ca4236066f09994cccf1a6a83b atom/browser/osr/osr_output_device.cc
@@ -80,7 +80,11 @@
     return;
   active_ = active;
 
+<<<<<<< .our
   if (!active_ && !pending_damage_rect_.IsEmpty() && paint)
+=======
+  if (active_ && paint)
+>>>>>>> .their
     OnPaint(gfx::Rect(viewport_pixel_size_));
 }
 
changed in both
  base   100644 5710bc41b8319597ae37c0cb995e42b24562de17 atom/browser/osr/osr_output_device.h
  our    100644 4c62414fd0c57ba650c04e23a75fe9be82999b2e atom/browser/osr/osr_output_device.h
  their  100644 a65865316fa4398d8aa161264a30dd19762eae27 atom/browser/osr/osr_output_device.h
changed in both
  base   100644 11523a660b8f1d6972254117e84fd69588b1421a atom/browser/osr/osr_render_widget_host_view.cc
  our    100644 4a2a0747fe2e6bf38c8999b80dbfea31e52a17fd atom/browser/osr/osr_render_widget_host_view.cc
  their  100644 e2e521dbadd20313ebb92af117a21c407ffe05b5 atom/browser/osr/osr_render_widget_host_view.cc
@@ -259,12 +259,27 @@
       native_window_(native_window),
       transparent_(transparent),
       callback_(callback),
+<<<<<<< .our
       frame_rate_(frame_rate),
+=======
+      parent_callback_(nullptr),
+      frame_rate_(frame_rate),
+      frame_rate_threshold_us_(0),
+      last_time_(base::Time::Now()),
+>>>>>>> .their
       scale_factor_(kDefaultScaleFactor),
       size_(native_window->GetSize()),
       painting_(painting),
       is_showing_(!render_widget_host_->is_hidden()),
+<<<<<<< .our
       mouse_wheel_phase_handler_(render_widget_host_, this),
+=======
+      is_destroyed_(false),
+      popup_position_(gfx::Rect()),
+      hold_resize_(false),
+      pending_resize_(false),
+      paint_callback_running_(false),
+>>>>>>> .their
       weak_ptr_factory_(this) {
   DCHECK(render_widget_host_);
   bool is_guest_view_hack = parent_host_view_ != nullptr;
@@ -292,9 +307,13 @@
   compositor_.reset(
       new ui::Compositor(context_factory_private->AllocateFrameSinkId(),
                          content::GetContextFactory(), context_factory_private,
+<<<<<<< .our
                          base::ThreadTaskRunnerHandle::Get(),
                          features::IsSurfaceSynchronizationEnabled(),
                          false /* enable_pixel_canvas */));
+=======
+                         base::ThreadTaskRunnerHandle::Get()));
+>>>>>>> .their
   compositor_->SetAcceleratedWidget(gfx::kNullAcceleratedWidget);
   compositor_->SetRootLayer(root_layer_.get());
 #endif
@@ -713,8 +732,18 @@
   }
 
   return new OffScreenRenderWidgetHostView(
+<<<<<<< .our
       transparent_, true, embedder_host_view->GetFrameRate(), callback_,
       render_widget_host, embedder_host_view, native_window_);
+=======
+      transparent_,
+      true,
+      embedder_host_view->GetFrameRate(),
+      callback_,
+      render_widget_host,
+      embedder_host_view,
+      native_window_);
+>>>>>>> .their
 }
 
 #if !defined(OS_MACOSX)
@@ -1204,7 +1233,11 @@
 
   SetupFrameRate(true);
 
+<<<<<<< .our
   for (auto* guest_host_view : guest_host_views_)
+=======
+  for (auto guest_host_view : guest_host_views_)
+>>>>>>> .their
     guest_host_view->SetFrameRate(frame_rate);
 }
 
@@ -1233,10 +1266,15 @@
 
   frame_rate_threshold_us_ = 1000000 / frame_rate_;
 
+<<<<<<< .our
   if (GetCompositor()) {
     GetCompositor()->SetAuthoritativeVSyncInterval(
         base::TimeDelta::FromMicroseconds(frame_rate_threshold_us_));
   }
+=======
+  GetCompositor()->SetAuthoritativeVSyncInterval(
+      base::TimeDelta::FromMicroseconds(frame_rate_threshold_us_));
+>>>>>>> .their
 
   if (copy_frame_generator_.get()) {
     copy_frame_generator_->set_frame_rate_threshold_us(
changed in both
  base   100644 dc204a311ff557a1f2b38c2933fbcec47c8751a7 atom/browser/osr/osr_render_widget_host_view.h
  our    100644 b81f6310f864c00fea50b1aac49dc89173eaa302 atom/browser/osr/osr_render_widget_host_view.h
  their  100644 a4b5593cf28a2b09c28c4285efa7a0cdae2b76da atom/browser/osr/osr_render_widget_host_view.h
@@ -317,6 +317,8 @@
   viz::LocalSurfaceId local_surface_id_;
   viz::ParentLocalSurfaceIdAllocator local_surface_id_allocator_;
 
+  bool paint_callback_running_;
+
   std::unique_ptr<ui::Layer> root_layer_;
   std::unique_ptr<ui::Compositor> compositor_;
   std::unique_ptr<content::DelegatedFrameHost> delegated_frame_host_;
changed in both
  base   100644 0e10abf6a034ab604f51553eb905b18e18f45552 atom/browser/osr/osr_web_contents_view.cc
  our    100644 c8223df0d8c6f3436d323059686e42684ff98462 atom/browser/osr/osr_web_contents_view.cc
  their  100644 4cbc6a5c42f9762b81fc4d601ebb534dedcd4914 atom/browser/osr/osr_web_contents_view.cc
@@ -13,9 +13,18 @@
 namespace atom {
 
 OffScreenWebContentsView::OffScreenWebContentsView(
+<<<<<<< .our
     bool transparent,
     const OnPaintCallback& callback)
     : transparent_(transparent), callback_(callback) {
+=======
+    bool transparent, const OnPaintCallback& callback)
+    : transparent_(transparent),
+      painting_(true),
+      frame_rate_(60),
+      callback_(callback),
+      web_contents_(nullptr) {
+>>>>>>> .their
 #if defined(OS_MACOSX)
   PlatformCreate();
 #endif
@@ -104,8 +113,18 @@
 
   auto* relay = NativeWindowRelay::FromWebContents(web_contents_);
   return new OffScreenRenderWidgetHostView(
+<<<<<<< .our
       transparent_, painting_, GetFrameRate(), callback_, render_widget_host,
       nullptr, relay->window.get());
+=======
+      transparent_,
+      painting_,
+      GetFrameRate(),
+      callback_,
+      render_widget_host,
+      nullptr,
+      relay->window.get());
+>>>>>>> .their
 }
 
 content::RenderWidgetHostViewBase*
@@ -124,8 +143,18 @@
               : web_contents_impl->GetRenderWidgetHostView());
 
   return new OffScreenRenderWidgetHostView(
+<<<<<<< .our
       transparent_, true, view->GetFrameRate(), callback_, render_widget_host,
       view, relay->window.get());
+=======
+      transparent_,
+      true,
+      view->GetFrameRate(),
+      callback_,
+      render_widget_host,
+      view,
+      relay->window.get());
+>>>>>>> .their
 }
 
 void OffScreenWebContentsView::SetPageTitle(const base::string16& title) {}
@@ -209,6 +238,42 @@
   }
 }
 
+void OffScreenWebContentsView::SetPainting(bool painting) {
+  auto* view = GetView();
+  if (view != nullptr) {
+    view->SetPainting(painting);
+  } else {
+    painting_ = painting;
+  }
+}
+
+bool OffScreenWebContentsView::IsPainting() const {
+  auto* view = GetView();
+  if (view != nullptr) {
+    return view->IsPainting();
+  } else {
+    return painting_;
+  }
+}
+
+void OffScreenWebContentsView::SetFrameRate(int frame_rate) {
+  auto* view = GetView();
+  if (view != nullptr) {
+    view->SetFrameRate(frame_rate);
+  } else {
+    frame_rate_ = frame_rate;
+  }
+}
+
+int OffScreenWebContentsView::GetFrameRate() const {
+  auto* view = GetView();
+  if (view != nullptr) {
+    return view->GetFrameRate();
+  } else {
+    return frame_rate_;
+  }
+}
+
 OffScreenRenderWidgetHostView* OffScreenWebContentsView::GetView() const {
   if (web_contents_) {
     return static_cast<OffScreenRenderWidgetHostView*>(
changed in both
  base   100644 ffb3b38619c4521f9947fe29e3871ed06d97978e atom/browser/osr/osr_web_contents_view.h
  our    100644 206ab9dd3421af522a12aba615c6f040ba176ba4 atom/browser/osr/osr_web_contents_view.h
  their  100644 788e55bf316d8069811fc026bf610ad231371fce atom/browser/osr/osr_web_contents_view.h
@@ -83,8 +83,13 @@
   OffScreenRenderWidgetHostView* GetView() const;
 
   const bool transparent_;
+<<<<<<< .our
   bool painting_ = true;
   int frame_rate_ = 60;
+=======
+  bool painting_;
+  int frame_rate_;
+>>>>>>> .their
   OnPaintCallback callback_;
 
   // Weak refs.
changed in both
  base   100644 9610d80693b1670f696f82812442419504d61454 atom/browser/relauncher.cc
  our    100644 35c6785e3d87d21eaea27ad5818434d870326047 atom/browser/relauncher.cc
  their  100644 9dfb6edd06661f302ca7498a2ba34f0ce70c938b atom/browser/relauncher.cc
changed in both
  base   100644 e4207b2f46835a44089d4e23a5e973e5ff401f4d atom/browser/resources/mac/Info.plist
  our    100644 9094f0f7335edf833d51f688851e6a105de60433 atom/browser/resources/mac/Info.plist
  their  100644 9c73b60bb029729505847b2ea45f4b99a9906423 atom/browser/resources/mac/Info.plist
@@ -17,9 +17,15 @@
   <key>CFBundleIconFile</key>
   <string>electron.icns</string>
   <key>CFBundleVersion</key>
+<<<<<<< .our
   <string>4.0.0</string>
   <key>CFBundleShortVersionString</key>
   <string>4.0.0</string>
+=======
+  <string>1.7.14</string>
+  <key>CFBundleShortVersionString</key>
+  <string>1.7.14</string>
+>>>>>>> .their
   <key>LSApplicationCategoryType</key>
   <string>public.app-category.developer-tools</string>
   <key>LSMinimumSystemVersion</key>
changed in both
  base   100644 9035ccc9e4608312b0fef482afaafbc0f2fb8486 atom/browser/resources/win/atom.rc
  our    100644 c0bd831e8bddf10180f75cd40694831e2e98622d atom/browser/resources/win/atom.rc
  their  100644 716b9876fbed86e5ba7e7e3204030d377d9b6bfc atom/browser/resources/win/atom.rc
@@ -56,8 +56,13 @@
 //
 
 VS_VERSION_INFO VERSIONINFO
+<<<<<<< .our
  FILEVERSION 4,0,0,20180821
  PRODUCTVERSION 4,0,0,20180821
+=======
+ FILEVERSION 1,7,14,0
+ PRODUCTVERSION 1,7,14,0
+>>>>>>> .their
  FILEFLAGSMASK 0x3fL
 #ifdef _DEBUG
  FILEFLAGS 0x1L
@@ -74,12 +79,20 @@
         BEGIN
             VALUE "CompanyName", "GitHub, Inc."
             VALUE "FileDescription", "Electron"
+<<<<<<< .our
             VALUE "FileVersion", "4.0.0"
+=======
+            VALUE "FileVersion", "1.7.14"
+>>>>>>> .their
             VALUE "InternalName", "electron.exe"
             VALUE "LegalCopyright", "Copyright (C) 2015 GitHub, Inc. All rights reserved."
             VALUE "OriginalFilename", "electron.exe"
             VALUE "ProductName", "Electron"
+<<<<<<< .our
             VALUE "ProductVersion", "4.0.0"
+=======
+            VALUE "ProductVersion", "1.7.14"
+>>>>>>> .their
             VALUE "SquirrelAwareVersion", "1"
         END
     END
changed in both
  base   100644 26662cf48502d880f6c18d9cb3236a42e2a813e4 atom/browser/ui/cocoa/atom_touch_bar.h
  our    100644 fd6bb0cdc449d6d8f48a208f3300e857045d4686 atom/browser/ui/cocoa/atom_touch_bar.h
  their  100644 d36e45898ea54f9e4205786f6b1fe9592c5acd67 atom/browser/ui/cocoa/atom_touch_bar.h
@@ -17,9 +17,13 @@
 #include "native_mate/constructor.h"
 #include "native_mate/persistent_dictionary.h"
 
+<<<<<<< .our
 @interface AtomTouchBar : NSObject <NSScrubberDelegate,
                                     NSScrubberDataSource,
                                     NSScrubberFlowLayoutDelegate> {
+=======
+@interface AtomTouchBar : NSObject<NSScrubberDelegate, NSScrubberDataSource, NSScrubberFlowLayoutDelegate> {
+>>>>>>> .their
  @protected
   std::vector<mate::PersistentDictionary> ordered_settings_;
   std::map<std::string, mate::PersistentDictionary> settings_;
changed in both
  base   100644 30a3e6643fb89ca09e4310f789b20f1e22b1962c atom/browser/ui/cocoa/atom_touch_bar.mm
  our    100644 72777c491f8a6024b61ed8cd3b849a5637f394a7 atom/browser/ui/cocoa/atom_touch_bar.mm
  their  100644 366cb9e2d0c8adc3cee70a87d08f8ea9f2eca9d2 atom/browser/ui/cocoa/atom_touch_bar.mm
@@ -765,15 +765,21 @@
   return itemView;
 }
 
+<<<<<<< .our
 - (NSSize)scrubber:(NSScrubber*)scrubber
                 layout:(NSScrubberFlowLayout*)layout
     sizeForItemAtIndex:(NSInteger)itemIndex API_AVAILABLE(macosx(10.12.2)) {
+=======
+- (NSSize)scrubber:(NSScrubber *)scrubber layout:(NSScrubberFlowLayout *)layout sizeForItemAtIndex:(NSInteger)itemIndex
+{
+>>>>>>> .their
   NSInteger width = 50;
   NSInteger height = 30;
   NSInteger margin = 15;
   NSSize defaultSize = NSMakeSize(width, height);
 
   std::string s_id([[scrubber identifier] UTF8String]);
+<<<<<<< .our
   if (![self hasItemWithID:s_id])
     return defaultSize;
 
@@ -784,12 +790,22 @@
 
   if (itemIndex >= static_cast<NSInteger>(items.size()))
     return defaultSize;
+=======
+  if (![self hasItemWithID:s_id]) return defaultSize;
+
+  mate::PersistentDictionary settings = settings_[s_id];
+  std::vector<mate::PersistentDictionary> items;
+  if (!settings.Get("items", &items)) return defaultSize;
+
+  if (itemIndex >= static_cast<NSInteger>(items.size())) return defaultSize;
+>>>>>>> .their
 
   mate::PersistentDictionary item = items[itemIndex];
   std::string title;
 
   if (item.Get("label", &title)) {
     NSSize size = NSMakeSize(CGFLOAT_MAX, CGFLOAT_MAX);
+<<<<<<< .our
     NSRect textRect = [base::SysUTF8ToNSString(title)
         boundingRectWithSize:size
                      options:NSStringDrawingUsesLineFragmentOrigin |
@@ -797,6 +813,11 @@
                   attributes:@{
                     NSFontAttributeName : [NSFont systemFontOfSize:0]
                   }];
+=======
+    NSRect textRect = [base::SysUTF8ToNSString(title) boundingRectWithSize:size
+                                          options:NSStringDrawingUsesLineFragmentOrigin |   NSStringDrawingUsesFontLeading
+                                          attributes:@{ NSFontAttributeName: [NSFont systemFontOfSize:0]}];
+>>>>>>> .their
 
     width = textRect.size.width + margin;
   } else {
changed in both
  base   100644 6fe7c820a1ccda7befcabbb6b9e740cab8d33afc atom/browser/ui/cocoa/touch_bar_forward_declarations.h
  our    100644 281672c30420d3e1abb77cb96db69e375f4d5ea7 atom/browser/ui/cocoa/touch_bar_forward_declarations.h
  their  100644 062723bca670a1bb5a5b4c34524d7eecfa52f50d atom/browser/ui/cocoa/touch_bar_forward_declarations.h
@@ -14,11 +14,16 @@
 #pragma clang assume_nonnull begin
 
 @class NSTouchBar, NSTouchBarItem;
+<<<<<<< .our
 @class NSScrubber, NSScrubberItemView, NSScrubberArrangedView,
     NSScrubberTextItemView, NSScrubberImageItemView, NSScrubberSelectionStyle;
 @protocol NSTouchBarDelegate
 , NSScrubberDelegate, NSScrubberDataSource, NSScrubberFlowLayoutDelegate,
     NSScrubberFlowLayout;
+=======
+@class NSScrubber, NSScrubberItemView, NSScrubberArrangedView, NSScrubberTextItemView, NSScrubberImageItemView, NSScrubberSelectionStyle;
+@protocol NSTouchBarDelegate, NSScrubberDelegate, NSScrubberDataSource, NSScrubberFlowLayoutDelegate, NSScrubberFlowLayout;
+>>>>>>> .their
 
 typedef float NSTouchBarItemPriority;
 static const NSTouchBarItemPriority NSTouchBarItemPriorityHigh = 1000;
@@ -150,10 +155,17 @@
 
 @end
 
+<<<<<<< .our
 @interface NSScrubberFlowLayout : NSObject
 @end
 
 @interface NSScrubberSelectionStyle : NSObject <NSCoding>
+=======
+@interface NSScrubberFlowLayout: NSObject
+@end
+
+@interface NSScrubberSelectionStyle : NSObject<NSCoding>
+>>>>>>> .their
 
 @property(class, strong, readonly)
     NSScrubberSelectionStyle* outlineOverlayStyle;
@@ -245,6 +257,12 @@
 
 @end
 
+@protocol NSScrubberFlowLayoutDelegate<NSObject>
+
+- (NSSize)scrubber:(NSScrubber *)scrubber layout:(NSScrubberFlowLayout *)layout sizeForItemAtIndex:(NSInteger)itemIndex;
+
+@end
+
 #pragma clang assume_nonnull end
 
 #elif MAC_OS_X_VERSION_MIN_REQUIRED < MAC_OS_X_VERSION_10_12_1
changed in both
  base   100644 be9c15e7238987eeb533d6b981edea5b4125f8be atom/browser/ui/file_dialog_mac.mm
  our    100644 18b18a8b240cda5512ae49e0afde5c749bdf75c0 atom/browser/ui/file_dialog_mac.mm
  their  100644 cdc10d6cb430b6521e262ba5d19acaeb23859f42 atom/browser/ui/file_dialog_mac.mm
@@ -94,6 +94,7 @@
 
   // Passing empty array to setAllowedFileTypes will cause exception.
   NSArray* file_types = nil;
+<<<<<<< .our
   NSUInteger count = [file_types_list count];
   if (count > 0) {
     file_types = [[file_types_list objectAtIndex:0] allObjects];
@@ -102,6 +103,11 @@
     if ([file_types count] == 0 || [file_types containsObject:@"*"])
       file_types = nil;
   }
+=======
+  if ([file_type_set count])
+    file_types = [file_type_set allObjects];
+
+>>>>>>> .their
   [dialog setAllowedFileTypes:file_types];
 
   if (count <= 1)
changed in both
  base   100644 cc621625818feaeddf4fb76cd9103c822795e652 atom/browser/web_contents_preferences.cc
  our    100644 c21c93383155091a7481cdd4e741cefad90a4a55 atom/browser/web_contents_preferences.cc
  their  100644 701791b41d871d605367604e872f17668a7d24b5 atom/browser/web_contents_preferences.cc
@@ -97,6 +97,7 @@
   instances_.push_back(this);
 
   // Set WebPreferences defaults onto the JS object
+<<<<<<< .our
   SetDefaultBoolIfUndefined(options::kPlugins, false);
   SetDefaultBoolIfUndefined(options::kExperimentalFeatures, false);
   bool node = SetDefaultBoolIfUndefined(options::kNodeIntegration, true);
@@ -104,11 +105,22 @@
   SetDefaultBoolIfUndefined(options::kWebviewTag, node);
   SetDefaultBoolIfUndefined(options::kSandbox, false);
   SetDefaultBoolIfUndefined(options::kNativeWindowOpen, false);
+=======
+  SetDefaultBoolIfUndefined("plugins", false);
+  SetDefaultBoolIfUndefined(options::kExperimentalFeatures, false);
+  SetDefaultBoolIfUndefined(options::kExperimentalCanvasFeatures, false);
+  bool node = SetDefaultBoolIfUndefined(options::kNodeIntegration, true);
+  SetDefaultBoolIfUndefined(options::kNodeIntegrationInWorker, false);
+  SetDefaultBoolIfUndefined(options::kWebviewTag, node);
+  SetDefaultBoolIfUndefined("sandbox", false);
+  SetDefaultBoolIfUndefined("nativeWindowOpen", false);
+>>>>>>> .their
   SetDefaultBoolIfUndefined(options::kContextIsolation, false);
   SetDefaultBoolIfUndefined("javascript", true);
   SetDefaultBoolIfUndefined("images", true);
   SetDefaultBoolIfUndefined("textAreasAreResizable", true);
   SetDefaultBoolIfUndefined("webgl", true);
+<<<<<<< .our
   bool webSecurity = true;
   SetDefaultBoolIfUndefined(options::kWebSecurity, webSecurity);
   // If webSecurity was explicity set to false, let's inherit that into
@@ -125,6 +137,15 @@
   SetDefaultBoolIfUndefined(options::kOffscreen, false);
 
   last_preference_ = preference_.Clone();
+=======
+  SetDefaultBoolIfUndefined("webSecurity", true);
+  SetDefaultBoolIfUndefined("allowRunningInsecureContent", false);
+  #if defined(OS_MACOSX)
+  SetDefaultBoolIfUndefined(options::kScrollBounce, false);
+  #endif
+  SetDefaultBoolIfUndefined("offscreen", false);
+  last_web_preferences_.MergeDictionary(&web_preferences_);
+>>>>>>> .their
 }
 
 WebContentsPreferences::~WebContentsPreferences() {
@@ -154,6 +175,16 @@
   return default_value;
 }
 
+bool WebContentsPreferences::SetDefaultBoolIfUndefined(const std::string key,
+                                                       bool val) {
+  bool existing;
+  if (!web_preferences_.GetBoolean(key, &existing)) {
+    web_preferences_.SetBoolean(key, val);
+    return val;
+  }
+  return existing;
+}
+
 void WebContentsPreferences::Merge(const base::DictionaryValue& extend) {
   if (preference_.is_dict())
     static_cast<base::DictionaryValue*>(&preference_)->MergeDictionary(&extend);
@@ -212,8 +243,18 @@
   return FromWebContents(web_contents);
 }
 
+<<<<<<< .our
 void WebContentsPreferences::AppendCommandLineSwitches(
     base::CommandLine* command_line) {
+=======
+  // We are appending args to a webContents so let's save the current state
+  // of our preferences object so that during the lifetime of the WebContents
+  // we can fetch the options used to initally configure the WebContents
+  self->last_web_preferences_.Clear();
+  self->last_web_preferences_.MergeDictionary(&web_preferences);
+
+  bool b;
+>>>>>>> .their
   // Check if plugins are enabled.
   if (IsEnabled(options::kPlugins))
     command_line->AppendSwitch(switches::kEnablePlugins);
changed in both
  base   100644 366aa1d9520847d6b81e673cc5a2156d53cc5ba5 atom/browser/web_contents_preferences.h
  our    100644 d835347afcd259f473f95271a2c19e42afcc6f2b atom/browser/web_contents_preferences.h
  their  100644 be277487d1d669b5e85676ff1a7ca4da365c0572 atom/browser/web_contents_preferences.h
@@ -59,8 +59,15 @@
   bool GetPreloadPath(base::FilePath::StringType* path) const;
 
   // Returns the web preferences.
+<<<<<<< .our
   base::Value* preference() { return &preference_; }
   base::Value* last_preference() { return &last_preference_; }
+=======
+  base::DictionaryValue* web_preferences() { return &web_preferences_; }
+  base::DictionaryValue* last_web_preferences() {
+    return &last_web_preferences_;
+  }
+>>>>>>> .their
 
  private:
   friend class content::WebContentsUserData<WebContentsPreferences>;
@@ -75,6 +82,14 @@
   static std::vector<WebContentsPreferences*> instances_;
 
   content::WebContents* web_contents_;
+<<<<<<< .our
+=======
+  base::DictionaryValue web_preferences_;
+  base::DictionaryValue last_web_preferences_;
+
+  // Set preference value to given bool if user did not provide value
+  bool SetDefaultBoolIfUndefined(const std::string key, bool val);
+>>>>>>> .their
 
   base::Value preference_ = base::Value(base::Value::Type::DICTIONARY);
   base::Value last_preference_ = base::Value(base::Value::Type::DICTIONARY);
changed in both
  base   100644 08880ffe4a3591d9010f55ef18ce288e69101fe1 atom/common/atom_command_line.cc
  our    100644 287e43f75fef778948ef9acdac8b9a7edfe07d0a atom/common/atom_command_line.cc
  their  100644 54420b533a6b2600a87c95645b73bc01fbf0122f atom/common/atom_command_line.cc
changed in both
  base   100644 0f58ceb5123e85577732993552c326640d71de54 atom/common/atom_version.h
  our    100644 65e7d19911559a40b1b258319df5fe0fa180354f atom/common/atom_version.h
  their  100644 de73cf36a580cf06533066f631edfe17419fce23 atom/common/atom_version.h
@@ -5,10 +5,22 @@
 #ifndef ATOM_COMMON_ATOM_VERSION_H_
 #define ATOM_COMMON_ATOM_VERSION_H_
 
+<<<<<<< .our
 #define ATOM_MAJOR_VERSION 4
 #define ATOM_MINOR_VERSION 0
 #define ATOM_PATCH_VERSION 0
 #define ATOM_PRE_RELEASE_VERSION -nightly.20180821
+=======
+#define ATOM_MAJOR_VERSION 1
+#define ATOM_MINOR_VERSION 7
+#define ATOM_PATCH_VERSION 14
+// #define ATOM_PRE_RELEASE_VERSION
+#define ATOM_VERSION_IS_RELEASE 1
+
+#ifndef ATOM_TAG
+# define ATOM_TAG ""
+#endif
+>>>>>>> .their
 
 #ifndef ATOM_STRINGIFY
 #define ATOM_STRINGIFY(n) ATOM_STRINGIFY_HELPER(n)
changed in both
  base   100644 03e96ae8a4f3cb7e656143fb46dff58eb924fa12 atom/common/node_bindings.cc
  our    100644 e6aded2e661af919c2d89c2f9bd46b4921d4aec4 atom/common/node_bindings.cc
  their  100644 84792c58207dd85de2d2b60bd789417346c31b50 atom/common/node_bindings.cc
@@ -228,8 +228,12 @@
 }
 
 node::Environment* NodeBindings::CreateEnvironment(
+<<<<<<< .our
     v8::Handle<v8::Context> context,
     node::MultiIsolatePlatform* platform) {
+=======
+    v8::Handle<v8::Context> context) {
+>>>>>>> .their
 #if defined(OS_WIN)
   auto& atom_args = AtomCommandLine::argv();
   std::vector<std::string> args(atom_args.size());
@@ -255,8 +259,13 @@
   base::FilePath resources_path = GetResourcesPath(browser_env_ == BROWSER);
   base::FilePath script_path =
       resources_path.Append(FILE_PATH_LITERAL("electron.asar"))
+<<<<<<< .our
           .Append(process_type)
           .Append(FILE_PATH_LITERAL("init.js"));
+=======
+                    .Append(process_type)
+                    .Append(FILE_PATH_LITERAL("init.js"));
+>>>>>>> .their
   args.insert(args.begin() + 1, script_path.AsUTF8Unsafe());
 
   std::unique_ptr<const char* []> c_argv = StringVectorToArgArray(args);
changed in both
  base   100644 a56d2e24c0e77dcdcfd240c366daede6e3f2f709 brightray/browser/mac/cocoa_notification.mm
  our    100644 57f53931e972adac9cbadf643c737b21d6b9b712 brightray/browser/mac/cocoa_notification.mm
  their  100644 cd7b69ef4058ebc5ccf3396474551f2fc065d20f brightray/browser/mac/cocoa_notification.mm
@@ -48,7 +48,13 @@
 
   if (options.silent) {
     [notification_ setSoundName:nil];
+<<<<<<< .our
   } else if (options.sound.empty()) {
+=======
+  } else if (options.sound != nil) {
+    [notification_ setSoundName:base::SysUTF16ToNSString(options.sound)];
+  } else {
+>>>>>>> .their
     [notification_ setSoundName:NSUserNotificationDefaultSoundName];
   } else {
     [notification_ setSoundName:base::SysUTF16ToNSString(options.sound)];
changed in both
  base   100644 017fdd85261df0df1b885ef8a15fed74ed86c8de brightray/browser/notification.h
  our    100644 efb8752f3595f81d8f080573924791cd1411ae84 brightray/browser/notification.h
  their  100644 69efcff386f544f84074eb39781e3daa083ae64f brightray/browser/notification.h
changed in both
  base   100644 eab6c35479a3551de482e323fce00a962de423a5 chromium_src/chrome/browser/process_singleton.h
  our    100644 b2909e8d1852c8fa69daa21b83432bb7c36f17c9 chromium_src/chrome/browser/process_singleton.h
  their  100644 d77f5b41df88e4dba037c5946715bf690e28f95e chromium_src/chrome/browser/process_singleton.h
changed in both
  base   100644 e1e25cf91de0195202cae646dda4f124ee161dc2 chromium_src/chrome/browser/process_singleton_posix.cc
  our    100644 4891743710d16673c6a72d76a303f6ac56a5ad32 chromium_src/chrome/browser/process_singleton_posix.cc
  their  100644 1943ad51f635b19379753b67bc45d8ad316d6eb1 chromium_src/chrome/browser/process_singleton_posix.cc
@@ -883,8 +883,15 @@
 void ProcessSingleton::StartListeningOnSocket() {
   watcher_ = new LinuxWatcher(this);
   BrowserThread::PostTask(
+<<<<<<< .our
       BrowserThread::IO, FROM_HERE,
       base::Bind(&ProcessSingleton::LinuxWatcher::StartListening, watcher_,
+=======
+      BrowserThread::IO,
+      FROM_HERE,
+      base::Bind(&ProcessSingleton::LinuxWatcher::StartListening,
+                 watcher_,
+>>>>>>> .their
                  sock_));
 }
 
changed in both
  base   100644 b488ad457674287187b9b0edf24a423f774ff9c6 chromium_src/chrome/browser/process_singleton_win.cc
  our    100644 6d0d102430ff700e703cef7e3189403c4a35218f chromium_src/chrome/browser/process_singleton_win.cc
  their  100644 cce6054d1230c396f18a1eb358aa87faf1b29fd5 chromium_src/chrome/browser/process_singleton_win.cc
changed in both
  base   100644 9036102668286db7ca4d338dc8f326f1bd3653b7 docs/api/notification.md
  our    100644 08776a9d3b8fb0969a5538981a2dd991b248fb82 docs/api/notification.md
  their  100644 6dab356bbda50812a241fa150f39a03580d8cfae docs/api/notification.md
@@ -30,6 +30,7 @@
 ### `new Notification([options])` _Experimental_
 
 * `options` Object
+<<<<<<< .our
   * `title` String - A title for the notification, which will be shown at the top of the notification window when it is shown.
   * `subtitle` String (optional) _macOS_ - A subtitle for the notification, which will be displayed below the title.
   * `body` String - The body text of the notification, which will be displayed below the title or subtitle.
@@ -40,6 +41,18 @@
   * `sound` String (optional) _macOS_ - The name of the sound file to play when the notification is shown.
   * `actions` [NotificationAction[]](structures/notification-action.md) (optional) _macOS_ - Actions to add to the notification. Please read the available actions and limitations in the `NotificationAction` documentation.
   * `closeButtonText` String (optional) _macOS_ - A custom title for the close button of an alert. An empty string will cause the default localized text to be used.
+=======
+  * `title` String - A title for the notification, which will be shown at the top of the notification window when it is shown
+  * `subtitle` String - (optional) A subtitle for the notification, which will be displayed below the title. _macOS_
+  * `body` String - The body text of the notification, which will be displayed below the title or subtitle
+  * `silent` Boolean - (optional) Whether or not to emit an OS notification noise when showing the notification
+  * `icon` [NativeImage](native-image.md) - (optional) An icon to use in the notification
+  * `hasReply` Boolean - (optional) Whether or not to add an inline reply option to the notification.  _macOS_
+  * `replyPlaceholder` String - (optional) The placeholder to write in the inline reply input field. _macOS_
+  * `sound` String - (optional) The name of the sound file to play when the notification is shown. _macOS_
+  * `actions` [NotificationAction[]](structures/notification-action.md) - (optional) Actions to add to the notification.  Please read the available actions and limitations in the `NotificationAction` documentation _macOS_
+
+>>>>>>> .their
 
 ### Instance Events
 
@@ -104,6 +117,7 @@
 not immediately show it to the user, you need to call this method before the OS
 will display it.
 
+<<<<<<< .our
 If the notification has been shown before, this method will dismiss the previously
 shown notification and create a new one with identical properties.
 
@@ -111,6 +125,8 @@
 
 Dismisses the notification.
 
+=======
+>>>>>>> .their
 ### Playing Sounds
 
 On macOS, you can specify the name of the sound you'd like to play when the
changed in both
  base   100644 456fc207fe98260b4f971154f9260fad685fc563 docs/api/touch-bar-button.md
  our    100644 4f3e2906ecd35c700c47edf358cd8ef2a4977050 docs/api/touch-bar-button.md
  their  100644 461c0c5155227adf2306cb37865151aec48f7f7e docs/api/touch-bar-button.md
changed in both
  base   100644 17d416608b94068be43459bf2ce9ca18fc4dcedc electron.gyp
  our    100644 944ddab2a3fd879044e31677e4bac2843fffbdee electron.gyp
  their  100644 9c4ebe599dbc028dc3c5fbceaa68259189d8102e electron.gyp
@@ -4,7 +4,11 @@
     'product_name%': 'Electron',
     'company_name%': 'GitHub, Inc',
     'company_abbr%': 'github',
+<<<<<<< .our
     'version%': '4.0.0-nightly.20180821',
+=======
+    'version%': '1.7.14',
+>>>>>>> .their
     'js2c_input_dir': '<(SHARED_INTERMEDIATE_DIR)/js2c',
   },
   'includes': [
@@ -255,6 +259,11 @@
               ],
             },
           ],
+          'link_settings': {
+            'ldflags': [
+              '-Wl,-z,noexecstack',
+            ],
+          },
         }],  # OS=="linux"
       ],
     },  # target <(project_name)
changed in both
  base   100644 e90fe322ba15d1613f7fa300427bcb96c10d351f filenames.gypi
  our    100644 f57860558f06b7e5d8a50f48cfc7e53044df0bc6 filenames.gypi
  their  100644 22d8b072a7bbd28e0a9c67896210d54640b1628a filenames.gypi
@@ -114,6 +114,11 @@
       'atom/app/atom_main_delegate_mac.mm',
       'atom/app/command_line_args.cc',
       'atom/app/command_line_args.h',
+<<<<<<< .our
+=======
+      'atom/app/node_main.cc',
+      'atom/app/node_main.h',
+>>>>>>> .their
       'atom/app/uv_task_runner.cc',
       'atom/app/uv_task_runner.h',
       'atom/browser/api/atom_api_app.cc',
changed in both
  base   100644 55b8372f52cf485ea5f812baed5f48296bacb962 lib/browser/api/auto-updater/auto-updater-win.js
  our    100644 7fead4aabb4a8768db4e4d3bc13da4927cf3c42e lib/browser/api/auto-updater/auto-updater-win.js
  their  100644 fced1258797756160d28cd1a16e0e5515d39bf5b lib/browser/api/auto-updater/auto-updater-win.js
changed in both
  base   100644 4783a9dd98852f303fe50e6fd03dabdecd6d0693 lib/browser/api/auto-updater/squirrel-update-win.js
  our    100644 fecf7958cd0afd54e978f011f5f87eea751faf6d lib/browser/api/auto-updater/squirrel-update-win.js
  their  100644 60345f1a1abead139d280b14457e558c6467de45 lib/browser/api/auto-updater/squirrel-update-win.js
changed in both
  base   100644 731f82838af35a13442a2723b843cf0bcfb4717c lib/browser/guest-view-manager.js
  our    100644 1e4029e39a981c85fb6ff18c5ccd52f81b3c56f2 lib/browser/guest-view-manager.js
  their  100644 039753b7aef48f9ff8e9f507f7cb5d13458413b5 lib/browser/guest-view-manager.js
changed in both
  base   100644 bd9473dda879723625af24c0f98de2855234a2c7 lib/browser/guest-window-manager.js
  our    100644 7253c1942b0956ae6b9b0c80a23470fc26669b8a lib/browser/guest-window-manager.js
  their  100644 479232ec4178163a0af9b0def6a6b81416b01b1c lib/browser/guest-window-manager.js
@@ -65,7 +65,11 @@
   // Inherit certain option values from parent window
   const webPreferences = embedder.getLastWebPreferences()
   for (const [name, value] of inheritedWebPreferences) {
+<<<<<<< .our
     if (webPreferences[name] === value) {
+=======
+    if (embedder.getLastWebPreferences()[name] === value) {
+>>>>>>> .their
       options.webPreferences[name] = value
     }
   }
changed in both
  base   100644 570c63f4e7915198292dae1cd9e84e7ecd725386 package.json
  our    100644 c081cd89450cd50efba1ec280ff1349a96ea3ce0 package.json
  their  100644 765429855ebca6aab6245a75bd461b44a198ecd8 package.json
@@ -1,17 +1,25 @@
 {
   "name": "electron",
+<<<<<<< .our
   "version": "4.0.0-nightly.20180821",
+=======
+  "version": "1.7.14",
+>>>>>>> .their
   "repository": "https://github.com/electron/electron",
   "description": "Build cross platform desktop apps with JavaScript, HTML, and CSS",
   "devDependencies": {
     "asar": "^0.11.0",
     "browserify": "^13.1.0",
     "check-for-leaks": "^1.0.2",
+<<<<<<< .our
     "clang-format": "^1.2.3",
+=======
+>>>>>>> .their
     "colors": "^1.1.2",
     "dotenv-safe": "^4.0.4",
     "dugite": "^1.45.0",
     "electabul": "~0.0.4",
+<<<<<<< .our
     "electron-docs-linter": "^2.3.4",
     "electron-typescript-definitions": "^1.3.6",
     "github": "^9.2.0",
@@ -24,6 +32,15 @@
     "octicons": "^7.3.0",
     "remark-cli": "^4.0.0",
     "remark-preset-lint-markdown-style-guide": "^2.1.1",
+=======
+    "electron-docs-linter": "^2.3.3",
+    "electron-typescript-definitions": "~1.2.11",
+    "github": "^9.2.0",
+    "heads": "^1.3.0",
+    "husky": "^0.14.3",
+    "minimist": "^1.2.0",
+    "nugget": "^2.0.1",
+>>>>>>> .their
     "request": "^2.68.0",
     "semver": "^5.5.0",
     "serve": "^6.5.8",
@@ -69,6 +86,10 @@
     "lint:js-in-markdown": "standard-markdown docs",
     "create-api-json": "electron-docs-linter docs --outfile=out/electron-api.json --version=$npm_package_version",
     "create-typescript-definitions": "npm run create-api-json && electron-typescript-definitions --in=out/electron-api.json --out=out/electron.d.ts",
+<<<<<<< .our
+=======
+    "merge-release": "node ./script/merge-release.js",
+>>>>>>> .their
     "mock-release": "node ./script/ci-release-build.js",
     "preinstall": "node -e 'process.exit(0)'",
     "publish-to-npm": "node ./script/publish-to-npm.js",
changed in both
  base   100755 4db30b71fca9996003fe44a71fa9d81499677bd2 script/bump-version.py
  our    100755 564adb2116312b0f6d0351096bd89cb373cd3bab script/bump-version.py
  their  100755 28424aaa8ee614b0dfffc7468adb2266f05440cb script/bump-version.py
@@ -12,6 +12,7 @@
 SOURCE_ROOT = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
 
 def main():
+<<<<<<< .our
 
   parser = argparse.ArgumentParser(
     description='Bump version numbers. Must specify at least one of the three'
@@ -94,6 +95,77 @@
   if args.dry_run:
     print 'new version number would be: {0}\n'.format(version + suffix)
     return 0
+=======
+
+  parser = argparse.ArgumentParser(
+    description='Bump version numbers. Must specify at least one of the three'
+               +' options:\n'
+               +'   --bump=patch to increment patch version, or\n'
+               +'   --stable to promote current beta to stable, or\n'
+               +'   --version={version} to set version number directly\n'
+               +'Note that you can use both --bump and --stable '
+               +'simultaneously.',
+               formatter_class=argparse.RawTextHelpFormatter
+  )
+  parser.add_argument(
+    '--version',
+    default=None,
+    dest='new_version',
+    help='new version number'
+  )
+  parser.add_argument(
+    '--bump',
+    action='store',
+    default=None,
+    dest='bump',
+    help='increment [major | minor | patch | beta]'
+  )
+  parser.add_argument(
+    '--stable',
+    action='store_true',
+    default= False,
+    dest='stable',
+    help='promote to stable (i.e. remove `-beta.x` suffix)'
+  )
+  parser.add_argument(
+    '--dry-run',
+    action='store_true',
+    default= False,
+    dest='dry_run',
+    help='just to check that version number is correct'
+  )
+
+  args = parser.parse_args()
+
+  if args.new_version == None and args.bump == None and args.stable == False:
+    parser.print_help()
+    return 1
+
+  increments = ['major', 'minor', 'patch', 'beta']
+
+  curr_version = get_electron_version()
+  versions = parse_version(re.sub('-beta', '', curr_version))
+
+  if args.bump in increments:
+    versions = increase_version(versions, increments.index(args.bump))
+    if versions[3] == '0':
+      # beta starts at 1
+      versions = increase_version(versions, increments.index('beta'))
+
+  if args.stable == True:
+    versions[3] = '0'
+
+  if args.new_version != None:
+    versions = parse_version(re.sub('-beta', '', args.new_version))
+
+  version = '.'.join(versions[:3])
+  suffix = '' if versions[3] == '0' else '-beta.' + versions[3]
+
+  if args.dry_run:
+    print 'new version number would be: {0}\n'.format(version + suffix)
+    return 0
+
+>>>>>>> .their
 
   with scoped_cwd(SOURCE_ROOT):
     update_electron_gyp(version, suffix)
@@ -104,9 +176,12 @@
     tag_version(version, suffix)
 
   print 'Bumped to version: {0}'.format(version + suffix)
+<<<<<<< .our
 
 def not_reached():
   raise Exception('Unreachable code was reached')
+=======
+>>>>>>> .their
 
 def increase_version(versions, index):
   for i in range(index + 1, 4):
@@ -116,8 +191,12 @@
 
 
 def update_electron_gyp(version, suffix):
+<<<<<<< .our
   pattern = re.compile(" *'version%' *: *'[0-9.]+(-beta[0-9.]*)?(-dev)?"
     + "(-nightly[0-9.]*)?'")
+=======
+  pattern = re.compile(" *'version%' *: *'[0-9.]+(-beta[0-9.]*)?'")
+>>>>>>> .their
   with open('electron.gyp', 'r') as f:
     lines = f.readlines()
 
@@ -209,6 +288,7 @@
 
 
 def tag_version(version, suffix):
+<<<<<<< .our
   execute([
     'git',
     'commit',
@@ -217,6 +297,9 @@
     'Bump v{0}'.format(version + suffix),
     '-n'
   ])
+=======
+  execute(['git', 'commit', '-a', '-m', 'Bump v{0}'.format(version + suffix)])
+>>>>>>> .their
 
 
 if __name__ == '__main__':
added in both
  our    100644 be9f9597387f5f8b7bfddc61c202f32ce4c6d478 script/ci-release-build.js
  their  100644 eb37ece8a892e696dbcc1815c3b9a2ccca79437b script/ci-release-build.js
@@ -1,3 +1,4 @@
+<<<<<<< .our
 require('dotenv-safe').load()
 
 const assert = require('assert')
@@ -23,6 +24,18 @@
   'electron-release-osx-x64'
 ]
 
+=======
+const assert = require('assert')
+const request = require('request')
+const buildAppVeyorURL = 'https://windows-ci.electronjs.org/api/builds'
+
+const circleCIJobs = [
+  'electron-linux-arm',
+  'electron-linux-ia32',
+  'electron-linux-x64'
+]
+
+>>>>>>> .their
 async function makeRequest (requestOptions, parseResponse) {
   return new Promise((resolve, reject) => {
     request(requestOptions, (err, res, body) => {
@@ -34,6 +47,7 @@
           resolve(body)
         }
       } else {
+<<<<<<< .our
         console.error('Error occurred while requesting:', requestOptions.url)
         if (parseResponse) {
           try {
@@ -41,6 +55,10 @@
           } catch (err) {
             console.log('Error: ', `(status ${res.statusCode})`, err || res.body, requestOptions)
           }
+=======
+        if (parseResponse) {
+          console.log('Error: ', `(status ${res.statusCode})`, err || JSON.parse(res.body), requestOptions)
+>>>>>>> .their
         } else {
           console.log('Error: ', `(status ${res.statusCode})`, err || res.body, requestOptions)
         }
@@ -50,7 +68,12 @@
   })
 }
 
+<<<<<<< .our
 async function circleCIcall (buildUrl, targetBranch, job, options) {
+=======
+async function circleCIcall (buildUrl, targetBranch, job, ghRelease) {
+  assert(process.env.CIRCLE_TOKEN, 'CIRCLE_TOKEN not found in environment')
+>>>>>>> .their
   console.log(`Triggering CircleCI to run build job: ${job} on branch: ${targetBranch} with release flag.`)
   let buildRequest = {
     'build_parameters': {
@@ -58,16 +81,23 @@
     }
   }
 
+<<<<<<< .our
   if (options.ghRelease) {
+=======
+  if (ghRelease) {
+>>>>>>> .their
     buildRequest.build_parameters.ELECTRON_RELEASE = 1
   } else {
     buildRequest.build_parameters.RUN_RELEASE_BUILD = 'true'
   }
 
+<<<<<<< .our
   if (options.automaticRelease) {
     buildRequest.build_parameters.AUTO_RELEASE = 'true'
   }
 
+=======
+>>>>>>> .their
   let circleResponse = await makeRequest({
     method: 'POST',
     url: buildUrl,
@@ -79,6 +109,7 @@
   }, true).catch(err => {
     console.log('Error calling CircleCI:', err)
   })
+<<<<<<< .our
   console.log(`CircleCI release build request for ${job} successful.  Check ${circleResponse.build_url} for status.`)
 }
 
@@ -97,15 +128,29 @@
   let environmentVariables = {}
 
   if (options.ghRelease) {
+=======
+  console.log(`Check ${circleResponse.build_url} for status. (${job})`)
+}
+
+async function buildAppVeyor (targetBranch, ghRelease) {
+  console.log(`Triggering AppVeyor to run build on branch: ${targetBranch} with release flag.`)
+  assert(process.env.APPVEYOR_TOKEN, 'APPVEYOR_TOKEN not found in environment')
+  let environmentVariables = {}
+
+  if (ghRelease) {
+>>>>>>> .their
     environmentVariables.ELECTRON_RELEASE = 1
   } else {
     environmentVariables.RUN_RELEASE_BUILD = 'true'
   }
 
+<<<<<<< .our
   if (options.automaticRelease) {
     environmentVariables.AUTO_RELEASE = 'true'
   }
 
+=======
+>>>>>>> .their
   const requestOpts = {
     url: buildAppVeyorURL,
     auth: {
@@ -116,7 +161,11 @@
     },
     body: JSON.stringify({
       accountName: 'AppVeyor',
+<<<<<<< .our
       projectSlug: appVeyorJobs[job],
+=======
+      projectSlug: 'electron',
+>>>>>>> .their
       branch: targetBranch,
       environmentVariables
     }),
@@ -125,6 +174,7 @@
   let appVeyorResponse = await makeRequest(requestOpts, true).catch(err => {
     console.log('Error calling AppVeyor:', err)
   })
+<<<<<<< .our
   const buildUrl = `https://windows-ci.electronjs.org/project/AppVeyor/${appVeyorJobs[job]}/build/${appVeyorResponse.version}`
   console.log(`AppVeyor release build request for ${job} successful.  Check build status at ${buildUrl}`)
 }
@@ -202,10 +252,27 @@
   console.log(`VSTS release build request for ${build.name} successful. Check ${vstsResponse._links.web.href} for status.`)
 }
 
+=======
+  const buildUrl = `https://windows-ci.electronjs.org/project/AppVeyor/electron/build/${appVeyorResponse.version}`
+  console.log(`AppVeyor release build request successful.  Check build status at ${buildUrl}`)
+}
+
+function buildCircleCI (targetBranch, ghRelease, job) {
+  const circleBuildUrl = `https://circleci.com/api/v1.1/project/github/electron/electron/tree/${targetBranch}?circle-token=${process.env.CIRCLE_TOKEN}`
+  if (job) {
+    assert(circleCIJobs.includes(job), `Unknown CI job name: ${job}.`)
+    circleCIcall(circleBuildUrl, targetBranch, job, ghRelease)
+  } else {
+    circleCIJobs.forEach((job) => circleCIcall(circleBuildUrl, targetBranch, job, ghRelease))
+  }
+}
+
+>>>>>>> .their
 function runRelease (targetBranch, options) {
   if (options.ci) {
     switch (options.ci) {
       case 'CircleCI': {
+<<<<<<< .our
         buildCircleCI(targetBranch, options)
         break
       }
@@ -226,12 +293,26 @@
     buildCircleCI(targetBranch, options)
     buildAppVeyor(targetBranch, options)
     buildVSTS(targetBranch, options)
+=======
+        buildCircleCI(targetBranch, options.ghRelease, options.job)
+        break
+      }
+      case 'AppVeyor': {
+        buildAppVeyor(targetBranch, options.ghRelease)
+        break
+      }
+    }
+  } else {
+    buildCircleCI(targetBranch, options.ghRelease, options.job)
+    buildAppVeyor(targetBranch, options.ghRelease)
+>>>>>>> .their
   }
 }
 
 module.exports = runRelease
 
 if (require.main === module) {
+<<<<<<< .our
   const args = require('minimist')(process.argv.slice(2), {
     boolean: ['ghRelease', 'automaticRelease']
   })
@@ -239,6 +320,13 @@
   if (args._.length < 1) {
     console.log(`Trigger CI to build release builds of electron.
     Usage: ci-release-build.js [--job=CI_JOB_NAME] [--ci=CircleCI|AppVeyor|VSTS] [--ghRelease] [--automaticRelease] TARGET_BRANCH
+=======
+  const args = require('minimist')(process.argv.slice(2))
+  const targetBranch = args._[0]
+  if (args._.length < 1) {
+    console.log(`Trigger CI to build release builds of electron.
+    Usage: ci-release-build.js [--job=CI_JOB_NAME] [--ci=CircleCI|AppVeyor] [--ghRelease] TARGET_BRANCH
+>>>>>>> .their
     `)
     process.exit(0)
   }
changed in both
  base   100755 96e6ea2e751eea50df6e4d1014c5ce9ce9e726bb script/cibuild
  our    100755 758dc2c794e642430ab6a0d966e7a41863be947c script/cibuild
  their  100755 36e9e13fe98bce5d93a28e9711b36ae96d909fd6 script/cibuild
@@ -57,6 +57,20 @@
   if os.environ.has_key('TARGET_ARCH'):
     target_arch = os.environ['TARGET_ARCH']
 
+<<<<<<< .our
+=======
+  is_travis = (os.getenv('TRAVIS') == 'true')
+  if is_travis and PLATFORM == 'linux':
+    print 'Setup travis CI'
+    execute(['sudo', 'apt-get', 'update'])
+    deps = LINUX_DEPS
+    if target_arch == 'arm':
+      deps += LINUX_DEPS_ARM
+    else:
+      deps += LINUX_DEPS_NO_ARM
+    execute(['sudo', 'apt-get', 'install'] + deps)
+
+>>>>>>> .their
   if PLATFORM == 'linux' and target_arch == 'x64':
     os.environ['DISPLAY'] = ':99.0'
     execute(['sh', '-e', '/etc/init.d/xvfb', 'start'])
added in remote
  their  100755 a33a208c32e4395a09cec65b121991443af1f373 script/merge-release.js
@@ -0,0 +1,116 @@
+#!/usr/bin/env node
+
+require('colors')
+const assert = require('assert')
+const branchToRelease = process.argv[2]
+const fail = '\u2717'.red
+const { GitProcess, GitError } = require('dugite')
+const pass = '\u2713'.green
+const path = require('path')
+const pkg = require('../package.json')
+
+assert(process.env.ELECTRON_GITHUB_TOKEN, 'ELECTRON_GITHUB_TOKEN not found in environment')
+if (!branchToRelease) {
+  console.log(`Usage: merge-release branch`)
+  process.exit(1)
+}
+const gitDir = path.resolve(__dirname, '..')
+
+async function callGit (args, errorMessage, successMessage) {
+  let gitResult = await GitProcess.exec(args, gitDir)
+  if (gitResult.exitCode === 0) {
+    console.log(`${pass} ${successMessage}`)
+    return true
+  } else {
+    console.log(`${fail} ${errorMessage} ${gitResult.stderr}`)
+    process.exit(1)
+  }
+}
+
+async function checkoutBranch (branchName) {
+  console.log(`Checking out ${branchName}.`)
+  let errorMessage = `Error checking out branch ${branchName}:`
+  let successMessage = `Successfully checked out branch ${branchName}.`
+  return callGit(['checkout', branchName], errorMessage, successMessage)
+}
+
+async function commitMerge () {
+  console.log(`Committing the merge for v${pkg.version}`)
+  let errorMessage = `Error committing merge:`
+  let successMessage = `Successfully committed the merge for v${pkg.version}`
+  let gitArgs = ['commit', '-m', `v${pkg.version}`]
+  return callGit(gitArgs, errorMessage, successMessage)
+}
+
+async function mergeReleaseIntoBranch (branchName) {
+  console.log(`Merging release branch into ${branchName}.`)
+  let mergeArgs = ['merge', 'release-1-7-x', '--squash']
+  let mergeDetails = await GitProcess.exec(mergeArgs, gitDir)
+  if (mergeDetails.exitCode === 0) {
+    return true
+  } else {
+    const error = GitProcess.parseError(mergeDetails.stderr)
+    if (error === GitError.MergeConflicts) {
+      console.log(`${fail} Could not merge release branch into ${branchName} ` +
+        `due to merge conflicts.`)
+      return false
+    } else {
+      console.log(`${fail} Could not merge release branch into ${branchName} ` +
+        `due to an error: ${mergeDetails.stderr}.`)
+      process.exit(1)
+    }
+  }
+}
+
+async function pushBranch (branchName) {
+  console.log(`Pushing branch ${branchName}.`)
+  let pushArgs = ['push', 'origin', branchName]
+  let errorMessage = `Could not push branch ${branchName} due to an error:`
+  let successMessage = `Successfully pushed branch ${branchName}.`
+  return callGit(pushArgs, errorMessage, successMessage)
+}
+
+async function pull () {
+  console.log(`Performing a git pull`)
+  let errorMessage = `Could not pull due to an error:`
+  let successMessage = `Successfully performed a git pull`
+  return callGit(['pull'], errorMessage, successMessage)
+}
+
+async function rebase (targetBranch) {
+  console.log(`Rebasing release branch from ${targetBranch}`)
+  let errorMessage = `Could not rebase due to an error:`
+  let successMessage = `Successfully rebased release branch from ` +
+    `${targetBranch}`
+  return callGit(['rebase', targetBranch], errorMessage, successMessage)
+}
+
+async function mergeRelease () {
+  await checkoutBranch(branchToRelease)
+  let mergeSuccess = await mergeReleaseIntoBranch(branchToRelease)
+  if (mergeSuccess) {
+    console.log(`${pass} Successfully merged release branch into ` +
+      `${branchToRelease}.`)
+    await commitMerge()
+    let pushSuccess = await pushBranch(branchToRelease)
+    if (pushSuccess) {
+      console.log(`${pass} Success!!! ${branchToRelease} now has the latest release!`)
+    }
+  } else {
+    console.log(`Trying rebase of ${branchToRelease} into release branch.`)
+    await pull()
+    await checkoutBranch('release-1-7-x')
+    let rebaseResult = await rebase(branchToRelease)
+    if (rebaseResult) {
+      let pushResult = pushBranch('HEAD')
+      if (pushResult) {
+        console.log(`Rebase of ${branchToRelease} into release branch was ` +
+          `successful.  Let release builds run and then try this step again.`)
+      }
+      // Exit as failure so release doesn't continue
+      process.exit(1)
+    }
+  }
+}
+
+mergeRelease()
added in both
  our    100755 72a28b719bf1ff7770692caef86c76746c4d8edf script/prepare-release.js
  their  100755 3e7baefd0cc37db804c6019b597200c02a281c1e script/prepare-release.js
@@ -1,5 +1,6 @@
 #!/usr/bin/env node
 
+<<<<<<< .our
 if (!process.env.CI) require('dotenv-safe').load()
 require('colors')
 const args = require('minimist')(process.argv.slice(2), {
@@ -9,20 +10,39 @@
 const { execSync } = require('child_process')
 const fail = '\u2717'.red
 const { GitProcess } = require('dugite')
+=======
+require('colors')
+const args = require('minimist')(process.argv.slice(2))
+const assert = require('assert')
+const ciReleaseBuild = require('./ci-release-build')
+const { execSync } = require('child_process')
+const fail = '\u2717'.red
+const { GitProcess, GitError } = require('dugite')
+>>>>>>> .their
 const GitHub = require('github')
 const pass = '\u2713'.green
 const path = require('path')
 const pkg = require('../package.json')
 const readline = require('readline')
 const versionType = args._[0]
+<<<<<<< .our
 const targetRepo = versionType === 'nightly' ? 'nightlies' : 'electron'
+=======
+>>>>>>> .their
 
 // TODO (future) automatically determine version based on conventional commits
 // via conventional-recommended-bump
 
+<<<<<<< .our
 if (!versionType && !args.notesOnly) {
   console.log(`Usage: prepare-release versionType [stable | beta | nightly]` +
      ` (--stable) (--notesOnly) (--automaticRelease) (--branch)`)
+=======
+assert(process.env.ELECTRON_GITHUB_TOKEN, 'ELECTRON_GITHUB_TOKEN not found in environment')
+if (!versionType && !args.notesOnly) {
+  console.log(`Usage: prepare-release versionType [major | minor | patch | beta]` +
+     ` (--stable) (--notesOnly)`)
+>>>>>>> .their
   process.exit(1)
 }
 
@@ -30,12 +50,37 @@
 const gitDir = path.resolve(__dirname, '..')
 github.authenticate({type: 'token', token: process.env.ELECTRON_GITHUB_TOKEN})
 
+<<<<<<< .our
 async function getNewVersion (dryRun) {
   if (!dryRun) {
     console.log(`Bumping for new "${versionType}" version.`)
   }
   let bumpScript = path.join(__dirname, 'bump-version.py')
   let scriptArgs = [bumpScript, '--bump', versionType]
+=======
+async function createReleaseBranch () {
+  console.log(`Creating release branch.`)
+  let checkoutDetails = await GitProcess.exec([ 'checkout', '-b', 'release-1-7-x' ], gitDir)
+  if (checkoutDetails.exitCode === 0) {
+    console.log(`${pass} Successfully created the release branch.`)
+  } else {
+    const error = GitProcess.parseError(checkoutDetails.stderr)
+    if (error === GitError.BranchAlreadyExists) {
+      console.log(`${fail} Release branch already exists, aborting prepare ` +
+        `release process.`)
+    } else {
+      console.log(`${fail} Error creating release branch: ` +
+        `${checkoutDetails.stderr}`)
+    }
+    process.exit(1)
+  }
+}
+
+function getNewVersion (dryRun) {
+  console.log(`Bumping for new "${versionType}" version.`)
+  let bumpScript = path.join(__dirname, 'bump-version.py')
+  let scriptArgs = [bumpScript, `--bump ${versionType}`]
+>>>>>>> .their
   if (args.stable) {
     scriptArgs.push('--stable')
   }
@@ -52,7 +97,10 @@
     return newVersion
   } catch (err) {
     console.log(`${fail} Could not bump version, error was:`, err)
+<<<<<<< .our
     throw err
+=======
+>>>>>>> .their
   }
 }
 
@@ -74,6 +122,7 @@
 }
 
 async function getReleaseNotes (currentBranch) {
+<<<<<<< .our
   if (versionType === 'nightly') {
     return 'Nightlies do not get release notes, please compare tags for info'
   }
@@ -81,6 +130,12 @@
   let githubOpts = {
     owner: 'electron',
     repo: targetRepo,
+=======
+  console.log(`Generating release notes for ${currentBranch}.`)
+  let githubOpts = {
+    owner: 'electron',
+    repo: 'electron',
+>>>>>>> .their
     base: `v${pkg.version}`,
     head: currentBranch
   }
@@ -142,11 +197,18 @@
 
 async function createRelease (branchToTarget, isBeta) {
   let releaseNotes = await getReleaseNotes(branchToTarget)
+<<<<<<< .our
   let newVersion = await getNewVersion()
   await tagRelease(newVersion)
   const githubOpts = {
     owner: 'electron',
     repo: targetRepo
+=======
+  let newVersion = getNewVersion()
+  const githubOpts = {
+    owner: 'electron',
+    repo: 'electron'
+>>>>>>> .their
   }
   console.log(`Checking for existing draft release.`)
   let releases = await github.repos.getReleases(githubOpts)
@@ -164,6 +226,7 @@
   githubOpts.draft = true
   githubOpts.name = `electron ${newVersion}`
   if (isBeta) {
+<<<<<<< .our
     if (newVersion.indexOf('nightly') > 0) {
       githubOpts.body = `Note: This is a nightly release.  Please file new issues ` +
         `for any bugs you find in it.\n \n This release is published to npm ` +
@@ -175,13 +238,23 @@
         `under the beta tag and can be installed via npm install electron@beta, ` +
         `or npm i electron@${newVersion.substr(1)}.\n \n ${releaseNotes}`
     }
+=======
+    githubOpts.body = `Note: This is a beta release.  Please file new issues ` +
+      `for any bugs you find in it.\n \n This release is published to npm ` +
+      `under the beta tag and can be installed via npm install electron@beta, ` +
+      `or npm i electron@${newVersion.substr(1)}.\n \n ${releaseNotes}`
+>>>>>>> .their
     githubOpts.name = `${githubOpts.name}`
     githubOpts.prerelease = true
   } else {
     githubOpts.body = releaseNotes
   }
   githubOpts.tag_name = newVersion
+<<<<<<< .our
   githubOpts.target_commitish = newVersion.indexOf('nightly') !== -1 ? 'master' : branchToTarget
+=======
+  githubOpts.target_commitish = branchToTarget
+>>>>>>> .their
   await github.repos.createRelease(githubOpts)
     .catch(err => {
       console.log(`${fail} Error creating new release: `, err)
@@ -190,6 +263,7 @@
   console.log(`${pass} Draft release for ${newVersion} has been created.`)
 }
 
+<<<<<<< .our
 async function pushRelease (branch) {
   let pushDetails = await GitProcess.exec(['push', 'origin', `HEAD:${branch}`, '--follow-tags'], gitDir)
   if (pushDetails.exitCode === 0) {
@@ -197,11 +271,21 @@
       `release builds to finish before running "npm run release".`)
   } else {
     console.log(`${fail} Error pushing the release: ` +
+=======
+async function pushRelease () {
+  let pushDetails = await GitProcess.exec(['push', 'origin', 'HEAD'], gitDir)
+  if (pushDetails.exitCode === 0) {
+    console.log(`${pass} Successfully pushed the release branch.  Wait for ` +
+      `release builds to finish before running "npm run release".`)
+  } else {
+    console.log(`${fail} Error pushing the release branch: ` +
+>>>>>>> .their
         `${pushDetails.stderr}`)
     process.exit(1)
   }
 }
 
+<<<<<<< .our
 async function runReleaseBuilds (branch) {
   await ciReleaseBuild(branch, {
     ghRelease: true,
@@ -229,6 +313,17 @@
   } else {
     response = await promptForVersion(newVersion)
   }
+=======
+async function runReleaseBuilds () {
+  await ciReleaseBuild('release-1-7-x', {
+    ghRelease: true
+  })
+}
+
+async function verifyNewVersion () {
+  let newVersion = await getNewVersion(true)
+  let response = await promptForVersion(newVersion)
+>>>>>>> .their
   if (response.match(/^y/i)) {
     console.log(`${pass} Starting release of ${newVersion}`)
   } else {
@@ -250,6 +345,7 @@
   })
 }
 
+<<<<<<< .our
 // function to determine if there have been commits to master since the last release
 async function changesToRelease () {
   let lastCommitWasRelease = new RegExp(`^Bump v[0-9.]*(-beta[0-9.]*)?(-nightly[0-9.]*)?$`, 'g')
@@ -278,6 +374,19 @@
         process.exit(1)
       }
     }
+=======
+async function prepareRelease (isBeta, notesOnly) {
+  let currentBranch = await getCurrentBranch(gitDir)
+  if (notesOnly) {
+    let releaseNotes = await getReleaseNotes(currentBranch)
+    console.log(`Draft release notes are: ${releaseNotes}`)
+  } else {
+    await verifyNewVersion()
+    await createReleaseBranch()
+    await createRelease(currentBranch, isBeta)
+    await pushRelease()
+    await runReleaseBuilds()
+>>>>>>> .their
   }
 }
 
added in remote
  their  100755 78b63933009cf47cc50130dabaa8fe6f5f73b30f script/prerelease.js
@@ -0,0 +1,112 @@
+#!/usr/bin/env node
+
+require('colors')
+const assert = require('assert')
+const GitHub = require('github')
+const heads = require('heads')
+const pkg = require('../package.json')
+const pass = '\u2713'.green
+const fail = '\u2717'.red
+let failureCount = 0
+
+assert(process.env.ELECTRON_GITHUB_TOKEN, 'ELECTRON_GITHUB_TOKEN not found in environment')
+
+const github = new GitHub()
+github.authenticate({type: 'token', token: process.env.ELECTRON_GITHUB_TOKEN})
+github.repos.getReleases({owner: 'electron', repo: 'electron'})
+  .then(res => {
+    const releases = res.data
+    const drafts = releases
+      .filter(release => release.draft) // comment out for testing
+      // .filter(release => release.tag_name === 'v1.7.5') // uncomment for testing
+
+    check(drafts.length === 1, 'one draft exists', true)
+    const draft = drafts[0]
+
+    check(draft.tag_name === `v${pkg.version}`, `draft release version matches local package.json (v${pkg.version})`)
+    check(draft.prerelease, 'draft is a prerelease')
+    check(draft.body.length > 50 && !draft.body.includes('(placeholder)'), 'draft has release notes')
+
+    const requiredAssets = assetsForVersion(draft.tag_name).sort()
+    const extantAssets = draft.assets.map(asset => asset.name).sort()
+
+    requiredAssets.forEach(asset => {
+      check(extantAssets.includes(asset), asset)
+    })
+
+    const s3Urls = s3UrlsForVersion(draft.tag_name)
+    heads(s3Urls)
+      .then(results => {
+        results.forEach((result, i) => {
+          check(result === 200, s3Urls[i])
+        })
+
+        process.exit(failureCount > 0 ? 1 : 0)
+      })
+      .catch(err => {
+        console.error('Error making HEAD requests for S3 assets')
+        console.error(err)
+        process.exit(1)
+      })
+  })
+
+function check (condition, statement, exitIfFail = false) {
+  if (condition) {
+    console.log(`${pass} ${statement}`)
+  } else {
+    failureCount++
+    console.log(`${fail} ${statement}`)
+    if (exitIfFail) process.exit(1)
+  }
+}
+
+function assetsForVersion (version) {
+  const patterns = [
+    'electron-{{VERSION}}-darwin-x64-dsym.zip',
+    'electron-{{VERSION}}-darwin-x64-symbols.zip',
+    'electron-{{VERSION}}-darwin-x64.zip',
+    'electron-{{VERSION}}-linux-arm-symbols.zip',
+    'electron-{{VERSION}}-linux-arm.zip',
+    'electron-{{VERSION}}-linux-armv7l-symbols.zip',
+    'electron-{{VERSION}}-linux-armv7l.zip',
+    'electron-{{VERSION}}-linux-ia32-symbols.zip',
+    'electron-{{VERSION}}-linux-ia32.zip',
+    'electron-{{VERSION}}-linux-x64-symbols.zip',
+    'electron-{{VERSION}}-linux-x64.zip',
+    'electron-{{VERSION}}-mas-x64-dsym.zip',
+    'electron-{{VERSION}}-mas-x64-symbols.zip',
+    'electron-{{VERSION}}-mas-x64.zip',
+    'electron-{{VERSION}}-win32-ia32-pdb.zip',
+    'electron-{{VERSION}}-win32-ia32-symbols.zip',
+    'electron-{{VERSION}}-win32-ia32.zip',
+    'electron-{{VERSION}}-win32-x64-pdb.zip',
+    'electron-{{VERSION}}-win32-x64-symbols.zip',
+    'electron-{{VERSION}}-win32-x64.zip',
+    'electron-api.json',
+    'electron.d.ts',
+    'ffmpeg-{{VERSION}}-darwin-x64.zip',
+    'ffmpeg-{{VERSION}}-linux-arm.zip',
+    'ffmpeg-{{VERSION}}-linux-armv7l.zip',
+    'ffmpeg-{{VERSION}}-linux-ia32.zip',
+    'ffmpeg-{{VERSION}}-linux-x64.zip',
+    'ffmpeg-{{VERSION}}-mas-x64.zip',
+    'ffmpeg-{{VERSION}}-win32-ia32.zip',
+    'ffmpeg-{{VERSION}}-win32-x64.zip'
+  ]
+  return patterns.map(pattern => pattern.replace(/{{VERSION}}/g, version))
+}
+
+function s3UrlsForVersion (version) {
+  const bucket = 'https://gh-contractor-zcbenz.s3.amazonaws.com/'
+  const patterns = [
+    'atom-shell/dist/{{VERSION}}/iojs-{{VERSION}}-headers.tar.gz',
+    'atom-shell/dist/{{VERSION}}/iojs-{{VERSION}}.tar.gz',
+    'atom-shell/dist/{{VERSION}}/node-{{VERSION}}.tar.gz',
+    'atom-shell/dist/{{VERSION}}/node.lib',
+    'atom-shell/dist/{{VERSION}}/win-x64/iojs.lib',
+    'atom-shell/dist/{{VERSION}}/win-x86/iojs.lib',
+    'atom-shell/dist/{{VERSION}}/x64/node.lib',
+    'atom-shell/dist/index.json'
+  ]
+  return patterns.map(pattern => bucket + pattern.replace(/{{VERSION}}/g, version))
+}
added in both
  our    100755 84e00ad4f309201f151c3f8fcbaf9ee536c9b6cb script/release.js
  their  100755 54379f8ff9ea9fc19a0ba3349c0019f23383b94f script/release.js
@@ -1,8 +1,14 @@
 #!/usr/bin/env node
 
+<<<<<<< .our
 if (!process.env.CI) require('dotenv-safe').load()
 require('colors')
 const args = require('minimist')(process.argv.slice(2))
+=======
+require('colors')
+const args = require('minimist')(process.argv.slice(2))
+const assert = require('assert')
+>>>>>>> .their
 const fs = require('fs')
 const { execSync } = require('child_process')
 const GitHub = require('github')
@@ -16,16 +22,30 @@
 const sumchecker = require('sumchecker')
 const temp = require('temp').track()
 const { URL } = require('url')
+<<<<<<< .our
 const targetRepo = pkgVersion.indexOf('nightly') > 0 ? 'nightlies' : 'electron'
 let failureCount = 0
 
+=======
+let failureCount = 0
+
+assert(process.env.ELECTRON_GITHUB_TOKEN, 'ELECTRON_GITHUB_TOKEN not found in environment')
+
+>>>>>>> .their
 const github = new GitHub({
   followRedirects: false
 })
 github.authenticate({type: 'token', token: process.env.ELECTRON_GITHUB_TOKEN})
+<<<<<<< .our
 
 async function getDraftRelease (version, skipValidation) {
   let releaseInfo = await github.repos.getReleases({owner: 'electron', repo: targetRepo})
+=======
+const gitDir = path.resolve(__dirname, '..')
+
+async function getDraftRelease (version, skipValidation) {
+  let releaseInfo = await github.repos.getReleases({owner: 'electron', repo: 'electron'})
+>>>>>>> .their
   let drafts
   let versionToCheck
   if (version) {
@@ -49,8 +69,13 @@
   return draft
 }
 
+<<<<<<< .our
 async function validateReleaseAssets (release, validatingRelease) {
   const requiredAssets = assetsForVersion(release.tag_name, validatingRelease).sort()
+=======
+async function validateReleaseAssets (release) {
+  const requiredAssets = assetsForVersion(release.tag_name).sort()
+>>>>>>> .their
   const extantAssets = release.assets.map(asset => asset.name).sort()
   const downloadUrls = release.assets.map(asset => asset.browser_download_url).sort()
 
@@ -60,6 +85,7 @@
   })
   check((failureCount === 0), `All required GitHub assets exist for release`, true)
 
+<<<<<<< .our
   if (!validatingRelease || !release.draft) {
     if (release.draft) {
       await verifyAssets(release)
@@ -72,6 +98,18 @@
     const s3Urls = s3UrlsForVersion(release.tag_name)
     await verifyShasums(s3Urls, true)
   }
+=======
+  if (release.draft) {
+    await verifyAssets(release)
+  } else {
+    await verifyShasums(downloadUrls)
+      .catch(err => {
+        console.log(`${fail} error verifyingShasums`, err)
+      })
+  }
+  const s3Urls = s3UrlsForVersion(release.tag_name)
+  await verifyShasums(s3Urls, true)
+>>>>>>> .their
 }
 
 function check (condition, statement, exitIfFail = false) {
@@ -84,13 +122,22 @@
   }
 }
 
+<<<<<<< .our
 function assetsForVersion (version, validatingRelease) {
+=======
+function assetsForVersion (version) {
+>>>>>>> .their
   const patterns = [
     `electron-${version}-darwin-x64-dsym.zip`,
     `electron-${version}-darwin-x64-symbols.zip`,
     `electron-${version}-darwin-x64.zip`,
+<<<<<<< .our
     `electron-${version}-linux-arm64-symbols.zip`,
     `electron-${version}-linux-arm64.zip`,
+=======
+    `electron-${version}-linux-arm-symbols.zip`,
+    `electron-${version}-linux-arm.zip`,
+>>>>>>> .their
     `electron-${version}-linux-armv7l-symbols.zip`,
     `electron-${version}-linux-armv7l.zip`,
     `electron-${version}-linux-ia32-symbols.zip`,
@@ -109,17 +156,27 @@
     `electron-api.json`,
     `electron.d.ts`,
     `ffmpeg-${version}-darwin-x64.zip`,
+<<<<<<< .our
     `ffmpeg-${version}-linux-arm64.zip`,
+=======
+    `ffmpeg-${version}-linux-arm.zip`,
+>>>>>>> .their
     `ffmpeg-${version}-linux-armv7l.zip`,
     `ffmpeg-${version}-linux-ia32.zip`,
     `ffmpeg-${version}-linux-x64.zip`,
     `ffmpeg-${version}-mas-x64.zip`,
     `ffmpeg-${version}-win32-ia32.zip`,
+<<<<<<< .our
     `ffmpeg-${version}-win32-x64.zip`
   ]
   if (!validatingRelease) {
     patterns.push('SHASUMS256.txt')
   }
+=======
+    `ffmpeg-${version}-win32-x64.zip`,
+    `SHASUMS256.txt`
+  ]
+>>>>>>> .their
   return patterns
 }
 
@@ -141,6 +198,7 @@
 }
 
 function checkVersion () {
+<<<<<<< .our
   if (args.skipVersionCheck) return
 
   console.log(`Verifying that app version matches package version ${pkgVersion}.`)
@@ -150,6 +208,11 @@
     scriptArgs.unshift('-R')
   }
   let appVersion = runScript(startScript, scriptArgs).trim()
+=======
+  console.log(`Verifying that app version matches package version ${pkgVersion}.`)
+  let startScript = path.join(__dirname, 'start.py')
+  let appVersion = runScript(startScript, ['--version']).trim()
+>>>>>>> .their
   check((pkgVersion.indexOf(appVersion) === 0), `App version ${appVersion} matches ` +
     `package version ${pkgVersion}.`, true)
 }
@@ -180,7 +243,11 @@
 function uploadIndexJson () {
   console.log('Uploading index.json to S3.')
   let scriptPath = path.join(__dirname, 'upload-index-json.py')
+<<<<<<< .our
   runScript(scriptPath, [pkgVersion])
+=======
+  runScript(scriptPath, [])
+>>>>>>> .their
   console.log(`${pass} Done uploading index.json to S3.`)
 }
 
@@ -191,7 +258,11 @@
     console.log(`${fileName} already exists on GitHub; deleting before creating new file.`)
     await github.repos.deleteAsset({
       owner: 'electron',
+<<<<<<< .our
       repo: targetRepo,
+=======
+      repo: 'electron',
+>>>>>>> .their
       id: existingAssets[0].id
     }).catch(err => {
       console.log(`${fail} Error deleting ${fileName} on GitHub:`, err)
@@ -210,7 +281,11 @@
 async function uploadShasumFile (filePath, fileName, release) {
   let githubOpts = {
     owner: 'electron',
+<<<<<<< .our
     repo: targetRepo,
+=======
+    repo: 'electron',
+>>>>>>> .their
     id: release.id,
     filePath,
     name: fileName
@@ -245,7 +320,11 @@
 async function publishRelease (release) {
   let githubOpts = {
     owner: 'electron',
+<<<<<<< .our
     repo: targetRepo,
+=======
+    repo: 'electron',
+>>>>>>> .their
     id: release.id,
     tag_name: release.tag_name,
     draft: false
@@ -259,6 +338,7 @@
 
 async function makeRelease (releaseToValidate) {
   if (releaseToValidate) {
+<<<<<<< .our
     if (releaseToValidate === true) {
       releaseToValidate = pkgVersion
     } else {
@@ -267,18 +347,31 @@
     console.log(`Validating release ${releaseToValidate}`)
     let release = await getDraftRelease(releaseToValidate)
     await validateReleaseAssets(release, true)
+=======
+    console.log(`Validating release ${args.validateRelease}`)
+    let release = await getDraftRelease(args.validateRelease)
+    await validateReleaseAssets(release)
+>>>>>>> .their
   } else {
     checkVersion()
     let draftRelease = await getDraftRelease()
     uploadNodeShasums()
     uploadIndexJson()
+<<<<<<< .our
 
+=======
+>>>>>>> .their
     await createReleaseShasums(draftRelease)
     // Fetch latest version of release before verifying
     draftRelease = await getDraftRelease(pkgVersion, true)
     await validateReleaseAssets(draftRelease)
+<<<<<<< .our
     await tagLibCC()
     await publishRelease(draftRelease)
+=======
+    await publishRelease(draftRelease)
+    await cleanupReleaseBranch()
+>>>>>>> .their
     console.log(`${pass} SUCCESS!!! Release has been published. Please run ` +
       `"npm run publish-to-npm" to publish release to npm.`)
   }
@@ -300,7 +393,11 @@
   let downloadDir = await makeTempDir()
   let githubOpts = {
     owner: 'electron',
+<<<<<<< .our
     repo: targetRepo,
+=======
+    repo: 'electron',
+>>>>>>> .their
     headers: {
       Accept: 'application/octet-stream'
     }
@@ -446,6 +543,7 @@
     `shasums defined in ${validationArgs.shaSumFile}.`)
 }
 
+<<<<<<< .our
 async function tagLibCC () {
   const tag = `electron-${pkg.version}`
   const libccDir = path.join(path.resolve(__dirname, '..'), 'vendor', 'libchromiumcontent')
@@ -462,6 +560,26 @@
   } else {
     console.log(`${fail} Error tagging libchromiumcontent with ${tag}: ` +
       `${tagDetails.stderr}`)
+=======
+async function cleanupReleaseBranch () {
+  console.log(`Cleaning up release branch.`)
+  let errorMessage = `Could not delete local release branch.`
+  let successMessage = `Successfully deleted local release branch.`
+  await callGit(['branch', '-D', 'release-1-7-x'], errorMessage, successMessage)
+  errorMessage = `Could not delete remote release branch.`
+  successMessage = `Successfully deleted remote release branch.`
+  return callGit(['push', 'origin', ':release'], errorMessage, successMessage)
+}
+
+async function callGit (args, errorMessage, successMessage) {
+  let gitResult = await GitProcess.exec(args, gitDir)
+  if (gitResult.exitCode === 0) {
+    console.log(`${pass} ${successMessage}`)
+    return true
+  } else {
+    console.log(`${fail} ${errorMessage} ${gitResult.stderr}`)
+    process.exit(1)
+>>>>>>> .their
   }
 }
 
changed in both
  base   100755 94cdb4e9ce644b87fbe0d18ea8c7ad5234486250 script/update-external-binaries.py
  our    100755 0bc9d0f632057f4a17aa811340ba21631433f173 script/update-external-binaries.py
  their  100755 a207ad3a1a15e5b01eb85ba382267aa2594dbd98 script/update-external-binaries.py
@@ -8,7 +8,12 @@
 from lib.util import add_exec_bit, download, extract_zip, rm_rf, \
                      safe_mkdir, tempdir
 
+<<<<<<< .our
 VERSION = 'v1.4.0'
+=======
+
+VERSION = 'v1.2.2'
+>>>>>>> .their
 SOURCE_ROOT = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
 FRAMEWORKS_URL = 'http://github.com/electron/electron-frameworks/releases' \
                  '/download/' + VERSION
added in both
  our    100644 2facda2daa1b8a8ccb63a28198a15b7e7ecb0880 script/upload-to-github.js
  their  100644 7c3f8d9c11ce7b75f307850663efd2e571e8644a script/upload-to-github.js
@@ -1,16 +1,24 @@
+<<<<<<< .our
 if (!process.env.CI) require('dotenv-safe').load()
 
+=======
+>>>>>>> .their
 const GitHub = require('github')
 const github = new GitHub()
 github.authenticate({type: 'token', token: process.env.ELECTRON_GITHUB_TOKEN})
 
+<<<<<<< .our
 if (process.argv.length < 6) {
+=======
+if (process.argv.length < 5) {
+>>>>>>> .their
   console.log('Usage: upload-to-github filePath fileName releaseId')
   process.exit(1)
 }
 let filePath = process.argv[2]
 let fileName = process.argv[3]
 let releaseId = process.argv[4]
+<<<<<<< .our
 let releaseVersion = process.argv[5]
 
 const targetRepo = releaseVersion.indexOf('nightly') > 0 ? 'nightlies' : 'electron'
@@ -18,6 +26,12 @@
 let githubOpts = {
   owner: 'electron',
   repo: targetRepo,
+=======
+
+let githubOpts = {
+  owner: 'electron',
+  repo: 'electron',
+>>>>>>> .their
   id: releaseId,
   filePath: filePath,
   name: fileName
@@ -39,7 +53,11 @@
           console.log(`${fileName} already exists; will delete before retrying upload.`)
           github.repos.deleteAsset({
             owner: 'electron',
+<<<<<<< .our
             repo: targetRepo,
+=======
+            repo: 'electron',
+>>>>>>> .their
             id: existingAssets[0].id
           }).then(uploadToGitHub).catch(uploadToGitHub)
         } else {
changed in both
  base   100755 455ed789e0a081bc411adb02b75995bede18c25f script/upload.py
  our    100755 2d9eaa201265971ca01acaea6e84a440e5db0532 script/upload.py
  their  100755 4da630433812b51ff0ebbdf89f68c71d90ab8046 script/upload.py
@@ -51,6 +51,7 @@
     return 1
 
   tag_exists = False
+<<<<<<< .our
   release = get_release(args.version)
   if not release['draft']:
     tag_exists = True
@@ -84,6 +85,55 @@
     # Upload the x64 binary for arm/arm64 mksnapshot
     mksnapshot = get_zip_name('mksnapshot', ELECTRON_VERSION, 'x64')
     upload_electron(release, os.path.join(DIST_DIR, mksnapshot), args)
+=======
+  for r in releases:
+    if not r['draft'] and r['tag_name'] == args.version:
+      release = r
+      tag_exists = True
+      break
+
+  if not args.upload_to_s3:
+    assert tag_exists == args.overwrite, \
+          'You have to pass --overwrite to overwrite a published release'
+    if not args.overwrite:
+      release = create_or_get_release_draft(github, releases, args.version,
+                                            tag_exists)
+
+  # Upload Electron with GitHub Releases API.
+  upload_electron(github, release, os.path.join(DIST_DIR, DIST_NAME),
+                  args.upload_to_s3)
+  if get_target_arch() != 'mips64el':
+    upload_electron(github, release, os.path.join(DIST_DIR, SYMBOLS_NAME),
+                    args.upload_to_s3)
+  if PLATFORM == 'darwin':
+    upload_electron(github, release, os.path.join(DIST_DIR,
+                    'electron-api.json'), args.upload_to_s3)
+    upload_electron(github, release, os.path.join(DIST_DIR, 'electron.d.ts'),
+                    args.upload_to_s3)
+    upload_electron(github, release, os.path.join(DIST_DIR, DSYM_NAME),
+                    args.upload_to_s3)
+  elif PLATFORM == 'win32':
+    upload_electron(github, release, os.path.join(DIST_DIR, PDB_NAME),
+                    args.upload_to_s3)
+
+  # Upload free version of ffmpeg.
+  ffmpeg = get_zip_name('ffmpeg', ELECTRON_VERSION)
+  upload_electron(github, release, os.path.join(DIST_DIR, ffmpeg),
+                  args.upload_to_s3)
+
+  # Upload chromedriver and mksnapshot for minor version update.
+  if parse_version(args.version)[2] == '0':
+    chromedriver = get_zip_name('chromedriver', ELECTRON_VERSION)
+    upload_electron(github, release, os.path.join(DIST_DIR, chromedriver),
+                    args.upload_to_s3)
+    mksnapshot = get_zip_name('mksnapshot', ELECTRON_VERSION)
+    upload_electron(github, release, os.path.join(DIST_DIR, mksnapshot),
+                    args.upload_to_s3)
+
+  if PLATFORM == 'win32' and not tag_exists and not args.upload_to_s3:
+    # Upload PDBs to Windows symbol server.
+    run_python_script('upload-windows-pdb.py')
+>>>>>>> .their
 
   if not tag_exists and not args.upload_to_s3:
     # Upload symbols to symbol server.
@@ -149,7 +199,66 @@
   return dist_time > int(head_time)
 
 
+<<<<<<< .our
 def upload_electron(release, file_path, args):
+=======
+def get_text_with_editor(name):
+  editor = os.environ.get('EDITOR', 'nano')
+  initial_message = '\n# Please enter the body of your release note for %s.' \
+                    % name
+
+  t = tempfile.NamedTemporaryFile(suffix='.tmp', delete=False)
+  t.write(initial_message)
+  t.close()
+  subprocess.call([editor, t.name])
+
+  text = ''
+  for line in open(t.name, 'r'):
+    if len(line) == 0 or line[0] != '#':
+      text += line
+
+  os.unlink(t.name)
+  return text
+
+def create_or_get_release_draft(github, releases, tag, tag_exists):
+  # Search for existing draft.
+  for release in releases:
+    if release['draft'] and release['tag_name'] == tag:
+      return release
+
+  if tag_exists:
+    tag = 'do-not-publish-me'
+  return create_release_draft(github, tag)
+
+
+def create_release_draft(github, tag):
+  name = '{0} {1} beta'.format(PROJECT_NAME, tag)
+  if os.environ.has_key('CI'):
+    body = '(placeholder)'
+  else:
+    body = get_text_with_editor(name)
+  if body == '':
+    sys.stderr.write('Quit due to empty release note.\n')
+    sys.exit(0)
+
+  data = dict(tag_name=tag, name=name, body=body, draft=True, prerelease=True)
+  r = github.repos(ELECTRON_REPO).releases.post(data=data)
+  return r
+
+
+def upload_electron(github, release, file_path, upload_to_s3):
+
+  # if upload_to_s3 is set, skip github upload.
+  if upload_to_s3:
+    bucket, access_key, secret_key = s3_config()
+    key_prefix = 'electron-artifacts/{0}'.format(release['tag_name'])
+    s3put(bucket, access_key, secret_key, os.path.dirname(file_path),
+          key_prefix, [file_path])
+    upload_sha256_checksum(release['tag_name'], file_path, key_prefix)
+    return
+
+  # Delete the original file before uploading in CI.
+>>>>>>> .their
   filename = os.path.basename(file_path)
 
   # if upload_to_s3 is set, skip github upload.
@@ -165,6 +274,7 @@
     return
 
   # Upload the file.
+<<<<<<< .our
   upload_io_to_github(release, filename, file_path, args.version)
 
   # Upload the checksum file.
@@ -177,6 +287,27 @@
   script_path = os.path.join(SOURCE_ROOT, 'script', 'upload-to-github.js')
   execute(['node', script_path, filepath, filename, str(release['id']),
           version])
+=======
+  upload_io_to_github(release, filename, file_path)
+
+  # Upload the checksum file.
+  upload_sha256_checksum(release['tag_name'], file_path)
+
+  # Upload ARM assets without the v7l suffix for backwards compatibility
+  # TODO Remove for 2.0
+  if 'armv7l' in filename:
+    arm_filename = filename.replace('armv7l', 'arm')
+    arm_file_path = os.path.join(os.path.dirname(file_path), arm_filename)
+    shutil.copy2(file_path, arm_file_path)
+    upload_electron(github, release, arm_file_path, upload_to_s3)
+
+
+def upload_io_to_github(release, filename, filepath):
+  print 'Uploading %s to Github' % \
+      (filename)
+  script_path = os.path.join(SOURCE_ROOT, 'script', 'upload-to-github.js')
+  execute(['node', script_path, filepath, filename, str(release['id'])])
+>>>>>>> .their
 
 
 def upload_sha256_checksum(version, file_path, key_prefix=None):
changed in both
  base   100644 1df816807ddb0fb20d91f9a6536381126ff9ebb7 spec/api-app-spec.js
  our    100644 d224eda2989332c18d655cef05a8bacc2eb6d4b8 spec/api-app-spec.js
  their  100644 a8c288e771ecb3f1fd8807f7dc9a776769395b03 spec/api-app-spec.js
@@ -196,6 +196,7 @@
     })
   })
 
+<<<<<<< .our
   // TODO(MarshallOfSound) - Remove in 4.0.0
   describe('app.makeSingleInstance', () => {
     it('prevents the second launch of app', function (done) {
@@ -233,11 +234,41 @@
           expect(code).to.equal(1)
           done()
         })
+=======
+  describe('app.makeSingleInstance', function () {
+    it('prevents the second launch of app', function (done) {
+      this.timeout(120000)
+      const appPath = path.join(__dirname, 'fixtures', 'api', 'singleton')
+      // First launch should exit with 0.
+      let secondLaunched = false
+      const first = ChildProcess.spawn(remote.process.execPath, [appPath])
+      let launchOnce = true
+      first.stdout.on('data', (data) => {
+        if (data.toString().trim() === 'launched' && launchOnce) {
+          launchOnce = false
+          // Second launch should exit with 1.
+          const second = ChildProcess.spawn(remote.process.execPath, [appPath])
+          second.once('exit', (code) => {
+            assert.ok(!secondLaunched)
+            assert.equal(code, 1)
+            secondLaunched = true
+          })
+        }
+      })
+      first.once('exit', (code) => {
+        assert.ok(secondLaunched)
+        assert.equal(code, 0)
+        done()
+>>>>>>> .their
       })
     })
   })
 
+<<<<<<< .our
   describe('app.relaunch', () => {
+=======
+  describe('app.relaunch', function () {
+>>>>>>> .their
     let server = null
     const socketPath = process.platform === 'win32' ? '\\\\.\\pipe\\electron-app-relaunch' : '/tmp/electron-app-relaunch'
 
@@ -294,8 +325,16 @@
     })
   })
 
+<<<<<<< .our
   xdescribe('app.importCertificate', () => {
     let w = null
+=======
+  xdescribe('app.importCertificate', function () {
+    if (process.platform !== 'linux') return
+
+    this.timeout(120000)
+    var w = null
+>>>>>>> .their
 
     before(function () {
       if (process.platform !== 'linux') {
@@ -535,7 +574,11 @@
     })
   })
 
+<<<<<<< .our
   describe('select-client-certificate event', () => {
+=======
+  xdescribe('select-client-certificate event', function () {
+>>>>>>> .their
     let w = null
 
     before(function () {
@@ -688,6 +731,54 @@
         this.skip()
       }
     })
+<<<<<<< .our
+=======
+
+    it('does not launch for blacklisted argument', function (done) {
+      const appPath = path.join(__dirname, 'fixtures', 'api', 'quit-app')
+      // App should exit with non 123 code.
+      const first = ChildProcess.spawn(remote.process.execPath, [appPath, 'electron-test://?', '--no-sandbox', '--gpu-launcher=cmd.exe /c start calc'])
+      first.once('exit', (code) => {
+        assert.notEqual(code, 123)
+        done()
+      })
+    })
+
+    it('launches successfully for multiple uris in cmd args', function (done) {
+      const appPath = path.join(__dirname, 'fixtures', 'api', 'quit-app')
+      // App should exit with code 123.
+      const first = ChildProcess.spawn(remote.process.execPath, [appPath, 'http://electronjs.org', 'electron-test://testdata'])
+      first.once('exit', (code) => {
+        assert.equal(code, 123)
+        done()
+      })
+    })
+
+    it('does not launch for encoded space', function (done) {
+      const appPath = path.join(__dirname, 'fixtures', 'api', 'quit-app')
+      // App should exit with non 123 code.
+      const first = ChildProcess.spawn(remote.process.execPath, [appPath, 'electron-test://?', '--no-sandbox', '--gpu-launcher%20"cmd.exe /c start calc'])
+      first.once('exit', (code) => {
+        assert.notEqual(code, 123)
+        done()
+      })
+    })
+
+    it('launches successfully for argnames similar to blacklisted ones', function (done) {
+      const appPath = path.join(__dirname, 'fixtures', 'api', 'quit-app')
+      // inspect is blacklisted, but inspector should work, and app launch should succeed
+      const first = ChildProcess.spawn(remote.process.execPath, [appPath, 'electron-test://?', '--inspector'])
+      first.once('exit', (code) => {
+        assert.equal(code, 123)
+        done()
+      })
+    })
+  })
+
+  describe('getFileIcon() API', function () {
+    // FIXME Get these specs running on Linux CI
+    if (process.platform === 'linux' && isCI) return
+>>>>>>> .their
 
     it('does not launch for argument following a URL', done => {
       const appPath = path.join(__dirname, 'fixtures', 'api', 'quit-app')
changed in both
  base   100644 52c9b5fb47e3f559785104958b65824d511fa986 spec/api-browser-window-spec.js
  our    100644 f4cba12ec19d224bc46fca898db42a99baf4972e spec/api-browser-window-spec.js
  their  100644 f4222145dba6f9e773d7d657cc688ad9efb55afa spec/api-browser-window-spec.js
changed in both
  base   100644 2f9f2b2795adbe396b683ed9854c6675a50d6ba4 spec/chromium-spec.js
  our    100644 d90269769d269e4054d25cba4b6c4ac8a1929aa6 spec/chromium-spec.js
  their  100644 e18b1a141eac068348eb34d064a357929b243a5f spec/chromium-spec.js
@@ -319,8 +319,12 @@
       b = window.open(windowUrl, '', 'nodeIntegration=no,show=no')
     })
 
+<<<<<<< .our
     // TODO(codebytere): re-enable this test
     xit('disables node integration when it is disabled on the parent window for chrome devtools URLs', (done) => {
+=======
+    it('disables node integration when it is disabled on the parent window for chrome devtools URLs', (done) => {
+>>>>>>> .their
       let b
       app.once('web-contents-created', (event, contents) => {
         contents.once('did-finish-load', () => {
added in both
  our    100644 3202a7a180d6d48c70706d5ef244652872b24bbc spec/fixtures/api/singleton/main.js
  their  100644 665987c8400f1183d009e3aad3bfab0860529de1 spec/fixtures/api/singleton/main.js
@@ -1,5 +1,6 @@
 const {app} = require('electron')
 
+<<<<<<< .our
 app.once('ready', () => {
   console.log('started')  // ping parent
 })
@@ -11,5 +12,18 @@
 })
 
 if (!gotTheLock) {
+=======
+console.log('launched')
+
+process.on('uncaughtException', () => {
+  app.exit(2)
+})
+
+const shouldExit = app.makeSingleInstance(() => {
+  process.nextTick(() => app.exit(0))
+})
+
+if (shouldExit) {
+>>>>>>> .their
   app.exit(1)
 }
changed in both
  base   100644 1211b3ea8bb8f45b69c4479ce9c4ce42a2d84373 spec/package.json
  our    100644 37dec32f876cbe6a0b07b78922140397947a818a spec/package.json
  their  100644 0bedddc69f0b1c930b90ced3f38726649e82fe49 spec/package.json
@@ -13,11 +13,19 @@
     "dirty-chai": "^2.0.1",
     "graceful-fs": "^4.1.11",
     "mkdirp": "^0.5.1",
+<<<<<<< .our
     "mocha": "^5.2.0",
     "mocha-junit-reporter": "^1.17.0",
     "multiparty": "^4.1.4",
     "q": "^1.5.1",
     "send": "^0.16.2",
+=======
+    "mocha": "^3.1.0",
+    "mocha-junit-reporter": "^1.14.0",
+    "multiparty": "^4.1.3",
+    "q": "^1.4.1",
+    "send": "^0.14.1",
+>>>>>>> .their
     "temp": "^0.8.3",
     "walkdir": "0.0.12",
     "winreg": "^1.2.4",
changed in both
  base   100644 74a9e6d278e9e96968d8e3b75303456b4a756825 spec/static/index.html
  our    100644 fc1e153c0af2908cf7ee4c3ea4f05522de04f0f8 spec/static/index.html
  their  100644 39f523f7d96b322ce39323040426ef517ee3c261 spec/static/index.html
@@ -44,12 +44,24 @@
   const { Coverage } = require('electabul')
   const Mocha = require('mocha')
 
+<<<<<<< .our
   const mocha = new Mocha(process.env.MOCHA_REPORTER
     ? { reporter: process.env.MOCHA_REPORTER }
     : undefined)
 
   if (!process.env.MOCHA_REPORTER) {
     mocha.ui('bdd').reporter(isCi ? 'tap' : 'html')
+=======
+  var Mocha = require('mocha');
+  var mochaOpts = {};
+  if (process.env.MOCHA_REPORTER) {
+    mochaOpts.reporter = process.env.MOCHA_REPORTER;
+  }
+  var mocha = new Mocha(mochaOpts);
+
+  if (!process.env.MOCHA_REPORTER) {
+    mocha.ui('bdd').reporter(isCi ? 'tap' : 'html');
+>>>>>>> .their
   }
   mocha.timeout(isCi ? 30000 : 10000)
 
changed in both
  base   160000 92e2d6a9657444dfbdcb89f986c8705bdda3dccf vendor/libchromiumcontent
  our    160000 c85470a1c379b1c4bedb372c146521bc4be9b75d vendor/libchromiumcontent
  their  160000 2f7b83669315f9492380334d1a8b1cd9bc758efd vendor/libchromiumcontent
changed in both
  base   160000 dfa72e2c73e0442d27746e0f8716d0427f7f9b27 vendor/node
  our    160000 ece0a06ac8147efb5b5af431c21f312f1884616e vendor/node
  their  160000 a992f2ff412b85606ec1d4c1eb00ad832fa1e640 vendor/node
