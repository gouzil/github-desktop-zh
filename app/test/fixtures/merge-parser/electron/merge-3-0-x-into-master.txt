added in both
  our    100644 6d44d618aabcce04c60344f2274dec5b0c2a1f68 .circleci/config.yml
  their  100644 7bc5ddc6be0269ab0ed88cc2a569de36ba93e5fa .circleci/config.yml
@@ -1,3 +1,4 @@
+<<<<<<< .our
 notify-slack-failure: &notify-slack-failure
   run:
     name: Send a slack notification on failure
@@ -19,6 +20,8 @@
       fi
     when: on_success
 
+=======
+>>>>>>> .their
 build-steps: &build-steps
   steps:
     - checkout
@@ -122,7 +125,11 @@
               script/verify-ffmpeg.py
             else
               echo 'Verifying ffmpeg on release build'
+<<<<<<< .our
               script/verify-ffmpeg.py -c R
+=======
+              script/verify-ffmpeg.py -R
+>>>>>>> .their
             fi
           else
             echo 'Skipping tests due to configuration'
@@ -134,8 +141,11 @@
           if [ "$CREATE_TYPESCRIPT_DEFS" == "true" ]; then
             npm run create-typescript-definitions
           fi
+<<<<<<< .our
     - <<: *notify-slack-failure
     - <<: *notify-slack-success
+=======
+>>>>>>> .their
     - persist_to_workspace:
         root: out
         paths:
@@ -147,6 +157,7 @@
     - store_artifacts:
         path: out
 
+<<<<<<< .our
 gn-build-steps: &gn-build-steps
   steps:
     - run:
@@ -344,6 +355,8 @@
     xcode: "8.3.3"
   resource_class: large
 
+=======
+>>>>>>> .their
 build-defaults: &build-defaults
   docker:
     - image: electronbuilds/electron:0.0.8
@@ -386,7 +399,10 @@
     environment:
       TARGET_ARCH: arm
       RUN_RELEASE_BUILD: true
+<<<<<<< .our
       NIGHTLY_BUILD: true
+=======
+>>>>>>> .their
     <<: *build-defaults
     resource_class: 2xlarge
 
@@ -425,7 +441,10 @@
     environment:
       TARGET_ARCH: arm64
       RUN_RELEASE_BUILD: true
+<<<<<<< .our
       NIGHTLY_BUILD: true
+=======
+>>>>>>> .their
     <<: *build-defaults
     resource_class: 2xlarge
 
@@ -442,7 +461,10 @@
     environment:
       TARGET_ARCH: ia32
       RUN_RELEASE_BUILD: true
+<<<<<<< .our
       NIGHTLY_BUILD: true
+=======
+>>>>>>> .their
     <<: *build-defaults
     resource_class: xlarge
 
@@ -466,7 +488,10 @@
     environment:
       TARGET_ARCH: x64
       RUN_RELEASE_BUILD: true
+<<<<<<< .our
       NIGHTLY_BUILD: true
+=======
+>>>>>>> .their
     <<: *build-defaults
     resource_class: xlarge
 
@@ -484,7 +509,10 @@
       TARGET_ARCH: x64
       RUN_RELEASE_BUILD: true
       INSTALL_MACOS_NODE: true
+<<<<<<< .our
       NIGHTLY_BUILD: true
+=======
+>>>>>>> .their
     macos:
       xcode: "8.3.3"
     <<: *build-steps
@@ -505,11 +533,15 @@
       MAS_BUILD: 1
       RUN_RELEASE_BUILD: true
       INSTALL_MACOS_NODE: true
+<<<<<<< .our
       NIGHTLY_BUILD: true
+=======
+>>>>>>> .their
     macos:
       xcode: "8.3.3"
     <<: *build-steps
 
+<<<<<<< .our
   electron-gn-linux-x64-debug-fyi:
     environment:
       DISPLAY: ':99.0'
@@ -668,6 +700,8 @@
       GN_EXTRA_ARGS: 'is_mas_build = true'
     <<: *gn-mac-build-machine
     <<: *gn-mac-build-steps
+=======
+>>>>>>> .their
 
 workflows:
   version: 2
@@ -695,6 +729,7 @@
   build-mas-x64:
     jobs:
       - electron-mas-x64
+<<<<<<< .our
   build-gn-linux:
     jobs:
       - electron-gn-linux-x64-debug-fyi
@@ -711,6 +746,8 @@
       - electron-gn-mas-testing-fyi
       - electron-gn-osx-debug-fyi
       - electron-gn-osx-testing-fyi
+=======
+>>>>>>> .their
 
   nightly-release-test:
     triggers:
@@ -720,7 +757,10 @@
             branches:
               only:
                 - master
+<<<<<<< .our
                 - 3-0-x
+=======
+>>>>>>> .their
                 - 2-0-x
                 - 1-8-x
                 - 1-7-x
@@ -730,6 +770,7 @@
       - electron-linux-ia32-release-nightly
       - electron-linux-x64-release-nightly
 
+<<<<<<< .our
   nightly-gn-release-test:
     triggers:
       - schedule:
@@ -745,3 +786,13 @@
       - electron-gn-linux-arm64-release-fyi
       - electron-gn-mas-release-fyi
       - electron-gn-osx-release-fyi
+=======
+experimental:
+  notify:
+    branches:
+      only:
+        - master
+        - 2-0-x
+        - 1-8-x
+        - 1-7-x
+>>>>>>> .their
added in both
  our    100644 cd15610276869944caf77c06906f6fb5315ebd3e .env.example
  their  100644 c2af9cb1f737c66d0c2512f93ac1365b627f440f .env.example
@@ -4,4 +4,8 @@
 APPVEYOR_TOKEN=
 CIRCLE_TOKEN=
 ELECTRON_GITHUB_TOKEN=
-VSTS_TOKEN=
\ No newline at end of file
+<<<<<<< .our
+VSTS_TOKEN=
+=======
+VSTS_TOKEN=
+>>>>>>> .their
added in both
  our    100644 e9c110640201b62255ffa62eea2a6f4ccbadb34f .github/ISSUE_TEMPLATE.md
  their  100644 7a21d0e22a6442a1cc509acbdb4ca9bf865a3014 .github/ISSUE_TEMPLATE.md
@@ -7,11 +7,19 @@
 - If you need general advice, join our Slack: http://atom-slack.herokuapp.com
 -->
 
+<<<<<<< .our
 * Output of `node_modules/.bin/electron --version`:
 * Operating System (Platform and Version):
 
 <!-- If this used to work -->
 * Output of `node_modules/.bin/electron --version` on last known working Electron version (if applicable):
+=======
+* Electron version:
+* Operating system:
+
+<!-- If this used to work -->
+* Last known working Electron version: 
+>>>>>>> .their
 
 ### Expected behavior
 
added in both
  our    100644 10cb69a7a8e4ca3b2e9ca08515eacced297bb277 .github/ISSUE_TEMPLATE/Bug_report.md
  their  100644 a5cad57bfaef1e29296926448a251d1fe3e5419f .github/ISSUE_TEMPLATE/Bug_report.md
@@ -1,3 +1,4 @@
+<<<<<<< .our
 ---
 name: Bug report
 about: Create a report to help us improve Electron
@@ -30,3 +31,37 @@
 
 **Additional Information**
 Add any other context about the problem here.
+=======
+---
+name: Bug report
+about: Create a report to help us improve Electron
+
+---
+
+* Electron Version:
+* Operating System (Platform and Version):
+* Last known working Electron version: 
+
+**Expected Behavior**
+A clear and concise description of what you expected to happen.
+
+**Actual behavior**
+A clear and concise description of what actually happened.
+
+**To Reproduce**
+Your best chance of getting this bug looked at quickly is to provide a REPOSITORY that can be cloned and run.
+
+You can fork [electron-quick-start](https://github.com/electron/electron-quick-start) and include a link to the branch with your changes.
+
+If you provide a URL, please list the commands required to clone/setup/run your repo e.g.
+```sh
+$ git clone $YOUR_URL -b $BRANCH
+$ npm install
+$ npm start || electron .
+```
+**Screenshots**
+If applicable, add screenshots to help explain your problem.
+
+**Additional Information**
+Add any other context about the problem here.
+>>>>>>> .their
added in both
  our    100644 51c2e6c8d52c9343a0853d2d2ec5b205a3aca790 .github/ISSUE_TEMPLATE/Feature_request.md
  their  100644 9f3aa9e21d7bf082f3d486f49603406bb10fd8f5 .github/ISSUE_TEMPLATE/Feature_request.md
@@ -1,3 +1,4 @@
+<<<<<<< .our
 ---
 name: Feature request
 about: Suggest an idea for Electron
@@ -15,3 +16,22 @@
 
 **Additional context**
 Add any other context or screenshots about the feature request here.
+=======
+---
+name: Feature request
+about: Suggest an idea for Electron
+
+---
+
+**Is your feature request related to a problem? Please describe.**
+A clear and concise description of what the problem is.
+
+**Describe the solution you'd like**
+A clear and concise description of what you want to happen.
+
+**Describe alternatives you've considered**
+A clear and concise description of any alternative solutions or features you've considered.
+
+**Additional context**
+Add any other context or screenshots about the feature request here.
+>>>>>>> .their
added in both
  our    100644 67a1646fee28c2c19cd1ec7301b587c0c8d6cb66 .github/PULL_REQUEST_TEMPLATE.md
  their  100644 9a2d96970f629ee5eedadaac694d2423f6fb6005 .github/PULL_REQUEST_TEMPLATE.md
@@ -1,4 +1,7 @@
+<<<<<<< .our
 ##### Description of Change
+=======
+>>>>>>> .their
 <!--
 Thank you for your Pull Request. Please provide a description above and review
 the requirements below.
@@ -13,10 +16,14 @@
 - [ ] `npm test` passes
 - [ ] tests are [changed or added](https://github.com/electron/electron/blob/master/docs/development/testing.md)
 - [ ] relevant documentation is changed or added
+<<<<<<< .our
 - [ ] PR title follows semantic [commit guidelines](https://github.com/electron/electron/blob/master/docs/development/pull-requests.md#commit-message-guidelines)
 
 
 ##### Release Notes
 <!-- Used to describe release notes for future release versions. See https://github.com/electron/clerk/blob/master/README.md for details. -->
 
-Notes: <!-- One-line Change Summary Here-->
\ No newline at end of file
+Notes: <!-- One-line Change Summary Here-->
+=======
+- [ ] commit messages or PR title follow semantic [commit guidelines](https://github.com/electron/electron/blob/master/docs/development/pull-requests.md#commit-message-guidelines)
+>>>>>>> .their
added in both
  our    100644 ff8d1b64f1b2f68ceaf63ce74ede3b01625586ba .github/config.yml
  their  100644 3c222c2f14dcbcab344059e6e4031edec6935f3c .github/config.yml
@@ -12,7 +12,11 @@
 newPRWelcomeComment: |
   💖 Thanks for opening this pull request! 💖
 
+<<<<<<< .our
   We use [semantic commit messages](https://github.com/electron/electron/blob/master/docs/development/pull-requests.md#commit-message-guidelines) to streamline the release process. Before your pull request can be merged, you should **update your pull request title** to start with a semantic prefix.
+=======
+  We use [semantic commit messages](https://github.com/electron/electron/blob/master/docs/development/pull-requests.md#commit-message-guidelines) to streamline the release process. Before your pull request can be merged, you should **update your pull request title** to start with a semantic prefix, OR prefix at least one of your commit messages.
+>>>>>>> .their
 
   Examples of commit messages with semantic prefixes:
 
added in both
  our    100644 f393b1cdcef87b41bb3ed47ebae59757fed3a780 .gitignore
  their  100644 665fb6fa10444592991a714828b60ca08daa4a2f .gitignore
@@ -50,5 +50,8 @@
 # npm package
 /npm/dist
 /npm/path.txt
+<<<<<<< .our
 
-.npmrc
\ No newline at end of file
+.npmrc
+=======
+>>>>>>> .their
added in both
  our    100644 d00c4b1e3d3523641210ff20fda41d76c9eb546c BUILD.gn
  their  100644 4a71e5550f6c7b8b74fcd15ceffdace06c8f9f52 BUILD.gn
@@ -1,5 +1,6 @@
 import("//build/config/locales.gni")
 import("//tools/grit/repack.gni")
+<<<<<<< .our
 import("//tools/v8_context_snapshot/v8_context_snapshot.gni")
 import("build/asar.gni")
 import("build/npm.gni")
@@ -7,6 +8,10 @@
 import("//build/config/win/manifest.gni")
 import("electron_paks.gni")
 import("//third_party/ffmpeg/ffmpeg_options.gni")
+=======
+import("build/asar.gni")
+import("build/npm.gni")
+>>>>>>> .their
 
 if (is_mac) {
   import("//build/config/mac/rules.gni")
@@ -31,6 +36,7 @@
 
   enable_desktop_capturer = true
   enable_run_as_node = true
+<<<<<<< .our
   enable_osr = false
 }
 
@@ -47,6 +53,20 @@
                 ],
                 "scope",
                 [ "filenames.gypi" ])
+=======
+  enable_osr = true
+}
+
+filenames_gypi = exec_script(
+  "//build/gypi_to_gn.py",
+  [
+    rebase_path("filenames.gypi"),
+    "--replace=<(SHARED_INTERMEDIATE_DIR)=$target_gen_dir",
+  ],
+  "scope",
+  [ "filenames.gypi" ]
+)
+>>>>>>> .their
 
 config("branding") {
   defines = [
@@ -68,6 +88,7 @@
   }
 }
 
+<<<<<<< .our
 npm_action("atom_browserify_sandbox") {
   deps = [
     ":atom_js2c_copy",
@@ -85,6 +106,59 @@
     "./lib/sandboxed_renderer/api/exports/path.js:path",
     "-r",
     "./lib/sandboxed_renderer/api/exports/child_process.js:child_process",
+=======
+config("native_mate_config") {
+  include_dirs = [
+    "//third_party/native_mate",
+  ]
+  cflags_cc = [
+    "-Wno-deprecated-declarations",
+  ]
+  cflags_objcc = cflags_cc
+}
+
+source_set("native_mate") {
+  deps = [
+    "//base",
+    "//net",
+    "//v8:v8_headers",
+    "build/node",
+  ]
+  public_configs = [ ":native_mate_config" ]
+  sources = [
+    "//third_party/native_mate/native_mate/arguments.cc",
+    "//third_party/native_mate/native_mate/arguments.h",
+    "//third_party/native_mate/native_mate/compat.h",
+    "//third_party/native_mate/native_mate/constructor.h",
+    "//third_party/native_mate/native_mate/converter.cc",
+    "//third_party/native_mate/native_mate/converter.h",
+    "//third_party/native_mate/native_mate/dictionary.cc",
+    "//third_party/native_mate/native_mate/dictionary.h",
+    "//third_party/native_mate/native_mate/function_template.cc",
+    "//third_party/native_mate/native_mate/function_template.h",
+    "//third_party/native_mate/native_mate/handle.h",
+    "//third_party/native_mate/native_mate/object_template_builder.cc",
+    "//third_party/native_mate/native_mate/object_template_builder.h",
+    "//third_party/native_mate/native_mate/persistent_dictionary.cc",
+    "//third_party/native_mate/native_mate/persistent_dictionary.h",
+    "//third_party/native_mate/native_mate/scoped_persistent.h",
+    "//third_party/native_mate/native_mate/wrappable.cc",
+    "//third_party/native_mate/native_mate/wrappable.h",
+    "//third_party/native_mate/native_mate/wrappable_base.h",
+  ]
+}
+
+npm_action("atom_browserify_sandbox") {
+  deps = [ ":atom_js2c_copy" ]
+
+  sandbox_args = [
+    "lib/sandboxed_renderer/init.js",
+    "-r", "./lib/sandboxed_renderer/api/exports/electron.js:electron",
+    "-r", "./lib/sandboxed_renderer/api/exports/fs.js:fs",
+    "-r", "./lib/sandboxed_renderer/api/exports/os.js:os",
+    "-r", "./lib/sandboxed_renderer/api/exports/path.js:path",
+    "-r", "./lib/sandboxed_renderer/api/exports/child_process.js:child_process",
+>>>>>>> .their
   ]
 
   inputs = [
@@ -95,6 +169,7 @@
     "lib/sandboxed_renderer/api/exports/path.js",
     "lib/sandboxed_renderer/api/exports/child_process.js",
   ]
+<<<<<<< .our
   outputs = [
     "$target_gen_dir/js2c/preload_bundle.js",
   ]
@@ -123,6 +198,26 @@
            "-o",
            rebase_path(outputs[0]),
          ]
+=======
+  outputs = [ "$target_gen_dir/js2c/preload_bundle.js" ]
+
+  script = "browserify"
+  args = sandbox_args + [
+    "-o", rebase_path(outputs[0])
+  ]
+}
+
+npm_action("atom_browserify_isolated") {
+  deps = [ ":atom_js2c_copy" ]
+
+  inputs = [ "lib/isolated_renderer/init.js" ]
+  outputs = [ "$target_gen_dir/js2c/isolated_bundle.js" ]
+
+  script = "browserify"
+  args = inputs + [
+    "-o", rebase_path(outputs[0])
+  ]
+>>>>>>> .their
 }
 
 copy("atom_js2c_copy") {
@@ -130,16 +225,26 @@
     "lib/common/asar.js",
     "lib/common/asar_init.js",
   ]
+<<<<<<< .our
   outputs = [
     "$target_gen_dir/js2c/{{source_file_part}}",
   ]
+=======
+  outputs = [ "$target_gen_dir/js2c/{{source_file_part}}" ]
+>>>>>>> .their
 }
 
 action("atom_js2c") {
   deps = [
+<<<<<<< .our
     ":atom_browserify_isolated",
     ":atom_browserify_sandbox",
     ":atom_js2c_copy",
+=======
+    ":atom_js2c_copy",
+    ":atom_browserify_sandbox",
+    ":atom_browserify_isolated",
+>>>>>>> .their
   ]
 
   js2c_sources = filenames_gypi.js2c_sources
@@ -151,6 +256,7 @@
 
   inputs = js2c_sources + browserify_sources
 
+<<<<<<< .our
   outputs = [
     "$target_gen_dir/atom_natives.h",
   ]
@@ -159,10 +265,21 @@
   args = [ rebase_path("//third_party/electron_node") ] +
          rebase_path(outputs, root_build_dir) +
          [ rebase_path("$target_gen_dir/js2c", root_build_dir) ]
+=======
+  outputs = [ "$target_gen_dir/atom_natives.h" ]
+
+  script = "tools/js2c.py"
+  args = [
+    rebase_path("//third_party/electron_node")
+  ] + rebase_path(outputs, root_build_dir) + [
+    rebase_path("$target_gen_dir/js2c", root_build_dir)
+  ]
+>>>>>>> .their
 }
 
 asar("js2asar") {
   sources = filenames_gypi.js_sources
+<<<<<<< .our
   if (enable_desktop_capturer) {
     sources += [
       "lib/browser/desktop-capturer.js",
@@ -172,11 +289,15 @@
   outputs = [
     "$root_out_dir/resources/electron.asar",
   ]
+=======
+  outputs = [ "$root_out_dir/resources/electron.asar" ]
+>>>>>>> .their
   root = "lib"
 }
 
 asar("app2asar") {
   sources = filenames_gypi.default_app_sources
+<<<<<<< .our
   outputs = [
     "$root_out_dir/resources/default_app.asar",
   ]
@@ -187,10 +308,25 @@
   configs += [ "//v8:external_startup_data" ]
   configs += [ "//third_party/electron_node:node_internals" ]
 
+=======
+  outputs = [ "$root_out_dir/resources/default_app.asar" ]
+  root = "default_app"
+}
+
+group("electron") {
+  deps = [ ":electron_lib" ]
+}
+
+static_library("electron_lib") {
+  configs += [
+    "//v8:external_startup_data",
+  ]
+>>>>>>> .their
   public_configs = [
     ":branding",
     ":features",
   ]
+<<<<<<< .our
 
   deps = [
     ":atom_js2c",
@@ -198,15 +334,22 @@
     "native_mate",
     "//base",
     "//base:i18n",
+=======
+  deps = [
+>>>>>>> .their
     "//chrome/common:constants",
     "//components/cdm/renderer",
     "//components/network_session_configurator/common",
     "//components/prefs",
     "//components/printing/common",
     "//components/security_state/content",
+<<<<<<< .our
     "//components/viz/service",
     "//content/public/app:both",
     "//content/public/child",
+=======
+    "//content/public/browser",
+>>>>>>> .their
     "//device/geolocation",
     "//gin",
     "//net:net_resources",
@@ -214,6 +357,7 @@
     "//ppapi/proxy",
     "//ppapi/shared_impl",
     "//printing",
+<<<<<<< .our
     "//services/device/wake_lock/power_save_blocker",  # TODO: this requires a visibility patch to chromium src
     "//skia",
     "//third_party/WebKit/public:blink",
@@ -228,10 +372,64 @@
     "//v8",
   ]
 
+=======
+    "//services/device/wake_lock/power_save_blocker", # TODO: this requires a visibility patch to chromium src
+    "//skia",
+    "//third_party/WebKit/public:blink",
+    "//third_party/boringssl",
+    "//third_party/crashpad/crashpad/client",
+    "//third_party/leveldatabase",
+    "//third_party/libyuv",
+    "//third_party/webrtc/modules/desktop_capture",
+    "//third_party/webrtc/modules/desktop_capture:primitives",
+    "//ui/events:dom_keycode_converter",
+    "//ui/views",
+    "//v8",
+    ":atom_js2c",
+    ":native_mate",
+    "brightray",
+    "build/node",
+  ]
+  if (is_mac) {
+    deps += [
+      "//ui/accelerated_widget_mac",
+      "//base/allocator:features",
+    ]
+  }
+  if (is_linux) {
+    deps += [
+      "//build/config/linux/gtk3",
+      "//chrome/browser/ui/libgtkui",
+      "//device/bluetooth",
+      "//third_party/breakpad:client",
+      "//ui/events/devices/x11",
+      "//ui/events/platform/x11",
+      "//ui/native_theme",
+      "//ui/views/controls/webview",
+      "//ui/wm",
+    ]
+    configs += [ ":gio_unix" ]
+  }
+  defines = [
+    # This is defined in skia/skia_common.gypi.
+    "SK_SUPPORT_LEGACY_GETTOPDEVICE",
+    # Disable warnings for g_settings_list_schemas.
+    "GLIB_DISABLE_DEPRECATION_WARNINGS",
+
+    # Import V8 symbols from shared library (node.dll / libnode.so)
+    "USING_V8_SHARED",
+    "USING_V8_PLATFORM_SHARED",
+    "USING_V8_BASE_SHARED",
+
+    # Enables SkBitmap size 64 operations
+    #"SK_SUPPORT_LEGACY_SAFESIZE64", # doesn't seem to be needed to build?
+  ]
+>>>>>>> .their
   include_dirs = [
     "chromium_src",
     ".",
     "$target_gen_dir",
+<<<<<<< .our
 
     # TODO(nornagon): replace usage of SchemeRegistry by an actually exported
     # API of blink, then delete this include dir.
@@ -240,6 +438,21 @@
 
   defines = []
   libs = []
+=======
+    # TODO(nornagon): replace usage of SchemeRegistry by an actually exported
+    # API of blink, then delete this include dir.
+    "//third_party/WebKit/Source",
+    # NOTE(nornagon): other chromium files use the full path to include
+    # crashpad; this is just here for compatibility between GN and GYP, so that
+    # the #includes can be agnostic about where crashpad is vendored.
+    "//third_party/crashpad",
+  ]
+  if (is_linux) {
+    include_dirs += [
+      "//third_party/breakpad",
+    ]
+  }
+>>>>>>> .their
 
   extra_source_filters = []
   if (!is_linux) {
@@ -249,7 +462,10 @@
       "*_x11.cc",
       "*_gtk.h",
       "*_gtk.cc",
+<<<<<<< .our
       "*\blibrary_loaders/*",
+=======
+>>>>>>> .their
     ]
   }
   if (!is_win) {
@@ -268,6 +484,7 @@
     ]
   }
 
+<<<<<<< .our
   set_sources_assignment_filter(
       sources_assignment_filter + extra_source_filters)
   sources = filenames_gypi.lib_sources
@@ -349,6 +566,12 @@
     deps += [ "//pdf" ]
   }
 
+=======
+  set_sources_assignment_filter(sources_assignment_filter + extra_source_filters)
+  sources = filenames_gypi.lib_sources
+  set_sources_assignment_filter(sources_assignment_filter)
+
+>>>>>>> .their
   if (enable_run_as_node) {
     sources += [
       "atom/app/node_main.cc",
@@ -371,18 +594,27 @@
       "atom/browser/osr/osr_web_contents_view_mac.mm",
     ]
     deps += [
+<<<<<<< .our
       "//components/viz/service",
       "//ui/compositor",
+=======
+      "//ui/compositor",
+      "//components/viz/service",
+>>>>>>> .their
     ]
   }
 
   if (enable_desktop_capturer) {
+<<<<<<< .our
     deps += [ "//third_party/webrtc/modules/desktop_capture" ]
+=======
+>>>>>>> .their
     sources += [
       "atom/browser/api/atom_api_desktop_capturer.cc",
       "atom/browser/api/atom_api_desktop_capturer.h",
     ]
   }
+<<<<<<< .our
 }
 
 electron_paks("packed_resources") {
@@ -391,32 +623,69 @@
     copy_data_to_bundle = true
   } else {
     output_dir = root_out_dir
+=======
+
+  if (is_mac) {
+    libs = [
+      "Squirrel.framework",
+      "ReactiveCocoa.framework",
+      "Mantle.framework",
+    ]
+    cflags_objcc = [
+      "-F", rebase_path("external_binaries", root_build_dir)
+    ]
+    if (true) { # !is_mas_build
+      # ReactiveCocoa which is used by Squirrel requires using __weak.
+      cflags_objcc += [ "-fobjc-weak" ]
+    }
+  }
+  if (is_linux) {
+    sources += filenames_gypi.lib_sources_linux
+    sources += filenames_gypi.lib_sources_nss
+>>>>>>> .their
   }
 }
 
 if (is_mac) {
   electron_framework_name = electron_product_name + " Framework"
   electron_helper_name = electron_product_name + " Helper"
+<<<<<<< .our
   electron_login_helper_name = electron_product_name + " Login Helper"
+=======
+>>>>>>> .their
   electron_framework_version = "A"
   electron_mac_bundle_id = "com.$electron_company_abbr.$electron_project_name"
 
   mac_xib_bundle_data("electron_xibs") {
+<<<<<<< .our
     sources = [
       "atom/common/resources/mac/MainMenu.xib",
     ]
+=======
+    sources = [ "atom/common/resources/mac/MainMenu.xib" ]
+>>>>>>> .their
   }
 
   bundle_data("electron_framework_resources") {
     public_deps = [
+<<<<<<< .our
       ":packed_resources",
     ]
     sources = []
+=======
+      "//content/shell:pak",
+      ":electron_locales",
+    ]
+    sources = [
+      "$root_out_dir/content_shell.pak",
+    ]
+>>>>>>> .their
     if (icu_use_data_file) {
       sources += [ "$root_out_dir/icudtl.dat" ]
       public_deps += [ "//third_party/icu:icudata" ]
     }
     if (v8_use_external_startup_data) {
+<<<<<<< .our
       sources += [ "$root_out_dir/natives_blob.bin" ]
       public_deps += [ "//v8" ]
       if (use_v8_context_snapshot) {
@@ -425,12 +694,20 @@
       } else {
         sources += [ "$root_out_dir/snapshot_blob.bin" ]
       }
+=======
+      sources += [
+        "$root_out_dir/natives_blob.bin",
+        "$root_out_dir/snapshot_blob.bin",
+      ]
+      public_deps += [ "//v8" ]
+>>>>>>> .their
     }
     outputs = [
       "{{bundle_resources_dir}}/{{source_file_part}}",
     ]
   }
 
+<<<<<<< .our
   if (!is_component_build) {
     bundle_data("electron_framework_libraries") {
       sources = []
@@ -453,6 +730,19 @@
   }
 
   bundle_data("electron_crashpad_helper") {
+=======
+  bundle_data("electron_framework_libraries") {
+    public_deps = [ "build/node" ]
+    sources = [
+      "$root_out_dir/libnode.dylib"
+    ]
+    outputs = [
+      "{{bundle_contents_dir}}/Libraries/{{source_file_part}}"
+    ]
+  }
+
+  bundle_data("electron_framework_helpers") {
+>>>>>>> .their
     sources = [
       "$root_out_dir/crashpad_handler",
     ]
@@ -470,6 +760,7 @@
     output_name = electron_framework_name
     framework_version = electron_framework_version
     framework_contents = [ "Resources" ]
+<<<<<<< .our
     public_deps = [
       ":electron_lib",
     ]
@@ -485,6 +776,25 @@
     extra_substitutions = [ "ATOM_BUNDLE_ID=$electron_mac_bundle_id.framework" ]
 
     include_dirs = [ "." ]
+=======
+    public_deps = [ ":electron_lib" ]
+    deps = [
+      "//base",
+      "//base:i18n",
+      ":electron_framework_helpers",
+      ":electron_framework_libraries",
+      ":electron_framework_resources",
+      ":electron_xibs",
+    ]
+    info_plist = "atom/common/resources/mac/Info.plist"
+    extra_substitutions = [
+      "ATOM_BUNDLE_ID=$electron_mac_bundle_id.framework",
+    ]
+
+    include_dirs = [
+      ".",
+    ]
+>>>>>>> .their
     sources = filenames_gypi.framework_sources
 
     libs = [
@@ -497,8 +807,12 @@
       "StoreKit.framework",
     ]
     ldflags = [
+<<<<<<< .our
       "-F",
       rebase_path("external_binaries", root_build_dir),
+=======
+      "-F", rebase_path("external_binaries", root_build_dir),
+>>>>>>> .their
       "-Wl,-install_name,@rpath/$output_name.framework/$output_name",
       "-rpath",
       "@loader_path/Libraries",
@@ -506,13 +820,18 @@
     if (is_component_build) {
       ldflags += [
         "-rpath",
+<<<<<<< .our
         "@executable_path/../../../../../..",
+=======
+        "@executable_path/../../../../../.."
+>>>>>>> .their
       ]
     }
   }
 
   mac_app_bundle("electron_helper_app") {
     output_name = electron_helper_name
+<<<<<<< .our
     deps = [
       ":electron_framework+link",
     ]
@@ -520,6 +839,15 @@
     include_dirs = [ "." ]
     info_plist = "atom/renderer/resources/mac/Info.plist"
     extra_substitutions = [ "ATOM_BUNDLE_ID=$electron_mac_bundle_id.helper" ]
+=======
+    deps = [ ":electron_framework+link" ]
+    sources = filenames_gypi.app_sources
+    include_dirs = [ "." ]
+    info_plist = "atom/renderer/resources/mac/Info.plist"
+    extra_substitutions = [
+      "ATOM_BUNDLE_ID=$electron_mac_bundle_id.helper",
+    ]
+>>>>>>> .their
     ldflags = [
       "-rpath",
       "@executable_path/../../..",
@@ -530,6 +858,7 @@
     sources = [
       "$root_out_dir/$electron_framework_name.framework",
       "$root_out_dir/$electron_helper_name.app",
+<<<<<<< .our
     ]
     if (!is_mas_build) {
       sources += [
@@ -538,6 +867,12 @@
         "external_binaries/Squirrel.framework",
       ]
     }
+=======
+      "external_binaries/Squirrel.framework",
+      "external_binaries/ReactiveCocoa.framework",
+      "external_binaries/Mantle.framework",
+    ]
+>>>>>>> .their
     outputs = [
       "{{bundle_contents_dir}}/Frameworks/{{source_file_part}}",
     ]
@@ -547,6 +882,7 @@
     ]
   }
 
+<<<<<<< .our
   mac_app_bundle("electron_login_helper") {
     output_name = electron_login_helper_name
     sources = filenames_gypi.login_helper_sources
@@ -581,6 +917,44 @@
     outputs = [
       "{{bundle_resources_dir}}/{{source_file_part}}",
     ]
+=======
+  bundle_data("electron_app_resources") {
+    public_deps = [
+      ":js2asar",
+      ":app2asar",
+    ]
+    sources = [
+      "$root_out_dir/resources/electron.asar",
+      "$root_out_dir/resources/default_app.asar",
+    ]
+    outputs = [
+      "{{bundle_resources_dir}}/{{source_file_part}}"
+    ]
+  }
+
+  repack_locales("electron_locales") {
+    source_patterns = [
+      "${root_gen_dir}/content/app/strings/content_strings_",
+    ]
+    deps = [
+      "//content/app/strings",
+    ]
+
+    input_locales = locales
+
+    if (is_mac) {
+      output_locales = locales_as_mac_outputs
+    } else {
+      output_locales = locales
+    }
+
+    if (is_mac) {
+      output_dir = "$root_gen_dir/repack"
+      copy_data_to_bundle = true
+    } else {
+      output_dir = root_out_dir
+    }
+>>>>>>> .their
   }
 
   mac_app_bundle("electron_app") {
@@ -591,16 +965,24 @@
       ":electron_app_framework_bundle_data",
       ":electron_app_resources",
     ]
+<<<<<<< .our
     if (is_mas_build) {
       deps += [ ":electron_login_helper_app" ]
     }
     info_plist = "atom/browser/resources/mac/Info.plist"
     extra_substitutions = [ "ATOM_BUNDLE_ID=$electron_mac_bundle_id" ]
+=======
+    info_plist = "atom/browser/resources/mac/Info.plist"
+    extra_substitutions = [
+      "ATOM_BUNDLE_ID=$electron_mac_bundle_id",
+    ]
+>>>>>>> .their
     ldflags = [
       "-rpath",
       "@executable_path/../Frameworks",
     ]
   }
+<<<<<<< .our
 } else {
   windows_manifest("electron_app_manifest") {
     sources = [
@@ -610,12 +992,18 @@
     ]
   }
 
+=======
+}
+
+if (is_linux) {
+>>>>>>> .their
   executable("electron_app") {
     output_name = electron_project_name
     sources = filenames_gypi.app_sources
     include_dirs = [ "." ]
     deps = [
       ":app2asar",
+<<<<<<< .our
       ":electron_app_manifest",
       ":electron_lib",
       ":js2asar",
@@ -814,3 +1202,16 @@
 group("electron") {
   deps = [ ":electron_app" ]
 }
+=======
+      ":electron_lib",
+      ":js2asar",
+      "//build/config:exe_and_shlib_deps",
+      "//chrome:packed_resources",
+      "//content/shell:copy_shell_resources",
+      "//content/shell:pak",
+      "//third_party/WebKit/public:image_resources",
+      "//ui/strings",
+    ]
+  }
+}
+>>>>>>> .their
added in both
  our    100644 b3b9d650b27274f4f98f7408319b1e6b35f63abf DEPS
  their  100644 5c1f2337c5a6f3ec82c5b1daabf7e0b608b7afba DEPS
@@ -1,16 +1,27 @@
 vars = {
   'chromium_version':
+<<<<<<< .our
     '66.0.3359.181',
   'libchromiumcontent_revision':
     'c85470a1c379b1c4bedb372c146521bc4be9b75d',
   'node_version':
     'ece0a06ac8147efb5b5af431c21f312f1884616e',
+=======
+    '63.0.3239.150',
+  'libchromiumcontent_revision':
+    '92dc0accfae5cd133fa2a6758ae6b3ff4ff7e569',
+  'node_version':
+    'v9.7.0-33-g538a5023af',
+  'native_mate_revision':
+    '4cd7d113915de0cc08e9a218be35bff9c7361906',
+>>>>>>> .their
 
   'chromium_git':
     'https://chromium.googlesource.com',
 
   'electron_git':
     'https://github.com/electron',
+<<<<<<< .our
 
   'checkout_nacl':
     False,
@@ -18,6 +29,8 @@
     True,
   'checkout_oculus_sdk':
     False,
+=======
+>>>>>>> .their
 }
 
 deps = {
@@ -27,15 +40,24 @@
     (Var("electron_git")) + '/libchromiumcontent.git@' + (Var("libchromiumcontent_revision")),
   'src/third_party/electron_node':
     (Var("electron_git")) + '/node.git@' + (Var("node_version")),
+<<<<<<< .our
+=======
+  'src/third_party/native_mate':
+    (Var("electron_git")) + '/native-mate.git@' + (Var("native_mate_revision")),
+>>>>>>> .their
 }
 
 hooks = [
   {
     'action': [
+<<<<<<< .our
       'python',
       'src/libchromiumcontent/script/apply-patches',
       '--project-root=.',
       '--commit'
+=======
+      'src/libchromiumcontent/script/apply-patches'
+>>>>>>> .their
     ],
     'pattern':
       'src/libchromiumcontent',
@@ -44,7 +66,10 @@
   },
   {
     'action': [
+<<<<<<< .our
       'python',
+=======
+>>>>>>> .their
       'src/electron/script/update-external-binaries.py'
     ],
     'pattern':
@@ -54,9 +79,26 @@
   },
   {
     'action': [
+<<<<<<< .our
       'python',
       '-c',
       'import os; os.chdir("src"); os.chdir("electron"); os.system("npm install")',
+=======
+      'bash',
+      '-c',
+      # NOTE(nornagon): this ridiculous {{}} stuff is because these strings get
+      # variable-substituted twice by gclient.
+      'echo -e "#\\n{{{{\'variables\':{{{{}}}}}}}}" > src/third_party/electron_node/config.gypi',
+    ],
+    'pattern': 'src/third_party/electron_node',
+    'name': 'touch_node_config_gypi'
+  },
+  {
+    'action': [
+      'bash',
+      '-c',
+      'cd src/electron; npm install',
+>>>>>>> .their
     ],
     'pattern': 'src/electron/package.json',
     'name': 'electron_npm_deps'
@@ -67,6 +109,7 @@
   'src',
   'src/libchromiumcontent',
 ]
+<<<<<<< .our
 
 gclient_gn_args = [
   'checkout_libaom',
@@ -74,3 +117,5 @@
   'checkout_oculus_sdk'
 ]
 gclient_gn_args_file =  'src/build/config/gclient_args.gni'
+=======
+>>>>>>> .their
added in remote
  their  100644 d0281e481f6a6b2f0ffe25aeb309c737e3a8d228 appveyor-override.yml
@@ -0,0 +1,71 @@
+build_cloud: electron-16
+image: electron-16-vs2017-15.4.5
+build_script:
+- ps: >-
+    echo "Build worker image $env:APPVEYOR_BUILD_WORKER_IMAGE"
+
+    &"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe"
+
+    if(($env:APPVEYOR_PULL_REQUEST_HEAD_REPO_NAME -split "/")[0] -eq ($env:APPVEYOR_REPO_NAME -split "/")[0]) {
+      Write-warning "Skipping PR build for branch"; Exit-AppveyorBuild
+    } else {
+      Add-Path "$env:ProgramFiles (x86)\Windows Kits\10\Debuggers\x64"
+      $env:path = "$env:ProgramFiles (x86)\Windows Kits\10\Debuggers\x64;$env:path"
+      if($env:APPVEYOR_SCHEDULED_BUILD -eq 'True')  {
+        $env:RUN_RELEASE_BUILD = "1"
+      }
+      $Message = (git log --format=%B -n 1 HEAD) | Out-String
+      if ((Test-Path Env:\RUN_RELEASE_BUILD)) {
+        $env:ELECTRON_RELEASE = '1'
+        Write-Output "release build triggered from api"
+      }
+      if ((Test-Path Env:\ELECTRON_RELEASE)) {
+        Write-Output "Running release build"
+        python script\bootstrap.py --target_arch=$env:TARGET_ARCH
+        python script\build.py -c R
+        python script\create-dist.py
+      } else {
+        Write-Output "Running debug build"
+        python script\bootstrap.py --target_arch=$env:TARGET_ARCH --dev
+        python script\build.py -c D
+      }
+      if ($? -ne 'True') {
+        throw "Build failed with exit code $?"
+      } else {
+        "Build succeeded."
+      }
+      Push-AppveyorArtifact out
+    }
+test_script:
+- ps: >-
+    if (Test-Path Env:\ELECTRON_RELEASE) {
+      Write-Output "Skipping tests for release build"
+    } else {
+      Write-Output "Running tests for debug build"
+      python script\test.py --ci --rebuild_native_modules
+      if ($LASTEXITCODE -ne '0') {
+        throw "Tests failed with exit code $LASTEXITCODE"
+      } else {
+        Write-Output "Tests succeeded."
+      }
+      python script\verify-ffmpeg.py
+      if ($LASTEXITCODE -ne '0') {
+        throw "Verify ffmpeg failed with exit code $LASTEXITCODE"
+      } else {
+        "Verify ffmpeg succeeded."
+      }
+    }
+artifacts:
+- path: test-results.xml
+  name: test-results.xml
+deploy_script:
+- ps: >-
+    if (Test-Path Env:\ELECTRON_RELEASE) {
+      if (Test-Path Env:\RUN_RELEASE_BUILD) {
+        Write-Output "Uploading Electron release distribution to s3"
+        & python script\upload.py --upload_to_s3
+      } else {
+        Write-Output "Uploading Electron release distribution to github releases"
+        & python script\upload.py
+      }
+    }
added in both
  our    100644 fc77100d9acb58221c35f364c4db7866a44d347d atom/app/atom_main.cc
  their  100644 d6f3e0a1cfa59ce910557e8b04f001db9f9ad8aa atom/app/atom_main.cc
@@ -71,7 +71,11 @@
 
 #ifdef _DEBUG
   // Don't display assert dialog boxes in CI test runs
+<<<<<<< .our
   static const char* kCI = "ELECTRON_CI";
+=======
+  static const auto kCI = "ELECTRON_CI";
+>>>>>>> .their
   bool is_ci = IsEnvSet(kCI);
   if (!is_ci) {
     for (int i = 0; i < arguments.argc; ++i) {
added in both
  our    100644 b3b5b8f2a8f24b8928f69a286c80e8a3b8464366 atom/app/atom_main_delegate.cc
  their  100644 40be88a55abf6b054aad50b4c20c270588ac69a9 atom/app/atom_main_delegate.cc
@@ -131,6 +131,11 @@
   brightray::MainDelegate::PreSandboxStartup();
 
   auto* command_line = base::CommandLine::ForCurrentProcess();
+<<<<<<< .our
+=======
+  std::string process_type =
+      command_line->GetSwitchValueASCII(::switches::kProcessType);
+>>>>>>> .their
 
   // Only append arguments for browser process.
   if (!IsBrowserProcess(command_line))
added in both
  our    100644 089a2b63d1bae3afebea925582a3aac81ddeaa4f atom/browser/api/atom_api_app.cc
  their  100644 b3c1bb1522bddb4cc429696e65d96ba592cab332 atom/browser/api/atom_api_app.cc
@@ -990,8 +990,12 @@
                             const net::CompletionCallback& callback) {
   auto browser_context = AtomBrowserContext::From("", false);
   if (!certificate_manager_model_) {
+<<<<<<< .our
     auto copy = base::DictionaryValue::From(
         base::Value::ToUniquePtrValue(options.Clone()));
+=======
+    std::unique_ptr<base::DictionaryValue> copy = options.CreateDeepCopy();
+>>>>>>> .their
     CertificateManagerModel::Create(
         browser_context.get(),
         base::Bind(&App::OnCertificateManagerModelCreated,
@@ -1115,10 +1119,13 @@
     mate::Dictionary memory_dict = mate::Dictionary::CreateEmpty(isolate);
     mate::Dictionary cpu_dict = mate::Dictionary::CreateEmpty(isolate);
 
+<<<<<<< .our
     pid_dict.SetHidden("simple", true);
     memory_dict.SetHidden("simple", true);
     cpu_dict.SetHidden("simple", true);
 
+=======
+>>>>>>> .their
     memory_dict.Set(
         "workingSetSize",
         static_cast<double>(
@@ -1224,7 +1231,10 @@
       .SetMethod("getName", base::Bind(&Browser::GetName, browser))
       .SetMethod("setName", base::Bind(&Browser::SetName, browser))
       .SetMethod("isReady", base::Bind(&Browser::is_ready, browser))
+<<<<<<< .our
       .SetMethod("whenReady", base::Bind(&Browser::WhenReady, browser))
+=======
+>>>>>>> .their
       .SetMethod("addRecentDocument",
                  base::Bind(&Browser::AddRecentDocument, browser))
       .SetMethod("clearRecentDocuments",
added in both
  our    100644 ee0ad42c05fe33be17146b79cbe3422953516621 atom/browser/api/atom_api_app.h
  their  100644 e9032073f6a731a55cbd5e84c0d21f51020249dc atom/browser/api/atom_api_app.h
@@ -15,7 +15,10 @@
 #include "atom/browser/browser.h"
 #include "atom/browser/browser_observer.h"
 #include "atom/common/native_mate_converters/callback.h"
+<<<<<<< .our
 #include "atom/common/promise_util.h"
+=======
+>>>>>>> .their
 #include "base/process/process_iterator.h"
 #include "base/task/cancelable_task_tracker.h"
 #include "chrome/browser/icon_manager.h"
added in both
  our    100644 d0ae6f4ea78407c70e4cce6ff1181ce01e395133 atom/browser/api/atom_api_browser_window.cc
  their  100644 1b0ed8d2950d6a2a24887bed802140372e9acc73 atom/browser/api/atom_api_browser_window.cc
@@ -55,7 +55,11 @@
     base::DictionaryValue web_preferences_dict;
     if (mate::ConvertFromV8(isolate, web_preferences.GetHandle(),
                             &web_preferences_dict)) {
+<<<<<<< .our
       existing_preferences->Clear();
+=======
+      existing_preferences->dict()->Clear();
+>>>>>>> .their
       existing_preferences->Merge(web_preferences_dict);
     }
   } else {
added in both
  our    100644 daccf443927abdf444845613b6e2916d167f96f3 atom/browser/api/atom_api_cookies.cc
  their  100644 2f226d9210db6ed80f6960b08cfe1dc12b2f3180 atom/browser/api/atom_api_cookies.cc
@@ -264,6 +264,7 @@
 
 void Cookies::Get(const base::DictionaryValue& filter,
                   const GetCallback& callback) {
+<<<<<<< .our
   auto copy = base::DictionaryValue::From(
       base::Value::ToUniquePtrValue(filter.Clone()));
   auto* getter = browser_context_->GetRequestContext();
@@ -271,6 +272,14 @@
       BrowserThread::IO, FROM_HERE,
       base::BindOnce(GetCookiesOnIO, base::RetainedRef(getter), std::move(copy),
                      callback));
+=======
+  std::unique_ptr<base::DictionaryValue> copied(filter.CreateDeepCopy());
+  auto* getter = browser_context_->GetRequestContext();
+  content::BrowserThread::PostTask(
+      BrowserThread::IO, FROM_HERE,
+      base::BindOnce(GetCookiesOnIO, base::RetainedRef(getter),
+                     std::move(copied), callback));
+>>>>>>> .their
 }
 
 void Cookies::Remove(const GURL& url,
@@ -285,6 +294,7 @@
 
 void Cookies::Set(const base::DictionaryValue& details,
                   const SetCallback& callback) {
+<<<<<<< .our
   auto copy = base::DictionaryValue::From(
       base::Value::ToUniquePtrValue(details.Clone()));
   auto* getter = browser_context_->GetRequestContext();
@@ -292,6 +302,14 @@
       BrowserThread::IO, FROM_HERE,
       base::BindOnce(SetCookieOnIO, base::RetainedRef(getter), std::move(copy),
                      callback));
+=======
+  std::unique_ptr<base::DictionaryValue> copied(details.CreateDeepCopy());
+  auto* getter = browser_context_->GetRequestContext();
+  content::BrowserThread::PostTask(
+      BrowserThread::IO, FROM_HERE,
+      base::BindOnce(SetCookieOnIO, base::RetainedRef(getter),
+                     std::move(copied), callback));
+>>>>>>> .their
 }
 
 void Cookies::FlushStore(const base::Closure& callback) {
added in both
  our    100644 e0ef26a9fc46818056581a69169395e741ce2efe atom/browser/api/atom_api_system_preferences.h
  their  100644 bfd64e80159dc46806360f14fd609ba24ccc09cb atom/browser/api/atom_api_system_preferences.h
@@ -50,6 +50,14 @@
 #if defined(OS_WIN)
   bool IsAeroGlassEnabled();
 
+<<<<<<< .our
+=======
+  typedef HRESULT(STDAPICALLTYPE* DwmGetColorizationColor)(DWORD*, BOOL*);
+  DwmGetColorizationColor dwmGetColorizationColor =
+      (DwmGetColorizationColor)GetProcAddress(LoadLibraryW(L"dwmapi.dll"),
+                                              "DwmGetColorizationColor");
+
+>>>>>>> .their
   std::string GetAccentColor();
   std::string GetColor(const std::string& color, mate::Arguments* args);
 
added in both
  our    100644 0a24d1abf45fe7ff244386ea238b0e7b03b2df00 atom/browser/api/atom_api_system_preferences_win.cc
  their  100644 b3fd74d59d9bcb53a23712f4a48206af191d45a6 atom/browser/api/atom_api_system_preferences_win.cc
@@ -2,7 +2,10 @@
 // Use of this source code is governed by the MIT license that can be
 // found in the LICENSE file.
 
+<<<<<<< .our
 #include <dwmapi.h>
+=======
+>>>>>>> .their
 #include <iomanip>
 
 #include "atom/browser/api/atom_api_system_preferences.h"
@@ -39,7 +42,11 @@
   DWORD color = 0;
   BOOL opaque = FALSE;
 
+<<<<<<< .our
   if (FAILED(DwmGetColorizationColor(&color, &opaque))) {
+=======
+  if (FAILED(dwmGetColorizationColor(&color, &opaque))) {
+>>>>>>> .their
     return "";
   }
 
added in both
  our    100644 c8db6b0bb468a2a722d8d830a9b2cb4bf2ce116b atom/browser/api/atom_api_top_level_window.cc
  their  100644 f1f61c66752baf0b4bc5a6e94a639142b276e670 atom/browser/api/atom_api_top_level_window.cc
@@ -194,6 +194,7 @@
   Emit("restore");
 }
 
+<<<<<<< .our
 void TopLevelWindow::OnWindowWillResize(const gfx::Rect& new_bounds,
                                         bool* prevent_default) {
   if (Emit("will-resize", new_bounds)) {
@@ -201,6 +202,8 @@
   }
 }
 
+=======
+>>>>>>> .their
 void TopLevelWindow::OnWindowResize() {
   Emit("resize");
 }
@@ -578,10 +581,13 @@
   return window_->GetOpacity();
 }
 
+<<<<<<< .our
 void TopLevelWindow::SetShape(const std::vector<gfx::Rect>& rects) {
   window_->widget()->SetShape(std::make_unique<std::vector<gfx::Rect>>(rects));
 }
 
+=======
+>>>>>>> .their
 void TopLevelWindow::SetRepresentedFilename(const std::string& filename) {
   window_->SetRepresentedFilename(filename);
 }
@@ -749,6 +755,7 @@
     args->ThrowError("AddTabbedWindow cannot be called by a window on itself.");
 }
 
+<<<<<<< .our
 void TopLevelWindow::SetWindowButtonVisibility(bool visible,
                                                mate::Arguments* args) {
   if (!window_->SetWindowButtonVisibility(visible)) {
@@ -756,6 +763,8 @@
   }
 }
 
+=======
+>>>>>>> .their
 void TopLevelWindow::SetAutoHideMenuBar(bool auto_hide) {
   window_->SetAutoHideMenuBar(auto_hide);
 }
@@ -828,7 +837,11 @@
     args->ThrowError();
     return false;
   }
+<<<<<<< .our
   auto* window = static_cast<NativeWindowViews*>(window_.get());
+=======
+  auto window = static_cast<NativeWindowViews*>(window_.get());
+>>>>>>> .their
   return window->taskbar_host().SetThumbarButtons(
       window_->GetAcceleratedWidget(), buttons);
 #else
@@ -1011,7 +1024,10 @@
       .SetMethod("hasShadow", &TopLevelWindow::HasShadow)
       .SetMethod("setOpacity", &TopLevelWindow::SetOpacity)
       .SetMethod("getOpacity", &TopLevelWindow::GetOpacity)
+<<<<<<< .our
       .SetMethod("setShape", &TopLevelWindow::SetShape)
+=======
+>>>>>>> .their
       .SetMethod("setRepresentedFilename",
                  &TopLevelWindow::SetRepresentedFilename)
       .SetMethod("getRepresentedFilename",
@@ -1049,8 +1065,11 @@
       .SetMethod("moveTabToNewWindow", &TopLevelWindow::MoveTabToNewWindow)
       .SetMethod("toggleTabBar", &TopLevelWindow::ToggleTabBar)
       .SetMethod("addTabbedWindow", &TopLevelWindow::AddTabbedWindow)
+<<<<<<< .our
       .SetMethod("setWindowButtonVisibility",
                  &TopLevelWindow::SetWindowButtonVisibility)
+=======
+>>>>>>> .their
 #endif
       .SetMethod("setAutoHideMenuBar", &TopLevelWindow::SetAutoHideMenuBar)
       .SetMethod("isMenuBarAutoHide", &TopLevelWindow::IsMenuBarAutoHide)
added in both
  our    100644 ac4c7670a544abc25029314122ba6124a81cc81a atom/browser/api/atom_api_top_level_window.h
  their  100644 5a76fd229c6b1cd1737199c5a502bb069e81dd64 atom/browser/api/atom_api_top_level_window.h
@@ -60,8 +60,11 @@
   void OnWindowUnmaximize() override;
   void OnWindowMinimize() override;
   void OnWindowRestore() override;
+<<<<<<< .our
   void OnWindowWillResize(const gfx::Rect& new_bounds,
                           bool* prevent_default) override;
+=======
+>>>>>>> .their
   void OnWindowResize() override;
   void OnWindowMove() override;
   void OnWindowMoved() override;
@@ -148,7 +151,10 @@
   bool HasShadow();
   void SetOpacity(const double opacity);
   double GetOpacity();
+<<<<<<< .our
   void SetShape(const std::vector<gfx::Rect>& rects);
+=======
+>>>>>>> .their
   void SetRepresentedFilename(const std::string& filename);
   std::string GetRepresentedFilename();
   void SetDocumentEdited(bool edited);
@@ -176,7 +182,10 @@
   void MoveTabToNewWindow();
   void ToggleTabBar();
   void AddTabbedWindow(NativeWindow* window, mate::Arguments* args);
+<<<<<<< .our
   void SetWindowButtonVisibility(bool visible, mate::Arguments* args);
+=======
+>>>>>>> .their
   void SetAutoHideMenuBar(bool auto_hide);
   bool IsMenuBarAutoHide();
   void SetMenuBarVisibility(bool visible);
added in both
  our    100644 9f18d97d2656fbc5dc62b7bcea05a8acab63e847 atom/browser/api/atom_api_url_request.cc
  their  100644 51c7969e31f44c9c08dbc5aa7ccc8b1e60fff863 atom/browser/api/atom_api_url_request.cc
@@ -125,6 +125,7 @@
   return IsFlagSet(ResponseStateFlags::kFailed);
 }
 
+<<<<<<< .our
 mate::Dictionary URLRequest::GetUploadProgress(v8::Isolate* isolate) {
   mate::Dictionary progress = mate::Dictionary::CreateEmpty(isolate);
 
@@ -137,6 +138,8 @@
   return progress;
 }
 
+=======
+>>>>>>> .their
 URLRequest::URLRequest(v8::Isolate* isolate, v8::Local<v8::Object> wrapper) {
   InitWith(isolate, wrapper);
 }
@@ -195,7 +198,10 @@
       .SetMethod("setChunkedUpload", &URLRequest::SetChunkedUpload)
       .SetMethod("followRedirect", &URLRequest::FollowRedirect)
       .SetMethod("_setLoadFlags", &URLRequest::SetLoadFlags)
+<<<<<<< .our
       .SetMethod("getUploadProgress", &URLRequest::GetUploadProgress)
+=======
+>>>>>>> .their
       .SetProperty("notStarted", &URLRequest::NotStarted)
       .SetProperty("finished", &URLRequest::Finished)
       // Response APi
added in both
  our    100644 4a5a2b65160bf0590c9e890e52d0531b799b583a atom/browser/api/atom_api_url_request.h
  their  100644 3b5e667d7590b9398b6d41632f0f016f1a6c27d5 atom/browser/api/atom_api_url_request.h
@@ -112,7 +112,10 @@
   void OnResponseData(scoped_refptr<const net::IOBufferWithSize> data);
   void OnResponseCompleted();
   void OnError(const std::string& error, bool isRequestError);
+<<<<<<< .our
   mate::Dictionary GetUploadProgress(v8::Isolate* isolate);
+=======
+>>>>>>> .their
 
  protected:
   explicit URLRequest(v8::Isolate* isolate, v8::Local<v8::Object> wrapper);
added in both
  our    100644 20a1ac2e672f08ffea528b6e094ba530ff8083d1 atom/browser/api/atom_api_web_contents.cc
  their  100644 ce8fbeb848db9787e712f20264e0fa52f9b20405 atom/browser/api/atom_api_web_contents.cc
@@ -1075,12 +1075,30 @@
        details.is_same_document, details.did_replace_entry);
 }
 
+<<<<<<< .our
+=======
+int64_t WebContents::GetIDForContents(content::WebContents* web_contents) {
+  int64_t process_id = web_contents->GetMainFrame()->GetProcess()->GetID();
+  int64_t routing_id = web_contents->GetMainFrame()->GetRoutingID();
+  int64_t rv = (process_id << 32) + routing_id;
+  return rv;
+}
+
+int64_t WebContents::GetID() const {
+  return WebContents::GetIDForContents(web_contents());
+}
+
+>>>>>>> .their
 int WebContents::GetProcessID() const {
   return web_contents()->GetMainFrame()->GetProcess()->GetID();
 }
 
 base::ProcessId WebContents::GetOSProcessID() const {
+<<<<<<< .our
   base::ProcessHandle process_handle =
+=======
+  auto process_handle =
+>>>>>>> .their
       web_contents()->GetMainFrame()->GetProcess()->GetHandle();
   return base::GetProcId(process_handle);
 }
@@ -1090,7 +1108,11 @@
 }
 
 bool WebContents::Equal(const WebContents* web_contents) const {
+<<<<<<< .our
   return ID() == web_contents->ID();
+=======
+  return GetID() == web_contents->GetID();
+>>>>>>> .their
 }
 
 void WebContents::LoadURL(const GURL& url, const mate::Dictionary& options) {
@@ -1142,8 +1164,13 @@
   if (view) {
     auto* web_preferences = WebContentsPreferences::From(web_contents());
     std::string color_name;
+<<<<<<< .our
     if (web_preferences->GetPreference(options::kBackgroundColor,
                                        &color_name)) {
+=======
+    if (web_preferences->dict()->GetString(options::kBackgroundColor,
+                                           &color_name)) {
+>>>>>>> .their
       view->SetBackgroundColor(ParseHexColor(color_name));
     } else {
       view->SetBackgroundColor(SK_ColorTRANSPARENT);
@@ -1391,10 +1418,13 @@
   return web_contents()->IsAudioMuted();
 }
 
+<<<<<<< .our
 bool WebContents::IsCurrentlyAudible() {
   return web_contents()->IsCurrentlyAudible();
 }
 
+=======
+>>>>>>> .their
 void WebContents::Print(mate::Arguments* args) {
   PrintSettings settings = {false, false, base::string16()};
   if (args->Length() >= 1 && !args->GetNext(&settings)) {
@@ -1823,7 +1853,11 @@
   zoom_controller_->SetZoomLevel(level);
 }
 
+<<<<<<< .our
 double WebContents::GetZoomLevel() const {
+=======
+double WebContents::GetZoomLevel() {
+>>>>>>> .their
   return zoom_controller_->GetZoomLevel();
 }
 
@@ -1832,7 +1866,11 @@
   SetZoomLevel(level);
 }
 
+<<<<<<< .our
 double WebContents::GetZoomFactor() const {
+=======
+double WebContents::GetZoomFactor() {
+>>>>>>> .their
   auto level = GetZoomLevel();
   return content::ZoomLevelToZoomFactor(level);
 }
@@ -1863,6 +1901,7 @@
   return v8::Null(isolate);
 }
 
+<<<<<<< .our
 v8::Local<v8::Value> WebContents::GetWebPreferences(
     v8::Isolate* isolate) const {
   auto* web_preferences = WebContentsPreferences::From(web_contents());
@@ -1880,6 +1919,24 @@
 }
 
 v8::Local<v8::Value> WebContents::GetOwnerBrowserWindow() const {
+=======
+v8::Local<v8::Value> WebContents::GetWebPreferences(v8::Isolate* isolate) {
+  auto* web_preferences = WebContentsPreferences::From(web_contents());
+  if (!web_preferences)
+    return v8::Null(isolate);
+  return mate::ConvertToV8(isolate, *web_preferences->dict());
+}
+
+v8::Local<v8::Value> WebContents::GetLastWebPreferences(v8::Isolate* isolate) {
+  WebContentsPreferences* web_preferences =
+      WebContentsPreferences::FromWebContents(web_contents());
+  if (!web_preferences)
+    return v8::Null(isolate);
+  return mate::ConvertToV8(isolate, *web_preferences->last_dict());
+}
+
+v8::Local<v8::Value> WebContents::GetOwnerBrowserWindow() {
+>>>>>>> .their
   if (owner_window())
     return BrowserWindow::From(isolate(), owner_window());
   else
@@ -1961,6 +2018,10 @@
   prototype->SetClassName(mate::StringToV8(isolate, "WebContents"));
   mate::ObjectTemplateBuilder(isolate, prototype->PrototypeTemplate())
       .MakeDestroyable()
+<<<<<<< .our
+=======
+      .SetMethod("getId", &WebContents::GetID)
+>>>>>>> .their
       .SetMethod("getProcessId", &WebContents::GetProcessID)
       .SetMethod("getOSProcessId", &WebContents::GetOSProcessID)
       .SetMethod("equal", &WebContents::Equal)
@@ -1990,7 +2051,10 @@
       .SetMethod("setIgnoreMenuShortcuts", &WebContents::SetIgnoreMenuShortcuts)
       .SetMethod("setAudioMuted", &WebContents::SetAudioMuted)
       .SetMethod("isAudioMuted", &WebContents::IsAudioMuted)
+<<<<<<< .our
       .SetMethod("isCurrentlyAudible", &WebContents::IsCurrentlyAudible)
+=======
+>>>>>>> .their
       .SetMethod("undo", &WebContents::Undo)
       .SetMethod("redo", &WebContents::Redo)
       .SetMethod("cut", &WebContents::Cut)
added in both
  our    100644 7939f8268aa8c3371623e0c15f3b6001d7f1efa4 atom/browser/api/atom_api_web_contents.h
  their  100644 336ef1f33355e9c88879450c6b891d8e50806757 atom/browser/api/atom_api_web_contents.h
@@ -97,9 +97,18 @@
   static void BuildPrototype(v8::Isolate* isolate,
                              v8::Local<v8::FunctionTemplate> prototype);
 
+<<<<<<< .our
   // Notifies to destroy any guest web contents before destroying self.
   void DestroyWebContents(bool async);
 
+=======
+  static int64_t GetIDForContents(content::WebContents* web_contents);
+
+  // Notifies to destroy any guest web contents before destroying self.
+  void DestroyWebContents(bool async);
+
+  int64_t GetID() const;
+>>>>>>> .their
   int GetProcessID() const;
   base::ProcessId GetOSProcessID() const;
   Type GetType() const;
@@ -139,7 +148,10 @@
   void SetIgnoreMenuShortcuts(bool ignore);
   void SetAudioMuted(bool muted);
   bool IsAudioMuted();
+<<<<<<< .our
   bool IsCurrentlyAudible();
+=======
+>>>>>>> .their
   void Print(mate::Arguments* args);
   std::vector<printing::PrinterBasicInfo> GetPrinterList();
   void SetEmbedder(const WebContents* embedder);
@@ -213,9 +225,15 @@
 
   // Methods for zoom handling.
   void SetZoomLevel(double level);
+<<<<<<< .our
   double GetZoomLevel() const;
   void SetZoomFactor(double factor);
   double GetZoomFactor() const;
+=======
+  double GetZoomLevel();
+  void SetZoomFactor(double factor);
+  double GetZoomFactor();
+>>>>>>> .their
 
   // Callback triggered on permission response.
   void OnEnterFullscreenModeForTab(content::WebContents* source,
@@ -234,11 +252,19 @@
   v8::Local<v8::Value> GetPreloadPath(v8::Isolate* isolate) const;
 
   // Returns the web preferences of current WebContents.
+<<<<<<< .our
   v8::Local<v8::Value> GetWebPreferences(v8::Isolate* isolate) const;
   v8::Local<v8::Value> GetLastWebPreferences(v8::Isolate* isolate) const;
 
   // Returns the owner window.
   v8::Local<v8::Value> GetOwnerBrowserWindow() const;
+=======
+  v8::Local<v8::Value> GetWebPreferences(v8::Isolate* isolate);
+  v8::Local<v8::Value> GetLastWebPreferences(v8::Isolate* isolate);
+
+  // Returns the owner window.
+  v8::Local<v8::Value> GetOwnerBrowserWindow();
+>>>>>>> .their
 
   // Grants the child process the capability to access URLs with the origin of
   // the specified URL.
added in both
  our    100644 7bcb7ab9370a8b3fe245c9569c93dbbdac0a0697 atom/browser/api/frame_subscriber.cc
  their  100644 4b1234d5677e15b9c77d1e8a80e2be159b7d75e7 atom/browser/api/frame_subscriber.cc
@@ -83,7 +83,11 @@
                                        : frame;
 
   size_t rgb_row_size = bitmap.width() * bitmap.bytesPerPixel();
+<<<<<<< .our
   auto* source = static_cast<const char*>(bitmap.getPixels());
+=======
+  auto source = static_cast<const char*>(bitmap.getPixels());
+>>>>>>> .their
 
   v8::MaybeLocal<v8::Object> buffer =
       node::Buffer::Copy(isolate_, source, rgb_row_size * bitmap.height());
added in both
  our    100644 d3e82855417cb59c0449f1c1b685970ffaea2af6 atom/browser/api/frame_subscriber.h
  their  100644 3de976f3051139f7ebd3a63da7455faf9d69ef76 atom/browser/api/frame_subscriber.h
@@ -29,7 +29,11 @@
                   content::WebContents* web_contents,
                   const FrameCaptureCallback& callback,
                   bool only_dirty);
+<<<<<<< .our
   ~FrameSubscriber() override;
+=======
+  ~FrameSubscriber();
+>>>>>>> .their
 
  private:
   gfx::Rect GetDamageRect();
added in both
  our    100644 57c4ee582405e6d501ec23940ccb10689ecd64a1 atom/browser/atom_browser_client.cc
  their  100644 06fad9e28f6888009e2be08369f8e154d4eeca0b atom/browser/atom_browser_client.cc
@@ -31,6 +31,10 @@
 #include "base/strings/string_number_conversions.h"
 #include "base/strings/string_util.h"
 #include "chrome/browser/printing/printing_message_filter.h"
+<<<<<<< .our
+=======
+#include "chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.h"
+>>>>>>> .their
 #include "chrome/browser/speech/tts_message_filter.h"
 #include "content/public/browser/browser_ppapi_host.h"
 #include "content/public/browser/client_certificate_delegate.h"
@@ -60,10 +64,13 @@
 #include "net/ssl/client_cert_store.h"
 #endif
 
+<<<<<<< .our
 #if defined(ENABLE_PEPPER_FLASH)
 #include "chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.h"
 #endif  // defined(ENABLE_PEPPER_FLASH)
 
+=======
+>>>>>>> .their
 using content::BrowserThread;
 
 namespace atom {
@@ -251,11 +258,19 @@
     return;
 
   // Do we have an affinity site to manage ?
+<<<<<<< .our
   auto* web_contents = content::WebContents::FromRenderFrameHost(rfh);
   auto* web_preferences = WebContentsPreferences::From(web_contents);
   std::string affinity;
   if (web_preferences &&
       web_preferences->GetPreference("affinity", &affinity) &&
+=======
+  std::string affinity;
+  auto* web_contents = content::WebContents::FromRenderFrameHost(rfh);
+  auto* web_preferences = WebContentsPreferences::From(web_contents);
+  if (web_preferences &&
+      web_preferences->dict()->GetString("affinity", &affinity) &&
+>>>>>>> .their
       !affinity.empty()) {
     affinity = base::ToLowerASCII(affinity);
     auto iter = site_per_affinities.find(affinity);
@@ -343,14 +358,26 @@
       web_preferences->AppendCommandLineSwitches(command_line);
     SessionPreferences::AppendExtraCommandLineSwitches(
         web_contents->GetBrowserContext(), command_line);
+<<<<<<< .our
+=======
+
+    auto context_id = atom::api::WebContents::GetIDForContents(web_contents);
+    command_line->AppendSwitchASCII(switches::kContextId,
+                                    base::IntToString(context_id));
+>>>>>>> .their
   }
 }
 
 void AtomBrowserClient::DidCreatePpapiPlugin(content::BrowserPpapiHost* host) {
+<<<<<<< .our
 #if defined(ENABLE_PEPPER_FLASH)
   host->GetPpapiHost()->AddHostFactoryFilter(
       base::WrapUnique(new ChromeBrowserPepperHostFactory(host)));
 #endif
+=======
+  host->GetPpapiHost()->AddHostFactoryFilter(
+      base::WrapUnique(new chrome::ChromeBrowserPepperHostFactory(host)));
+>>>>>>> .their
 }
 
 void AtomBrowserClient::GetGeolocationRequestContext(
added in both
  our    100644 e036cbc8103f19a034ce386940462f8a23ea6807 atom/browser/atom_browser_context.cc
  their  100644 ffef00da50a6da587dded419bebbf7400c9aa13e atom/browser/atom_browser_context.cc
@@ -10,7 +10,10 @@
 #include "atom/browser/atom_permission_manager.h"
 #include "atom/browser/browser.h"
 #include "atom/browser/request_context_delegate.h"
+<<<<<<< .our
 #include "atom/browser/special_storage_policy.h"
+=======
+>>>>>>> .their
 #include "atom/browser/web_view_manager.h"
 #include "atom/common/atom_version.h"
 #include "atom/common/chrome_version.h"
@@ -43,8 +46,12 @@
                                        bool in_memory,
                                        const base::DictionaryValue& options)
     : brightray::BrowserContext(partition, in_memory),
+<<<<<<< .our
       url_request_context_getter_(nullptr),
       storage_policy_(new SpecialStoragePolicy) {
+=======
+      url_request_context_getter_(nullptr) {
+>>>>>>> .their
   // Construct user agent string.
   Browser* browser = Browser::Get();
   std::string name = RemoveWhitespace(browser->GetName());
@@ -100,10 +107,13 @@
   return permission_manager_.get();
 }
 
+<<<<<<< .our
 storage::SpecialStoragePolicy* AtomBrowserContext::GetSpecialStoragePolicy() {
   return storage_policy_.get();
 }
 
+=======
+>>>>>>> .their
 void AtomBrowserContext::RegisterPrefs(PrefRegistrySimple* pref_registry) {
   pref_registry->RegisterFilePathPref(prefs::kSelectFileLastDirectory,
                                       base::FilePath());
added in both
  our    100644 9e6a841ceb8d11069a1a094bf7dbbd3a788918b3 atom/browser/atom_browser_context.h
  their  100644 581ecc185f1227c3cd020b6f61d7f58dfd667419 atom/browser/atom_browser_context.h
@@ -8,6 +8,7 @@
 #include <string>
 #include <vector>
 
+<<<<<<< .our
 #include "base/memory/scoped_refptr.h"
 #include "brightray/browser/browser_context.h"
 
@@ -15,13 +16,20 @@
 class SpecialStoragePolicy;
 }
 
+=======
+#include "brightray/browser/browser_context.h"
+
+>>>>>>> .their
 namespace atom {
 
 class AtomBlobReader;
 class AtomDownloadManagerDelegate;
 class AtomPermissionManager;
 class RequestContextDelegate;
+<<<<<<< .our
 class SpecialStoragePolicy;
+=======
+>>>>>>> .their
 class WebViewManager;
 
 class AtomBrowserContext : public brightray::BrowserContext {
@@ -41,7 +49,10 @@
   content::DownloadManagerDelegate* GetDownloadManagerDelegate() override;
   content::BrowserPluginGuestManager* GetGuestManager() override;
   content::PermissionManager* GetPermissionManager() override;
+<<<<<<< .our
   storage::SpecialStoragePolicy* GetSpecialStoragePolicy() override;
+=======
+>>>>>>> .their
 
   // brightray::BrowserContext:
   void RegisterPrefs(PrefRegistrySimple* pref_registry) override;
@@ -65,7 +76,10 @@
   std::unique_ptr<AtomDownloadManagerDelegate> download_manager_delegate_;
   std::unique_ptr<WebViewManager> guest_manager_;
   std::unique_ptr<AtomPermissionManager> permission_manager_;
+<<<<<<< .our
   scoped_refptr<storage::SpecialStoragePolicy> storage_policy_;
+=======
+>>>>>>> .their
   std::unique_ptr<AtomBlobReader> blob_reader_;
   std::unique_ptr<RequestContextDelegate> request_context_delegate_;
   std::string user_agent_;
added in both
  our    100644 25fc326ebac3f2a5beb9199194067dae12c8229b atom/browser/atom_javascript_dialog_manager.cc
  their  100644 c0c7be6302796cf774923757b466084816d897fe atom/browser/atom_javascript_dialog_manager.cc
@@ -62,7 +62,11 @@
   std::string checkbox;
   if (origin_counts_[origin] > 1 && web_preferences &&
       web_preferences->IsEnabled("safeDialogs") &&
+<<<<<<< .our
       !web_preferences->GetPreference("safeDialogsMessage", &checkbox)) {
+=======
+      !web_preferences->dict()->GetString("safeDialogsMessage", &checkbox)) {
+>>>>>>> .their
     checkbox = "Prevent this app from creating additional dialogs";
   }
 
added in both
  our    100644 ce35de64d60c6767ac52596c1b32e7bde5ceefa0 atom/browser/browser.cc
  their  100644 0df8876bb620f5df7a1d0fd6ff3329c36ba5bd1b atom/browser/browser.cc
@@ -155,13 +155,17 @@
     base::CreateDirectoryAndGetError(user_data, nullptr);
 
   is_ready_ = true;
+<<<<<<< .our
   if (ready_promise_) {
     ready_promise_->Resolve();
   }
+=======
+>>>>>>> .their
   for (BrowserObserver& observer : observers_)
     observer.OnFinishLaunching(launch_info);
 }
 
+<<<<<<< .our
 util::Promise* Browser::WhenReady(v8::Isolate* isolate) {
   if (!ready_promise_) {
     ready_promise_ = new util::Promise(isolate);
@@ -172,6 +176,8 @@
   return ready_promise_;
 }
 
+=======
+>>>>>>> .their
 void Browser::OnAccessibilitySupportChanged() {
   for (BrowserObserver& observer : observers_)
     observer.OnAccessibilitySupportChanged();
added in both
  our    100644 aed7d25c37da59c0dd5e09940a064c329353a0b2 atom/browser/browser.h
  their  100644 d63ac7ccac55f3e13032bb0c5b16f9f2c5acc47e atom/browser/browser.h
@@ -10,7 +10,10 @@
 
 #include "atom/browser/browser_observer.h"
 #include "atom/browser/window_list_observer.h"
+<<<<<<< .our
 #include "atom/common/promise_util.h"
+=======
+>>>>>>> .their
 #include "base/compiler_specific.h"
 #include "base/macros.h"
 #include "base/observer_list.h"
@@ -191,10 +194,13 @@
     base::string16 description;
     base::FilePath icon_path;
     int icon_index;
+<<<<<<< .our
 
     UserTask();
     UserTask(const UserTask&);
     ~UserTask();
+=======
+>>>>>>> .their
   };
 
   // Add a custom task to jump list.
@@ -245,7 +251,10 @@
   bool is_shutting_down() const { return is_shutdown_; }
   bool is_quiting() const { return is_quiting_; }
   bool is_ready() const { return is_ready_; }
+<<<<<<< .our
   util::Promise* WhenReady(v8::Isolate* isolate);
+=======
+>>>>>>> .their
 
  protected:
   // Returns the version of application bundle or executable file.
@@ -281,8 +290,11 @@
 
   int badge_count_ = 0;
 
+<<<<<<< .our
   util::Promise* ready_promise_ = nullptr;
 
+=======
+>>>>>>> .their
 #if defined(OS_MACOSX)
   base::DictionaryValue about_panel_options_;
 #endif
added in both
  our    100644 27e347eccebf006336d5d110c81717ecc45af9c3 atom/browser/browser_mac.mm
  their  100644 19b27416a16dfedbe960ee42d6e6a98ca197a6cb atom/browser/browser_mac.mm
@@ -336,9 +336,16 @@
   for (base::DictionaryValue::Iterator iter(options); !iter.IsAtEnd();
        iter.Advance()) {
     std::string key = iter.key();
+<<<<<<< .our
     if (!key.empty() && iter.value().is_string()) {
       key[0] = base::ToUpperASCII(key[0]);
       about_panel_options_.SetString(key, iter.value().GetString());
+=======
+    std::string value;
+    if (!key.empty() && iter.value().GetAsString(&value)) {
+      key[0] = base::ToUpperASCII(key[0]);
+      about_panel_options_.SetString(key, value);
+>>>>>>> .their
     }
   }
 }
added in both
  our    100644 fc3b9f330a4958b0b1e30d41c2bebe091b135856 atom/browser/browser_win.cc
  their  100644 d109129afbb40471006560d895d94aa7e9a0e288 atom/browser/browser_win.cc
@@ -84,10 +84,13 @@
 
 }  // namespace
 
+<<<<<<< .our
 Browser::UserTask::UserTask() = default;
 Browser::UserTask::UserTask(const UserTask&) = default;
 Browser::UserTask::~UserTask() = default;
 
+=======
+>>>>>>> .their
 void Browser::Focus() {
   // On Windows we just focus on the first window found for this process.
   DWORD pid = GetCurrentProcessId();
added in both
  our    100644 4ff2bcfcabfd34d8563f9ed213c03655a99dd9c6 atom/browser/native_window.cc
  their  100644 4048e2a32b251859efccb22d8fc03d8a6d22d672 atom/browser/native_window.cc
@@ -355,10 +355,13 @@
   return true;
 }
 
+<<<<<<< .our
 bool NativeWindow::SetWindowButtonVisibility(bool visible) {
   return false;
 }
 
+=======
+>>>>>>> .their
 double NativeWindow::GetAspectRatio() {
   return aspect_ratio_;
 }
@@ -458,12 +461,15 @@
     observer.OnWindowRestore();
 }
 
+<<<<<<< .our
 void NativeWindow::NotifyWindowWillResize(const gfx::Rect& new_bounds,
                                           bool* prevent_default) {
   for (NativeWindowObserver& observer : observers_)
     observer.OnWindowWillResize(new_bounds, prevent_default);
 }
 
+=======
+>>>>>>> .their
 void NativeWindow::NotifyWindowResize() {
   for (NativeWindowObserver& observer : observers_)
     observer.OnWindowResize();
added in both
  our    100644 35b67e2dd230692c415a32aae5f0a5e99ab74ac0 atom/browser/native_window.h
  their  100644 759d7cb202101710855c3fabada43c976c8543df atom/browser/native_window.h
@@ -187,9 +187,12 @@
   virtual void ToggleTabBar();
   virtual bool AddTabbedWindow(NativeWindow* window);
 
+<<<<<<< .our
   // Returns false if unsupported.
   virtual bool SetWindowButtonVisibility(bool visible);
 
+=======
+>>>>>>> .their
   // Toggle the menu bar.
   virtual void SetAutoHideMenuBar(bool auto_hide);
   virtual bool IsMenuBarAutoHide();
@@ -236,8 +239,11 @@
   void NotifyWindowMinimize();
   void NotifyWindowRestore();
   void NotifyWindowMove();
+<<<<<<< .our
   void NotifyWindowWillResize(const gfx::Rect& new_bounds,
                               bool* prevent_default);
+=======
+>>>>>>> .their
   void NotifyWindowResize();
   void NotifyWindowMoved();
   void NotifyWindowScrollTouchBegin();
added in both
  our    100644 44a78198f44cdba9875e3fb27c8e2c87eaa6f33b atom/browser/native_window_mac.h
  their  100644 54891c5b35af7a88c842e95b9b72a2f2be363681 atom/browser/native_window_mac.h
@@ -119,8 +119,11 @@
   void ToggleTabBar() override;
   bool AddTabbedWindow(NativeWindow* window) override;
 
+<<<<<<< .our
   bool SetWindowButtonVisibility(bool visible) override;
 
+=======
+>>>>>>> .their
   void SetVibrancy(const std::string& type) override;
   void SetTouchBar(
       const std::vector<mate::PersistentDictionary>& items) override;
@@ -195,10 +198,13 @@
   // The "titleBarStyle" option.
   TitleBarStyle title_bar_style_ = NORMAL;
 
+<<<<<<< .our
   // The visibility mode of window button controls when explicitly set through
   // setWindowButtonVisibility().
   base::Optional<bool> window_button_visibility_;
 
+=======
+>>>>>>> .their
   // Simple (pre-Lion) Fullscreen Settings
   bool always_simple_fullscreen_ = false;
   bool is_simple_fullscreen_ = false;
added in both
  our    100644 004263ec127709067e903ffbf31003b8844226b4 atom/browser/native_window_mac.mm
  their  100644 2d8149668e5988c2f26c39678a57a9780ca150c6 atom/browser/native_window_mac.mm
@@ -884,9 +884,14 @@
       // Resize the window to accomodate the _entire_ screen size
       fullscreenFrame.size.height -=
           [[[NSApplication sharedApplication] mainMenu] menuBarHeight];
+<<<<<<< .our
     } else if (!window_button_visibility_.has_value()) {
       // Lets keep previous behaviour - hide window controls in titled
       // fullscreen mode when not specified otherwise.
+=======
+    } else {
+      // No need to hide the title, but we should still hide the window buttons
+>>>>>>> .their
       [[window standardWindowButton:NSWindowZoomButton] setHidden:YES];
       [[window standardWindowButton:NSWindowMiniaturizeButton] setHidden:YES];
       [[window standardWindowButton:NSWindowCloseButton] setHidden:YES];
@@ -905,6 +910,7 @@
     if (!fullscreen_window_title()) {
       // Restore the titlebar
       SetStyleMask(true, NSTitledWindowMask);
+<<<<<<< .our
     }
 
     // Restore window controls visibility state
@@ -916,6 +922,15 @@
     [[window standardWindowButton:NSWindowCloseButton]
         setHidden:window_button_hidden];
 
+=======
+    } else {
+      // Show the window buttons
+      [[window standardWindowButton:NSWindowZoomButton] setHidden:NO];
+      [[window standardWindowButton:NSWindowMiniaturizeButton] setHidden:NO];
+      [[window standardWindowButton:NSWindowCloseButton] setHidden:NO];
+    }
+
+>>>>>>> .their
     [window setFrame:original_frame_ display:YES animate:YES];
 
     [NSApp setPresentationOptions:simple_fullscreen_options_];
@@ -1153,6 +1168,7 @@
   return true;
 }
 
+<<<<<<< .our
 bool NativeWindowMac::SetWindowButtonVisibility(bool visible) {
   if (title_bar_style_ == CUSTOM_BUTTONS_ON_HOVER) {
     return false;
@@ -1166,6 +1182,8 @@
   return true;
 }
 
+=======
+>>>>>>> .their
 void NativeWindowMac::SetVibrancy(const std::string& type) {
   if (@available(macOS 10.10, *)) {
     NSView* vibrant_view = [window_ vibrantView];
added in both
  our    100644 c2a86ea6b65cd6091fa7e8018bed0b11c7390f23 atom/browser/native_window_observer.h
  their  100644 33e9eb643254c9066bfafbae993d2f98c624a5f3 atom/browser/native_window_observer.h
@@ -16,10 +16,13 @@
 #include <windows.h>
 #endif
 
+<<<<<<< .our
 namespace gfx {
 class Rect;
 }
 
+=======
+>>>>>>> .their
 namespace atom {
 
 class NativeWindowObserver {
@@ -67,8 +70,11 @@
   virtual void OnWindowUnmaximize() {}
   virtual void OnWindowMinimize() {}
   virtual void OnWindowRestore() {}
+<<<<<<< .our
   virtual void OnWindowWillResize(const gfx::Rect& new_bounds,
                                   bool* prevent_default) {}
+=======
+>>>>>>> .their
   virtual void OnWindowResize() {}
   virtual void OnWindowMove() {}
   virtual void OnWindowMoved() {}
added in both
  our    100644 0e61d18b915924eb3d3d14e40d1cbbd199631bed atom/browser/native_window_views_win.cc
  their  100644 c9802b2e0a83680a2df01e18cd2674e4d114f2af atom/browser/native_window_views_win.cc
@@ -164,7 +164,11 @@
 
       const DWORD obj_id = static_cast<DWORD>(l_param);
 
+<<<<<<< .our
       if (obj_id != static_cast<DWORD>(OBJID_CLIENT)) {
+=======
+      if (obj_id != OBJID_CLIENT) {
+>>>>>>> .their
         return false;
       }
 
@@ -174,7 +178,11 @@
 
       checked_for_a11y_support_ = true;
 
+<<<<<<< .our
       auto* const axState = content::BrowserAccessibilityState::GetInstance();
+=======
+      const auto axState = content::BrowserAccessibilityState::GetInstance();
+>>>>>>> .their
       if (axState && !axState->IsAccessibleBrowser()) {
         axState->OnScreenReaderDetected();
         Browser::Get()->OnAccessibilitySupportChanged();
@@ -187,6 +195,7 @@
       if (HIWORD(w_param) == THBN_CLICKED)
         return taskbar_host_.HandleThumbarButtonEvent(LOWORD(w_param));
       return false;
+<<<<<<< .our
     case WM_SIZING: {
       bool prevent_default = false;
       NotifyWindowWillResize(gfx::Rect(*reinterpret_cast<RECT*>(l_param)),
@@ -197,6 +206,8 @@
       }
       return false;
     }
+=======
+>>>>>>> .their
     case WM_SIZE: {
       // Handle window state change.
       HandleSizeEvent(w_param, l_param);
@@ -208,8 +219,12 @@
     }
     case WM_MOVING: {
       if (!movable_)
+<<<<<<< .our
         ::GetWindowRect(GetAcceleratedWidget(),
                         reinterpret_cast<RECT*>(l_param));
+=======
+        ::GetWindowRect(GetAcceleratedWidget(), (LPRECT)l_param);
+>>>>>>> .their
       return false;
     }
     case WM_MOVE: {
@@ -289,8 +304,11 @@
               NotifyWindowRestore();
             }
             break;
+<<<<<<< .our
           default:
             break;
+=======
+>>>>>>> .their
         }
       }
       break;
@@ -363,7 +381,11 @@
   // the cursor since they are in a state where they would otherwise ignore all
   // mouse input.
   if (w_param == WM_MOUSEMOVE) {
+<<<<<<< .our
     for (auto* window : forwarding_windows_) {
+=======
+    for (auto window : forwarding_windows_) {
+>>>>>>> .their
       // At first I considered enumerating windows to check whether the cursor
       // was directly above the window, but since nothing bad seems to happen
       // if we post the message even if some other window occludes it I have
added in both
  our    100644 e71ea74317b69f31a5aac8e723902748972fed8f atom/browser/net/atom_network_delegate.cc
  their  100644 ca0a3ddeba5fe980a792a27e16ab3f22214abd4d atom/browser/net/atom_network_delegate.cc
@@ -128,7 +128,11 @@
   std::string key;
   std::string value;
   while (headers->EnumerateHeaderLines(&iter, &key, &value)) {
+<<<<<<< .our
     if (dict->FindKey(key)) {
+=======
+    if (dict->HasKey(key)) {
+>>>>>>> .their
       base::ListValue* values = nullptr;
       if (dict->GetList(key, &values))
         values->AppendString(value);
@@ -189,10 +193,16 @@
     headers->Clear();
     for (base::DictionaryValue::Iterator it(*dict); !it.IsAtEnd();
          it.Advance()) {
+<<<<<<< .our
       if (it.value().is_string()) {
         std::string value = it.value().GetString();
         headers->SetHeader(it.key(), value);
       }
+=======
+      std::string value;
+      if (it.value().GetAsString(&value))
+        headers->SetHeader(it.key(), value);
+>>>>>>> .their
     }
   }
 }
@@ -542,8 +552,12 @@
     uint64_t id,
     T out,
     const base::DictionaryValue& response) {
+<<<<<<< .our
   auto copy = base::DictionaryValue::From(
       base::Value::ToUniquePtrValue(response.Clone()));
+=======
+  std::unique_ptr<base::DictionaryValue> copy = response.CreateDeepCopy();
+>>>>>>> .their
   BrowserThread::PostTask(
       BrowserThread::IO, FROM_HERE,
       base::BindOnce(&AtomNetworkDelegate::OnListenerResultInIO<T>,
added in both
  our    100644 5ffbfd65a48b4459b2ebca66a5c2259f18ed80a8 atom/browser/net/atom_url_request.cc
  their  100644 94d7f4a3b1a77426b6e797999abdb7a631812684 atom/browser/net/atom_url_request.cc
@@ -501,6 +501,7 @@
     delegate_->OnError(error, isRequestError);
 }
 
+<<<<<<< .our
 void AtomURLRequest::GetUploadProgress(mate::Dictionary* progress) const {
   net::UploadProgress upload_progress;
   if (request_) {
@@ -513,4 +514,6 @@
   progress->Set("total", upload_progress.size());
 }
 
+=======
+>>>>>>> .their
 }  // namespace atom
added in both
  our    100644 fde7b161385fb431b2d807012a00679a4bdb507a atom/browser/net/atom_url_request.h
  their  100644 2b03ad7bc37ce6cfec1ff79ce183d37adf90749b atom/browser/net/atom_url_request.h
@@ -43,7 +43,10 @@
   void PassLoginInformation(const base::string16& username,
                             const base::string16& password) const;
   void SetLoadFlags(int flags) const;
+<<<<<<< .our
   void GetUploadProgress(mate::Dictionary* progress) const;
+=======
+>>>>>>> .their
 
  protected:
   // Overrides of net::URLRequest::Delegate
added in both
  our    100644 59e3ab881c2355c2ed29b806de59ef372c170b62 atom/browser/net/js_asker.cc
  their  100644 daf978082f102937d142dcddbdd860c92c709dbe atom/browser/net/js_asker.cc
@@ -62,8 +62,13 @@
     if (dict->GetInteger("error", error))
       return true;
   } else if (value->is_int()) {
+<<<<<<< .our
     *error = value->GetInt();
     return true;
+=======
+    if (value->GetAsInteger(error))
+      return true;
+>>>>>>> .their
   }
   return false;
 }
added in both
  our    100644 1c15fd39b9d479b441b0931564f9e2c3f9de37c7 atom/browser/net/url_request_async_asar_job.cc
  their  100644 06959032411d27e69ec441577b7a1987a2117080 atom/browser/net/url_request_async_asar_job.cc
@@ -7,7 +7,10 @@
 #include <string>
 
 #include "atom/common/atom_constants.h"
+<<<<<<< .our
 #include "base/strings/utf_string_conversions.h"
+=======
+>>>>>>> .their
 #include "base/task_scheduler/post_task.h"
 
 namespace atom {
@@ -18,6 +21,7 @@
     : JsAsker<asar::URLRequestAsarJob>(request, network_delegate) {}
 
 void URLRequestAsyncAsarJob::StartAsync(std::unique_ptr<base::Value> options) {
+<<<<<<< .our
   std::string file_path;
   if (options->is_dict()) {
     auto* path_value =
@@ -26,6 +30,14 @@
       file_path = path_value->GetString();
   } else if (options->is_string()) {
     file_path = options->GetString();
+=======
+  base::FilePath::StringType file_path;
+  if (options->is_dict()) {
+    static_cast<base::DictionaryValue*>(options.get())
+        ->GetString("path", &file_path);
+  } else if (options->is_string()) {
+    options->GetAsString(&file_path);
+>>>>>>> .their
   }
 
   if (file_path.empty()) {
@@ -36,11 +48,15 @@
         base::CreateSequencedTaskRunnerWithTraits(
             {base::MayBlock(), base::TaskPriority::USER_VISIBLE,
              base::TaskShutdownBehavior::SKIP_ON_SHUTDOWN}),
+<<<<<<< .our
 #if defined(OS_WIN)
         base::FilePath(base::UTF8ToWide(file_path)));
 #else
         base::FilePath(file_path));
 #endif
+=======
+        base::FilePath(file_path));
+>>>>>>> .their
     asar::URLRequestAsarJob::Start();
   }
 }
added in both
  our    100644 31381ff118665f10a53e13fbe0044046738ca230 atom/browser/net/url_request_string_job.cc
  their  100644 453dd0bb6615880d75f73294d22e67ec9975b7c3 atom/browser/net/url_request_string_job.cc
@@ -25,7 +25,11 @@
     dict->GetString("charset", &charset_);
     dict->GetString("data", &data_);
   } else if (options->is_string()) {
+<<<<<<< .our
     data_ = options->GetString();
+=======
+    options->GetAsString(&data_);
+>>>>>>> .their
   }
   net::URLRequestSimpleJob::Start();
 }
added in both
  our    100644 ae60f3c21ca91f7065da3eb0926ee62a27cb5e97 atom/browser/render_process_preferences.cc
  their  100644 1d11181776616d20bbd3c349559423b76d08aa7e atom/browser/render_process_preferences.cc
@@ -21,8 +21,12 @@
 
 int RenderProcessPreferences::AddEntry(const base::DictionaryValue& entry) {
   int id = ++next_id_;
+<<<<<<< .our
   entries_[id] =
       base::DictionaryValue::From(base::Value::ToUniquePtrValue(entry.Clone()));
+=======
+  entries_[id] = entry.CreateDeepCopy();
+>>>>>>> .their
   cache_needs_update_ = true;
   return id;
 }
added in both
  our    100644 9094f0f7335edf833d51f688851e6a105de60433 atom/browser/resources/mac/Info.plist
  their  100644 70a794e41b94870bf45efa8f692d25f8c43998cd atom/browser/resources/mac/Info.plist
@@ -17,9 +17,15 @@
   <key>CFBundleIconFile</key>
   <string>electron.icns</string>
   <key>CFBundleVersion</key>
+<<<<<<< .our
   <string>4.0.0</string>
   <key>CFBundleShortVersionString</key>
   <string>4.0.0</string>
+=======
+  <string>3.0.0</string>
+  <key>CFBundleShortVersionString</key>
+  <string>3.0.0</string>
+>>>>>>> .their
   <key>LSApplicationCategoryType</key>
   <string>public.app-category.developer-tools</string>
   <key>LSMinimumSystemVersion</key>
added in both
  our    100644 c0bd831e8bddf10180f75cd40694831e2e98622d atom/browser/resources/win/atom.rc
  their  100644 9d70adbd54c5d2b90a2d03384534816cb23ec725 atom/browser/resources/win/atom.rc
@@ -1,6 +1,10 @@
 // Microsoft Visual C++ generated resource script.
 //
+<<<<<<< .our
 #include "ui\\resources\\grit\\ui_unscaled_resources.h"
+=======
+#include "grit\\ui_unscaled_resources.h"
+>>>>>>> .their
 #include "resource.h"
 #include <winresrc.h>
 #ifdef IDC_STATIC
@@ -56,8 +60,13 @@
 //
 
 VS_VERSION_INFO VERSIONINFO
+<<<<<<< .our
  FILEVERSION 4,0,0,20180821
  PRODUCTVERSION 4,0,0,20180821
+=======
+ FILEVERSION 3,0,0,7
+ PRODUCTVERSION 3,0,0,7
+>>>>>>> .their
  FILEFLAGSMASK 0x3fL
 #ifdef _DEBUG
  FILEFLAGS 0x1L
@@ -74,12 +83,20 @@
         BEGIN
             VALUE "CompanyName", "GitHub, Inc."
             VALUE "FileDescription", "Electron"
+<<<<<<< .our
             VALUE "FileVersion", "4.0.0"
+=======
+            VALUE "FileVersion", "3.0.0"
+>>>>>>> .their
             VALUE "InternalName", "electron.exe"
             VALUE "LegalCopyright", "Copyright (C) 2015 GitHub, Inc. All rights reserved."
             VALUE "OriginalFilename", "electron.exe"
             VALUE "ProductName", "Electron"
+<<<<<<< .our
             VALUE "ProductVersion", "4.0.0"
+=======
+            VALUE "ProductVersion", "3.0.0"
+>>>>>>> .their
             VALUE "SquirrelAwareVersion", "1"
         END
     END
added in both
  our    100644 f3dc0e0cc6ae044daf9cc499061db98f387d7dea atom/browser/ui/certificate_trust_win.cc
  their  100644 6179b08607041c38996d7faef8f7f456e42e4ac4 atom/browser/ui/certificate_trust_win.cc
@@ -20,8 +20,13 @@
 // This requires prompting the user to confirm they trust the certificate.
 BOOL AddToTrustedRootStore(const PCCERT_CONTEXT cert_context,
                            const scoped_refptr<net::X509Certificate>& cert) {
+<<<<<<< .our
   auto* root_cert_store = CertOpenStore(
       CERT_STORE_PROV_SYSTEM, 0, NULL, CERT_SYSTEM_STORE_CURRENT_USER, L"Root");
+=======
+  auto root_cert_store = CertOpenStore(CERT_STORE_PROV_SYSTEM, 0, NULL,
+                                       CERT_SYSTEM_STORE_CURRENT_USER, L"Root");
+>>>>>>> .their
 
   if (root_cert_store == NULL) {
     return false;
@@ -32,7 +37,11 @@
 
   if (result) {
     // force Chromium to reload it's database for this certificate
+<<<<<<< .our
     auto* cert_db = net::CertDatabase::GetInstance();
+=======
+    auto cert_db = net::CertDatabase::GetInstance();
+>>>>>>> .their
     cert_db->NotifyObserversCertDBChanged();
   }
 
added in both
  our    100644 aaaf933e106080002d198ad6c15e637043609618 atom/browser/ui/cocoa/atom_ns_window.mm
  their  100644 56ed5dc2319ccc62ad26919460a416a8c1ccc047 atom/browser/ui/cocoa/atom_ns_window.mm
@@ -173,12 +173,20 @@
       buttonFrame.origin.x += NSWidth(
           [[self standardWindowButton:NSWindowMiniaturizeButton] frame]);
       buttonFrame.origin.x += windowButtonsInterButtonSpacing_;
+<<<<<<< .our
       FALLTHROUGH;
+=======
+      // fallthrough
+>>>>>>> .their
     case NSWindowMiniaturizeButton:
       buttonFrame.origin.x +=
           NSWidth([[self standardWindowButton:NSWindowCloseButton] frame]);
       buttonFrame.origin.x += windowButtonsInterButtonSpacing_;
+<<<<<<< .our
       FALLTHROUGH;
+=======
+      // fallthrough
+>>>>>>> .their
     default:
       break;
   }
added in both
  our    100644 c58da546dc8dab14b6f32e284727342bc8096d0c atom/browser/ui/cocoa/atom_ns_window_delegate.mm
  their  100644 78bfe1fcd7b523290c190bdbe9b04ae250a6af1b atom/browser/ui/cocoa/atom_ns_window_delegate.mm
@@ -112,6 +112,7 @@
                extraHeightPlusFrame);
   }
 
+<<<<<<< .our
   {
     bool prevent_default = false;
     gfx::Rect new_bounds(gfx::Point(sender.frame.origin), gfx::Size(newSize));
@@ -121,6 +122,8 @@
     }
   }
 
+=======
+>>>>>>> .their
   return newSize;
 }
 
added in both
  our    100644 becc1806610ae54c005b3e8aef17a9ef19d730bf atom/browser/ui/file_dialog.h
  their  100644 efa50062bb8284149a893c9bff174ed1cdb10ced atom/browser/ui/file_dialog.h
@@ -66,7 +66,10 @@
   bool security_scoped_bookmarks = false;
 
   DialogSettings();
+<<<<<<< .our
   DialogSettings(const DialogSettings&);
+=======
+>>>>>>> .their
   ~DialogSettings();
 };
 
added in both
  our    100644 dab125ec881bc75ff608dbbfddff972169049e54 atom/browser/ui/file_dialog_win.cc
  their  100644 2d708086bfdf28bd31dd735360e36ed6222a6a16 atom/browser/ui/file_dialog_win.cc
@@ -6,10 +6,16 @@
 
 #include <windows.h>  // windows.h must be included first
 
+<<<<<<< .our
 #include <atlbase.h>  // atlbase.h for CComPtr
 
 #include <shlobj.h>
 #include <shobjidl.h>
+=======
+#include <atlbase.h>
+#include <commdlg.h>
+#include <shlobj.h>
+>>>>>>> .their
 
 #include "atom/browser/native_window_views.h"
 #include "atom/browser/unresponsive_suppressor.h"
@@ -21,11 +27,19 @@
 #include "base/threading/thread.h"
 #include "base/threading/thread_task_runner_handle.h"
 #include "base/win/registry.h"
+<<<<<<< .our
+=======
+#include "third_party/wtl/include/atlapp.h"
+#include "third_party/wtl/include/atldlgs.h"
+>>>>>>> .their
 
 namespace file_dialog {
 
 DialogSettings::DialogSettings() = default;
+<<<<<<< .our
 DialogSettings::DialogSettings(const DialogSettings&) = default;
+=======
+>>>>>>> .their
 DialogSettings::~DialogSettings() = default;
 
 namespace {
@@ -64,6 +78,90 @@
   }
 }
 
+<<<<<<< .our
+=======
+// Generic class to delegate common open/save dialog's behaviours, users need to
+// call interface methods via GetPtr().
+template <typename T>
+class FileDialog {
+ public:
+  FileDialog(const DialogSettings& settings, int options) {
+    std::wstring file_part;
+    if (!IsDirectory(settings.default_path))
+      file_part = settings.default_path.BaseName().value();
+
+    std::vector<std::wstring> buffer;
+    std::vector<COMDLG_FILTERSPEC> filterspec;
+    ConvertFilters(settings.filters, &buffer, &filterspec);
+
+    dialog_.reset(new T(file_part.c_str(), options, NULL, filterspec.data(),
+                        filterspec.size()));
+
+    if (!settings.title.empty())
+      GetPtr()->SetTitle(base::UTF8ToUTF16(settings.title).c_str());
+
+    if (!settings.button_label.empty())
+      GetPtr()->SetOkButtonLabel(
+          base::UTF8ToUTF16(settings.button_label).c_str());
+
+    // By default, *.* will be added to the file name if file type is "*.*". In
+    // Electron, we disable it to make a better experience.
+    //
+    // From MSDN: https://msdn.microsoft.com/en-us/library/windows/desktop/
+    // bb775970(v=vs.85).aspx
+    //
+    // If SetDefaultExtension is not called, the dialog will not update
+    // automatically when user choose a new file type in the file dialog.
+    //
+    // We set file extension to the first none-wildcard extension to make
+    // sure the dialog will update file extension automatically.
+    for (size_t i = 0; i < filterspec.size(); ++i) {
+      if (std::wstring(filterspec[i].pszSpec) != L"*.*") {
+        // SetFileTypeIndex is regarded as one-based index.
+        GetPtr()->SetFileTypeIndex(i + 1);
+        GetPtr()->SetDefaultExtension(filterspec[i].pszSpec);
+        break;
+      }
+    }
+
+    if (settings.default_path.IsAbsolute()) {
+      SetDefaultFolder(settings.default_path);
+    }
+  }
+
+  bool Show(atom::NativeWindow* parent_window) {
+    atom::UnresponsiveSuppressor suppressor;
+    HWND window = parent_window
+                      ? static_cast<atom::NativeWindowViews*>(parent_window)
+                            ->GetAcceleratedWidget()
+                      : NULL;
+    return dialog_->DoModal(window) == IDOK;
+  }
+
+  T* GetDialog() { return dialog_.get(); }
+
+  IFileDialog* GetPtr() const { return dialog_->GetPtr(); }
+
+ private:
+  // Set up the initial directory for the dialog.
+  void SetDefaultFolder(const base::FilePath file_path) {
+    std::wstring directory = IsDirectory(file_path)
+                                 ? file_path.value()
+                                 : file_path.DirName().value();
+
+    ATL::CComPtr<IShellItem> folder_item;
+    HRESULT hr = SHCreateItemFromParsingName(directory.c_str(), NULL,
+                                             IID_PPV_ARGS(&folder_item));
+    if (SUCCEEDED(hr))
+      GetPtr()->SetFolder(folder_item);
+  }
+
+  std::unique_ptr<T> dialog_;
+
+  DISALLOW_COPY_AND_ASSIGN(FileDialog);
+};
+
+>>>>>>> .their
 struct RunState {
   base::Thread* dialog_thread;
   scoped_refptr<base::SingleThreadTaskRunner> ui_task_runner;
@@ -103,6 +201,7 @@
 
 }  // namespace
 
+<<<<<<< .our
 static HRESULT GetFileNameFromShellItem(IShellItem* pShellItem,
                                         SIGDN type,
                                         LPWSTR lpstr,
@@ -207,6 +306,11 @@
     return false;
 
   DWORD options = FOS_FORCEFILESYSTEM | FOS_FILEMUSTEXIST;
+=======
+bool ShowOpenDialog(const DialogSettings& settings,
+                    std::vector<base::FilePath>* paths) {
+  int options = FOS_FORCEFILESYSTEM | FOS_FILEMUSTEXIST;
+>>>>>>> .their
   if (settings.properties & FILE_DIALOG_OPEN_DIRECTORY)
     options |= FOS_PICKFOLDERS;
   if (settings.properties & FILE_DIALOG_MULTI_SELECTIONS)
@@ -215,6 +319,7 @@
     options |= FOS_FORCESHOWHIDDEN;
   if (settings.properties & FILE_DIALOG_PROMPT_TO_CREATE)
     options |= FOS_CREATEPROMPT;
+<<<<<<< .our
   file_open_dialog->SetOptions(options);
 
   ApplySettings(file_open_dialog, settings);
@@ -224,6 +329,16 @@
 
   ATL::CComPtr<IShellItemArray> items;
   hr = file_open_dialog->GetResults(&items);
+=======
+
+  FileDialog<CShellFileOpenDialog> open_dialog(settings, options);
+  if (!open_dialog.Show(settings.parent_window))
+    return false;
+
+  ATL::CComPtr<IShellItemArray> items;
+  HRESULT hr =
+      static_cast<IFileOpenDialog*>(open_dialog.GetPtr())->GetResults(&items);
+>>>>>>> .their
   if (FAILED(hr))
     return false;
 
@@ -240,8 +355,13 @@
       return false;
 
     wchar_t file_name[MAX_PATH];
+<<<<<<< .our
     hr = GetFileNameFromShellItem(item, SIGDN_FILESYSPATH, file_name, MAX_PATH);
 
+=======
+    hr = CShellFileOpenDialog::GetFileNameFromShellItem(item, SIGDN_FILESYSPATH,
+                                                        file_name, MAX_PATH);
+>>>>>>> .their
     if (FAILED(hr))
       return false;
 
@@ -265,6 +385,7 @@
 }
 
 bool ShowSaveDialog(const DialogSettings& settings, base::FilePath* path) {
+<<<<<<< .our
   ATL::CComPtr<IFileSaveDialog> file_save_dialog;
   HRESULT hr = file_save_dialog.CoCreateInstance(CLSID_FileSaveDialog);
   if (FAILED(hr))
@@ -291,6 +412,19 @@
   *path = base::FilePath(result_path);
   CoTaskMemFree(result_path);
 
+=======
+  FileDialog<CShellFileSaveDialog> save_dialog(
+      settings, FOS_FORCEFILESYSTEM | FOS_PATHMUSTEXIST | FOS_OVERWRITEPROMPT);
+  if (!save_dialog.Show(settings.parent_window))
+    return false;
+
+  wchar_t buffer[MAX_PATH];
+  HRESULT hr = save_dialog.GetDialog()->GetFilePath(buffer, MAX_PATH);
+  if (FAILED(hr))
+    return false;
+
+  *path = base::FilePath(buffer);
+>>>>>>> .their
   return true;
 }
 
added in both
  our    100644 b0e73f550e1d3a91f15e8d2d0604518027f75298 atom/browser/ui/message_box_win.cc
  their  100644 e5a0e61379d0b7f294253e3bf1daa005dccfbfbd atom/browser/ui/message_box_win.cc
@@ -128,8 +128,11 @@
       case MESSAGE_BOX_TYPE_ERROR:
         config.pszMainIcon = TD_ERROR_ICON;
         break;
+<<<<<<< .our
       case MESSAGE_BOX_TYPE_NONE:
         break;
+=======
+>>>>>>> .their
     }
   }
 
added in both
  our    100644 e838d3cc217b5ffdb77226beff0d7217539f23f9 atom/browser/ui/views/menu_bar.cc
  their  100644 535af8f2803187d737e1f5e42507d95b9b7272c2 atom/browser/ui/views/menu_bar.cc
@@ -29,8 +29,13 @@
     : background_color_(kDefaultColor), window_(window) {
   RefreshColorCache();
   UpdateViewColors();
+<<<<<<< .our
   SetLayoutManager(
       std::make_unique<views::BoxLayout>(views::BoxLayout::kHorizontal));
+=======
+  SetLayoutManager(std::make_unique<views::BoxLayout>(
+      views::BoxLayout::kHorizontal));
+>>>>>>> .their
   window_->GetFocusManager()->AddFocusChangeListener(this);
 }
 
@@ -178,7 +183,11 @@
   }
 #elif defined(OS_WIN)
   for (auto* child : GetChildrenInZOrder()) {
+<<<<<<< .our
     auto* button = static_cast<SubmenuButton*>(child);
+=======
+    auto button = static_cast<SubmenuButton*>(child);
+>>>>>>> .their
     button->SetUnderlineColor(color_utils::GetSysSkColor(COLOR_MENUTEXT));
   }
 #endif
added in both
  our    100644 8f2139cb90fab876a1db1b17cac016997a3904ba atom/browser/ui/views/win_frame_view.cc
  their  100644 91fdb8a966809633d934f97b46861aa4ef4c8120 atom/browser/ui/views/win_frame_view.cc
@@ -10,7 +10,15 @@
 
 namespace atom {
 
+<<<<<<< .our
 const char WinFrameView::kViewClassName[] = "WinFrameView";
+=======
+namespace {
+
+const char kViewClassName[] = "WinFrameView";
+
+}  // namespace
+>>>>>>> .their
 
 WinFrameView::WinFrameView() {}
 
added in both
  our    100644 a6ffd7f363304913bb124908f138258bb804e56f atom/browser/ui/views/win_frame_view.h
  their  100644 b2c1ef3a15de9a222233a27193ed811a8add09f6 atom/browser/ui/views/win_frame_view.h
@@ -11,9 +11,14 @@
 
 class WinFrameView : public FramelessView {
  public:
+<<<<<<< .our
   static const char kViewClassName[];
   WinFrameView();
   ~WinFrameView() override;
+=======
+  WinFrameView();
+  virtual ~WinFrameView();
+>>>>>>> .their
 
   // views::NonClientFrameView:
   gfx::Rect GetWindowBoundsForClientBounds(
added in both
  our    100644 39197cdccc994ee96aad07d8f5db01258fcb66a4 atom/browser/ui/webui/pdf_viewer_handler.cc
  their  100644 4b63c3dc7112a85f594061bb262def495da69582 atom/browser/ui/webui/pdf_viewer_handler.cc
@@ -112,8 +112,12 @@
     PopulateStreamInfo(stream_info.get(), stream_, original_url_);
     ResolveJavascriptCallback(*callback_id, *stream_info);
   } else {
+<<<<<<< .our
     initialize_callback_id_ =
         base::Value::ToUniquePtrValue(callback_id.Clone());
+=======
+    initialize_callback_id_ = callback_id->CreateDeepCopy();
+>>>>>>> .their
   }
 
   auto zoom_controller =
added in both
  our    100644 4a76126214e7ae0063fa379c64aaca6be9f17d20 atom/browser/ui/win/jump_list.cc
  their  100644 6af235e756c227c0b1d7fed0446e08ee10352800 atom/browser/ui/win/jump_list.cc
@@ -144,6 +144,7 @@
 
 namespace atom {
 
+<<<<<<< .our
 JumpListItem::JumpListItem() = default;
 JumpListItem::JumpListItem(const JumpListItem&) = default;
 JumpListItem::~JumpListItem() = default;
@@ -151,12 +152,17 @@
 JumpListCategory::JumpListCategory(const JumpListCategory&) = default;
 JumpListCategory::~JumpListCategory() = default;
 
+=======
+>>>>>>> .their
 JumpList::JumpList(const base::string16& app_id) : app_id_(app_id) {
   destinations_.CoCreateInstance(CLSID_DestinationList);
 }
 
+<<<<<<< .our
 JumpList::~JumpList() = default;
 
+=======
+>>>>>>> .their
 bool JumpList::Begin(int* min_items, std::vector<JumpListItem>* removed_items) {
   DCHECK(destinations_);
   if (!destinations_)
@@ -275,9 +281,15 @@
         result = JumpListResult::GENERIC_ERROR;
     }
   } else {
+<<<<<<< .our
     HRESULT hr = destinations_->AppendCategory(category.name.c_str(), items);
     if (FAILED(hr)) {
       if (hr == static_cast<HRESULT>(0x80040F03)) {
+=======
+    auto hr = destinations_->AppendCategory(category.name.c_str(), items);
+    if (FAILED(hr)) {
+      if (hr == 0x80040F03) {
+>>>>>>> .their
         LOG(ERROR) << "Failed to append custom category "
                    << "'" << category.name << "' "
                    << "to Jump List due to missing file type registration.";
added in both
  our    100644 59d9a21a6c31f4d8fa5ebc0261630f3383138e84 atom/browser/ui/win/jump_list.h
  their  100644 fc4ab085fc0db76b0d392abd5402adf35abe6ba1 atom/browser/ui/win/jump_list.h
@@ -51,10 +51,13 @@
   base::string16 description;
   base::FilePath icon_path;
   int icon_index = 0;
+<<<<<<< .our
 
   JumpListItem();
   JumpListItem(const JumpListItem&);
   ~JumpListItem();
+=======
+>>>>>>> .their
 };
 
 struct JumpListCategory {
@@ -74,10 +77,13 @@
   Type type = Type::TASKS;
   base::string16 name;
   std::vector<JumpListItem> items;
+<<<<<<< .our
 
   JumpListCategory();
   JumpListCategory(const JumpListCategory&);
   ~JumpListCategory();
+=======
+>>>>>>> .their
 };
 
 // Creates or removes a custom Jump List for an app.
@@ -88,7 +94,10 @@
   // custom Jump List should be created/removed, it's usually obtained by
   // calling GetCurrentProcessExplicitAppUserModelID().
   explicit JumpList(const base::string16& app_id);
+<<<<<<< .our
   ~JumpList();
+=======
+>>>>>>> .their
 
   // Starts a new transaction, must be called before appending any categories,
   // aborting or committing. After the method returns |min_items| will indicate
added in both
  our    100644 bd4c17d2fcee53c7c106b0912252848cd6de0dc7 atom/browser/ui/win/notify_icon.h
  their  100644 aed548ecb6188ccdfd71b93684a613ee2fe21d1a atom/browser/ui/win/notify_icon.h
@@ -32,7 +32,11 @@
  public:
   // Constructor which provides this icon's unique ID and messaging window.
   NotifyIcon(NotifyIconHost* host, UINT id, HWND window, UINT message);
+<<<<<<< .our
   ~NotifyIcon() override;
+=======
+  virtual ~NotifyIcon();
+>>>>>>> .their
 
   // Handles a click event from the user - if |left_button_click| is true and
   // there is a registered observer, passes the click event to the observer,
added in both
  our    100644 c4b92a24aefb3afa3ff2929eea59940d439e8709 atom/browser/ui/win/taskbar_host.cc
  their  100644 e023fdc8c836899b7a8b9a80d4bc57edb365f3cc atom/browser/ui/win/taskbar_host.cc
@@ -50,11 +50,14 @@
 
 }  // namespace
 
+<<<<<<< .our
 TaskbarHost::ThumbarButton::ThumbarButton() = default;
 TaskbarHost::ThumbarButton::ThumbarButton(const TaskbarHost::ThumbarButton&) =
     default;
 TaskbarHost::ThumbarButton::~ThumbarButton() = default;
 
+=======
+>>>>>>> .their
 TaskbarHost::TaskbarHost() {}
 
 TaskbarHost::~TaskbarHost() {}
added in both
  our    100644 2182d377a7736f5e135d2f518c2a0a838cd0d1a0 atom/browser/ui/win/taskbar_host.h
  their  100644 31199cf22837b604beca1fe92627b53cf6f71e8f atom/browser/ui/win/taskbar_host.h
@@ -26,10 +26,13 @@
     gfx::Image icon;
     std::vector<std::string> flags;
     base::Closure clicked_callback;
+<<<<<<< .our
 
     ThumbarButton();
     ThumbarButton(const ThumbarButton&);
     ~ThumbarButton();
+=======
+>>>>>>> .their
   };
 
   TaskbarHost();
added in both
  our    100644 c21c93383155091a7481cdd4e741cefad90a4a55 atom/browser/web_contents_preferences.cc
  their  100644 f2385b974dc7362c37cd7dcd1506bb048e5db5d7 atom/browser/web_contents_preferences.cc
@@ -15,7 +15,10 @@
 #include "base/command_line.h"
 #include "base/memory/ptr_util.h"
 #include "base/strings/string_number_conversions.h"
+<<<<<<< .our
 #include "base/strings/utf_string_conversions.h"
+=======
+>>>>>>> .their
 #include "cc/base/switches.h"
 #include "content/public/browser/render_frame_host.h"
 #include "content/public/browser/render_process_host.h"
@@ -30,6 +33,7 @@
 
 DEFINE_WEB_CONTENTS_USER_DATA_KEY(atom::WebContentsPreferences);
 
+<<<<<<< .our
 namespace {
 
 bool GetAsString(const base::Value* val,
@@ -75,6 +79,8 @@
 
 }  // namespace
 
+=======
+>>>>>>> .their
 namespace atom {
 
 // static
@@ -91,7 +97,11 @@
   copied.Delete("isGuest");
   copied.Delete("session");
 
+<<<<<<< .our
   mate::ConvertFromV8(isolate, copied.GetHandle(), &preference_);
+=======
+  mate::ConvertFromV8(isolate, copied.GetHandle(), &dict_);
+>>>>>>> .their
   web_contents->SetUserData(UserDataKey(), base::WrapUnique(this));
 
   instances_.push_back(this);
@@ -99,6 +109,10 @@
   // Set WebPreferences defaults onto the JS object
   SetDefaultBoolIfUndefined(options::kPlugins, false);
   SetDefaultBoolIfUndefined(options::kExperimentalFeatures, false);
+<<<<<<< .our
+=======
+  SetDefaultBoolIfUndefined(options::kExperimentalCanvasFeatures, false);
+>>>>>>> .their
   bool node = SetDefaultBoolIfUndefined(options::kNodeIntegration, true);
   SetDefaultBoolIfUndefined(options::kNodeIntegrationInWorker, false);
   SetDefaultBoolIfUndefined(options::kWebviewTag, node);
@@ -124,7 +138,11 @@
 #endif
   SetDefaultBoolIfUndefined(options::kOffscreen, false);
 
+<<<<<<< .our
   last_preference_ = preference_.Clone();
+=======
+  last_dict_ = std::move(*dict_.CreateDeepCopy());
+>>>>>>> .their
 }
 
 WebContentsPreferences::~WebContentsPreferences() {
@@ -135,6 +153,7 @@
 bool WebContentsPreferences::SetDefaultBoolIfUndefined(
     const base::StringPiece& key,
     bool val) {
+<<<<<<< .our
   auto* current_value =
       preference_.FindKeyOfType(key, base::Value::Type::BOOLEAN);
   if (current_value) {
@@ -167,20 +186,47 @@
 bool WebContentsPreferences::GetPreference(const base::StringPiece& name,
                                            std::string* value) const {
   return GetAsString(&preference_, name, value);
+=======
+  bool existing;
+  if (!dict_.GetBoolean(key, &existing)) {
+    dict_.SetBoolean(key, val);
+    return val;
+  }
+  return existing;
+}
+
+bool WebContentsPreferences::IsEnabled(const base::StringPiece& name,
+                                       bool default_value) {
+  bool bool_value = default_value;
+  dict_.GetBoolean(name, &bool_value);
+  return bool_value;
+}
+
+void WebContentsPreferences::Merge(const base::DictionaryValue& extend) {
+  dict_.MergeDictionary(&extend);
+>>>>>>> .their
 }
 
 bool WebContentsPreferences::GetPreloadPath(
     base::FilePath::StringType* path) const {
   DCHECK(path);
   base::FilePath::StringType preload;
+<<<<<<< .our
   if (GetAsString(&preference_, options::kPreloadScript, &preload)) {
+=======
+  if (dict_.GetString(options::kPreloadScript, &preload)) {
+>>>>>>> .their
     if (base::FilePath(preload).IsAbsolute()) {
       *path = std::move(preload);
       return true;
     } else {
       LOG(ERROR) << "preload script must have absolute path.";
     }
+<<<<<<< .our
   } else if (GetAsString(&preference_, options::kPreloadURL, &preload)) {
+=======
+  } else if (dict_.GetString(options::kPreloadURL, &preload)) {
+>>>>>>> .their
     // Translate to file path if there is "preload-url" option.
     base::FilePath preload_path;
     if (net::FileURLToFilePath(GURL(preload), &preload_path)) {
@@ -214,6 +260,7 @@
 
 void WebContentsPreferences::AppendCommandLineSwitches(
     base::CommandLine* command_line) {
+<<<<<<< .our
   // Check if plugins are enabled.
   if (IsEnabled(options::kPlugins))
     command_line->AppendSwitch(switches::kEnablePlugins);
@@ -230,17 +277,45 @@
 
   // Whether to enable node integration in Worker.
   if (IsEnabled(options::kNodeIntegrationInWorker))
+=======
+  bool b;
+  // Check if plugins are enabled.
+  if (dict_.GetBoolean(options::kPlugins, &b) && b)
+    command_line->AppendSwitch(switches::kEnablePlugins);
+
+  // Experimental flags.
+  if (dict_.GetBoolean(options::kExperimentalFeatures, &b) && b)
+    command_line->AppendSwitch(
+        ::switches::kEnableExperimentalWebPlatformFeatures);
+  if (dict_.GetBoolean(options::kExperimentalCanvasFeatures, &b) && b)
+    command_line->AppendSwitch(::switches::kEnableExperimentalCanvasFeatures);
+
+  // Check if we have node integration specified.
+  bool node_integration = true;
+  dict_.GetBoolean(options::kNodeIntegration, &node_integration);
+  command_line->AppendSwitchASCII(switches::kNodeIntegration,
+                                  node_integration ? "true" : "false");
+
+  // Whether to enable node integration in Worker.
+  if (dict_.GetBoolean(options::kNodeIntegrationInWorker, &b) && b)
+>>>>>>> .their
     command_line->AppendSwitch(switches::kNodeIntegrationInWorker);
 
   // Check if webview tag creation is enabled, default to nodeIntegration value.
   // TODO(kevinsawicki): Default to false in 2.0
+<<<<<<< .our
   bool webview_tag = IsEnabled(options::kWebviewTag, enable_node_integration);
+=======
+  bool webview_tag = node_integration;
+  dict_.GetBoolean(options::kWebviewTag, &webview_tag);
+>>>>>>> .their
   command_line->AppendSwitchASCII(switches::kWebviewTag,
                                   webview_tag ? "true" : "false");
 
   // If the `sandbox` option was passed to the BrowserWindow's webPreferences,
   // pass `--enable-sandbox` to the renderer so it won't have any node.js
   // integration.
+<<<<<<< .our
   if (IsEnabled(options::kSandbox))
     command_line->AppendSwitch(switches::kEnableSandbox);
   else if (!command_line->HasSwitch(switches::kEnableSandbox))
@@ -248,6 +323,13 @@
 
   // Check if nativeWindowOpen is enabled.
   if (IsEnabled(options::kNativeWindowOpen))
+=======
+  if (dict_.GetBoolean(options::kSandbox, &b) && b)
+    command_line->AppendSwitch(switches::kEnableSandbox);
+  else if (!command_line->HasSwitch(switches::kEnableSandbox))
+    command_line->AppendSwitch(::switches::kNoSandbox);
+  if (dict_.GetBoolean(options::kNativeWindowOpen, &b) && b)
+>>>>>>> .their
     command_line->AppendSwitch(switches::kNativeWindowOpen);
 
   // The preload script.
@@ -256,43 +338,70 @@
     command_line->AppendSwitchNative(switches::kPreloadScript, preload);
 
   // Custom args for renderer process
+<<<<<<< .our
   auto* customArgs =
       preference_.FindKeyOfType(options::kCustomArgs, base::Value::Type::LIST);
   if (customArgs) {
     for (const auto& customArg : customArgs->GetList()) {
+=======
+  base::Value* customArgs;
+  if (dict_.Get(options::kCustomArgs, &customArgs) && customArgs->is_list()) {
+    for (const base::Value& customArg : customArgs->GetList()) {
+>>>>>>> .their
       if (customArg.is_string())
         command_line->AppendArg(customArg.GetString());
     }
   }
 
   // Run Electron APIs and preload script in isolated world
+<<<<<<< .our
   if (IsEnabled(options::kContextIsolation))
+=======
+  if (dict_.GetBoolean(options::kContextIsolation, &b) && b)
+>>>>>>> .their
     command_line->AppendSwitch(switches::kContextIsolation);
 
   // --background-color.
   std::string s;
+<<<<<<< .our
   if (GetAsString(&preference_, options::kBackgroundColor, &s))
+=======
+  if (dict_.GetString(options::kBackgroundColor, &s))
+>>>>>>> .their
     command_line->AppendSwitchASCII(switches::kBackgroundColor, s);
 
   // --guest-instance-id, which is used to identify guest WebContents.
   int guest_instance_id = 0;
+<<<<<<< .our
   if (GetAsInteger(&preference_, options::kGuestInstanceID, &guest_instance_id))
+=======
+  if (dict_.GetInteger(options::kGuestInstanceID, &guest_instance_id))
+>>>>>>> .their
     command_line->AppendSwitchASCII(switches::kGuestInstanceID,
                                     base::IntToString(guest_instance_id));
 
   // Pass the opener's window id.
   int opener_id;
+<<<<<<< .our
   if (GetAsInteger(&preference_, options::kOpenerID, &opener_id))
+=======
+  if (dict_.GetInteger(options::kOpenerID, &opener_id))
+>>>>>>> .their
     command_line->AppendSwitchASCII(switches::kOpenerID,
                                     base::IntToString(opener_id));
 
 #if defined(OS_MACOSX)
   // Enable scroll bounce.
+<<<<<<< .our
   if (IsEnabled(options::kScrollBounce))
+=======
+  if (dict_.GetBoolean(options::kScrollBounce, &b) && b)
+>>>>>>> .their
     command_line->AppendSwitch(switches::kScrollBounce);
 #endif
 
   // Custom command line switches.
+<<<<<<< .our
   auto* args =
       preference_.FindKeyOfType("commandLineSwitches", base::Value::Type::LIST);
   if (args) {
@@ -302,15 +411,31 @@
         if (!arg_val.empty())
           command_line->AppendSwitch(arg_val);
       }
+=======
+  const base::ListValue* args;
+  if (dict_.GetList("commandLineSwitches", &args)) {
+    for (size_t i = 0; i < args->GetSize(); ++i) {
+      std::string arg;
+      if (args->GetString(i, &arg) && !arg.empty())
+        command_line->AppendSwitch(arg);
+>>>>>>> .their
     }
   }
 
   // Enable blink features.
+<<<<<<< .our
   if (GetAsString(&preference_, options::kEnableBlinkFeatures, &s))
     command_line->AppendSwitchASCII(::switches::kEnableBlinkFeatures, s);
 
   // Disable blink features.
   if (GetAsString(&preference_, options::kDisableBlinkFeatures, &s))
+=======
+  if (dict_.GetString(options::kEnableBlinkFeatures, &s))
+    command_line->AppendSwitchASCII(::switches::kEnableBlinkFeatures, s);
+
+  // Disable blink features.
+  if (dict_.GetString(options::kDisableBlinkFeatures, &s))
+>>>>>>> .their
     command_line->AppendSwitchASCII(::switches::kDisableBlinkFeatures, s);
 
   if (guest_instance_id) {
@@ -337,11 +462,16 @@
   // We are appending args to a webContents so let's save the current state
   // of our preferences object so that during the lifetime of the WebContents
   // we can fetch the options used to initally configure the WebContents
+<<<<<<< .our
   last_preference_ = preference_.Clone();
+=======
+  last_dict_ = std::move(*dict_.CreateDeepCopy());
+>>>>>>> .their
 }
 
 void WebContentsPreferences::OverrideWebkitPrefs(
     content::WebPreferences* prefs) {
+<<<<<<< .our
   prefs->javascript_enabled = IsEnabled("javascript", true /* default_value */);
   prefs->images_enabled = IsEnabled("images", true /* default_value */);
   prefs->text_areas_are_resizable =
@@ -392,4 +522,66 @@
     prefs->default_encoding = encoding;
 }
 
+=======
+  bool b;
+  if (dict_.GetBoolean("javascript", &b))
+    prefs->javascript_enabled = b;
+  if (dict_.GetBoolean("images", &b))
+    prefs->images_enabled = b;
+  if (dict_.GetBoolean("textAreasAreResizable", &b))
+    prefs->text_areas_are_resizable = b;
+  if (dict_.GetBoolean("webgl", &b)) {
+    prefs->webgl1_enabled = b;
+    prefs->webgl2_enabled = b;
+  }
+  if (dict_.GetBoolean(options::kWebSecurity, &b)) {
+    prefs->web_security_enabled = b;
+    prefs->allow_running_insecure_content = !b;
+  }
+  if (dict_.GetBoolean(options::kAllowRunningInsecureContent, &b))
+    prefs->allow_running_insecure_content = b;
+  if (dict_.GetBoolean("navigateOnDragDrop", &b))
+    prefs->navigate_on_drag_drop = b;
+  const base::DictionaryValue* fonts = nullptr;
+  if (dict_.GetDictionary("defaultFontFamily", &fonts)) {
+    base::string16 font;
+    if (fonts->GetString("standard", &font))
+      prefs->standard_font_family_map[content::kCommonScript] = font;
+    if (fonts->GetString("serif", &font))
+      prefs->serif_font_family_map[content::kCommonScript] = font;
+    if (fonts->GetString("sansSerif", &font))
+      prefs->sans_serif_font_family_map[content::kCommonScript] = font;
+    if (fonts->GetString("monospace", &font))
+      prefs->fixed_font_family_map[content::kCommonScript] = font;
+    if (fonts->GetString("cursive", &font))
+      prefs->cursive_font_family_map[content::kCommonScript] = font;
+    if (fonts->GetString("fantasy", &font))
+      prefs->fantasy_font_family_map[content::kCommonScript] = font;
+  }
+  int size;
+  if (GetInteger("defaultFontSize", &size))
+    prefs->default_font_size = size;
+  if (GetInteger("defaultMonospaceFontSize", &size))
+    prefs->default_fixed_font_size = size;
+  if (GetInteger("minimumFontSize", &size))
+    prefs->minimum_font_size = size;
+  std::string encoding;
+  if (dict_.GetString("defaultEncoding", &encoding))
+    prefs->default_encoding = encoding;
+}
+
+bool WebContentsPreferences::GetInteger(const base::StringPiece& attribute_name,
+                                        int* val) {
+  // if it is already an integer, no conversion needed
+  if (dict_.GetInteger(attribute_name, val))
+    return true;
+
+  std::string str;
+  if (dict_.GetString(attribute_name, &str))
+    return base::StringToInt(str, val);
+
+  return false;
+}
+
+>>>>>>> .their
 }  // namespace atom
added in both
  our    100644 d835347afcd259f473f95271a2c19e42afcc6f2b atom/browser/web_contents_preferences.h
  their  100644 c1a24eff3418bedaeaf131c0e39a0e3bb229129a atom/browser/web_contents_preferences.h
@@ -37,8 +37,12 @@
   ~WebContentsPreferences() override;
 
   // A simple way to know whether a Boolean property is enabled.
+<<<<<<< .our
   bool IsEnabled(const base::StringPiece& name,
                  bool default_value = false) const;
+=======
+  bool IsEnabled(const base::StringPiece& name, bool default_value = false);
+>>>>>>> .their
 
   // $.extend(|web_preferences|, |new_web_preferences|).
   void Merge(const base::DictionaryValue& new_web_preferences);
@@ -49,18 +53,27 @@
   // Modify the WebPreferences according to preferences.
   void OverrideWebkitPrefs(content::WebPreferences* prefs);
 
+<<<<<<< .our
   // Clear the current WebPreferences.
   void Clear();
 
   // Return true if the particular preference value exists.
   bool GetPreference(const base::StringPiece& name, std::string* value) const;
 
+=======
+>>>>>>> .their
   // Returns the preload script path.
   bool GetPreloadPath(base::FilePath::StringType* path) const;
 
   // Returns the web preferences.
+<<<<<<< .our
   base::Value* preference() { return &preference_; }
   base::Value* last_preference() { return &last_preference_; }
+=======
+  base::DictionaryValue* dict() { return &dict_; }
+  const base::DictionaryValue* dict() const { return &dict_; }
+  base::DictionaryValue* last_dict() { return &last_dict_; }
+>>>>>>> .their
 
  private:
   friend class content::WebContentsUserData<WebContentsPreferences>;
@@ -72,12 +85,23 @@
   // Set preference value to given bool if user did not provide value
   bool SetDefaultBoolIfUndefined(const base::StringPiece& key, bool val);
 
+<<<<<<< .our
+=======
+  // Get preferences value as integer possibly coercing it from a string
+  bool GetInteger(const base::StringPiece& attribute_name, int* val);
+
+>>>>>>> .their
   static std::vector<WebContentsPreferences*> instances_;
 
   content::WebContents* web_contents_;
 
+<<<<<<< .our
   base::Value preference_ = base::Value(base::Value::Type::DICTIONARY);
   base::Value last_preference_ = base::Value(base::Value::Type::DICTIONARY);
+=======
+  base::DictionaryValue dict_;
+  base::DictionaryValue last_dict_;
+>>>>>>> .their
 
   DISALLOW_COPY_AND_ASSIGN(WebContentsPreferences);
 };
added in both
  our    100644 74c8573d13f15bcaa189abdc40fa0cd8e48f89be atom/browser/web_dialog_helper.cc
  their  100644 f39f77a643522bba10cc2f764b0d5daf02f35d42 atom/browser/web_dialog_helper.cc
@@ -220,7 +220,10 @@
     switch (params.mode) {
       case content::FileChooserParams::OpenMultiple:
         flags |= file_dialog::FILE_DIALOG_MULTI_SELECTIONS;
+<<<<<<< .our
         FALLTHROUGH;
+=======
+>>>>>>> .their
       case content::FileChooserParams::Open:
         flags |= file_dialog::FILE_DIALOG_OPEN_FILE;
         flags |= file_dialog::FILE_DIALOG_TREAT_PACKAGE_APP_AS_DIRECTORY;
added in both
  our    100644 09edfdaac9107386241505d2d5763b1b24aa73a4 atom/common/api/atom_api_native_image.cc
  their  100644 7b274b38cae7e44b0737912e93a7015c64a60895 atom/common/api/atom_api_native_image.cc
@@ -245,14 +245,23 @@
 
   // First try loading the icon with specified size.
   if (!hicon_path_.empty()) {
+<<<<<<< .our
     hicons_[size] = ReadICOFromPath(size, hicon_path_);
+=======
+    hicons_[size] = std::move(ReadICOFromPath(size, hicon_path_));
+>>>>>>> .their
     return hicons_[size].get();
   }
 
   // Then convert the image to ICO.
   if (image_.IsEmpty())
     return NULL;
+<<<<<<< .our
   hicons_[size] = IconUtil::CreateHICONFromSkBitmap(image_.AsBitmap());
+=======
+  hicons_[size] =
+      std::move(IconUtil::CreateHICONFromSkBitmap(image_.AsBitmap()));
+>>>>>>> .their
   return hicons_[size].get();
 }
 #endif
added in both
  our    100644 3dba3d63673ca8eb02044bd1335a3095f0194971 atom/common/api/atom_bindings.cc
  their  100644 ee02ed3f6a28bcc15407465ae0cc34f71664d9dc atom/common/api/atom_bindings.cc
@@ -14,7 +14,10 @@
 #include "atom/common/native_mate_converters/string16_converter.h"
 #include "atom/common/node_includes.h"
 #include "base/logging.h"
+<<<<<<< .our
 #include "base/process/process_info.h"
+=======
+>>>>>>> .their
 #include "base/process/process_metrics_iocounters.h"
 #include "base/sys_info.h"
 #include "native_mate/dictionary.h"
@@ -56,10 +59,16 @@
   dict.SetMethod("log", &Log);
   dict.SetMethod("getHeapStatistics", &GetHeapStatistics);
   dict.SetMethod("getProcessMemoryInfo", &GetProcessMemoryInfo);
+<<<<<<< .our
   dict.SetMethod("getCreationTime", &GetCreationTime);
   dict.SetMethod("getSystemMemoryInfo", &GetSystemMemoryInfo);
   dict.SetMethod("getCPUUsage", base::Bind(&AtomBindings::GetCPUUsage,
                                            base::Unretained(metrics_.get())));
+=======
+  dict.SetMethod("getSystemMemoryInfo", &GetSystemMemoryInfo);
+  dict.SetMethod("getCPUUsage", base::Bind(&AtomBindings::GetCPUUsage,
+                                           base::Unretained(this)));
+>>>>>>> .their
   dict.SetMethod("getIOCounters", &GetIOCounters);
 #if defined(OS_POSIX)
   dict.SetMethod("setFdLimit", &base::SetFdLimit);
@@ -135,7 +144,10 @@
   isolate->GetHeapStatistics(&v8_heap_stats);
 
   mate::Dictionary dict = mate::Dictionary::CreateEmpty(isolate);
+<<<<<<< .our
   dict.SetHidden("simple", true);
+=======
+>>>>>>> .their
   dict.Set("totalHeapSize",
            static_cast<double>(v8_heap_stats.total_heap_size() >> 10));
   dict.Set(
@@ -164,7 +176,10 @@
   auto metrics = base::ProcessMetrics::CreateCurrentProcessMetrics();
 
   mate::Dictionary dict = mate::Dictionary::CreateEmpty(isolate);
+<<<<<<< .our
   dict.SetHidden("simple", true);
+=======
+>>>>>>> .their
   dict.Set("workingSetSize",
            static_cast<double>(metrics->GetWorkingSetSize() >> 10));
   dict.Set("peakWorkingSetSize",
@@ -180,6 +195,7 @@
 }
 
 // static
+<<<<<<< .our
 v8::Local<v8::Value> AtomBindings::GetCreationTime(v8::Isolate* isolate) {
   auto timeValue = base::CurrentProcessInfo::CreationTime();
   if (timeValue.is_null()) {
@@ -190,6 +206,8 @@
 }
 
 // static
+=======
+>>>>>>> .their
 v8::Local<v8::Value> AtomBindings::GetSystemMemoryInfo(v8::Isolate* isolate,
                                                        mate::Arguments* args) {
   base::SystemMemoryInfoKB mem_info;
@@ -199,7 +217,10 @@
   }
 
   mate::Dictionary dict = mate::Dictionary::CreateEmpty(isolate);
+<<<<<<< .our
   dict.SetHidden("simple", true);
+=======
+>>>>>>> .their
   dict.Set("total", mem_info.total);
 
   // See Chromium's "base/process/process_metrics.h" for an explanation.
@@ -220,6 +241,7 @@
   return dict.GetHandle();
 }
 
+<<<<<<< .our
 // static
 v8::Local<v8::Value> AtomBindings::GetCPUUsage(base::ProcessMetrics* metrics,
                                                v8::Isolate* isolate) {
@@ -228,11 +250,22 @@
   int processor_count = base::SysInfo::NumberOfProcessors();
   dict.Set("percentCPUUsage",
            metrics->GetPlatformIndependentCPUUsage() / processor_count);
+=======
+v8::Local<v8::Value> AtomBindings::GetCPUUsage(v8::Isolate* isolate) {
+  mate::Dictionary dict = mate::Dictionary::CreateEmpty(isolate);
+  int processor_count = base::SysInfo::NumberOfProcessors();
+  dict.Set("percentCPUUsage",
+           metrics_->GetPlatformIndependentCPUUsage() / processor_count);
+>>>>>>> .their
 
   // NB: This will throw NOTIMPLEMENTED() on Windows
   // For backwards compatibility, we'll return 0
 #if !defined(OS_WIN)
+<<<<<<< .our
   dict.Set("idleWakeupsPerSecond", metrics->GetIdleWakeupsPerSecond());
+=======
+  dict.Set("idleWakeupsPerSecond", metrics_->GetIdleWakeupsPerSecond());
+>>>>>>> .their
 #else
   dict.Set("idleWakeupsPerSecond", 0);
 #endif
@@ -245,7 +278,10 @@
   auto metrics = base::ProcessMetrics::CreateCurrentProcessMetrics();
   base::IoCounters io_counters;
   mate::Dictionary dict = mate::Dictionary::CreateEmpty(isolate);
+<<<<<<< .our
   dict.SetHidden("simple", true);
+=======
+>>>>>>> .their
 
   if (metrics->GetIOCounters(&io_counters)) {
     dict.Set("readOperationCount", io_counters.ReadOperationCount);
added in both
  our    100644 ba8385c979b15286fd7647582e7d0aee93e1974e atom/common/api/atom_bindings.h
  their  100644 46a5f36bdcea9adb76c091b17bbed47a0ba8a2ea atom/common/api/atom_bindings.h
@@ -37,11 +37,17 @@
   static void Hang();
   static v8::Local<v8::Value> GetHeapStatistics(v8::Isolate* isolate);
   static v8::Local<v8::Value> GetProcessMemoryInfo(v8::Isolate* isolate);
+<<<<<<< .our
   static v8::Local<v8::Value> GetCreationTime(v8::Isolate* isolate);
   static v8::Local<v8::Value> GetSystemMemoryInfo(v8::Isolate* isolate,
                                                   mate::Arguments* args);
   static v8::Local<v8::Value> GetCPUUsage(base::ProcessMetrics* metrics,
                                           v8::Isolate* isolate);
+=======
+  static v8::Local<v8::Value> GetSystemMemoryInfo(v8::Isolate* isolate,
+                                                  mate::Arguments* args);
+  v8::Local<v8::Value> GetCPUUsage(v8::Isolate* isolate);
+>>>>>>> .their
   static v8::Local<v8::Value> GetIOCounters(v8::Isolate* isolate);
 
  private:
added in both
  our    100644 9b37f94a4dc462c0cc84e0182654ff2571952df9 atom/common/asar/archive.cc
  their  100644 769efec0a2b0d402428ab10ced26feeb5c6157c5 atom/common/asar/archive.cc
@@ -221,13 +221,21 @@
   if (!GetNodeFromPath(path.AsUTF8Unsafe(), header_.get(), &node))
     return false;
 
+<<<<<<< .our
   if (node->FindKey("link")) {
+=======
+  if (node->HasKey("link")) {
+>>>>>>> .their
     stats->is_file = false;
     stats->is_link = true;
     return true;
   }
 
+<<<<<<< .our
   if (node->FindKey("files")) {
+=======
+  if (node->HasKey("files")) {
+>>>>>>> .their
     stats->is_file = false;
     stats->is_directory = true;
     return true;
added in both
  our    100644 65e7d19911559a40b1b258319df5fe0fa180354f atom/common/atom_version.h
  their  100644 3321475153fda689b992c1b53600094ebd23c879 atom/common/atom_version.h
@@ -5,10 +5,17 @@
 #ifndef ATOM_COMMON_ATOM_VERSION_H_
 #define ATOM_COMMON_ATOM_VERSION_H_
 
+<<<<<<< .our
 #define ATOM_MAJOR_VERSION 4
 #define ATOM_MINOR_VERSION 0
 #define ATOM_PATCH_VERSION 0
 #define ATOM_PRE_RELEASE_VERSION -nightly.20180821
+=======
+#define ATOM_MAJOR_VERSION 3
+#define ATOM_MINOR_VERSION 0
+#define ATOM_PATCH_VERSION 0
+#define ATOM_PRE_RELEASE_VERSION -beta.7
+>>>>>>> .their
 
 #ifndef ATOM_STRINGIFY
 #define ATOM_STRINGIFY(n) ATOM_STRINGIFY_HELPER(n)
added in both
  our    100644 89a2a5966d6caf3c13643065ef084e98b69efcaf atom/common/crash_reporter/crash_reporter_win.h
  their  100644 f7f1c6b28455a52daf0860028df1054788ddde54 atom/common/crash_reporter/crash_reporter_win.h
@@ -11,7 +11,11 @@
 
 #include "atom/common/crash_reporter/crash_reporter.h"
 #include "base/compiler_specific.h"
+<<<<<<< .our
 #include "breakpad/src/client/windows/handler/exception_handler.h"
+=======
+#include "vendor/breakpad/src/client/windows/handler/exception_handler.h"
+>>>>>>> .their
 
 namespace base {
 template <typename T>
@@ -40,7 +44,11 @@
   friend struct base::DefaultSingletonTraits<CrashReporterWin>;
 
   CrashReporterWin();
+<<<<<<< .our
   ~CrashReporterWin() override;
+=======
+  virtual ~CrashReporterWin();
+>>>>>>> .their
 
   static bool FilterCallback(void* context,
                              EXCEPTION_POINTERS* exinfo,
@@ -65,9 +73,13 @@
   google_breakpad::CustomClientInfo custom_info_;
 
   bool skip_system_crash_handler_ = false;
+<<<<<<< .our
 #ifdef _WIN64
   bool code_range_registered_ = false;
 #endif
+=======
+  bool code_range_registered_ = false;
+>>>>>>> .their
   std::unique_ptr<google_breakpad::ExceptionHandler> breakpad_;
 
   DISALLOW_COPY_AND_ASSIGN(CrashReporterWin);
added in both
  our    100644 8b0e3de5cecdda5c97237ebd5d6e0bbbd99a280b atom/common/crash_reporter/linux/crash_dump_handler.cc
  their  100644 ccc8d0d538e3a23a85f7dc3dd2d2650f6cb88bcd atom/common/crash_reporter/linux/crash_dump_handler.cc
@@ -15,7 +15,11 @@
 #include "base/posix/eintr_wrapper.h"
 #include "breakpad/src/client/linux/minidump_writer/directory_reader.h"
 #include "breakpad/src/common/linux/linux_libc_support.h"
+<<<<<<< .our
 #include "breakpad/src/common/memory_allocator.h"
+=======
+#include "breakpad/src/common/memory.h"
+>>>>>>> .their
 
 #include "third_party/lss/linux_syscall_support.h"
 
added in both
  our    100644 d13111f495be844df10deebacd572560021bbb4e atom/common/crash_reporter/win/crash_service.cc
  their  100644 a1a6ab6d7908389bdc0a400cf751fde809408115 atom/common/crash_reporter/win/crash_service.cc
@@ -17,9 +17,15 @@
 #include "base/strings/string_util.h"
 #include "base/time/time.h"
 #include "base/win/windows_version.h"
+<<<<<<< .our
 #include "breakpad/src/client/windows/crash_generation/client_info.h"
 #include "breakpad/src/client/windows/crash_generation/crash_generation_server.h"
 #include "breakpad/src/client/windows/sender/crash_report_sender.h"
+=======
+#include "vendor/breakpad/src/client/windows/crash_generation/client_info.h"
+#include "vendor/breakpad/src/client/windows/crash_generation/crash_generation_server.h"
+#include "vendor/breakpad/src/client/windows/sender/crash_report_sender.h"
+>>>>>>> .their
 
 namespace breakpad {
 
@@ -132,7 +138,11 @@
   wcx.lpfnWndProc = CrashSvcWndProc;
   wcx.hInstance = instance;
   wcx.lpszClassName = class_name.c_str();
+<<<<<<< .our
   ::RegisterClassExW(&wcx);
+=======
+  ATOM atom = ::RegisterClassExW(&wcx);
+>>>>>>> .their
   DWORD style = visible ? WS_POPUPWINDOW | WS_VISIBLE : WS_OVERLAPPED;
 
   // The window size is zero but being a popup window still shows in the
@@ -487,6 +497,10 @@
   // Build the SDDL string for the label.
   std::wstring sddl = L"S:(ML;;NW;;;S-1-16-4096)";
 
+<<<<<<< .our
+=======
+  DWORD error = ERROR_SUCCESS;
+>>>>>>> .their
   PSECURITY_DESCRIPTOR sec_desc = NULL;
 
   PACL sacl = NULL;
added in both
  our    100644 d0a12cb6d91b9688c1bed496e64d6bbaccaf244a atom/common/keyboard_util.cc
  their  100644 b8caa1f1b00d652a67ecd103e5ce3a78b70c01f4 atom/common/keyboard_util.cc
@@ -88,108 +88,171 @@
 
     case ')':
       *shifted = true;
+<<<<<<< .our
       FALLTHROUGH;
+=======
+>>>>>>> .their
     case '0':
       return ui::VKEY_0;
     case '!':
       *shifted = true;
+<<<<<<< .our
       FALLTHROUGH;
+=======
+>>>>>>> .their
     case '1':
       return ui::VKEY_1;
     case '@':
       *shifted = true;
+<<<<<<< .our
       FALLTHROUGH;
+=======
+>>>>>>> .their
     case '2':
       return ui::VKEY_2;
     case '#':
       *shifted = true;
+<<<<<<< .our
       FALLTHROUGH;
+=======
+>>>>>>> .their
     case '3':
       return ui::VKEY_3;
     case '$':
       *shifted = true;
+<<<<<<< .our
       FALLTHROUGH;
+=======
+>>>>>>> .their
     case '4':
       return ui::VKEY_4;
     case '%':
       *shifted = true;
+<<<<<<< .our
       FALLTHROUGH;
+=======
+>>>>>>> .their
     case '5':
       return ui::VKEY_5;
     case '^':
       *shifted = true;
+<<<<<<< .our
       FALLTHROUGH;
+=======
+>>>>>>> .their
     case '6':
       return ui::VKEY_6;
     case '&':
       *shifted = true;
+<<<<<<< .our
       FALLTHROUGH;
+=======
+>>>>>>> .their
     case '7':
       return ui::VKEY_7;
     case '*':
       *shifted = true;
+<<<<<<< .our
       FALLTHROUGH;
+=======
+>>>>>>> .their
     case '8':
       return ui::VKEY_8;
     case '(':
       *shifted = true;
+<<<<<<< .our
       FALLTHROUGH;
+=======
+>>>>>>> .their
     case '9':
       return ui::VKEY_9;
 
     case ':':
       *shifted = true;
+<<<<<<< .our
       FALLTHROUGH;
+=======
+>>>>>>> .their
     case ';':
       return ui::VKEY_OEM_1;
     case '+':
       *shifted = true;
+<<<<<<< .our
       FALLTHROUGH;
+=======
+>>>>>>> .their
     case '=':
       return ui::VKEY_OEM_PLUS;
     case '<':
       *shifted = true;
+<<<<<<< .our
       FALLTHROUGH;
+=======
+>>>>>>> .their
     case ',':
       return ui::VKEY_OEM_COMMA;
     case '_':
       *shifted = true;
+<<<<<<< .our
       FALLTHROUGH;
+=======
+>>>>>>> .their
     case '-':
       return ui::VKEY_OEM_MINUS;
     case '>':
       *shifted = true;
+<<<<<<< .our
       FALLTHROUGH;
+=======
+>>>>>>> .their
     case '.':
       return ui::VKEY_OEM_PERIOD;
     case '?':
       *shifted = true;
+<<<<<<< .our
       FALLTHROUGH;
+=======
+>>>>>>> .their
     case '/':
       return ui::VKEY_OEM_2;
     case '~':
       *shifted = true;
+<<<<<<< .our
       FALLTHROUGH;
+=======
+>>>>>>> .their
     case '`':
       return ui::VKEY_OEM_3;
     case '{':
       *shifted = true;
+<<<<<<< .our
       FALLTHROUGH;
+=======
+>>>>>>> .their
     case '[':
       return ui::VKEY_OEM_4;
     case '|':
       *shifted = true;
+<<<<<<< .our
       FALLTHROUGH;
+=======
+>>>>>>> .their
     case '\\':
       return ui::VKEY_OEM_5;
     case '}':
       *shifted = true;
+<<<<<<< .our
       FALLTHROUGH;
+=======
+>>>>>>> .their
     case ']':
       return ui::VKEY_OEM_6;
     case '"':
       *shifted = true;
+<<<<<<< .our
       FALLTHROUGH;
+=======
+>>>>>>> .their
     case '\'':
       return ui::VKEY_OEM_7;
 
added in both
  our    100644 2684aa7dda07ac79e47823c3cf9bf00d3f5cf3f5 atom/common/native_mate_converters/content_converter.cc
  their  100644 46364e21266a93c7c496d87acbf6cc4ff4965194 atom/common/native_mate_converters/content_converter.cc
@@ -43,12 +43,18 @@
     case content::MenuItem::CHECKABLE_OPTION:
     case content::MenuItem::GROUP:
       v8_item.Set("checked", item.checked);
+<<<<<<< .our
       FALLTHROUGH;
+=======
+>>>>>>> .their
     case content::MenuItem::OPTION:
     case content::MenuItem::SUBMENU:
       v8_item.Set("label", item.label);
       v8_item.Set("enabled", item.enabled);
+<<<<<<< .our
       FALLTHROUGH;
+=======
+>>>>>>> .their
     default:
       v8_item.Set("type", item.type);
   }
added in both
  our    100644 db54210e7c095da593c6f5b9f4ed1eafb91b945d atom/common/native_mate_converters/net_converter.cc
  their  100644 d3890bbff79276627528e7ced7eb69ffcf367f43 atom/common/native_mate_converters/net_converter.cc
@@ -160,7 +160,11 @@
     std::string value;
     while (headers->EnumerateHeaderLines(&iter, &key, &value)) {
       key = base::ToLowerASCII(key);
+<<<<<<< .our
       if (response_headers.FindKey(key)) {
+=======
+      if (response_headers.HasKey(key)) {
+>>>>>>> .their
         base::ListValue* values = nullptr;
         if (response_headers.GetList(key, &values))
           values->AppendString(value);
@@ -239,9 +243,14 @@
     if (reader->AsBytesReader()) {
       const net::UploadBytesElementReader* bytes_reader =
           reader->AsBytesReader();
+<<<<<<< .our
       auto bytes = std::make_unique<base::Value>(
           std::vector<char>(bytes_reader->bytes(),
                             bytes_reader->bytes() + bytes_reader->length()));
+=======
+      std::unique_ptr<base::Value> bytes(base::Value::CreateWithCopiedBuffer(
+          bytes_reader->bytes(), bytes_reader->length()));
+>>>>>>> .their
       upload_data_dict->Set("bytes", std::move(bytes));
     } else if (reader->AsFileReader()) {
       const net::UploadFileElementReader* file_reader = reader->AsFileReader();
added in both
  our    100644 61a6563a617030684081e4934044865fdc3c6540 atom/common/native_mate_converters/network_converter.cc
  their  100644 1f98a5b8ebd548f54a8113f186c5344618dcd027 atom/common/native_mate_converters/network_converter.cc
@@ -6,7 +6,10 @@
 
 #include <string>
 #include <utility>
+<<<<<<< .our
 #include <vector>
+=======
+>>>>>>> .their
 
 #include "atom/common/native_mate_converters/value_converter.h"
 #include "native_mate/dictionary.h"
@@ -26,8 +29,13 @@
     auto post_data_dict = std::make_unique<base::DictionaryValue>();
     auto type = element.type();
     if (type == network::DataElement::TYPE_BYTES) {
+<<<<<<< .our
       auto bytes = std::make_unique<base::Value>(std::vector<char>(
           element.bytes(), element.bytes() + (element.length())));
+=======
+      auto bytes = base::Value::CreateWithCopiedBuffer(
+          element.bytes(), static_cast<size_t>(element.length()));
+>>>>>>> .their
       post_data_dict->SetString("type", "rawData");
       post_data_dict->Set("bytes", std::move(bytes));
     } else if (type == network::DataElement::TYPE_FILE) {
added in both
  our    100644 3fa070771d6843e9428e560c746965b095961e2a atom/common/native_mate_converters/v8_value_converter.cc
  their  100644 fbc410bdcb7111bf2ee86dbe07538957de486b68 atom/common/native_mate_converters/v8_value_converter.cc
@@ -8,7 +8,10 @@
 #include <memory>
 #include <string>
 #include <utility>
+<<<<<<< .our
 #include <vector>
+=======
+>>>>>>> .their
 
 #include "base/logging.h"
 #include "base/values.h"
@@ -163,22 +166,42 @@
       return v8::Null(isolate);
 
     case base::Value::Type::BOOLEAN: {
+<<<<<<< .our
       bool val = value->GetBool();
+=======
+      bool val = false;
+      value->GetAsBoolean(&val);
+>>>>>>> .their
       return v8::Boolean::New(isolate, val);
     }
 
     case base::Value::Type::INTEGER: {
+<<<<<<< .our
       int val = value->GetInt();
+=======
+      int val = 0;
+      value->GetAsInteger(&val);
+>>>>>>> .their
       return v8::Integer::New(isolate, val);
     }
 
     case base::Value::Type::DOUBLE: {
+<<<<<<< .our
       double val = value->GetDouble();
+=======
+      double val = 0.0;
+      value->GetAsDouble(&val);
+>>>>>>> .their
       return v8::Number::New(isolate, val);
     }
 
     case base::Value::Type::STRING: {
+<<<<<<< .our
       std::string val = value->GetString();
+=======
+      std::string val;
+      value->GetAsString(&val);
+>>>>>>> .their
       return v8::String::NewFromUtf8(isolate, val.c_str(),
                                      v8::String::kNormalString, val.length());
     }
@@ -342,8 +365,13 @@
   if (val->IsRegExp()) {
     if (!reg_exp_allowed_)
       // JSON.stringify converts to an object.
+<<<<<<< .our
       return FromV8Object(val->ToObject(context).ToLocalChecked(), state,
                           isolate);
+=======
+      return FromV8Object(val->ToObject(context).ToLocalChecked(),
+          state, isolate);
+>>>>>>> .their
     return new base::Value(
         *v8::String::Utf8Value(val->ToString(context).ToLocalChecked()));
   }
@@ -356,8 +384,13 @@
     if (!function_allowed_)
       // JSON.stringify refuses to convert function(){}.
       return nullptr;
+<<<<<<< .our
     return FromV8Object(val->ToObject(context).ToLocalChecked(), state,
                         isolate);
+=======
+    return FromV8Object(val->ToObject(context).ToLocalChecked(),
+        state, isolate);
+>>>>>>> .their
   }
 
   if (node::Buffer::HasInstance(val)) {
@@ -365,8 +398,13 @@
   }
 
   if (val->IsObject()) {
+<<<<<<< .our
     return FromV8Object(val->ToObject(context).ToLocalChecked(), state,
                         isolate);
+=======
+    return FromV8Object(val->ToObject(context).ToLocalChecked(),
+        state, isolate);
+>>>>>>> .their
   }
 
   LOG(ERROR) << "Unexpected v8 value type encountered.";
@@ -415,9 +453,15 @@
 base::Value* V8ValueConverter::FromNodeBuffer(v8::Local<v8::Value> value,
                                               FromV8ValueState* state,
                                               v8::Isolate* isolate) const {
+<<<<<<< .our
   return new base::Value(std::vector<char>(
       node::Buffer::Data(value),
       node::Buffer::Data(value) + node::Buffer::Length(value)));
+=======
+  return base::Value::CreateWithCopiedBuffer(node::Buffer::Data(value),
+                                             node::Buffer::Length(value))
+      .release();
+>>>>>>> .their
 }
 
 base::Value* V8ValueConverter::FromV8Object(v8::Local<v8::Object> val,
added in both
  our    100644 a71cc70f83d2526596a75d8daf036f905ca099be atom/common/native_mate_converters/value_converter.cc
  their  100644 0412a0118f2b5f6e2801f02e6089f9d12214d311 atom/common/native_mate_converters/value_converter.cc
@@ -30,6 +30,7 @@
   return converter.ToV8Value(&val, isolate->GetCurrentContext());
 }
 
+<<<<<<< .our
 bool Converter<base::Value>::FromV8(v8::Isolate* isolate,
                                     v8::Local<v8::Value> val,
                                     base::Value* out) {
@@ -50,6 +51,8 @@
   return converter.ToV8Value(&val, isolate->GetCurrentContext());
 }
 
+=======
+>>>>>>> .their
 bool Converter<base::ListValue>::FromV8(v8::Isolate* isolate,
                                         v8::Local<v8::Value> val,
                                         base::ListValue* out) {
added in both
  our    100644 b2ea5def0aa9646791c635c15e0ed504dc0af465 atom/common/native_mate_converters/value_converter.h
  their  100644 a53b2724b0883ab343f6262f7e506deb39e5b34d atom/common/native_mate_converters/value_converter.h
@@ -10,7 +10,10 @@
 namespace base {
 class DictionaryValue;
 class ListValue;
+<<<<<<< .our
 class Value;
+=======
+>>>>>>> .their
 }  // namespace base
 
 namespace mate {
@@ -25,6 +28,7 @@
 };
 
 template <>
+<<<<<<< .our
 struct Converter<base::Value> {
   static bool FromV8(v8::Isolate* isolate,
                      v8::Local<v8::Value> val,
@@ -34,6 +38,8 @@
 };
 
 template <>
+=======
+>>>>>>> .their
 struct Converter<base::ListValue> {
   static bool FromV8(v8::Isolate* isolate,
                      v8::Local<v8::Value> val,
added in both
  our    100644 e6aded2e661af919c2d89c2f9bd46b4921d4aec4 atom/common/node_bindings.cc
  their  100644 a26747cf03c85a7ada7e84a2bda860791a4d73e2 atom/common/node_bindings.cc
@@ -15,6 +15,10 @@
 #include "base/base_paths.h"
 #include "base/command_line.h"
 #include "base/environment.h"
+<<<<<<< .our
+=======
+#include "base/files/file_path.h"
+>>>>>>> .their
 #include "base/path_service.h"
 #include "base/run_loop.h"
 #include "base/strings/utf_string_conversions.h"
@@ -194,10 +198,13 @@
   return g_is_initialized;
 }
 
+<<<<<<< .our
 base::FilePath::StringType NodeBindings::GetHelperResourcesPath() {
   return GetResourcesPath(false).value();
 }
 
+=======
+>>>>>>> .their
 void NodeBindings::Initialize() {
   // Open node's error reporting system for browser process.
   node::g_standalone_mode = browser_env_ == BROWSER;
added in both
  our    100644 5e5ec8e5300ba2c1917e3e9d7e2e8ea1ee341e3b atom/common/node_bindings.h
  their  100644 7c8cad46cc6927de6746ea65b7db536245baad20 atom/common/node_bindings.h
@@ -5,7 +5,10 @@
 #ifndef ATOM_COMMON_NODE_BINDINGS_H_
 #define ATOM_COMMON_NODE_BINDINGS_H_
 
+<<<<<<< .our
 #include "base/files/file_path.h"
+=======
+>>>>>>> .their
 #include "base/macros.h"
 #include "base/memory/weak_ptr.h"
 #include "base/single_thread_task_runner.h"
@@ -34,7 +37,10 @@
   static NodeBindings* Create(BrowserEnvironment browser_env);
   static void RegisterBuiltinModules();
   static bool IsInitialized();
+<<<<<<< .our
   static base::FilePath::StringType GetHelperResourcesPath();
+=======
+>>>>>>> .their
 
   virtual ~NodeBindings();
 
added in both
  our    100644 e41fb585f57114de00376f52e0d97277e6eca94b atom/common/node_bindings_win.cc
  their  100644 4a5ff5c51406d0b051f6d790b111a3477da561bf atom/common/node_bindings_win.cc
@@ -8,6 +8,13 @@
 
 #include "base/logging.h"
 
+<<<<<<< .our
+=======
+extern "C" {
+#include "vendor/node/deps/uv/src/win/internal.h"
+}
+
+>>>>>>> .their
 namespace atom {
 
 NodeBindingsWin::NodeBindingsWin(BrowserEnvironment browser_env)
added in both
  our    100644 77fe5f43b54c8d53bfc5a4a29c9c0a6f62bea423 atom/common/node_bindings_win.h
  their  100644 793586d88da8a40c86a322bef383f118404d2480 atom/common/node_bindings_win.h
@@ -13,7 +13,11 @@
 class NodeBindingsWin : public NodeBindings {
  public:
   explicit NodeBindingsWin(BrowserEnvironment browser_env);
+<<<<<<< .our
   ~NodeBindingsWin() override;
+=======
+  virtual ~NodeBindingsWin();
+>>>>>>> .their
 
  private:
   void PollEvents() override;
added in both
  our    100644 fa1a7499a8b082fe9007f04041b46e58502b3ad9 atom/common/node_includes.h
  their  100644 edd4812e01c29f9307a21b59db876106ae8fc8ec atom/common/node_includes.h
@@ -9,9 +9,13 @@
 
 // Include common headers for using node APIs.
 
+<<<<<<< .our
 #ifdef NODE_SHARED_MODE
 #define BUILDING_NODE_EXTENSION
 #endif
+=======
+#define BUILDING_NODE_EXTENSION
+>>>>>>> .their
 
 // The following define makes sure that we do not include the macros
 // again. But we still need the tracing functions, so declaring them.
added in both
  our    100644 8b1836f80c583e4db68971ff1b00ca4f86356b45 atom/common/options_switches.cc
  their  100644 db82468f292dce07471d626e8536aea55de8cb2e atom/common/options_switches.cc
@@ -118,6 +118,10 @@
 
 // Web runtime features.
 const char kExperimentalFeatures[] = "experimentalFeatures";
+<<<<<<< .our
+=======
+const char kExperimentalCanvasFeatures[] = "experimentalCanvasFeatures";
+>>>>>>> .their
 
 // Opener window's ID.
 const char kOpenerID[] = "openerId";
@@ -188,9 +192,19 @@
 // The application path
 const char kAppPath[] = "app-path";
 
+<<<<<<< .our
 // The command line switch versions of the options.
 const char kBackgroundColor[] = "background-color";
 const char kPreloadScript[] = "preload";
+=======
+// The context ID for this process
+const char kContextId[] = "context-id";
+
+// The command line switch versions of the options.
+const char kBackgroundColor[] = "background-color";
+const char kPreloadScript[] = "preload";
+const char kPreloadURL[] = "preload-url";
+>>>>>>> .their
 const char kPreloadScripts[] = "preload-scripts";
 const char kNodeIntegration[] = "node-integration";
 const char kContextIsolation[] = "context-isolation";
added in both
  our    100644 5f6d7e9d38120668ed06922ced2f8d6a6e27a52b atom/common/options_switches.h
  their  100644 2469c7b5841f861c99e47d59fa18649264b259aa atom/common/options_switches.h
@@ -61,6 +61,10 @@
 extern const char kContextIsolation[];
 extern const char kGuestInstanceID[];
 extern const char kExperimentalFeatures[];
+<<<<<<< .our
+=======
+extern const char kExperimentalCanvasFeatures[];
+>>>>>>> .their
 extern const char kOpenerID[];
 extern const char kScrollBounce[];
 extern const char kEnableBlinkFeatures[];
@@ -92,9 +96,17 @@
 extern const char kSecureSchemes[];
 extern const char kAppUserModelId[];
 extern const char kAppPath[];
+<<<<<<< .our
 
 extern const char kBackgroundColor[];
 extern const char kPreloadScript[];
+=======
+extern const char kContextId[];
+
+extern const char kBackgroundColor[];
+extern const char kPreloadScript[];
+extern const char kPreloadURL[];
+>>>>>>> .their
 extern const char kPreloadScripts[];
 extern const char kNodeIntegration[];
 extern const char kContextIsolation[];
added in both
  our    100644 34576be95f2552aaa985dacb3f36406dfc29d54c atom/common/platform_util_win.cc
  their  100644 193e2ece0042367113ee23512b5b3ee6d4785fca atom/common/platform_util_win.cc
@@ -31,12 +31,32 @@
 
 namespace {
 
+<<<<<<< .our
+=======
+// Old ShellExecute crashes the process when the command for a given scheme
+// is empty. This function tells if it is.
+bool ValidateShellCommandForScheme(const std::string& scheme) {
+  base::win::RegKey key;
+  base::string16 registry_path =
+      base::ASCIIToUTF16(scheme) + L"\\shell\\open\\command";
+  key.Open(HKEY_CLASSES_ROOT, registry_path.c_str(), KEY_READ);
+  if (!key.Valid())
+    return false;
+  DWORD size = 0;
+  key.ReadValue(NULL, NULL, &size, NULL);
+  if (size <= 2)
+    return false;
+  return true;
+}
+
+>>>>>>> .their
 // Required COM implementation of IFileOperationProgressSink so we can
 // precheck files before deletion to make sure they can be move to the
 // Recycle Bin.
 class DeleteFileProgressSink : public IFileOperationProgressSink {
  public:
   DeleteFileProgressSink();
+<<<<<<< .our
   virtual ~DeleteFileProgressSink() = default;
 
  private:
@@ -75,17 +95,55 @@
                                            HRESULT,
                                            IShellItem*) override;
   HRESULT STDMETHODCALLTYPE PreNewItem(DWORD, IShellItem*, LPCWSTR) override;
+=======
+
+ private:
+  ULONG STDMETHODCALLTYPE AddRef(void);
+  ULONG STDMETHODCALLTYPE Release(void);
+  HRESULT STDMETHODCALLTYPE QueryInterface(REFIID riid, LPVOID* ppvObj);
+  HRESULT STDMETHODCALLTYPE StartOperations(void);
+  HRESULT STDMETHODCALLTYPE FinishOperations(HRESULT);
+  HRESULT STDMETHODCALLTYPE PreRenameItem(DWORD, IShellItem*, LPCWSTR);
+  HRESULT STDMETHODCALLTYPE
+  PostRenameItem(DWORD, IShellItem*, LPCWSTR, HRESULT, IShellItem*);
+  HRESULT STDMETHODCALLTYPE PreMoveItem(DWORD,
+                                        IShellItem*,
+                                        IShellItem*,
+                                        LPCWSTR);
+  HRESULT STDMETHODCALLTYPE
+  PostMoveItem(DWORD, IShellItem*, IShellItem*, LPCWSTR, HRESULT, IShellItem*);
+  HRESULT STDMETHODCALLTYPE PreCopyItem(DWORD,
+                                        IShellItem*,
+                                        IShellItem*,
+                                        LPCWSTR);
+  HRESULT STDMETHODCALLTYPE
+  PostCopyItem(DWORD, IShellItem*, IShellItem*, LPCWSTR, HRESULT, IShellItem*);
+  HRESULT STDMETHODCALLTYPE PreDeleteItem(DWORD, IShellItem*);
+  HRESULT STDMETHODCALLTYPE PostDeleteItem(DWORD,
+                                           IShellItem*,
+                                           HRESULT,
+                                           IShellItem*);
+  HRESULT STDMETHODCALLTYPE PreNewItem(DWORD, IShellItem*, LPCWSTR);
+>>>>>>> .their
   HRESULT STDMETHODCALLTYPE PostNewItem(DWORD,
                                         IShellItem*,
                                         LPCWSTR,
                                         LPCWSTR,
                                         DWORD,
                                         HRESULT,
+<<<<<<< .our
                                         IShellItem*) override;
   HRESULT STDMETHODCALLTYPE UpdateProgress(UINT, UINT) override;
   HRESULT STDMETHODCALLTYPE ResetTimer(void) override;
   HRESULT STDMETHODCALLTYPE PauseTimer(void) override;
   HRESULT STDMETHODCALLTYPE ResumeTimer(void) override;
+=======
+                                        IShellItem*);
+  HRESULT STDMETHODCALLTYPE UpdateProgress(UINT, UINT);
+  HRESULT STDMETHODCALLTYPE ResetTimer(void);
+  HRESULT STDMETHODCALLTYPE PauseTimer(void);
+  HRESULT STDMETHODCALLTYPE ResumeTimer(void);
+>>>>>>> .their
 
   ULONG m_cRef;
 };
@@ -240,6 +298,36 @@
   if (dir.empty())
     return false;
 
+<<<<<<< .our
+=======
+  typedef HRESULT(WINAPI * SHOpenFolderAndSelectItemsFuncPtr)(
+      PCIDLIST_ABSOLUTE pidl_Folder, UINT cidl, PCUITEMID_CHILD_ARRAY pidls,
+      DWORD flags);
+
+  static SHOpenFolderAndSelectItemsFuncPtr open_folder_and_select_itemsPtr =
+      NULL;
+  static bool initialize_open_folder_proc = true;
+  if (initialize_open_folder_proc) {
+    initialize_open_folder_proc = false;
+    // The SHOpenFolderAndSelectItems API is exposed by shell32 version 6
+    // and does not exist in Win2K. We attempt to retrieve this function export
+    // from shell32 and if it does not exist, we just invoke ShellExecute to
+    // open the folder thus losing the functionality to select the item in
+    // the process.
+    HMODULE shell32_base = GetModuleHandle(L"shell32.dll");
+    if (!shell32_base) {
+      NOTREACHED() << " " << __FUNCTION__ << "(): Can't open shell32.dll";
+      return false;
+    }
+    open_folder_and_select_itemsPtr =
+        reinterpret_cast<SHOpenFolderAndSelectItemsFuncPtr>(
+            GetProcAddress(shell32_base, "SHOpenFolderAndSelectItems"));
+  }
+  if (!open_folder_and_select_itemsPtr) {
+    return ui::win::OpenFolderViaShell(dir);
+  }
+
+>>>>>>> .their
   Microsoft::WRL::ComPtr<IShellFolder> desktop;
   HRESULT hr = SHGetDesktopFolder(desktop.GetAddressOf());
   if (FAILED(hr))
@@ -263,8 +351,13 @@
 
   const ITEMIDLIST* highlight[] = {file_item};
 
+<<<<<<< .our
   hr = SHOpenFolderAndSelectItems(dir_item, arraysize(highlight), highlight,
                                   NULL);
+=======
+  hr = (*open_folder_and_select_itemsPtr)(dir_item, arraysize(highlight),
+                                          highlight, NULL);
+>>>>>>> .their
   if (!FAILED(hr))
     return true;
 
@@ -275,8 +368,14 @@
     return ui::win::OpenFolderViaShell(dir);
   } else {
     LPTSTR message = NULL;
+<<<<<<< .our
     FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM,
                   0, hr, 0, reinterpret_cast<LPTSTR>(&message), 0, NULL);
+=======
+    DWORD message_length = FormatMessage(
+        FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM, 0, hr, 0,
+        reinterpret_cast<LPTSTR>(&message), 0, NULL);
+>>>>>>> .their
     LOG(WARNING) << " " << __FUNCTION__ << "(): Can't open full_path = \""
                  << full_path.value() << "\""
                  << " hr = " << hr << " " << reinterpret_cast<LPTSTR>(&message);
added in both
  our    100644 6e29fe45a69f44856d7fca449ec1be4eaf6970a2 atom/renderer/atom_sandboxed_renderer_client.cc
  their  100644 ce214162033ca353a34ced83f0facf5b1dd1eca4 atom/renderer/atom_sandboxed_renderer_client.cc
@@ -16,7 +16,10 @@
 #include "base/command_line.h"
 #include "base/files/file_path.h"
 #include "base/path_service.h"
+<<<<<<< .our
 #include "base/process/process_handle.h"
+=======
+>>>>>>> .their
 #include "chrome/renderer/printing/print_web_view_helper.h"
 #include "content/public/renderer/render_frame.h"
 #include "native_mate/dictionary.h"
@@ -90,11 +93,32 @@
   return path.value();
 }
 
+<<<<<<< .our
 v8::Local<v8::Value> CreatePreloadScript(v8::Isolate* isolate,
                                          v8::Local<v8::String> preloadSrc) {
   auto script = v8::Script::Compile(preloadSrc);
   auto func = script->Run();
   return func;
+=======
+void InitializeBindings(v8::Local<v8::Object> binding,
+                        v8::Local<v8::Context> context) {
+  auto* isolate = context->GetIsolate();
+  mate::Dictionary b(isolate, binding);
+  b.SetMethod("get", GetBinding);
+  b.SetMethod("crash", AtomBindings::Crash);
+  b.SetMethod("hang", AtomBindings::Hang);
+  b.SetMethod("getArgv", GetArgv);
+  b.SetMethod("getExecPath", GetExecPath);
+  b.SetMethod("getHeapStatistics", &AtomBindings::GetHeapStatistics);
+  b.SetMethod("getProcessMemoryInfo", &AtomBindings::GetProcessMemoryInfo);
+  b.SetMethod("getSystemMemoryInfo", &AtomBindings::GetSystemMemoryInfo);
+
+  // Pass in CLI flags needed to setup the renderer
+  base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+  if (command_line->HasSwitch(switches::kGuestInstanceID))
+    b.Set(options::kGuestInstanceID,
+          command_line->GetSwitchValueASCII(switches::kGuestInstanceID));
+>>>>>>> .their
 }
 
 class AtomSandboxedRenderFrameObserver : public AtomRenderFrameObserver {
@@ -132,11 +156,15 @@
 AtomSandboxedRendererClient::AtomSandboxedRendererClient() {
   // Explicitly register electron's builtin modules.
   NodeBindings::RegisterBuiltinModules();
+<<<<<<< .our
   metrics_ = base::ProcessMetrics::CreateCurrentProcessMetrics();
+=======
+>>>>>>> .their
 }
 
 AtomSandboxedRendererClient::~AtomSandboxedRendererClient() {}
 
+<<<<<<< .our
 void AtomSandboxedRendererClient::InitializeBindings(
     v8::Local<v8::Object> binding,
     v8::Local<v8::Context> context) {
@@ -164,6 +192,8 @@
           command_line->GetSwitchValueASCII(switches::kGuestInstanceID));
 }
 
+=======
+>>>>>>> .their
 void AtomSandboxedRendererClient::RenderFrameCreated(
     content::RenderFrame* render_frame) {
   new AtomSandboxedRenderFrameObserver(render_frame, this);
added in both
  our    100644 4afef42dfd43d9e177d93a3c49b115c34f7e2e6a atom/renderer/atom_sandboxed_renderer_client.h
  their  100644 1ebf4429794f47996c8f92f66b1c5b0295365b06 atom/renderer/atom_sandboxed_renderer_client.h
@@ -8,7 +8,10 @@
 #include <vector>
 
 #include "atom/renderer/renderer_client_base.h"
+<<<<<<< .our
 #include "base/process/process_metrics.h"
+=======
+>>>>>>> .their
 
 namespace atom {
 
@@ -17,8 +20,11 @@
   AtomSandboxedRendererClient();
   ~AtomSandboxedRendererClient() override;
 
+<<<<<<< .our
   void InitializeBindings(v8::Local<v8::Object> binding,
                           v8::Local<v8::Context> context);
+=======
+>>>>>>> .their
   void InvokeIpcCallback(v8::Handle<v8::Context> context,
                          const std::string& callback_name,
                          std::vector<v8::Handle<v8::Value>> args);
@@ -33,8 +39,11 @@
   void RenderViewCreated(content::RenderView*) override;
 
  private:
+<<<<<<< .our
   std::unique_ptr<base::ProcessMetrics> metrics_;
 
+=======
+>>>>>>> .their
   DISALLOW_COPY_AND_ASSIGN(AtomSandboxedRendererClient);
 };
 
added in both
  our    100644 3c591201532e4510010f5bc895da3c16780d08d9 atom/renderer/preferences_manager.cc
  their  100644 2c6540cd5f40b7244e70a55f9c146571ec91e4a1 atom/renderer/preferences_manager.cc
@@ -26,9 +26,13 @@
 
 void PreferencesManager::OnUpdatePreferences(
     const base::ListValue& preferences) {
+<<<<<<< .our
   auto copy =
       base::ListValue::From(base::Value::ToUniquePtrValue(preferences.Clone()));
   preferences_.swap(copy);
+=======
+  preferences_ = preferences.CreateDeepCopy();
+>>>>>>> .their
 }
 
 }  // namespace atom
added in both
  our    100644 69490420ef5b8f87e7cb8fd97ebd5ec4509fa1ae atom/renderer/renderer_client_base.cc
  their  100644 a73dd265f9367dd35308568588b42597c6650189 atom/renderer/renderer_client_base.cc
@@ -20,6 +20,10 @@
 #include "base/strings/string_split.h"
 #include "base/strings/stringprintf.h"
 #include "chrome/renderer/media/chrome_key_systems.h"
+<<<<<<< .our
+=======
+#include "chrome/renderer/pepper/pepper_helper.h"
+>>>>>>> .their
 #include "chrome/renderer/printing/print_web_view_helper.h"
 #include "chrome/renderer/tts_dispatcher.h"
 #include "content/public/common/content_constants.h"
@@ -46,10 +50,13 @@
 #include "atom/common/atom_constants.h"
 #endif  // defined(ENABLE_PDF_VIEWER)
 
+<<<<<<< .our
 #if defined(ENABLE_PEPPER_FLASH)
 #include "chrome/renderer/pepper/pepper_helper.h"
 #endif  // defined(ENABLE_PEPPER_FLASH)
 
+=======
+>>>>>>> .their
 // This is defined in later versions of Chromium, remove this if you see
 // compiler complaining duplicate defines.
 #if defined(OS_WIN) || defined(OS_FUCHSIA)
@@ -95,7 +102,11 @@
 void RendererClientBase::DidCreateScriptContext(
     v8::Handle<v8::Context> context,
     content::RenderFrame* render_frame) {
+<<<<<<< .our
   // global.setHidden("contextId", `${processId}-${++next_context_id_}`)
+=======
+  // global.setHidden("contextId", `${processId}-${++nextContextId}`)
+>>>>>>> .their
   std::string context_id = base::StringPrintf(
       "%" CrPRIdPid "-%d", base::GetCurrentProcId(), ++next_context_id_);
   v8::Isolate* isolate = context->GetIsolate();
@@ -164,9 +175,13 @@
 #if defined(TOOLKIT_VIEWS)
   new AutofillAgent(render_frame);
 #endif
+<<<<<<< .our
 #if defined(ENABLE_PEPPER_FLASH)
   new PepperHelper(render_frame);
 #endif
+=======
+  new PepperHelper(render_frame);
+>>>>>>> .their
   new ContentSettingsObserver(render_frame);
   new printing::PrintWebViewHelper(render_frame);
 
added in both
  our    100644 166c01b8686498ecb9cb1929e872309441eeaf36 brightray/BUILD.gn
  their  100644 c2185726abdf17d7c24010a0b076b7e33496f2ad brightray/BUILD.gn
@@ -1,14 +1,48 @@
 import("//build/config/ui.gni")
 
+<<<<<<< .our
 filenames_gypi = exec_script("//build/gypi_to_gn.py",
                              [ rebase_path("filenames.gypi") ],
                              "scope",
                              [ "filenames.gypi" ])
+=======
+filenames_gypi = exec_script(
+  "//build/gypi_to_gn.py",
+  [ rebase_path("filenames.gypi") ],
+  "scope",
+  [ "filenames.gypi" ]
+)
+
+
+if (is_linux) {
+  # TODO: Experiment with using //tools/generate_library_loader for generating
+  # the libnotify loader.
+  copy("libnotify_headers") {
+    sources = [
+      "/usr/include/libnotify/notify.h",
+      "/usr/include/libnotify/notification.h",
+      "/usr/include/libnotify/notify-enum-types.h",
+      "/usr/include/libnotify/notify-features.h",
+    ]
+    outputs = [ "$target_gen_dir/libnotify-copy/libnotify/{{source_file_part}}" ]
+  }
+  config("libnotify_config") {
+    include_dirs = [ "$target_gen_dir/libnotify-copy" ]
+  }
+  group("libnotify") {
+    deps = [ ":libnotify_headers" ]
+    public_configs = [ ":libnotify_config" ]
+  }
+}
+>>>>>>> .their
 
 static_library("brightray") {
   deps = [
     "//base",
+<<<<<<< .our
     "//base:base_static",
+=======
+>>>>>>> .their
     "//components/network_session_configurator/common",
     "//components/prefs",
     "//content/public/browser",
@@ -18,6 +52,7 @@
     "//ui/views",
   ]
 
+<<<<<<< .our
   include_dirs = [ ".." ]
 
   defines = [
@@ -27,6 +62,21 @@
 
   if (is_linux) {
     deps += [ "//build/config/linux/gtk" ]
+=======
+  include_dirs = [
+    "..",
+  ]
+
+  defines = [
+    "DISABLE_NACL=1",
+  ]
+
+  if (is_linux) {
+    deps += [
+      "//build/config/linux/gtk3",
+      ":libnotify",
+    ]
+>>>>>>> .their
   }
 
   extra_source_filters = []
@@ -38,8 +88,12 @@
     ]
   }
 
+<<<<<<< .our
   set_sources_assignment_filter(
       sources_assignment_filter + extra_source_filters)
+=======
+  set_sources_assignment_filter(sources_assignment_filter + extra_source_filters)
+>>>>>>> .their
   sources = filenames_gypi.brightray_sources
   set_sources_assignment_filter(sources_assignment_filter)
 }
added in both
  our    100644 8a945dc0219293d90e30162e4691a4d871071f4f brightray/brightray.gypi
  their  100644 33d42bc8069ce4031cbb4375e37194c923b9de89 brightray/brightray.gypi
@@ -155,7 +155,14 @@
               'WEBRTC_MAC',
              ],
           }],  # OS=="mac"
+<<<<<<< .our
           ['OS=="win"', {            
+=======
+          ['OS=="win"', {
+            'include_dirs': [
+              '<(libchromiumcontent_src_dir)/third_party/wtl/include',
+            ],
+>>>>>>> .their
             'defines': [
               '_WIN32_WINNT=0x0602',
               'WINVER=0x0602',
@@ -205,7 +212,10 @@
           'SKIA_DLL',
           'USING_V8_SHARED',
           'WEBKIT_DLL',
+<<<<<<< .our
           'V8_ENABLE_CHECKS',
+=======
+>>>>>>> .their
         ],
         'msvs_settings': {
           'VCCLCompilerTool': {
added in both
  our    100644 1eff7344e9aef78bb88720c38c0f75fb92e6bc09 brightray/browser/browser_context.cc
  their  100644 708a97bddd1e883f1192e0e431957b72e40e7f22 brightray/browser/browser_context.cc
@@ -11,6 +11,10 @@
 #include "brightray/browser/brightray_paths.h"
 #include "brightray/browser/browser_client.h"
 #include "brightray/browser/inspectable_web_contents_impl.h"
+<<<<<<< .our
+=======
+#include "brightray/browser/special_storage_policy.h"
+>>>>>>> .their
 #include "brightray/browser/zoom_level_delegate.h"
 #include "brightray/common/application_info.h"
 #include "components/prefs/json_pref_store.h"
@@ -54,6 +58,10 @@
 
 BrowserContext::BrowserContext(const std::string& partition, bool in_memory)
     : in_memory_(in_memory),
+<<<<<<< .our
+=======
+      storage_policy_(new SpecialStoragePolicy),
+>>>>>>> .their
       weak_factory_(this) {
   if (!PathService::Get(DIR_USER_DATA, &path_)) {
     PathService::Get(DIR_APP_DATA, &path_);
@@ -158,6 +166,13 @@
   return nullptr;
 }
 
+<<<<<<< .our
+=======
+storage::SpecialStoragePolicy* BrowserContext::GetSpecialStoragePolicy() {
+  return storage_policy_.get();
+}
+
+>>>>>>> .their
 content::PushMessagingService* BrowserContext::GetPushMessagingService() {
   return nullptr;
 }
added in both
  our    100644 1fb1c59b8043dbb711a364fca3c357c11993bedc brightray/browser/browser_context.h
  their  100644 d36ec3bbdff9ad50a080ab849e879c211e2a9213 brightray/browser/browser_context.h
@@ -17,6 +17,13 @@
 class PrefRegistrySimple;
 class PrefService;
 
+<<<<<<< .our
+=======
+namespace storage {
+class SpecialStoragePolicy;
+}
+
+>>>>>>> .their
 namespace brightray {
 
 class BrowserContext;
@@ -48,6 +55,10 @@
   content::ResourceContext* GetResourceContext() override;
   content::DownloadManagerDelegate* GetDownloadManagerDelegate() override;
   content::BrowserPluginGuestManager* GetGuestManager() override;
+<<<<<<< .our
+=======
+  storage::SpecialStoragePolicy* GetSpecialStoragePolicy() override;
+>>>>>>> .their
   content::PushMessagingService* GetPushMessagingService() override;
   content::SSLHostStateDelegate* GetSSLHostStateDelegate() override;
   content::BackgroundFetchDelegate* GetBackgroundFetchDelegate() override;
@@ -116,6 +127,10 @@
   base::FilePath path_;
   bool in_memory_;
 
+<<<<<<< .our
+=======
+  scoped_refptr<storage::SpecialStoragePolicy> storage_policy_;
+>>>>>>> .their
   std::unique_ptr<PrefService> prefs_;
   std::unique_ptr<MediaDeviceIDSalt> media_device_id_salt_;
   // Self-destructing class responsible for creating URLRequestContextGetter
added in both
  our    100644 80e6615be13d8dd8fd244c1b2c90b3630e893578 brightray/browser/mac/cocoa_notification.h
  their  100644 066528ee490b8821bd797c49805cd34bbcdf0bc0 brightray/browser/mac/cocoa_notification.h
@@ -31,7 +31,10 @@
   void NotificationActivated();
   void NotificationActivated(NSUserNotificationAction* action)
     API_AVAILABLE(macosx(10.10));
+<<<<<<< .our
   void NotificationDismissed();
+=======
+>>>>>>> .their
 
   NSUserNotification* notification() const { return notification_; }
 
added in both
  our    100644 57f53931e972adac9cbadf643c737b21d6b9b712 brightray/browser/mac/cocoa_notification.mm
  their  100644 6b576497d41a9b747b702d5502583637d96606df brightray/browser/mac/cocoa_notification.mm
@@ -156,6 +156,7 @@
   this->LogAction("button clicked");
 }
 
+<<<<<<< .our
 void CocoaNotification::NotificationDismissed() {
   if (delegate())
     delegate()->NotificationClosed();
@@ -163,6 +164,8 @@
   this->LogAction("dismissed");
 }
 
+=======
+>>>>>>> .their
 void CocoaNotification::LogAction(const char* action) {
   if (getenv("ELECTRON_DEBUG_NOTIFICATIONS")) {
     NSString* identifier = [notification_ valueForKey:@"identifier"];
added in both
  our    100644 ddf0cbfa888d3f3be47db890c842900ce52d2411 brightray/browser/mac/notification_center_delegate.mm
  their  100644 7ae24b8979b441e7583583ade5aa2708cfb1b994 brightray/browser/mac/notification_center_delegate.mm
@@ -65,6 +65,7 @@
   return YES;
 }
 
+<<<<<<< .our
 #if !defined(MAS_BUILD)
 // This undocumented method notifies us if a user closes "Alert" notifications
 // https://chromium.googlesource.com/chromium/src/+/lkgr/chrome/browser/notifications/notification_platform_bridge_mac.mm
@@ -89,4 +90,6 @@
 }
 #endif
 
+=======
+>>>>>>> .their
 @end
added in remote
  their  100644 e662441dedbfe3c5cf08e8dcce3413153c1fcf82 brightray/browser/special_storage_policy.cc
@@ -0,0 +1,41 @@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "brightray/browser/special_storage_policy.h"
+
+namespace brightray {
+
+SpecialStoragePolicy::SpecialStoragePolicy() {}
+
+SpecialStoragePolicy::~SpecialStoragePolicy() {}
+
+bool SpecialStoragePolicy::IsStorageProtected(const GURL& origin) {
+  return true;
+}
+
+bool SpecialStoragePolicy::IsStorageUnlimited(const GURL& origin) {
+  return true;
+}
+
+bool SpecialStoragePolicy::IsStorageDurable(const GURL& origin) {
+  return true;
+}
+
+bool SpecialStoragePolicy::HasIsolatedStorage(const GURL& origin) {
+  return false;
+}
+
+bool SpecialStoragePolicy::IsStorageSessionOnly(const GURL& origin) {
+  return false;
+}
+
+bool SpecialStoragePolicy::HasSessionOnlyOrigins() {
+  return false;
+}
+
+bool SpecialStoragePolicy::ShouldDeleteCookieOnExit(const GURL& origin) {
+  return false;
+}
+
+}  // namespace brightray
added in remote
  their  100644 2d02cdd293438d4f10863c4cf6a7932dc20a3666 brightray/browser/special_storage_policy.h
@@ -0,0 +1,31 @@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef BRIGHTRAY_BROWSER_SPECIAL_STORAGE_POLICY_H_
+#define BRIGHTRAY_BROWSER_SPECIAL_STORAGE_POLICY_H_
+
+#include "storage/browser/quota/special_storage_policy.h"
+
+namespace brightray {
+
+class SpecialStoragePolicy : public storage::SpecialStoragePolicy {
+ public:
+  SpecialStoragePolicy();
+
+  // storage::SpecialStoragePolicy implementation.
+  bool IsStorageProtected(const GURL& origin) override;
+  bool IsStorageUnlimited(const GURL& origin) override;
+  bool IsStorageDurable(const GURL& origin) override;
+  bool HasIsolatedStorage(const GURL& origin) override;
+  bool IsStorageSessionOnly(const GURL& origin) override;
+  bool HasSessionOnlyOrigins() override;
+  bool ShouldDeleteCookieOnExit(const GURL& origin) override;
+
+ protected:
+  ~SpecialStoragePolicy() override;
+};
+
+}  // namespace brightray
+
+#endif  // BRIGHTRAY_BROWSER_SPECIAL_STORAGE_POLICY_H_
added in both
  our    100644 f954489704cf1147b13937bc3a228898f45cb38d brightray/browser/win/notification_presenter_win.h
  their  100644 2a1a779bfa3d53e693b50d3b7f669a6afd92efaa brightray/browser/win/notification_presenter_win.h
@@ -35,7 +35,11 @@
 class NotificationPresenterWin : public NotificationPresenter {
  public:
   NotificationPresenterWin();
+<<<<<<< .our
   ~NotificationPresenterWin() override;
+=======
+  ~NotificationPresenterWin();
+>>>>>>> .their
 
   bool Init();
 
added in both
  our    100644 cbfea8360b983a139736c01e93f0fda5b104f900 brightray/browser/win/notification_presenter_win7.cc
  their  100644 9a1ede3642afae305a6f5b1f388d04646f6b765b brightray/browser/win/notification_presenter_win7.cc
@@ -13,8 +13,13 @@
 
 Win32Notification* NotificationPresenterWin7::GetNotificationObjectByRef(
     const DesktopNotificationController::Notification& ref) {
+<<<<<<< .our
   for (auto* n : this->notifications()) {
     auto* w32n = static_cast<Win32Notification*>(n);
+=======
+  for (auto n : this->notifications()) {
+    auto w32n = static_cast<Win32Notification*>(n);
+>>>>>>> .their
     if (w32n->GetRef() == ref)
       return w32n;
   }
@@ -24,8 +29,13 @@
 
 Win32Notification* NotificationPresenterWin7::GetNotificationObjectByTag(
     const std::string& tag) {
+<<<<<<< .our
   for (auto* n : this->notifications()) {
     auto* w32n = static_cast<Win32Notification*>(n);
+=======
+  for (auto n : this->notifications()) {
+    auto w32n = static_cast<Win32Notification*>(n);
+>>>>>>> .their
     if (w32n->GetTag() == tag)
       return w32n;
   }
@@ -35,14 +45,22 @@
 
 void NotificationPresenterWin7::OnNotificationClicked(
     Notification& notification) {
+<<<<<<< .our
   auto* n = GetNotificationObjectByRef(notification);
+=======
+  auto n = GetNotificationObjectByRef(notification);
+>>>>>>> .their
   if (n)
     n->NotificationClicked();
 }
 
 void NotificationPresenterWin7::OnNotificationDismissed(
     Notification& notification) {
+<<<<<<< .our
   auto* n = GetNotificationObjectByRef(notification);
+=======
+  auto n = GetNotificationObjectByRef(notification);
+>>>>>>> .their
   if (n)
     n->NotificationDismissed();
 }
added in both
  our    100644 f07d43105fc1b99b7421e38b7d937a280738a6b6 brightray/browser/win/win32_desktop_notifications/common.h
  their  100644 967ad247481f224e0c4f305337d6127ffd9cfa19 brightray/browser/win/win32_desktop_notifications/common.h
@@ -36,7 +36,11 @@
         GetProcAddress(GetModuleHandle(TEXT("shcore")), "GetDpiForMonitor"));
 
     if (GetDpiForMonitor) {
+<<<<<<< .our
       auto* monitor = MonitorFromPoint({}, MONITOR_DEFAULTTOPRIMARY);
+=======
+      auto monitor = MonitorFromPoint({}, MONITOR_DEFAULTTOPRIMARY);
+>>>>>>> .their
       if (GetDpiForMonitor(monitor, 0, &dpi_x, &dpi_y) == S_OK)
         return;
     }
added in both
  our    100644 71395a49d82f7be8a3ffd66e4795af968973a274 brightray/browser/win/win32_desktop_notifications/desktop_notification_controller.cc
  their  100644 0840d9e6364dc743458588dd21464f32ea946adf brightray/browser/win/win32_desktop_notifications/desktop_notification_controller.cc
@@ -1,9 +1,14 @@
+<<<<<<< .our
 #ifndef NOMINMAX
 #define NOMINMAX
 #endif
 #ifndef WIN32_LEAN_AND_MEAN
 #define WIN32_LEAN_AND_MEAN
 #endif
+=======
+#define NOMINMAX
+#define WIN32_LEAN_AND_MEAN
+>>>>>>> .their
 #include "brightray/browser/win/win32_desktop_notifications/desktop_notification_controller.h"
 #include <windowsx.h>
 #include <algorithm>
@@ -39,9 +44,12 @@
   return ret;
 }
 
+<<<<<<< .our
 const TCHAR DesktopNotificationController::class_name_[] =
       TEXT("DesktopNotificationController");
 
+=======
+>>>>>>> .their
 HINSTANCE DesktopNotificationController::RegisterWndClasses() {
   // We keep a static `module` variable which serves a dual purpose:
   // 1. Stores the HINSTANCE where the window classes are registered,
@@ -90,7 +98,11 @@
                                                         LPARAM lparam) {
   switch (message) {
     case WM_CREATE: {
+<<<<<<< .our
       auto*& cs = reinterpret_cast<const CREATESTRUCT*&>(lparam);
+=======
+      auto& cs = reinterpret_cast<const CREATESTRUCT*&>(lparam);
+>>>>>>> .their
       SetWindowLongPtr(hwnd, 0, (LONG_PTR)cs->lpCreateParams);
     } break;
 
@@ -101,7 +113,11 @@
       return 0;
 
     case WM_DISPLAYCHANGE: {
+<<<<<<< .our
       auto* inst = Get(hwnd);
+=======
+      auto inst = Get(hwnd);
+>>>>>>> .their
       inst->ClearAssets();
       inst->AnimateAll();
     } break;
@@ -189,13 +205,21 @@
       POINT origin = {work_area.right,
                       work_area.bottom - metrics.Y(toast_margin_)};
 
+<<<<<<< .our
       auto* hdwp = BeginDeferWindowPos(static_cast<int>(instances_.size()));
+=======
+      auto hdwp = BeginDeferWindowPos(static_cast<int>(instances_.size()));
+>>>>>>> .their
 
       for (auto&& inst : instances_) {
         if (!inst.hwnd)
           continue;
 
+<<<<<<< .our
         auto* notification = Toast::Get(inst.hwnd);
+=======
+        auto notification = Toast::Get(inst.hwnd);
+>>>>>>> .their
         hdwp = notification->Animate(hdwp, origin);
         if (!hdwp)
           break;
@@ -252,7 +276,11 @@
     int target_pos = 0;
     for (auto&& inst : instances_) {
       if (inst.hwnd) {
+<<<<<<< .our
         auto* toast = Toast::Get(inst.hwnd);
+=======
+        auto toast = Toast::Get(inst.hwnd);
+>>>>>>> .their
 
         if (toast->IsHighlighted())
           target_pos = toast->GetVerticalPosition();
@@ -295,9 +323,15 @@
   }
 
   // Dismiss active toast
+<<<<<<< .our
   auto* hwnd = GetToast(notification.data_.get());
   if (hwnd) {
     auto* toast = Toast::Get(hwnd);
+=======
+  auto hwnd = GetToast(notification.data_.get());
+  if (hwnd) {
+    auto toast = Toast::Get(hwnd);
+>>>>>>> .their
     toast->Dismiss();
   }
 }
@@ -310,8 +344,13 @@
 }
 
 void DesktopNotificationController::CreateToast(NotificationLink&& data) {
+<<<<<<< .our
   auto* hinstance = RegisterWndClasses();
   auto* hwnd = Toast::Create(hinstance, data);
+=======
+  auto hinstance = RegisterWndClasses();
+  auto hwnd = Toast::Create(hinstance, data);
+>>>>>>> .their
   if (hwnd) {
     int toast_pos = 0;
     if (!instances_.empty()) {
@@ -319,7 +358,11 @@
       _ASSERT(item.hwnd);
 
       ScreenMetrics scr;
+<<<<<<< .our
       auto* toast = Toast::Get(item.hwnd);
+=======
+      auto toast = Toast::Get(item.hwnd);
+>>>>>>> .their
       toast_pos = toast->GetVerticalPosition() + toast->GetHeight() +
                   scr.Y(toast_margin_);
     }
@@ -333,7 +376,11 @@
                                       NULL, hinstance, this);
     }
 
+<<<<<<< .our
     auto* toast = Toast::Get(hwnd);
+=======
+    auto toast = Toast::Get(hwnd);
+>>>>>>> .their
     toast->PopUp(toast_pos);
   }
 }
@@ -363,18 +410,24 @@
   }
 }
 
+<<<<<<< .our
 DesktopNotificationController::Notification::Notification() = default;
 DesktopNotificationController::Notification::Notification(
   const DesktopNotificationController::Notification&) = default;
 
+=======
+>>>>>>> .their
 DesktopNotificationController::Notification::Notification(
     const shared_ptr<NotificationData>& data)
     : data_(data) {
   _ASSERT(data != nullptr);
 }
 
+<<<<<<< .our
 DesktopNotificationController::Notification::~Notification() = default;
 
+=======
+>>>>>>> .their
 bool DesktopNotificationController::Notification::operator==(
     const Notification& other) const {
   return data_ == other.data_;
@@ -405,9 +458,15 @@
   data_->body_text = move(body_text);
   data_->image = CopyBitmap(image);
 
+<<<<<<< .our
   auto* hwnd = data_->controller->GetToast(data_.get());
   if (hwnd) {
     auto* toast = Toast::Get(hwnd);
+=======
+  auto hwnd = data_->controller->GetToast(data_.get());
+  if (hwnd) {
+    auto toast = Toast::Get(hwnd);
+>>>>>>> .their
     toast->ResetContents();
   }
 
@@ -422,7 +481,11 @@
 }
 
 DesktopNotificationController::NotificationLink::~NotificationLink() {
+<<<<<<< .our
   auto* p = get();
+=======
+  auto p = get();
+>>>>>>> .their
   if (p)
     p->controller = nullptr;
 }
added in both
  our    100644 d6d8fd35a2958b39dc0f6a76b4ee110b2951c832 brightray/browser/win/win32_desktop_notifications/desktop_notification_controller.h
  their  100644 ad62fa727b453510e07917ee718e830e8ac84d2d brightray/browser/win/win32_desktop_notifications/desktop_notification_controller.h
@@ -76,7 +76,12 @@
   void DestroyToast(ToastInstance& inst);
 
  private:
+<<<<<<< .our
   static const TCHAR class_name_[];
+=======
+  static constexpr const TCHAR class_name_[] =
+      TEXT("DesktopNotificationController");
+>>>>>>> .their
 
   HWND hwnd_controller_ = NULL;
   HFONT caption_font_ = NULL, body_font_ = NULL;
@@ -87,10 +92,15 @@
 
 class DesktopNotificationController::Notification {
  public:
+<<<<<<< .our
   Notification();
   explicit Notification(const std::shared_ptr<NotificationData>& data);
   Notification(const Notification&);
   ~Notification();
+=======
+  Notification() = default;
+  explicit Notification(const std::shared_ptr<NotificationData>& data);
+>>>>>>> .their
 
   bool operator==(const Notification& other) const;
 
added in both
  our    100644 061eb977a8dc58f07aff1370467f88b10aec8003 brightray/browser/win/win32_desktop_notifications/toast.cc
  their  100644 9a1e7cb099e83e4b6af7c5bcdde3f5c83d09e454 brightray/browser/win/win32_desktop_notifications/toast.cc
@@ -1,11 +1,18 @@
+<<<<<<< .our
 #ifndef NOMINMAX
 #define NOMINMAX
 #endif
+=======
+#define NOMINMAX
+>>>>>>> .their
 #include "brightray/browser/win/win32_desktop_notifications/toast.h"
 #include <uxtheme.h>
 #include <windowsx.h>
 #include <algorithm>
+<<<<<<< .our
 #include "base/logging.h"
+=======
+>>>>>>> .their
 #include "brightray/browser/win/win32_desktop_notifications/common.h"
 
 #pragma comment(lib, "msimg32.lib")
@@ -86,7 +93,11 @@
       if (GetDIBits(hdc_screen, bitmap, 0, 0, 0,
                     reinterpret_cast<BITMAPINFO*>(&bmi), DIB_RGB_COLORS) &&
           bmi.biSizeImage > 0 && (bmi.biSizeImage % 4) == 0) {
+<<<<<<< .our
         auto* buf = reinterpret_cast<BYTE*>(
+=======
+        auto buf = reinterpret_cast<BYTE*>(
+>>>>>>> .their
             _aligned_malloc(bmi.biSizeImage, sizeof(DWORD)));
 
         if (buf) {
@@ -120,12 +131,20 @@
     bmi.biCompression = BI_RGB;
 
     void* color_bits;
+<<<<<<< .our
     auto* color_bitmap =
+=======
+    auto color_bitmap =
+>>>>>>> .their
         CreateDIBSection(NULL, reinterpret_cast<BITMAPINFO*>(&bmi),
                          DIB_RGB_COLORS, &color_bits, NULL, 0);
 
     void* alpha_bits;
+<<<<<<< .our
     auto* alpha_bitmap =
+=======
+    auto alpha_bitmap =
+>>>>>>> .their
         CreateDIBSection(NULL, reinterpret_cast<BITMAPINFO*>(&bmi),
                          DIB_RGB_COLORS, &alpha_bits, NULL, 0);
 
@@ -151,9 +170,15 @@
       GdiFlush();
 
       // apply the alpha channel
+<<<<<<< .our
       auto* dest = reinterpret_cast<BYTE*>(color_bits);
       auto* src = reinterpret_cast<const BYTE*>(alpha_bits);
       auto* end = src + (width * height * 4);
+=======
+      auto dest = reinterpret_cast<BYTE*>(color_bits);
+      auto src = reinterpret_cast<const BYTE*>(alpha_bits);
+      auto end = src + (width * height * 4);
+>>>>>>> .their
       while (src != end) {
         dest[3] = src[0];
         dest += 4;
@@ -184,9 +209,12 @@
   return result_bitmap;
 }
 
+<<<<<<< .our
 const TCHAR DesktopNotificationController::Toast::class_name_[] =
     TEXT("DesktopNotificationToast");
 
+=======
+>>>>>>> .their
 DesktopNotificationController::Toast::Toast(HWND hwnd,
                                             shared_ptr<NotificationData>* data)
     : hwnd_(hwnd), data_(*data) {
@@ -220,10 +248,17 @@
                                                       LPARAM lparam) {
   switch (message) {
     case WM_CREATE: {
+<<<<<<< .our
       auto*& cs = reinterpret_cast<const CREATESTRUCT*&>(lparam);
       auto* data =
           static_cast<shared_ptr<NotificationData>*>(cs->lpCreateParams);
       auto* inst = new Toast(hwnd, data);
+=======
+      auto& cs = reinterpret_cast<const CREATESTRUCT*&>(lparam);
+      auto data =
+          static_cast<shared_ptr<NotificationData>*>(cs->lpCreateParams);
+      auto inst = new Toast(hwnd, data);
+>>>>>>> .their
       SetWindowLongPtr(hwnd, 0, (LONG_PTR)inst);
     } break;
 
@@ -242,7 +277,11 @@
       return 0;
 
     case WM_LBUTTONDOWN: {
+<<<<<<< .our
       auto* inst = Get(hwnd);
+=======
+      auto inst = Get(hwnd);
+>>>>>>> .their
 
       inst->Dismiss();
 
@@ -255,7 +294,11 @@
       return 0;
 
     case WM_MOUSEMOVE: {
+<<<<<<< .our
       auto* inst = Get(hwnd);
+=======
+      auto inst = Get(hwnd);
+>>>>>>> .their
       if (!inst->is_highlighted_) {
         inst->is_highlighted_ = true;
 
@@ -275,7 +318,11 @@
       return 0;
 
     case WM_MOUSELEAVE: {
+<<<<<<< .our
       auto* inst = Get(hwnd);
+=======
+      auto inst = Get(hwnd);
+>>>>>>> .their
       inst->is_highlighted_ = false;
       inst->is_close_hot_ = false;
       inst->UpdateContents();
@@ -289,7 +336,11 @@
       return 0;
 
     case WM_WINDOWPOSCHANGED: {
+<<<<<<< .our
       auto*& wp = reinterpret_cast<WINDOWPOS*&>(lparam);
+=======
+      auto& wp = reinterpret_cast<WINDOWPOS*&>(lparam);
+>>>>>>> .their
       if (wp->flags & SWP_HIDEWINDOW) {
         if (!IsWindowVisible(hwnd))
           Get(hwnd)->is_highlighted_ = false;
@@ -363,7 +414,11 @@
 
   // Draw background
   {
+<<<<<<< .our
     auto* brush = CreateSolidBrush(back_color);
+=======
+    auto brush = CreateSolidBrush(back_color);
+>>>>>>> .their
 
     RECT rc = {0, 0, toast_size_.cx, toast_size_.cy};
     FillRect(hdc_, &rc, brush);
@@ -374,8 +429,13 @@
   SetBkMode(hdc_, TRANSPARENT);
 
   const auto close = L'\x2715';
+<<<<<<< .our
   auto* caption_font = data_->controller->GetCaptionFont();
   auto* body_font = data_->controller->GetBodyFont();
+=======
+  auto caption_font = data_->controller->GetCaptionFont();
+  auto body_font = data_->controller->GetBodyFont();
+>>>>>>> .their
 
   TEXTMETRIC tm_cap;
   SelectFont(hdc_, caption_font);
@@ -526,7 +586,11 @@
     if (new_size.cx != this->toast_size_.cx ||
         new_size.cy != this->toast_size_.cy) {
       HDC hdc_screen = GetDC(NULL);
+<<<<<<< .our
       auto* new_bitmap =
+=======
+      auto new_bitmap =
+>>>>>>> .their
           CreateCompatibleBitmap(hdc_screen, new_size.cx, new_size.cy);
       ReleaseDC(NULL, hdc_screen);
 
@@ -567,7 +631,11 @@
             auto b1 = UpdateLayeredWindowIndirect(hwnd_, &ulw);
             ulw.prcDirty = &dirty2;
             auto b2 = UpdateLayeredWindowIndirect(hwnd_, &ulw);
+<<<<<<< .our
             DCHECK(b1 && b2);
+=======
+            _ASSERT(b1 && b2);
+>>>>>>> .their
           }
 
           return;
@@ -739,21 +807,33 @@
   // ULWI fails, which can happen when one of the dimensions is zero (e.g.
   // at the beginning of ease-in).
 
+<<<<<<< .our
   UpdateLayeredWindowIndirect(hwnd_, &ulw);
+=======
+  auto ulw_result = UpdateLayeredWindowIndirect(hwnd_, &ulw);
+>>>>>>> .their
   hdwp = DeferWindowPos(hdwp, hwnd_, HWND_TOPMOST, pt.x, pt.y, size.cx, size.cy,
                         dwpFlags);
   return hdwp;
 }
 
 void DesktopNotificationController::Toast::StartEaseIn() {
+<<<<<<< .our
   DCHECK(!ease_in_active_);
+=======
+  _ASSERT(!ease_in_active_);
+>>>>>>> .their
   ease_in_start_ = GetTickCount();
   ease_in_active_ = true;
   data_->controller->StartAnimation();
 }
 
 void DesktopNotificationController::Toast::StartEaseOut() {
+<<<<<<< .our
   DCHECK(!ease_out_active_);
+=======
+  _ASSERT(!ease_out_active_);
+>>>>>>> .their
   ease_out_start_ = GetTickCount();
   ease_out_active_ = true;
   data_->controller->StartAnimation();
added in both
  our    100644 5a0e91b5e5ca02a51d4938c853c8b14903a403b4 brightray/browser/win/win32_desktop_notifications/toast.h
  their  100644 967697ac8ccaf5a72825446137b845ed64b44acd brightray/browser/win/win32_desktop_notifications/toast.h
@@ -64,7 +64,11 @@
   float AnimateStackCollapse();
 
  private:
+<<<<<<< .our
   static const TCHAR class_name_[];
+=======
+  static constexpr const TCHAR class_name_[] = TEXT("DesktopNotificationToast");
+>>>>>>> .their
 
   const HWND hwnd_;
   HDC hdc_;
added in both
  our    100644 adeb55656b5130e4cc09b7a5d82b78cc50a3b873 brightray/browser/win/win32_notification.cc
  their  100644 d459438ea952de679d2197dec90656a87f8e2351 brightray/browser/win/win32_notification.cc
@@ -1,6 +1,10 @@
+<<<<<<< .our
 #ifndef WIN32_LEAN_AND_MEAN
 #define WIN32_LEAN_AND_MEAN
 #endif
+=======
+#define WIN32_LEAN_AND_MEAN
+>>>>>>> .their
 
 #include "brightray/browser/win/win32_notification.h"
 
@@ -13,7 +17,11 @@
 namespace brightray {
 
 void Win32Notification::Show(const NotificationOptions& options) {
+<<<<<<< .our
   auto* presenter = static_cast<NotificationPresenterWin7*>(this->presenter());
+=======
+  auto presenter = static_cast<NotificationPresenterWin7*>(this->presenter());
+>>>>>>> .their
   if (!presenter)
     return;
 
added in both
  our    100644 a87ca051ff4ca81b0e4d6130ca3c7a2106204bdd brightray/browser/win/windows_toast_notification.cc
  their  100644 72adba548493129d094fc044ae76ddf616dc10a3 brightray/browser/win/windows_toast_notification.cc
@@ -80,7 +80,11 @@
 }
 
 void WindowsToastNotification::Show(const NotificationOptions& options) {
+<<<<<<< .our
   auto* presenter_win = static_cast<NotificationPresenterWin*>(presenter());
+=======
+  auto presenter_win = static_cast<NotificationPresenterWin*>(presenter());
+>>>>>>> .their
   std::wstring icon_path =
       presenter_win->SaveIconToFilesystem(options.icon, options.icon_url);
 
added in both
  our    100644 6e368fb38dcb9e2fbf6d6108e39c5cfb25a5b7a5 brightray/browser/win/windows_toast_notification.h
  their  100644 62c8b844c753ae5a35c676cdca1adcab8018f65b brightray/browser/win/windows_toast_notification.h
@@ -47,7 +47,11 @@
 
   WindowsToastNotification(NotificationDelegate* delegate,
                            NotificationPresenter* presenter);
+<<<<<<< .our
   ~WindowsToastNotification() override;
+=======
+  ~WindowsToastNotification();
+>>>>>>> .their
 
  protected:
   // Notification:
@@ -108,7 +112,11 @@
                                               DesktopToastFailedEventHandler> {
  public:
   explicit ToastEventHandler(Notification* notification);
+<<<<<<< .our
   ~ToastEventHandler() override;
+=======
+  ~ToastEventHandler();
+>>>>>>> .their
 
   IFACEMETHODIMP Invoke(
       ABI::Windows::UI::Notifications::IToastNotification* sender,
added in both
  our    100644 407866f006d51ac528efaba97cb3750687229900 brightray/common/application_info.h
  their  100644 a4918cc7c3d5b3f73a5e50b2adeccbb4e527c127 brightray/common/application_info.h
@@ -2,7 +2,10 @@
 #define BRIGHTRAY_COMMON_APPLICATION_INFO_H_
 
 #if defined(OS_WIN)
+<<<<<<< .our
 #include "base/strings/string16.h"
+=======
+>>>>>>> .their
 #include "brightray/browser/win/scoped_hstring.h"
 #endif
 
added in both
  our    100644 a0256372bbdbbc1d77cb84885faab42a27f55c9f brightray/common/application_info_win.cc
  their  100644 49a3720f01e97316b58791c9c6e8333c8d0d8314 brightray/common/application_info_win.cc
@@ -22,14 +22,22 @@
 const wchar_t kAppUserModelIDFormat[] = L"electron.app.$1";
 
 std::string GetApplicationName() {
+<<<<<<< .our
   auto* module = GetModuleHandle(nullptr);
+=======
+  auto module = GetModuleHandle(nullptr);
+>>>>>>> .their
   std::unique_ptr<FileVersionInfo> info(
       FileVersionInfo::CreateFileVersionInfoForModule(module));
   return base::UTF16ToUTF8(info->product_name());
 }
 
 std::string GetApplicationVersion() {
+<<<<<<< .our
   auto* module = GetModuleHandle(nullptr);
+=======
+  auto module = GetModuleHandle(nullptr);
+>>>>>>> .their
   std::unique_ptr<FileVersionInfo> info(
       FileVersionInfo::CreateFileVersionInfoForModule(module));
   return base::UTF16ToUTF8(info->product_version());
added in both
  our    100644 c25cb5f0c02e6b29139cb44f01d8aab69b713381 brightray/common/main_delegate.cc
  their  100644 5f94601be9163415329b6fa5bf372ecb8445bb79 brightray/common/main_delegate.cc
@@ -48,6 +48,7 @@
   if (initialized)
     ui::ResourceBundle::CleanupSharedInstance();
 
+<<<<<<< .our
   // Load other resource files.
   base::FilePath pak_dir;
 #if defined(OS_MACOSX)
@@ -70,6 +71,21 @@
   ui::ResourceBundle& bundle = ui::ResourceBundle::GetSharedInstance();
   bundle.ReloadLocaleResources(locale);
 
+=======
+  ui::ResourceBundle::InitSharedInstanceWithLocale(
+      locale, nullptr, ui::ResourceBundle::DO_NOT_LOAD_COMMON_RESOURCES);
+
+  ui::ResourceBundle& bundle = ui::ResourceBundle::GetSharedInstance();
+  bundle.ReloadLocaleResources(locale);
+
+  // Load other resource files.
+  base::FilePath pak_dir;
+#if defined(OS_MACOSX)
+  pak_dir = base::mac::FrameworkBundlePath().Append("Resources");
+#else
+  PathService::Get(base::DIR_MODULE, &pak_dir);
+#endif
+>>>>>>> .their
   bundle.AddDataPackFromPath(
       pak_dir.Append(FILE_PATH_LITERAL("content_shell.pak")),
       ui::GetSupportedScaleFactors()[0]);
@@ -90,7 +106,10 @@
   bundle.AddDataPackFromPath(
       pak_dir.Append(FILE_PATH_LITERAL("views_resources_200_percent.pak")),
       ui::SCALE_FACTOR_200P);
+<<<<<<< .our
 #endif
+=======
+>>>>>>> .their
 }
 
 MainDelegate::MainDelegate() {}
added in both
  our    100644 b9e2d96175f8ee2d407db9c49b2e2b74756327de brightray/filenames.gypi
  their  100644 03b1106f978cbe08c75016f22335c3e6e21fc39f brightray/filenames.gypi
@@ -79,6 +79,11 @@
       'browser/win/win32_notification.h',
       'browser/win/windows_toast_notification.cc',
       'browser/win/windows_toast_notification.h',
+<<<<<<< .our
+=======
+      'browser/special_storage_policy.cc',
+      'browser/special_storage_policy.h',
+>>>>>>> .their
       'browser/url_request_context_getter.cc',
       'browser/url_request_context_getter.h',
       'browser/views/inspectable_web_contents_view_views.h',
added in both
  our    100644 110a1d892892d3e27618574c45ae9c12757eb280 build/asar.gni
  their  100644 d9298e82d42b072c6b0c0173f913561c80eafd32 build/asar.gni
@@ -1,5 +1,6 @@
 import("npm.gni")
 
+<<<<<<< .our
 # Run an action with a given working directory. Behaves identically to the
 # action() target type, with the exception that it changes directory before
 # running the script.
@@ -30,11 +31,14 @@
   }
 }
 
+=======
+>>>>>>> .their
 template("asar") {
   assert(defined(invoker.sources),
          "Need sources in $target_name listing the JS files.")
   assert(defined(invoker.outputs),
          "Need asar name (as 1-element array, e.g. \$root_out_dir/foo.asar)")
+<<<<<<< .our
   assert(defined(invoker.root), "Need asar root directory")
   asar_root = invoker.root
 
@@ -46,5 +50,27 @@
     script = "//electron/tools/js2asar.py"
     cwd = rebase_path(get_path_info(".", "abspath"))
     args = rebase_path(outputs, cwd) + [ asar_root ] + rebase_path(sources, ".")
+=======
+  assert(defined(invoker.root),
+         "Need asar root directory")
+  asar_root = invoker.root
+  copy_target_name = target_name + "_inputs"
+  copy(copy_target_name) {
+    sources = invoker.sources
+    outputs = [
+      "$target_gen_dir/$target_name/{{source_target_relative}}"
+    ]
+  }
+  npm_action(target_name) {
+    forward_variables_from(invoker, ["deps", "public_deps"])
+    deps = [":$copy_target_name"]
+    sources = invoker.sources
+    script = "asar"
+    outputs = invoker.outputs
+    args = [
+      "pack",
+      rebase_path("$target_gen_dir/$target_name/$asar_root")
+    ] + rebase_path(outputs)
+>>>>>>> .their
   }
 }
added in remote
  their  100644 59a181b1ac668b563384e6d3f40b3693845532b3 build/node/BUILD.gn
@@ -0,0 +1,113 @@
+action("configure_node") {
+  script = "//third_party/electron_node/configure"
+  args = [
+    "--enable-static",
+    "--release-urlbase=https://atom.io/download/electron",
+    "--shared",
+    "--shared-openssl",
+    "--shared-openssl-includes=" + rebase_path("//third_party/boringssl/src/include"),
+    "--shared-openssl-libname=boringssl",
+    "--shared-openssl-libpath=" + rebase_path(root_out_dir),
+    "--without-npm",
+    "--without-bundled-v8",
+    "--without-dtrace",
+    "--without-etw",
+    "--without-perfctr",
+    "--without-v8-platform",
+    "--without-intl",
+    "--prefix=",
+    "--config-out-dir=" + rebase_path(target_gen_dir),
+    "--no-run-gyp",
+  ]
+  outputs = [
+    "$target_gen_dir/config.gypi",
+  ]
+}
+
+action("gyp_node") {
+  script = "//tools/gyp/gyp_main.py"
+  deps = [ ":configure_node" ]
+  inputs = [
+    "//third_party/electron_node/common.gypi",
+    "//third_party/electron_node/node.gyp",
+    "//third_party/electron_node/node.gypi",
+    "$target_gen_dir/config.gypi",
+    "node_override.gypi",
+  ]
+  outputs = [
+    "$target_out_dir/Release/build.ninja",
+  ]
+
+  # TODO(jeremy): should shlib_suffix be set inside node.gypi?
+  if (is_mac) {
+    shlib_suffix = "dylib"
+  } else if (is_linux) {
+    shlib_suffix = "so"
+  }
+  args = [
+    "-I", rebase_path("$target_gen_dir/config.gypi", root_build_dir),
+    "-I", rebase_path("node_override.gypi", root_build_dir),
+    "-I", rebase_path("//third_party/electron_node/common.gypi", root_build_dir),
+    "-D", "component=shared_library",
+    "-D", "target_arch=$target_cpu",
+    "-D", "host_arch=$host_cpu",
+    "-D", "config_gypi=" + rebase_path("$target_gen_dir/config.gypi"),
+    "-Goutput_dir=./$target_out_dir", # bizarrely, gyp generates from the build root instead of from cwd
+    "-fninja",
+    rebase_path("//third_party/electron_node/node.gyp", root_build_dir),
+  ]
+}
+
+action("build_node") {
+  deps = [
+    "//third_party/boringssl",
+    "//third_party/icu",
+    "//v8",
+    "//v8:v8_libbase",
+    "//v8:v8_libplatform",
+    ":gyp_node",
+  ]
+  script = "//electron/build/run-ninja.py"
+  args = [
+    "-C", rebase_path(target_out_dir, root_build_dir) + "/Release",
+    "node_lib"
+  ]
+  if (is_mac) {
+    outputs = [ "$target_out_dir/Release/libnode.dylib" ]
+  }
+  if (is_linux) {
+    outputs = [ "$target_out_dir/Release/lib/libnode.so" ]
+  }
+}
+
+node_libs = get_target_outputs(":build_node")
+
+copy("copy_node") {
+  deps = [ ":build_node" ]
+  sources = node_libs
+  outputs = [ "$root_out_dir/{{source_file_part}}" ]
+}
+
+config("node_config") {
+  include_dirs = [
+    "//third_party/electron_node/src",
+    "//third_party/electron_node/deps/uv/include",
+    "//third_party/electron_node/deps/cares/include",
+  ]
+  libs = node_libs
+  cflags_cc = [
+    "-Wno-deprecated-declarations",
+  ]
+  defines = [
+    # We need to access internal implementations of Node.
+    "NODE_WANT_INTERNALS=1",
+    "NODE_SHARED_MODE",
+    "HAVE_OPENSSL=1",
+    "HAVE_INSPECTOR=1",
+  ]
+}
+
+group("node") {
+  public_configs = [ ":node_config" ]
+  public_deps = [ ":copy_node" ]
+}
added in remote
  their  100644 01ff4ff249786f56c7162ab4d0272711e61395a9 build/node/node_override.gypi
@@ -0,0 +1,41 @@
+{
+  'variables': {
+    # Node disables the inspector unless icu is enabled. But node doesn't know
+    # that we're building v8 with icu, so force it on.
+    'v8_enable_inspector': 1,
+
+    # By default, node will build a dylib called something like
+    # libnode.$node_module_version.dylib, which is inconvenient for our
+    # purposes (since it makes the library's name unpredictable). This forces
+    # it to drop the module_version from the filename and just produce
+    # `libnode.dylib`.
+    'shlib_suffix': 'dylib',
+  },
+  'target_defaults': {
+    'target_conditions': [
+      ['_target_name=="node_lib"', {
+        'include_dirs': [
+          '../../../v8',
+          '../../../v8/include',
+          '../../../third_party/icu/source/common',
+          '../../../third_party/icu/source/i18n',
+        ],
+        'libraries': [
+          '../../../../../../libv8.dylib',
+          '../../../../../../libv8_libbase.dylib',
+          '../../../../../../libv8_libplatform.dylib',
+          '../../../../../../libicuuc.dylib',
+        ],
+        'defines': [
+          # These will no longer be necessary once
+          # https://github.com/google/boringssl/commit/a02ed04d527e1b57b4efaa0b4f9bdbc1ed5975b2
+          # is in the past for Electron
+          'EVP_CIPH_CCM_MODE=0',
+          'EVP_CIPH_WRAP_MODE=0',
+          'EVP_CIPHER_CTX_FLAG_WRAP_ALLOW=0',
+          'EVP_CIPHER_CTX_set_flags(...)',
+        ],
+      }],
+    ],
+  },
+}
added in remote
  their  100644 802b17d51df17893196e59446fcbf6fb495310e4 build/node/toolchain.gypi
@@ -0,0 +1,35 @@
+{
+  'variables': {
+    'llvm_dir': '<(chromium_src_dir)/third_party/llvm-build/Release+Asserts',
+  },
+  'conditions': [
+    ['clang==1', {
+      'make_global_settings': [
+        ['CC', '<(llvm_dir)/bin/clang'],
+        ['CXX', '<(llvm_dir)/bin/clang++'],
+        ['CC.host', '$(CC)'],
+        ['CXX.host', '$(CXX)'],
+      ],
+      'target_defaults': {
+        'target_conditions': [
+          ['OS=="linux" and _toolset=="target"', {
+            'cflags_cc': [
+              '-std=gnu++14',
+              '-nostdinc++',
+              '-isystem<(chromium_src_dir)/buildtools/third_party/libc++/trunk/include',
+              '-isystem<(chromium_src_dir)/buildtools/third_party/libc++abi/trunk/include',
+            ],
+            'ldflags': [
+              '-nostdlib++',
+            ],
+          }],
+          ['OS=="linux" and _toolset=="host"', {
+            'cflags_cc': [
+              '-std=gnu++14',
+            ],
+          }],
+        ],
+      },
+    }],  # clang==1
+  ],
+}
added in both
  our    100644 1a8b6dddefd1d868bb9d2453655223742b227976 chromium_src/chrome/browser/extensions/global_shortcut_listener_win.h
  their  100644 83e9fdff283fb9e582ed7cd65365ec88cd925530 chromium_src/chrome/browser/extensions/global_shortcut_listener_win.h
@@ -21,17 +21,30 @@
 class GlobalShortcutListenerWin : public GlobalShortcutListener {
  public:
   GlobalShortcutListenerWin();
+<<<<<<< .our
   ~GlobalShortcutListenerWin() override;
+=======
+  virtual ~GlobalShortcutListenerWin();
+>>>>>>> .their
 
  private:
   // The implementation of our Window Proc, called by SingletonHwndObserver.
   void OnWndProc(HWND hwnd, UINT message, WPARAM wparam, LPARAM lparam);
 
   // GlobalShortcutListener implementation.
+<<<<<<< .our
   void StartListening() override;
   void StopListening() override;
   bool RegisterAcceleratorImpl(const ui::Accelerator& accelerator) override;
   void UnregisterAcceleratorImpl(const ui::Accelerator& accelerator) override;
+=======
+  virtual void StartListening() override;
+  virtual void StopListening() override;
+  virtual bool RegisterAcceleratorImpl(
+      const ui::Accelerator& accelerator) override;
+  virtual void UnregisterAcceleratorImpl(
+      const ui::Accelerator& accelerator) override;
+>>>>>>> .their
 
   // Whether this object is listening for global shortcuts.
   bool is_listening_;
added in remote
  their  100644 28229a178e6ca1103e5b0fdffc9718a5bd8d79b8 chromium_src/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.cc
@@ -0,0 +1,94 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.h"
+
+#include "build/build_config.h"
+#include "chrome/browser/renderer_host/pepper/pepper_broker_message_filter.h"
+#include "chrome/browser/renderer_host/pepper/pepper_flash_browser_host.h"
+#include "chrome/browser/renderer_host/pepper/pepper_flash_clipboard_message_filter.h"
+#include "chrome/browser/renderer_host/pepper/pepper_flash_drm_host.h"
+#include "chrome/browser/renderer_host/pepper/pepper_isolated_file_system_message_filter.h"
+#include "content/public/browser/browser_ppapi_host.h"
+#include "ppapi/host/message_filter_host.h"
+#include "ppapi/host/ppapi_host.h"
+#include "ppapi/host/resource_host.h"
+#include "ppapi/proxy/ppapi_messages.h"
+#include "ppapi/shared_impl/ppapi_permissions.h"
+
+using ppapi::host::MessageFilterHost;
+using ppapi::host::ResourceHost;
+using ppapi::host::ResourceMessageFilter;
+
+namespace chrome {
+
+ChromeBrowserPepperHostFactory::ChromeBrowserPepperHostFactory(
+    content::BrowserPpapiHost* host)
+    : host_(host) {}
+
+ChromeBrowserPepperHostFactory::~ChromeBrowserPepperHostFactory() {}
+
+std::unique_ptr<ResourceHost>
+ChromeBrowserPepperHostFactory::CreateResourceHost(
+    ppapi::host::PpapiHost* host,
+    PP_Resource resource,
+    PP_Instance instance,
+    const IPC::Message& message) {
+  DCHECK(host == host_->GetPpapiHost());
+
+  // Make sure the plugin is giving us a valid instance for this resource.
+  if (!host_->IsValidInstance(instance))
+    return std::unique_ptr<ResourceHost>();
+
+  // Private interfaces.
+  if (host_->GetPpapiHost()->permissions().HasPermission(
+          ppapi::PERMISSION_PRIVATE)) {
+    switch (message.type()) {
+      case PpapiHostMsg_Broker_Create::ID: {
+        scoped_refptr<ResourceMessageFilter> broker_filter(
+            new PepperBrokerMessageFilter(instance, host_));
+        return std::unique_ptr<ResourceHost>(new MessageFilterHost(
+            host_->GetPpapiHost(), instance, resource, broker_filter));
+      }
+    }
+  }
+
+  // Flash interfaces.
+  if (host_->GetPpapiHost()->permissions().HasPermission(
+          ppapi::PERMISSION_FLASH)) {
+    switch (message.type()) {
+      case PpapiHostMsg_Flash_Create::ID:
+        return std::unique_ptr<ResourceHost>(
+            new PepperFlashBrowserHost(host_, instance, resource));
+      case PpapiHostMsg_FlashClipboard_Create::ID: {
+        scoped_refptr<ResourceMessageFilter> clipboard_filter(
+            new PepperFlashClipboardMessageFilter);
+        return std::unique_ptr<ResourceHost>(new MessageFilterHost(
+            host_->GetPpapiHost(), instance, resource, clipboard_filter));
+      }
+      case PpapiHostMsg_FlashDRM_Create::ID:
+        return std::unique_ptr<ResourceHost>(
+            new chrome::PepperFlashDRMHost(host_, instance, resource));
+    }
+  }
+
+  // Permissions for the following interfaces will be checked at the
+  // time of the corresponding instance's methods calls (because
+  // permission check can be performed only on the UI
+  // thread). Currently these interfaces are available only for
+  // whitelisted apps which may not have access to the other private
+  // interfaces.
+  if (message.type() == PpapiHostMsg_IsolatedFileSystem_Create::ID) {
+    PepperIsolatedFileSystemMessageFilter* isolated_fs_filter =
+        PepperIsolatedFileSystemMessageFilter::Create(instance, host_);
+    if (!isolated_fs_filter)
+      return std::unique_ptr<ResourceHost>();
+    return std::unique_ptr<ResourceHost>(
+        new MessageFilterHost(host, instance, resource, isolated_fs_filter));
+  }
+
+  return std::unique_ptr<ResourceHost>();
+}
+
+}  // namespace chrome
added in remote
  their  100644 84385140ceca7e4eb2e16b2a0802714fd0aa392b chromium_src/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.h
@@ -0,0 +1,38 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_RENDERER_HOST_PEPPER_CHROME_BROWSER_PEPPER_HOST_FACTORY_H_
+#define CHROME_BROWSER_RENDERER_HOST_PEPPER_CHROME_BROWSER_PEPPER_HOST_FACTORY_H_
+
+#include "base/macros.h"
+#include "ppapi/host/host_factory.h"
+
+namespace content {
+class BrowserPpapiHost;
+}  // namespace content
+
+namespace chrome {
+
+class ChromeBrowserPepperHostFactory : public ppapi::host::HostFactory {
+ public:
+  // Non-owning pointer to the filter must outlive this class.
+  explicit ChromeBrowserPepperHostFactory(content::BrowserPpapiHost* host);
+  ~ChromeBrowserPepperHostFactory() override;
+
+  std::unique_ptr<ppapi::host::ResourceHost> CreateResourceHost(
+      ppapi::host::PpapiHost* host,
+      PP_Resource resource,
+      PP_Instance instance,
+      const IPC::Message& message) override;
+
+ private:
+  // Non-owning pointer.
+  content::BrowserPpapiHost* host_;
+
+  DISALLOW_COPY_AND_ASSIGN(ChromeBrowserPepperHostFactory);
+};
+
+}  // namespace chrome
+
+#endif  // CHROME_BROWSER_RENDERER_HOST_PEPPER_CHROME_BROWSER_PEPPER_HOST_FACTORY_H_
added in remote
  their  100644 cc10ee85780caa46817802f861e38f9ce9af9d61 chromium_src/chrome/browser/renderer_host/pepper/monitor_finder_mac.h
@@ -0,0 +1,52 @@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_RENDERER_HOST_PEPPER_MONITOR_FINDER_MAC_H_
+#define CHROME_BROWSER_RENDERER_HOST_PEPPER_MONITOR_FINDER_MAC_H_
+
+#include <ApplicationServices/ApplicationServices.h>
+#include <stdint.h>
+
+#include "base/macros.h"
+#include "base/memory/ref_counted.h"
+#include "base/synchronization/lock.h"
+
+namespace chrome {
+
+// MonitorFinder maps a RenderFrameHost to the display ID on which the widget
+// is painting. This class operates on the IO thread while the RenderFrameHost
+// is on the UI thread, so the value returned by GetMonitor() may be 0 until
+// the information can be retrieved asynchronously.
+class MonitorFinder : public base::RefCountedThreadSafe<MonitorFinder> {
+ public:
+  MonitorFinder(int process_id, int render_frame_id);
+
+  // Gets the native display ID for the <process_id, render_frame_id> tuple.
+  int64_t GetMonitor();
+
+  // Checks if the given |monitor_id| represents a built-in display.
+  static bool IsMonitorBuiltIn(int64_t monitor_id);
+
+ private:
+  friend class base::RefCountedThreadSafe<MonitorFinder>;
+  ~MonitorFinder();
+
+  // Method run on the UI thread to get the display information.
+  void FetchMonitorFromWidget();
+
+  const int process_id_;
+  const int render_frame_id_;
+
+  base::Lock mutex_;  // Protects the two members below.
+  // Whether one request to FetchMonitorFromWidget() has been made already.
+  bool request_sent_;
+  // The native display ID for the RenderFrameHost.
+  CGDirectDisplayID display_id_;
+
+  DISALLOW_COPY_AND_ASSIGN(MonitorFinder);
+};
+
+}  // namespace chrome
+
+#endif  // CHROME_BROWSER_RENDERER_HOST_PEPPER_MONITOR_FINDER_H_
added in remote
  their  100644 e6e0a62fa67edabae605c17ae87a38df083f70cc chromium_src/chrome/browser/renderer_host/pepper/monitor_finder_mac.mm
@@ -0,0 +1,61 @@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/browser/renderer_host/pepper/monitor_finder_mac.h"
+
+#import <Cocoa/Cocoa.h>
+
+#include "content/public/browser/browser_thread.h"
+#include "content/public/browser/render_frame_host.h"
+
+namespace chrome {
+
+MonitorFinder::MonitorFinder(int process_id, int render_frame_id)
+    : process_id_(process_id),
+      render_frame_id_(render_frame_id),
+      request_sent_(false),
+      display_id_(kCGNullDirectDisplay) {}
+
+MonitorFinder::~MonitorFinder() {}
+
+int64_t MonitorFinder::GetMonitor() {
+  {
+    // The plugin may call this method several times, so avoid spamming the UI
+    // thread with requests by only allowing one outstanding request at a time.
+    base::AutoLock lock(mutex_);
+    if (request_sent_)
+      return display_id_;
+    request_sent_ = true;
+  }
+
+  content::BrowserThread::PostTask(
+      content::BrowserThread::UI, FROM_HERE,
+      base::Bind(&MonitorFinder::FetchMonitorFromWidget, this));
+  return display_id_;
+}
+
+// static
+bool MonitorFinder::IsMonitorBuiltIn(int64_t display_id) {
+  return CGDisplayIsBuiltin(display_id);
+}
+
+void MonitorFinder::FetchMonitorFromWidget() {
+  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
+  content::RenderFrameHost* rfh =
+      content::RenderFrameHost::FromID(process_id_, render_frame_id_);
+  if (!rfh)
+    return;
+
+  gfx::NativeView native_view = rfh->GetNativeView();
+  NSWindow* window = [native_view window];
+  NSScreen* screen = [window screen];
+  CGDirectDisplayID display_id =
+      [[[screen deviceDescription] objectForKey:@"NSScreenNumber"] intValue];
+
+  base::AutoLock lock(mutex_);
+  request_sent_ = false;
+  display_id_ = display_id;
+}
+
+}  // namespace chrome
added in remote
  their  100644 d40ad53dd17d24a24f00b5c669d6e113760a1c0a chromium_src/chrome/browser/renderer_host/pepper/pepper_broker_message_filter.cc
@@ -0,0 +1,53 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/browser/renderer_host/pepper/pepper_broker_message_filter.h"
+
+#include <string>
+
+#include "content/public/browser/browser_ppapi_host.h"
+#include "content/public/browser/browser_thread.h"
+#include "content/public/browser/render_process_host.h"
+#include "ipc/ipc_message_macros.h"
+#include "ppapi/c/pp_errors.h"
+#include "ppapi/host/dispatch_host_message.h"
+#include "ppapi/proxy/ppapi_messages.h"
+#include "url/gurl.h"
+
+using content::BrowserPpapiHost;
+using content::BrowserThread;
+
+namespace chrome {
+
+PepperBrokerMessageFilter::PepperBrokerMessageFilter(PP_Instance instance,
+                                                     BrowserPpapiHost* host)
+    : document_url_(host->GetDocumentURLForInstance(instance)) {
+  int unused;
+  host->GetRenderFrameIDsForInstance(instance, &render_process_id_, &unused);
+}
+
+PepperBrokerMessageFilter::~PepperBrokerMessageFilter() {}
+
+scoped_refptr<base::TaskRunner>
+PepperBrokerMessageFilter::OverrideTaskRunnerForMessage(
+    const IPC::Message& message) {
+  return BrowserThread::GetTaskRunnerForThread(BrowserThread::UI);
+}
+
+int32_t PepperBrokerMessageFilter::OnResourceMessageReceived(
+    const IPC::Message& msg,
+    ppapi::host::HostMessageContext* context) {
+  PPAPI_BEGIN_MESSAGE_MAP(PepperBrokerMessageFilter, msg)
+    PPAPI_DISPATCH_HOST_RESOURCE_CALL_0(PpapiHostMsg_Broker_IsAllowed,
+                                        OnIsAllowed)
+  PPAPI_END_MESSAGE_MAP()
+  return PP_ERROR_FAILED;
+}
+
+int32_t PepperBrokerMessageFilter::OnIsAllowed(
+    ppapi::host::HostMessageContext* context) {
+  return PP_OK;
+}
+
+}  // namespace chrome
added in remote
  their  100644 2aad5593b26a1eab56841e56fc56acf1d5cba28b chromium_src/chrome/browser/renderer_host/pepper/pepper_broker_message_filter.h
@@ -0,0 +1,51 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_RENDERER_HOST_PEPPER_PEPPER_BROKER_MESSAGE_FILTER_H_
+#define CHROME_BROWSER_RENDERER_HOST_PEPPER_PEPPER_BROKER_MESSAGE_FILTER_H_
+
+#include "base/compiler_specific.h"
+#include "ppapi/c/pp_instance.h"
+#include "ppapi/host/resource_message_filter.h"
+#include "url/gurl.h"
+
+namespace content {
+class BrowserPpapiHost;
+}
+
+namespace ppapi {
+namespace host {
+struct HostMessageContext;
+}
+}  // namespace ppapi
+
+namespace chrome {
+
+// This filter handles messages for the PepperBrokerHost on the UI thread.
+class PepperBrokerMessageFilter : public ppapi::host::ResourceMessageFilter {
+ public:
+  PepperBrokerMessageFilter(PP_Instance instance,
+                            content::BrowserPpapiHost* host);
+
+ private:
+  ~PepperBrokerMessageFilter() override;
+
+  // ppapi::host::ResourceMessageFilter overrides.
+  scoped_refptr<base::TaskRunner> OverrideTaskRunnerForMessage(
+      const IPC::Message& message) override;
+  int32_t OnResourceMessageReceived(
+      const IPC::Message& msg,
+      ppapi::host::HostMessageContext* context) override;
+
+  int32_t OnIsAllowed(ppapi::host::HostMessageContext* context);
+
+  int render_process_id_;
+  GURL document_url_;
+
+  DISALLOW_COPY_AND_ASSIGN(PepperBrokerMessageFilter);
+};
+
+}  // namespace chrome
+
+#endif  // CHROME_BROWSER_RENDERER_HOST_PEPPER_PEPPER_BROKER_MESSAGE_FILTER_H_
added in remote
  their  100644 901da1ad6e221b55196a1b25a1549fa272b4fdf7 chromium_src/chrome/browser/renderer_host/pepper/pepper_flash_browser_host.cc
@@ -0,0 +1,111 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/browser/renderer_host/pepper/pepper_flash_browser_host.h"
+
+#include "base/time/time.h"
+#include "content/public/browser/browser_context.h"
+#include "content/public/browser/browser_ppapi_host.h"
+#include "content/public/browser/browser_thread.h"
+#include "content/public/browser/render_process_host.h"
+#include "ipc/ipc_message_macros.h"
+#include "ppapi/c/pp_errors.h"
+#include "ppapi/c/private/ppb_flash.h"
+#include "ppapi/host/dispatch_host_message.h"
+#include "ppapi/proxy/ppapi_messages.h"
+#include "ppapi/proxy/resource_message_params.h"
+#include "ppapi/shared_impl/time_conversion.h"
+#include "url/gurl.h"
+
+#if defined(OS_WIN)
+#include <windows.h>
+#elif defined(OS_MACOSX)
+#include <CoreServices/CoreServices.h>
+#endif
+
+using content::BrowserPpapiHost;
+using content::BrowserThread;
+
+namespace chrome {
+
+PepperFlashBrowserHost::PepperFlashBrowserHost(BrowserPpapiHost* host,
+                                               PP_Instance instance,
+                                               PP_Resource resource)
+    : ResourceHost(host->GetPpapiHost(), instance, resource),
+      host_(host),
+      weak_factory_(this) {
+  int unused;
+  host->GetRenderFrameIDsForInstance(instance, &render_process_id_, &unused);
+}
+
+PepperFlashBrowserHost::~PepperFlashBrowserHost() {}
+
+int32_t PepperFlashBrowserHost::OnResourceMessageReceived(
+    const IPC::Message& msg,
+    ppapi::host::HostMessageContext* context) {
+  PPAPI_BEGIN_MESSAGE_MAP(PepperFlashBrowserHost, msg)
+    PPAPI_DISPATCH_HOST_RESOURCE_CALL_0(PpapiHostMsg_Flash_UpdateActivity,
+                                        OnUpdateActivity)
+    PPAPI_DISPATCH_HOST_RESOURCE_CALL(PpapiHostMsg_Flash_GetLocalTimeZoneOffset,
+                                      OnGetLocalTimeZoneOffset)
+    PPAPI_DISPATCH_HOST_RESOURCE_CALL_0(
+        PpapiHostMsg_Flash_GetLocalDataRestrictions, OnGetLocalDataRestrictions)
+  PPAPI_END_MESSAGE_MAP()
+  return PP_ERROR_FAILED;
+}
+
+int32_t PepperFlashBrowserHost::OnUpdateActivity(
+    ppapi::host::HostMessageContext* host_context) {
+#if defined(OS_WIN)
+  // Reading then writing back the same value to the screensaver timeout system
+  // setting resets the countdown which prevents the screensaver from turning
+  // on "for a while". As long as the plugin pings us with this message faster
+  // than the screensaver timeout, it won't go on.
+  int value = 0;
+  if (SystemParametersInfo(SPI_GETSCREENSAVETIMEOUT, 0, &value, 0))
+    SystemParametersInfo(SPI_SETSCREENSAVETIMEOUT, value, NULL, 0);
+#elif defined(OS_MACOSX)
+// UpdateSystemActivity(OverallAct);
+#else
+// TODO(brettw) implement this for other platforms.
+#endif
+  return PP_OK;
+}
+
+int32_t PepperFlashBrowserHost::OnGetLocalTimeZoneOffset(
+    ppapi::host::HostMessageContext* host_context,
+    const base::Time& t) {
+  // The reason for this processing being in the browser process is that on
+  // Linux, the localtime calls require filesystem access prohibited by the
+  // sandbox.
+  host_context->reply_msg = PpapiPluginMsg_Flash_GetLocalTimeZoneOffsetReply(
+      ppapi::PPGetLocalTimeZoneOffset(t));
+  return PP_OK;
+}
+
+int32_t PepperFlashBrowserHost::OnGetLocalDataRestrictions(
+    ppapi::host::HostMessageContext* context) {
+  // Getting the Flash LSO settings requires using the CookieSettings which
+  // belong to the profile which lives on the UI thread. We lazily initialize
+  // |cookie_settings_| by grabbing the reference from the UI thread and then
+  // call |GetLocalDataRestrictions| with it.
+  GURL document_url = host_->GetDocumentURLForInstance(pp_instance());
+  GURL plugin_url = host_->GetPluginURLForInstance(pp_instance());
+  GetLocalDataRestrictions(context->MakeReplyMessageContext(), document_url,
+                           plugin_url);
+  return PP_OK_COMPLETIONPENDING;
+}
+
+void PepperFlashBrowserHost::GetLocalDataRestrictions(
+    ppapi::host::ReplyMessageContext reply_context,
+    const GURL& document_url,
+    const GURL& plugin_url) {
+  DCHECK(BrowserThread::CurrentlyOn(BrowserThread::IO));
+
+  PP_FlashLSORestrictions restrictions = PP_FLASHLSORESTRICTIONS_NONE;
+  SendReply(reply_context, PpapiPluginMsg_Flash_GetLocalDataRestrictionsReply(
+                               static_cast<int32_t>(restrictions)));
+}
+
+}  // namespace chrome
added in remote
  their  100644 65e0d02c001c6086d78d09154a515d031293227d chromium_src/chrome/browser/renderer_host/pepper/pepper_flash_browser_host.h
@@ -0,0 +1,59 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_RENDERER_HOST_PEPPER_PEPPER_FLASH_BROWSER_HOST_H_
+#define CHROME_BROWSER_RENDERER_HOST_PEPPER_PEPPER_FLASH_BROWSER_HOST_H_
+
+#include "base/memory/ref_counted.h"
+#include "base/memory/weak_ptr.h"
+#include "ppapi/host/host_message_context.h"
+#include "ppapi/host/resource_host.h"
+
+namespace base {
+class Time;
+}
+
+namespace content {
+class BrowserPpapiHost;
+class ResourceContext;
+}  // namespace content
+
+class GURL;
+
+namespace chrome {
+
+class PepperFlashBrowserHost : public ppapi::host::ResourceHost {
+ public:
+  PepperFlashBrowserHost(content::BrowserPpapiHost* host,
+                         PP_Instance instance,
+                         PP_Resource resource);
+  ~PepperFlashBrowserHost() override;
+
+  // ppapi::host::ResourceHost override.
+  int32_t OnResourceMessageReceived(
+      const IPC::Message& msg,
+      ppapi::host::HostMessageContext* context) override;
+
+ private:
+  int32_t OnUpdateActivity(ppapi::host::HostMessageContext* host_context);
+  int32_t OnGetLocalTimeZoneOffset(
+      ppapi::host::HostMessageContext* host_context,
+      const base::Time& t);
+  int32_t OnGetLocalDataRestrictions(ppapi::host::HostMessageContext* context);
+
+  void GetLocalDataRestrictions(ppapi::host::ReplyMessageContext reply_context,
+                                const GURL& document_url,
+                                const GURL& plugin_url);
+
+  content::BrowserPpapiHost* host_;
+  int render_process_id_;
+  // For fetching the Flash LSO settings.
+  base::WeakPtrFactory<PepperFlashBrowserHost> weak_factory_;
+
+  DISALLOW_COPY_AND_ASSIGN(PepperFlashBrowserHost);
+};
+
+}  // namespace chrome
+
+#endif  // CHROME_BROWSER_RENDERER_HOST_PEPPER_PEPPER_FLASH_BROWSER_HOST_H_
added in remote
  their  100644 c62d2d98621d6f8cc651501111af81f7a5ade2c0 chromium_src/chrome/browser/renderer_host/pepper/pepper_flash_clipboard_message_filter.cc
@@ -0,0 +1,372 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/browser/renderer_host/pepper/pepper_flash_clipboard_message_filter.h"
+
+#include <stddef.h>
+
+#include "base/pickle.h"
+#include "base/strings/utf_string_conversions.h"
+#include "content/public/browser/browser_thread.h"
+#include "ipc/ipc_message.h"
+#include "ipc/ipc_message_macros.h"
+#include "ppapi/c/pp_errors.h"
+#include "ppapi/c/private/ppb_flash_clipboard.h"
+#include "ppapi/host/dispatch_host_message.h"
+#include "ppapi/host/host_message_context.h"
+#include "ppapi/host/ppapi_host.h"
+#include "ppapi/proxy/ppapi_messages.h"
+#include "ppapi/proxy/resource_message_params.h"
+#include "ui/base/clipboard/scoped_clipboard_writer.h"
+
+using content::BrowserThread;
+
+namespace chrome {
+
+namespace {
+
+const size_t kMaxClipboardWriteSize = 1000000;
+
+ui::ClipboardType ConvertClipboardType(uint32_t type) {
+  switch (type) {
+    case PP_FLASH_CLIPBOARD_TYPE_STANDARD:
+      return ui::CLIPBOARD_TYPE_COPY_PASTE;
+    case PP_FLASH_CLIPBOARD_TYPE_SELECTION:
+      return ui::CLIPBOARD_TYPE_SELECTION;
+  }
+  NOTREACHED();
+  return ui::CLIPBOARD_TYPE_COPY_PASTE;
+}
+
+// Functions to pack/unpack custom data from a pickle. See the header file for
+// more detail on custom formats in Pepper.
+// TODO(raymes): Currently pepper custom formats are stored in their own
+// native format type. However we should be able to store them in the same way
+// as "Web Custom" formats are. This would allow clipboard data to be shared
+// between pepper applications and web applications. However currently web apps
+// assume all data that is placed on the clipboard is UTF16 and pepper allows
+// arbitrary data so this change would require some reworking of the chrome
+// clipboard interface for custom data.
+bool JumpToFormatInPickle(const base::string16& format,
+                          base::PickleIterator* iter) {
+  uint32_t size = 0;
+  if (!iter->ReadUInt32(&size))
+    return false;
+  for (uint32_t i = 0; i < size; ++i) {
+    base::string16 stored_format;
+    if (!iter->ReadString16(&stored_format))
+      return false;
+    if (stored_format == format)
+      return true;
+    int skip_length;
+    if (!iter->ReadLength(&skip_length))
+      return false;
+    if (!iter->SkipBytes(skip_length))
+      return false;
+  }
+  return false;
+}
+
+bool IsFormatAvailableInPickle(const base::string16& format,
+                               const base::Pickle& pickle) {
+  base::PickleIterator iter(pickle);
+  return JumpToFormatInPickle(format, &iter);
+}
+
+std::string ReadDataFromPickle(const base::string16& format,
+                               const base::Pickle& pickle) {
+  std::string result;
+  base::PickleIterator iter(pickle);
+  if (!JumpToFormatInPickle(format, &iter) || !iter.ReadString(&result))
+    return std::string();
+  return result;
+}
+
+void WriteDataToPickle(const std::map<base::string16, std::string>& data,
+                       base::Pickle* pickle) {
+  pickle->WriteUInt32(data.size());
+  for (std::map<base::string16, std::string>::const_iterator it = data.begin();
+       it != data.end(); ++it) {
+    pickle->WriteString16(it->first);
+    pickle->WriteString(it->second);
+  }
+}
+
+}  // namespace
+
+PepperFlashClipboardMessageFilter::PepperFlashClipboardMessageFilter() {}
+
+PepperFlashClipboardMessageFilter::~PepperFlashClipboardMessageFilter() {}
+
+scoped_refptr<base::TaskRunner>
+PepperFlashClipboardMessageFilter::OverrideTaskRunnerForMessage(
+    const IPC::Message& msg) {
+  // Clipboard writes should always occur on the UI thread due to the
+  // restrictions of various platform APIs. In general, the clipboard is not
+  // thread-safe, so all clipboard calls should be serviced from the UI thread.
+  if (msg.type() == PpapiHostMsg_FlashClipboard_WriteData::ID)
+    return BrowserThread::GetTaskRunnerForThread(BrowserThread::UI);
+
+// Windows needs clipboard reads to be serviced from the IO thread because
+// these are sync IPCs which can result in deadlocks with plugins if serviced
+// from the UI thread. Note that Windows clipboard calls ARE thread-safe so it
+// is ok for reads and writes to be serviced from different threads.
+#if !defined(OS_WIN)
+  return BrowserThread::GetTaskRunnerForThread(BrowserThread::UI);
+#else
+  return BrowserThread::GetTaskRunnerForThread(BrowserThread::IO);
+#endif
+}
+
+int32_t PepperFlashClipboardMessageFilter::OnResourceMessageReceived(
+    const IPC::Message& msg,
+    ppapi::host::HostMessageContext* context) {
+  PPAPI_BEGIN_MESSAGE_MAP(PepperFlashClipboardMessageFilter, msg)
+    PPAPI_DISPATCH_HOST_RESOURCE_CALL(
+        PpapiHostMsg_FlashClipboard_RegisterCustomFormat,
+        OnMsgRegisterCustomFormat)
+    PPAPI_DISPATCH_HOST_RESOURCE_CALL(
+        PpapiHostMsg_FlashClipboard_IsFormatAvailable, OnMsgIsFormatAvailable)
+    PPAPI_DISPATCH_HOST_RESOURCE_CALL(PpapiHostMsg_FlashClipboard_ReadData,
+                                      OnMsgReadData)
+    PPAPI_DISPATCH_HOST_RESOURCE_CALL(PpapiHostMsg_FlashClipboard_WriteData,
+                                      OnMsgWriteData)
+    PPAPI_DISPATCH_HOST_RESOURCE_CALL(
+        PpapiHostMsg_FlashClipboard_GetSequenceNumber, OnMsgGetSequenceNumber)
+  PPAPI_END_MESSAGE_MAP()
+  return PP_ERROR_FAILED;
+}
+
+int32_t PepperFlashClipboardMessageFilter::OnMsgRegisterCustomFormat(
+    ppapi::host::HostMessageContext* host_context,
+    const std::string& format_name) {
+  uint32_t format = custom_formats_.RegisterFormat(format_name);
+  if (format == PP_FLASH_CLIPBOARD_FORMAT_INVALID)
+    return PP_ERROR_FAILED;
+  host_context->reply_msg =
+      PpapiPluginMsg_FlashClipboard_RegisterCustomFormatReply(format);
+  return PP_OK;
+}
+
+int32_t PepperFlashClipboardMessageFilter::OnMsgIsFormatAvailable(
+    ppapi::host::HostMessageContext* host_context,
+    uint32_t clipboard_type,
+    uint32_t format) {
+  if (clipboard_type != PP_FLASH_CLIPBOARD_TYPE_STANDARD) {
+    NOTIMPLEMENTED();
+    return PP_ERROR_FAILED;
+  }
+
+  ui::Clipboard* clipboard = ui::Clipboard::GetForCurrentThread();
+  ui::ClipboardType type = ConvertClipboardType(clipboard_type);
+  bool available = false;
+  switch (format) {
+    case PP_FLASH_CLIPBOARD_FORMAT_PLAINTEXT: {
+      bool plain = clipboard->IsFormatAvailable(
+          ui::Clipboard::GetPlainTextFormatType(), type);
+      bool plainw = clipboard->IsFormatAvailable(
+          ui::Clipboard::GetPlainTextWFormatType(), type);
+      available = plain || plainw;
+      break;
+    }
+    case PP_FLASH_CLIPBOARD_FORMAT_HTML:
+      available = clipboard->IsFormatAvailable(
+          ui::Clipboard::GetHtmlFormatType(), type);
+      break;
+    case PP_FLASH_CLIPBOARD_FORMAT_RTF:
+      available =
+          clipboard->IsFormatAvailable(ui::Clipboard::GetRtfFormatType(), type);
+      break;
+    case PP_FLASH_CLIPBOARD_FORMAT_INVALID:
+      break;
+    default:
+      if (custom_formats_.IsFormatRegistered(format)) {
+        std::string format_name = custom_formats_.GetFormatName(format);
+        std::string clipboard_data;
+        clipboard->ReadData(ui::Clipboard::GetPepperCustomDataFormatType(),
+                            &clipboard_data);
+        base::Pickle pickle(clipboard_data.data(), clipboard_data.size());
+        available =
+            IsFormatAvailableInPickle(base::UTF8ToUTF16(format_name), pickle);
+      }
+      break;
+  }
+
+  return available ? PP_OK : PP_ERROR_FAILED;
+}
+
+int32_t PepperFlashClipboardMessageFilter::OnMsgReadData(
+    ppapi::host::HostMessageContext* host_context,
+    uint32_t clipboard_type,
+    uint32_t format) {
+  if (clipboard_type != PP_FLASH_CLIPBOARD_TYPE_STANDARD) {
+    NOTIMPLEMENTED();
+    return PP_ERROR_FAILED;
+  }
+
+  ui::Clipboard* clipboard = ui::Clipboard::GetForCurrentThread();
+  ui::ClipboardType type = ConvertClipboardType(clipboard_type);
+  std::string clipboard_string;
+  int32_t result = PP_ERROR_FAILED;
+  switch (format) {
+    case PP_FLASH_CLIPBOARD_FORMAT_PLAINTEXT: {
+      if (clipboard->IsFormatAvailable(ui::Clipboard::GetPlainTextWFormatType(),
+                                       type)) {
+        base::string16 text;
+        clipboard->ReadText(type, &text);
+        if (!text.empty()) {
+          result = PP_OK;
+          clipboard_string = base::UTF16ToUTF8(text);
+          break;
+        }
+      }
+      // If the PlainTextW format isn't available or is empty, take the
+      // ASCII text format.
+      if (clipboard->IsFormatAvailable(ui::Clipboard::GetPlainTextFormatType(),
+                                       type)) {
+        result = PP_OK;
+        clipboard->ReadAsciiText(type, &clipboard_string);
+      }
+      break;
+    }
+    case PP_FLASH_CLIPBOARD_FORMAT_HTML: {
+      if (!clipboard->IsFormatAvailable(ui::Clipboard::GetHtmlFormatType(),
+                                        type)) {
+        break;
+      }
+
+      base::string16 html;
+      std::string url;
+      uint32_t fragment_start;
+      uint32_t fragment_end;
+      clipboard->ReadHTML(type, &html, &url, &fragment_start, &fragment_end);
+      result = PP_OK;
+      clipboard_string = base::UTF16ToUTF8(
+          html.substr(fragment_start, fragment_end - fragment_start));
+      break;
+    }
+    case PP_FLASH_CLIPBOARD_FORMAT_RTF: {
+      if (!clipboard->IsFormatAvailable(ui::Clipboard::GetRtfFormatType(),
+                                        type)) {
+        break;
+      }
+      result = PP_OK;
+      clipboard->ReadRTF(type, &clipboard_string);
+      break;
+    }
+    case PP_FLASH_CLIPBOARD_FORMAT_INVALID:
+      break;
+    default: {
+      if (custom_formats_.IsFormatRegistered(format)) {
+        base::string16 format_name =
+            base::UTF8ToUTF16(custom_formats_.GetFormatName(format));
+        std::string clipboard_data;
+        clipboard->ReadData(ui::Clipboard::GetPepperCustomDataFormatType(),
+                            &clipboard_data);
+        base::Pickle pickle(clipboard_data.data(), clipboard_data.size());
+        if (IsFormatAvailableInPickle(format_name, pickle)) {
+          result = PP_OK;
+          clipboard_string = ReadDataFromPickle(format_name, pickle);
+        }
+      }
+      break;
+    }
+  }
+
+  if (result == PP_OK) {
+    host_context->reply_msg =
+        PpapiPluginMsg_FlashClipboard_ReadDataReply(clipboard_string);
+  }
+  return result;
+}
+
+int32_t PepperFlashClipboardMessageFilter::OnMsgWriteData(
+    ppapi::host::HostMessageContext* host_context,
+    uint32_t clipboard_type,
+    const std::vector<uint32_t>& formats,
+    const std::vector<std::string>& data) {
+  if (clipboard_type != PP_FLASH_CLIPBOARD_TYPE_STANDARD) {
+    NOTIMPLEMENTED();
+    return PP_ERROR_FAILED;
+  }
+  if (formats.size() != data.size())
+    return PP_ERROR_FAILED;
+
+  ui::Clipboard* clipboard = ui::Clipboard::GetForCurrentThread();
+  ui::ClipboardType type = ConvertClipboardType(clipboard_type);
+  // If no formats are passed in clear the clipboard.
+  if (formats.size() == 0) {
+    clipboard->Clear(type);
+    return PP_OK;
+  }
+
+  ui::ScopedClipboardWriter scw(type);
+  std::map<base::string16, std::string> custom_data_map;
+  int32_t res = PP_OK;
+  for (uint32_t i = 0; i < formats.size(); ++i) {
+    if (data[i].length() > kMaxClipboardWriteSize) {
+      res = PP_ERROR_NOSPACE;
+      break;
+    }
+
+    switch (formats[i]) {
+      case PP_FLASH_CLIPBOARD_FORMAT_PLAINTEXT:
+        scw.WriteText(base::UTF8ToUTF16(data[i]));
+        break;
+      case PP_FLASH_CLIPBOARD_FORMAT_HTML:
+        scw.WriteHTML(base::UTF8ToUTF16(data[i]), std::string());
+        break;
+      case PP_FLASH_CLIPBOARD_FORMAT_RTF:
+        scw.WriteRTF(data[i]);
+        break;
+      case PP_FLASH_CLIPBOARD_FORMAT_INVALID:
+        res = PP_ERROR_BADARGUMENT;
+        break;
+      default:
+        if (custom_formats_.IsFormatRegistered(formats[i])) {
+          std::string format_name = custom_formats_.GetFormatName(formats[i]);
+          custom_data_map[base::UTF8ToUTF16(format_name)] = data[i];
+        } else {
+          // Invalid format.
+          res = PP_ERROR_BADARGUMENT;
+          break;
+        }
+    }
+
+    if (res != PP_OK)
+      break;
+  }
+
+  if (custom_data_map.size() > 0) {
+    base::Pickle pickle;
+    WriteDataToPickle(custom_data_map, &pickle);
+    scw.WritePickledData(pickle,
+                         ui::Clipboard::GetPepperCustomDataFormatType());
+  }
+
+  if (res != PP_OK) {
+    // Need to clear the objects so nothing is written.
+    scw.Reset();
+  }
+
+  return res;
+}
+
+int32_t PepperFlashClipboardMessageFilter::OnMsgGetSequenceNumber(
+    ppapi::host::HostMessageContext* host_context,
+    uint32_t clipboard_type) {
+  if (clipboard_type != PP_FLASH_CLIPBOARD_TYPE_STANDARD) {
+    NOTIMPLEMENTED();
+    return PP_ERROR_FAILED;
+  }
+
+  ui::Clipboard* clipboard = ui::Clipboard::GetForCurrentThread();
+  ui::ClipboardType type = ConvertClipboardType(clipboard_type);
+  int64_t sequence_number = clipboard->GetSequenceNumber(type);
+  host_context->reply_msg =
+      PpapiPluginMsg_FlashClipboard_GetSequenceNumberReply(sequence_number);
+  return PP_OK;
+}
+
+}  // namespace chrome
added in remote
  their  100644 b282d54df28cbb43b5a1b49c6272b504565cde2b chromium_src/chrome/browser/renderer_host/pepper/pepper_flash_clipboard_message_filter.h
@@ -0,0 +1,76 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_RENDERER_HOST_PEPPER_PEPPER_FLASH_CLIPBOARD_MESSAGE_FILTER_H_
+#define CHROME_BROWSER_RENDERER_HOST_PEPPER_PEPPER_FLASH_CLIPBOARD_MESSAGE_FILTER_H_
+
+#include <string>
+#include <vector>
+
+#include "ppapi/host/resource_message_filter.h"
+#include "ppapi/shared_impl/flash_clipboard_format_registry.h"
+
+namespace ppapi {
+namespace host {
+struct HostMessageContext;
+}
+}  // namespace ppapi
+
+namespace ui {
+class ScopedClipboardWriter;
+}
+
+namespace chrome {
+
+// Resource message filter for accessing the clipboard in Pepper. Pepper
+// supports reading/writing custom formats from the clipboard. Currently, all
+// custom formats that are read/written from the clipboard through pepper are
+// stored in a single real clipboard format (in the same way the "web custom"
+// clipboard formats are). This is done so that we don't have to have use real
+// clipboard types for each custom clipboard format which may be a limited
+// resource on a particular platform.
+class PepperFlashClipboardMessageFilter
+    : public ppapi::host::ResourceMessageFilter {
+ public:
+  PepperFlashClipboardMessageFilter();
+
+ protected:
+  // ppapi::host::ResourceMessageFilter overrides.
+  scoped_refptr<base::TaskRunner> OverrideTaskRunnerForMessage(
+      const IPC::Message& msg) override;
+  int32_t OnResourceMessageReceived(
+      const IPC::Message& msg,
+      ppapi::host::HostMessageContext* context) override;
+
+ private:
+  ~PepperFlashClipboardMessageFilter() override;
+
+  int32_t OnMsgRegisterCustomFormat(
+      ppapi::host::HostMessageContext* host_context,
+      const std::string& format_name);
+  int32_t OnMsgIsFormatAvailable(ppapi::host::HostMessageContext* host_context,
+                                 uint32_t clipboard_type,
+                                 uint32_t format);
+  int32_t OnMsgReadData(ppapi::host::HostMessageContext* host_context,
+                        uint32_t clipoard_type,
+                        uint32_t format);
+  int32_t OnMsgWriteData(ppapi::host::HostMessageContext* host_context,
+                         uint32_t clipboard_type,
+                         const std::vector<uint32_t>& formats,
+                         const std::vector<std::string>& data);
+  int32_t OnMsgGetSequenceNumber(ppapi::host::HostMessageContext* host_context,
+                                 uint32_t clipboard_type);
+
+  int32_t WriteClipboardDataItem(uint32_t format,
+                                 const std::string& data,
+                                 ui::ScopedClipboardWriter* scw);
+
+  ppapi::FlashClipboardFormatRegistry custom_formats_;
+
+  DISALLOW_COPY_AND_ASSIGN(PepperFlashClipboardMessageFilter);
+};
+
+}  // namespace chrome
+
+#endif  // CHROME_BROWSER_RENDERER_HOST_PEPPER_PEPPER_FLASH_CLIPBOARD_MESSAGE_FILTER_H_
added in remote
  their  100644 06b0b583a6441819cb6486e99a3aa77c4ed906db chromium_src/chrome/browser/renderer_host/pepper/pepper_flash_drm_host.cc
@@ -0,0 +1,216 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/browser/renderer_host/pepper/pepper_flash_drm_host.h"
+
+#include <cmath>
+
+#if defined(OS_WIN)
+#include <Windows.h>
+#endif
+
+#include "base/bind.h"
+#include "base/compiler_specific.h"
+#include "base/logging.h"
+#include "base/memory/ref_counted.h"
+#include "base/strings/string_number_conversions.h"
+#include "build/build_config.h"
+#include "content/public/browser/browser_ppapi_host.h"
+#include "content/public/browser/browser_thread.h"
+#include "content/public/browser/child_process_security_policy.h"
+#include "content/public/browser/render_frame_host.h"
+#include "content/public/common/pepper_plugin_info.h"
+#include "net/base/network_interfaces.h"
+#include "ppapi/c/pp_errors.h"
+#include "ppapi/host/dispatch_host_message.h"
+#include "ppapi/host/host_message_context.h"
+#include "ppapi/host/ppapi_host.h"
+#include "ppapi/proxy/ppapi_messages.h"
+
+#if defined(USE_AURA)
+#include "ui/aura/window.h"
+#include "ui/aura/window_tree_host.h"
+#endif
+
+#if defined(OS_MACOSX)
+#include "chrome/browser/renderer_host/pepper/monitor_finder_mac.h"
+#endif
+
+using content::BrowserPpapiHost;
+
+namespace chrome {
+
+namespace {
+
+const char kVoucherFilename[] = "plugin.vch";
+
+#if defined(OS_WIN)
+bool GetSystemVolumeSerialNumber(std::string* number) {
+  // Find the system root path (e.g: C:\).
+  wchar_t system_path[MAX_PATH + 1];
+  if (!GetSystemDirectoryW(system_path, MAX_PATH))
+    return false;
+
+  wchar_t* first_slash = wcspbrk(system_path, L"\\/");
+  if (first_slash != NULL)
+    *(first_slash + 1) = 0;
+
+  DWORD number_local = 0;
+  if (!GetVolumeInformationW(system_path, NULL, 0, &number_local, NULL, NULL,
+                             NULL, 0))
+    return false;
+
+  *number = base::IntToString(std::abs(static_cast<int>(number_local)));
+  return true;
+}
+#endif
+
+}  // namespace
+
+#if defined(OS_WIN)
+// Helper class to get the UI thread which monitor is showing the
+// window associated with the instance's render view. Since we get
+// called by the IO thread and we cannot block, the first answer is
+// of GetMonitor() may be NULL, but eventually it will contain the
+// right monitor.
+class MonitorFinder : public base::RefCountedThreadSafe<MonitorFinder> {
+ public:
+  MonitorFinder(int process_id, int render_frame_id)
+      : process_id_(process_id),
+        render_frame_id_(render_frame_id),
+        monitor_(NULL),
+        request_sent_(0) {}
+
+  int64_t GetMonitor() {
+    // We use |request_sent_| as an atomic boolean so that we
+    // never have more than one task posted at a given time. We
+    // do this because we don't know how often our client is going
+    // to call and we can't cache the |monitor_| value.
+    if (InterlockedCompareExchange(&request_sent_, 1, 0) == 0) {
+      content::BrowserThread::PostTask(
+          content::BrowserThread::UI, FROM_HERE,
+          base::Bind(&MonitorFinder::FetchMonitorFromWidget, this));
+    }
+    return reinterpret_cast<int64_t>(monitor_);
+  }
+
+ private:
+  friend class base::RefCountedThreadSafe<MonitorFinder>;
+  ~MonitorFinder() {}
+
+  void FetchMonitorFromWidget() {
+    InterlockedExchange(&request_sent_, 0);
+    content::RenderFrameHost* rfh =
+        content::RenderFrameHost::FromID(process_id_, render_frame_id_);
+    if (!rfh)
+      return;
+    gfx::NativeView native_view = rfh->GetNativeView();
+#if defined(USE_AURA)
+    aura::WindowTreeHost* host = native_view->GetHost();
+    if (!host)
+      return;
+    HWND window = host->GetAcceleratedWidget();
+#else
+    HWND window = native_view;
+#endif
+    HMONITOR monitor = ::MonitorFromWindow(window, MONITOR_DEFAULTTONULL);
+    InterlockedExchangePointer(reinterpret_cast<void* volatile*>(&monitor_),
+                               monitor);
+  }
+
+  const int process_id_;
+  const int render_frame_id_;
+  volatile HMONITOR monitor_;
+  volatile long request_sent_;
+};
+#elif !defined(OS_MACOSX)
+// TODO(cpu): Support Linux someday.
+class MonitorFinder : public base::RefCountedThreadSafe<MonitorFinder> {
+ public:
+  MonitorFinder(int, int) {}
+  int64_t GetMonitor() { return 0; }
+
+ private:
+  friend class base::RefCountedThreadSafe<MonitorFinder>;
+  ~MonitorFinder() {}
+};
+#endif
+
+PepperFlashDRMHost::PepperFlashDRMHost(BrowserPpapiHost* host,
+                                       PP_Instance instance,
+                                       PP_Resource resource)
+    : ppapi::host::ResourceHost(host->GetPpapiHost(), instance, resource),
+      weak_factory_(this) {
+  // Grant permissions to read the flash voucher file.
+  int render_process_id;
+  int render_frame_id;
+  bool success = host->GetRenderFrameIDsForInstance(
+      instance, &render_process_id, &render_frame_id);
+  base::FilePath plugin_dir = host->GetPluginPath().DirName();
+  DCHECK(!plugin_dir.empty() && success);
+  base::FilePath voucher_file = plugin_dir.AppendASCII(kVoucherFilename);
+  content::ChildProcessSecurityPolicy::GetInstance()->GrantReadFile(
+      render_process_id, voucher_file);
+
+  monitor_finder_ = new MonitorFinder(render_process_id, render_frame_id);
+  monitor_finder_->GetMonitor();
+}
+
+PepperFlashDRMHost::~PepperFlashDRMHost() {}
+
+int32_t PepperFlashDRMHost::OnResourceMessageReceived(
+    const IPC::Message& msg,
+    ppapi::host::HostMessageContext* context) {
+  PPAPI_BEGIN_MESSAGE_MAP(PepperFlashDRMHost, msg)
+    PPAPI_DISPATCH_HOST_RESOURCE_CALL_0(PpapiHostMsg_FlashDRM_GetDeviceID,
+                                        OnHostMsgGetDeviceID)
+    PPAPI_DISPATCH_HOST_RESOURCE_CALL_0(PpapiHostMsg_FlashDRM_GetHmonitor,
+                                        OnHostMsgGetHmonitor)
+    PPAPI_DISPATCH_HOST_RESOURCE_CALL_0(PpapiHostMsg_FlashDRM_MonitorIsExternal,
+                                        OnHostMsgMonitorIsExternal)
+  PPAPI_END_MESSAGE_MAP()
+  return PP_ERROR_FAILED;
+}
+
+int32_t PepperFlashDRMHost::OnHostMsgGetDeviceID(
+    ppapi::host::HostMessageContext* context) {
+  static std::string id;
+#if defined(OS_WIN)
+  if (id.empty() && !GetSystemVolumeSerialNumber(&id))
+    id = net::GetHostName();
+#else
+  if (id.empty())
+    id = net::GetHostName();
+#endif
+  context->reply_msg = PpapiPluginMsg_FlashDRM_GetDeviceIDReply(id);
+  return PP_OK;
+}
+
+int32_t PepperFlashDRMHost::OnHostMsgGetHmonitor(
+    ppapi::host::HostMessageContext* context) {
+  int64_t monitor_id = monitor_finder_->GetMonitor();
+  if (monitor_id) {
+    context->reply_msg = PpapiPluginMsg_FlashDRM_GetHmonitorReply(monitor_id);
+    return PP_OK;
+  }
+  return PP_ERROR_FAILED;
+}
+
+int32_t PepperFlashDRMHost::OnHostMsgMonitorIsExternal(
+    ppapi::host::HostMessageContext* context) {
+  int64_t monitor_id = monitor_finder_->GetMonitor();
+  if (!monitor_id)
+    return PP_ERROR_FAILED;
+
+  PP_Bool is_external = PP_FALSE;
+#if defined(OS_MACOSX)
+  if (!MonitorFinder::IsMonitorBuiltIn(monitor_id))
+    is_external = PP_TRUE;
+#endif
+  context->reply_msg =
+      PpapiPluginMsg_FlashDRM_MonitorIsExternalReply(is_external);
+  return PP_OK;
+}
+
+}  // namespace chrome
added in remote
  their  100644 91bba9631e68f08728d5d926528fc80ce4f9cb00 chromium_src/chrome/browser/renderer_host/pepper/pepper_flash_drm_host.h
@@ -0,0 +1,55 @@
+// Copyright (c) 2013 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_RENDERER_HOST_PEPPER_PEPPER_FLASH_DRM_HOST_H_
+#define CHROME_BROWSER_RENDERER_HOST_PEPPER_PEPPER_FLASH_DRM_HOST_H_
+
+#include <stdint.h>
+
+#include <string>
+
+#include "base/macros.h"
+#include "base/memory/weak_ptr.h"
+#include "ppapi/host/host_message_context.h"
+#include "ppapi/host/resource_host.h"
+
+namespace content {
+class BrowserPpapiHost;
+}
+
+namespace IPC {
+class Message;
+}
+
+namespace chrome {
+class MonitorFinder;
+
+class PepperFlashDRMHost : public ppapi::host::ResourceHost {
+ public:
+  PepperFlashDRMHost(content::BrowserPpapiHost* host,
+                     PP_Instance instance,
+                     PP_Resource resource);
+  ~PepperFlashDRMHost() override;
+
+  // ResourceHost override.
+  int32_t OnResourceMessageReceived(
+      const IPC::Message& msg,
+      ppapi::host::HostMessageContext* context) override;
+
+ private:
+  // IPC message handler.
+  int32_t OnHostMsgGetDeviceID(ppapi::host::HostMessageContext* context);
+  int32_t OnHostMsgGetHmonitor(ppapi::host::HostMessageContext* context);
+  int32_t OnHostMsgMonitorIsExternal(ppapi::host::HostMessageContext* context);
+
+  scoped_refptr<MonitorFinder> monitor_finder_;
+
+  base::WeakPtrFactory<PepperFlashDRMHost> weak_factory_;
+
+  DISALLOW_COPY_AND_ASSIGN(PepperFlashDRMHost);
+};
+
+}  // namespace chrome
+
+#endif  // CHROME_BROWSER_RENDERER_HOST_PEPPER_PEPPER_FLASH_DRM_HOST_H_
added in remote
  their  100644 be771653066bf4689f9857e6a218dd3c79d9696e chromium_src/chrome/browser/renderer_host/pepper/pepper_isolated_file_system_message_filter.cc
@@ -0,0 +1,106 @@
+// Copyright 2013 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/browser/renderer_host/pepper/pepper_isolated_file_system_message_filter.h"
+
+#include "content/public/browser/browser_ppapi_host.h"
+#include "content/public/browser/browser_thread.h"
+#include "content/public/browser/child_process_security_policy.h"
+#include "content/public/browser/render_view_host.h"
+#include "ppapi/c/pp_errors.h"
+#include "ppapi/host/dispatch_host_message.h"
+#include "ppapi/host/host_message_context.h"
+#include "ppapi/host/ppapi_host.h"
+#include "ppapi/proxy/ppapi_messages.h"
+#include "ppapi/shared_impl/file_system_util.h"
+#include "storage/browser/fileapi/isolated_context.h"
+
+namespace chrome {
+
+// static
+PepperIsolatedFileSystemMessageFilter*
+PepperIsolatedFileSystemMessageFilter::Create(PP_Instance instance,
+                                              content::BrowserPpapiHost* host) {
+  int render_process_id;
+  int unused_render_frame_id;
+  if (!host->GetRenderFrameIDsForInstance(instance, &render_process_id,
+                                          &unused_render_frame_id)) {
+    return NULL;
+  }
+  return new PepperIsolatedFileSystemMessageFilter(
+      render_process_id, host->GetProfileDataDirectory(),
+      host->GetDocumentURLForInstance(instance), host->GetPpapiHost());
+}
+
+PepperIsolatedFileSystemMessageFilter::PepperIsolatedFileSystemMessageFilter(
+    int render_process_id,
+    const base::FilePath& profile_directory,
+    const GURL& document_url,
+    ppapi::host::PpapiHost* ppapi_host)
+    : render_process_id_(render_process_id),
+      profile_directory_(profile_directory),
+      document_url_(document_url),
+      ppapi_host_(ppapi_host) {}
+
+PepperIsolatedFileSystemMessageFilter::
+    ~PepperIsolatedFileSystemMessageFilter() {}
+
+scoped_refptr<base::TaskRunner>
+PepperIsolatedFileSystemMessageFilter::OverrideTaskRunnerForMessage(
+    const IPC::Message& msg) {
+  // In order to reach ExtensionSystem, we need to get ProfileManager first.
+  // ProfileManager lives in UI thread, so we need to do this in UI thread.
+  return content::BrowserThread::GetTaskRunnerForThread(
+      content::BrowserThread::UI);
+}
+
+int32_t PepperIsolatedFileSystemMessageFilter::OnResourceMessageReceived(
+    const IPC::Message& msg,
+    ppapi::host::HostMessageContext* context) {
+  PPAPI_BEGIN_MESSAGE_MAP(PepperIsolatedFileSystemMessageFilter, msg)
+    PPAPI_DISPATCH_HOST_RESOURCE_CALL(
+        PpapiHostMsg_IsolatedFileSystem_BrowserOpen, OnOpenFileSystem)
+  PPAPI_END_MESSAGE_MAP()
+  return PP_ERROR_FAILED;
+}
+
+int32_t PepperIsolatedFileSystemMessageFilter::OnOpenFileSystem(
+    ppapi::host::HostMessageContext* context,
+    PP_IsolatedFileSystemType_Private type) {
+  switch (type) {
+    case PP_ISOLATEDFILESYSTEMTYPE_PRIVATE_INVALID:
+    case PP_ISOLATEDFILESYSTEMTYPE_PRIVATE_CRX:
+      break;
+    case PP_ISOLATEDFILESYSTEMTYPE_PRIVATE_PLUGINPRIVATE:
+      return OpenPluginPrivateFileSystem(context);
+  }
+  NOTREACHED();
+  context->reply_msg =
+      PpapiPluginMsg_IsolatedFileSystem_BrowserOpenReply(std::string());
+  return PP_ERROR_FAILED;
+}
+
+int32_t PepperIsolatedFileSystemMessageFilter::OpenPluginPrivateFileSystem(
+    ppapi::host::HostMessageContext* context) {
+  DCHECK(ppapi_host_);
+  // Only plugins with private permission can open the filesystem.
+  if (!ppapi_host_->permissions().HasPermission(ppapi::PERMISSION_PRIVATE))
+    return PP_ERROR_NOACCESS;
+
+  const std::string& root_name = ppapi::IsolatedFileSystemTypeToRootName(
+      PP_ISOLATEDFILESYSTEMTYPE_PRIVATE_PLUGINPRIVATE);
+  const std::string& fsid =
+      storage::IsolatedContext::GetInstance()->RegisterFileSystemForVirtualPath(
+          storage::kFileSystemTypePluginPrivate, root_name, base::FilePath());
+
+  // Grant full access of isolated filesystem to renderer process.
+  content::ChildProcessSecurityPolicy* policy =
+      content::ChildProcessSecurityPolicy::GetInstance();
+  policy->GrantCreateReadWriteFileSystem(render_process_id_, fsid);
+
+  context->reply_msg = PpapiPluginMsg_IsolatedFileSystem_BrowserOpenReply(fsid);
+  return PP_OK;
+}
+
+}  // namespace chrome
added in remote
  their  100644 6a24feadd150e0c5ecd1fa44c7e412262ecae55d chromium_src/chrome/browser/renderer_host/pepper/pepper_isolated_file_system_message_filter.h
@@ -0,0 +1,76 @@
+// Copyright 2013 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_RENDERER_HOST_PEPPER_PEPPER_ISOLATED_FILE_SYSTEM_MESSAGE_FILTER_H_
+#define CHROME_BROWSER_RENDERER_HOST_PEPPER_PEPPER_ISOLATED_FILE_SYSTEM_MESSAGE_FILTER_H_
+
+#include <set>
+#include <string>
+
+#include "base/files/file_path.h"
+#include "ppapi/c/pp_instance.h"
+#include "ppapi/c/pp_resource.h"
+#include "ppapi/c/private/ppb_isolated_file_system_private.h"
+#include "ppapi/host/resource_host.h"
+#include "ppapi/host/resource_message_filter.h"
+#include "url/gurl.h"
+
+class Profile;
+
+namespace content {
+class BrowserPpapiHost;
+}
+
+namespace ppapi {
+namespace host {
+struct HostMessageContext;
+}  // namespace host
+}  // namespace ppapi
+
+namespace chrome {
+
+class PepperIsolatedFileSystemMessageFilter
+    : public ppapi::host::ResourceMessageFilter {
+ public:
+  static PepperIsolatedFileSystemMessageFilter* Create(
+      PP_Instance instance,
+      content::BrowserPpapiHost* host);
+
+  // ppapi::host::ResourceMessageFilter implementation.
+  scoped_refptr<base::TaskRunner> OverrideTaskRunnerForMessage(
+      const IPC::Message& msg) override;
+  int32_t OnResourceMessageReceived(
+      const IPC::Message& msg,
+      ppapi::host::HostMessageContext* context) override;
+
+ private:
+  PepperIsolatedFileSystemMessageFilter(int render_process_id,
+                                        const base::FilePath& profile_directory,
+                                        const GURL& document_url,
+                                        ppapi::host::PpapiHost* ppapi_host_);
+
+  ~PepperIsolatedFileSystemMessageFilter() override;
+
+  // Returns filesystem id of isolated filesystem if valid, or empty string
+  // otherwise.  This must run on the UI thread because ProfileManager only
+  // allows access on that thread.
+
+  int32_t OnOpenFileSystem(ppapi::host::HostMessageContext* context,
+                           PP_IsolatedFileSystemType_Private type);
+  int32_t OpenPluginPrivateFileSystem(ppapi::host::HostMessageContext* context);
+
+  const int render_process_id_;
+  // Keep a copy from original thread.
+  const base::FilePath profile_directory_;
+  const GURL document_url_;
+
+  // Not owned by this object.
+  ppapi::host::PpapiHost* ppapi_host_;
+
+  DISALLOW_COPY_AND_ASSIGN(PepperIsolatedFileSystemMessageFilter);
+};
+
+}  // namespace chrome
+
+#endif  // CHROME_BROWSER_RENDERER_HOST_PEPPER_PEPPER_ISOLATED_FILE_SYSTEM_MESSAGE_FILTER_H_
added in both
  our    100644 850bd7ad3630604fa35bdb67397eb789e059973a chromium_src/chrome/browser/ui/views/color_chooser_dialog.h
  their  100644 b23061a386dc0dc235f5924fc559aa3b7d355a56 chromium_src/chrome/browser/ui/views/color_chooser_dialog.h
@@ -23,6 +23,7 @@
   ColorChooserDialog(views::ColorChooserListener* listener,
                      SkColor initial_color,
                      gfx::NativeWindow owning_window);
+<<<<<<< .our
 
   // BaseShellDialog:
   bool IsRunning(gfx::NativeWindow owning_window) const override;
@@ -32,6 +33,15 @@
   ~ColorChooserDialog() override;
   friend class base::RefCountedThreadSafe<ColorChooserDialog>;
 
+=======
+  virtual ~ColorChooserDialog();
+
+  // BaseShellDialog:
+  virtual bool IsRunning(gfx::NativeWindow owning_window) const override;
+  virtual void ListenerDestroyed() override;
+
+ private:
+>>>>>>> .their
   struct ExecuteOpenParams {
     ExecuteOpenParams(SkColor color, RunState run_state, HWND owner);
     SkColor color;
added in both
  our    100644 0f8ebfa6366f90e435dc0e854b20cef92fc2964f chromium_src/chrome/browser/ui/views/color_chooser_win.cc
  their  100644 fc330dd63f1810bc9486428a32f351ec0cdfb3eb chromium_src/chrome/browser/ui/views/color_chooser_win.cc
@@ -22,6 +22,7 @@
                                SkColor initial_color);
 
   ColorChooserWin(content::WebContents* web_contents, SkColor initial_color);
+<<<<<<< .our
   ~ColorChooserWin() override;
 
   // content::ColorChooser overrides:
@@ -31,6 +32,17 @@
   // views::ColorChooserListener overrides:
   void OnColorChosen(SkColor color) override;
   void OnColorChooserDialogClosed() override;
+=======
+  ~ColorChooserWin();
+
+  // content::ColorChooser overrides:
+  virtual void End() override;
+  virtual void SetSelectedColor(SkColor color) override {}
+
+  // views::ColorChooserListener overrides:
+  virtual void OnColorChosen(SkColor color);
+  virtual void OnColorChooserDialogClosed();
+>>>>>>> .their
 
  private:
   static ColorChooserWin* current_color_chooser_;
added in remote
  their  100644 437d87f8ff5e89c13990e1fba87e7e51de7d962f chromium_src/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc
@@ -0,0 +1,99 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/renderer/pepper/chrome_renderer_pepper_host_factory.h"
+
+#include "base/logging.h"
+#include "chrome/renderer/pepper/pepper_flash_font_file_host.h"
+#include "chrome/renderer/pepper/pepper_flash_fullscreen_host.h"
+#include "chrome/renderer/pepper/pepper_flash_menu_host.h"
+#include "chrome/renderer/pepper/pepper_flash_renderer_host.h"
+#include "content/public/renderer/renderer_ppapi_host.h"
+#include "ppapi/host/ppapi_host.h"
+#include "ppapi/host/resource_host.h"
+#include "ppapi/proxy/ppapi_message_utils.h"
+#include "ppapi/proxy/ppapi_messages.h"
+#include "ppapi/shared_impl/ppapi_permissions.h"
+
+#if defined(ENABLE_PDF_VIEWER)
+#include "components/pdf/renderer/pepper_pdf_host.h"
+#endif  // defined(ENABLE_PDF_VIEWER)
+
+using ppapi::host::ResourceHost;
+
+ChromeRendererPepperHostFactory::ChromeRendererPepperHostFactory(
+    content::RendererPpapiHost* host)
+    : host_(host) {}
+
+ChromeRendererPepperHostFactory::~ChromeRendererPepperHostFactory() {}
+
+std::unique_ptr<ResourceHost>
+ChromeRendererPepperHostFactory::CreateResourceHost(
+    ppapi::host::PpapiHost* host,
+    PP_Resource resource,
+    PP_Instance instance,
+    const IPC::Message& message) {
+  DCHECK_EQ(host_->GetPpapiHost(), host);
+
+  // Make sure the plugin is giving us a valid instance for this resource.
+  if (!host_->IsValidInstance(instance))
+    return std::unique_ptr<ResourceHost>();
+
+  if (host_->GetPpapiHost()->permissions().HasPermission(
+          ppapi::PERMISSION_FLASH)) {
+    switch (message.type()) {
+      case PpapiHostMsg_Flash_Create::ID: {
+        return std::unique_ptr<ResourceHost>(
+            new PepperFlashRendererHost(host_, instance, resource));
+      }
+      case PpapiHostMsg_FlashFullscreen_Create::ID: {
+        return std::unique_ptr<ResourceHost>(
+            new PepperFlashFullscreenHost(host_, instance, resource));
+      }
+      case PpapiHostMsg_FlashMenu_Create::ID: {
+        ppapi::proxy::SerializedFlashMenu serialized_menu;
+        if (ppapi::UnpackMessage<PpapiHostMsg_FlashMenu_Create>(
+                message, &serialized_menu)) {
+          return std::unique_ptr<ResourceHost>(new PepperFlashMenuHost(
+              host_, instance, resource, serialized_menu));
+        }
+        break;
+      }
+    }
+  }
+
+  // TODO(raymes): PDF also needs access to the FlashFontFileHost currently.
+  // We should either rename PPB_FlashFont_File to PPB_FontFile_Private or get
+  // rid of its use in PDF if possible.
+  if (host_->GetPpapiHost()->permissions().HasPermission(
+          ppapi::PERMISSION_FLASH) ||
+      host_->GetPpapiHost()->permissions().HasPermission(
+          ppapi::PERMISSION_PRIVATE)) {
+    switch (message.type()) {
+      case PpapiHostMsg_FlashFontFile_Create::ID: {
+        ppapi::proxy::SerializedFontDescription description;
+        PP_PrivateFontCharset charset;
+        if (ppapi::UnpackMessage<PpapiHostMsg_FlashFontFile_Create>(
+                message, &description, &charset)) {
+          return std::unique_ptr<ResourceHost>(new PepperFlashFontFileHost(
+              host_, instance, resource, description, charset));
+        }
+        break;
+      }
+    }
+  }
+
+#if defined(ENABLE_PDF_VIEWER)
+  if (host_->GetPpapiHost()->permissions().HasPermission(
+          ppapi::PERMISSION_PRIVATE)) {
+    switch (message.type()) {
+      case PpapiHostMsg_PDF_Create::ID: {
+        return std::make_unique<pdf::PepperPDFHost>(host_, instance, resource);
+      }
+    }
+  }
+#endif  // defined(ENABLE_PDF_VIEWER)
+
+  return std::unique_ptr<ResourceHost>();
+}
added in remote
  their  100644 c52c73b56f048fc522f4879597e870285ec7009d chromium_src/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.h
@@ -0,0 +1,34 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_RENDERER_PEPPER_CHROME_RENDERER_PEPPER_HOST_FACTORY_H_
+#define CHROME_RENDERER_PEPPER_CHROME_RENDERER_PEPPER_HOST_FACTORY_H_
+
+#include "base/macros.h"
+#include "ppapi/host/host_factory.h"
+
+namespace content {
+class RendererPpapiHost;
+}
+
+class ChromeRendererPepperHostFactory : public ppapi::host::HostFactory {
+ public:
+  explicit ChromeRendererPepperHostFactory(content::RendererPpapiHost* host);
+  ~ChromeRendererPepperHostFactory() override;
+
+  // HostFactory.
+  std::unique_ptr<ppapi::host::ResourceHost> CreateResourceHost(
+      ppapi::host::PpapiHost* host,
+      PP_Resource resource,
+      PP_Instance instance,
+      const IPC::Message& message) override;
+
+ private:
+  // Not owned by this object.
+  content::RendererPpapiHost* host_;
+
+  DISALLOW_COPY_AND_ASSIGN(ChromeRendererPepperHostFactory);
+};
+
+#endif  // CHROME_RENDERER_PEPPER_CHROME_RENDERER_PEPPER_HOST_FACTORY_H_
added in remote
  their  100644 efdc9316b82976b2e07cb3c8aec06141304f390c chromium_src/chrome/renderer/pepper/pepper_flash_font_file_host.cc
@@ -0,0 +1,105 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/renderer/pepper/pepper_flash_font_file_host.h"
+
+#include "base/sys_byteorder.h"
+#include "build/build_config.h"
+#include "content/public/renderer/renderer_ppapi_host.h"
+#include "ppapi/c/pp_errors.h"
+#include "ppapi/host/dispatch_host_message.h"
+#include "ppapi/host/host_message_context.h"
+#include "ppapi/host/ppapi_host.h"
+#include "ppapi/proxy/ppapi_messages.h"
+#include "ppapi/proxy/serialized_structs.h"
+
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
+#include "content/public/child/child_process_sandbox_support_linux.h"
+#include "content/public/common/common_sandbox_support_linux.h"
+#elif defined(OS_WIN)
+#include "third_party/skia/include/ports/SkFontMgr.h"
+#endif
+
+PepperFlashFontFileHost::PepperFlashFontFileHost(
+    content::RendererPpapiHost* host,
+    PP_Instance instance,
+    PP_Resource resource,
+    const ppapi::proxy::SerializedFontDescription& description,
+    PP_PrivateFontCharset charset)
+    : ResourceHost(host->GetPpapiHost(), instance, resource) {
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
+  fd_.reset(content::MatchFontWithFallback(
+      description.face.c_str(),
+      description.weight >= PP_BROWSERFONT_TRUSTED_WEIGHT_BOLD,
+      description.italic, charset, PP_BROWSERFONT_TRUSTED_FAMILY_DEFAULT));
+#elif defined(OS_WIN)  // defined(OS_LINUX) || defined(OS_OPENBSD)
+  int weight = description.weight;
+  if (weight == FW_DONTCARE)
+    weight = SkFontStyle::kNormal_Weight;
+  SkFontStyle style(weight, SkFontStyle::kNormal_Width,
+                    description.italic ? SkFontStyle::kItalic_Slant
+                                       : SkFontStyle::kUpright_Slant);
+  sk_sp<SkFontMgr> font_mgr(SkFontMgr::RefDefault());
+  typeface_ = sk_sp<SkTypeface>(
+      font_mgr->matchFamilyStyle(description.face.c_str(), style));
+#endif                 // defined(OS_WIN)
+}
+
+PepperFlashFontFileHost::~PepperFlashFontFileHost() {}
+
+int32_t PepperFlashFontFileHost::OnResourceMessageReceived(
+    const IPC::Message& msg,
+    ppapi::host::HostMessageContext* context) {
+  PPAPI_BEGIN_MESSAGE_MAP(PepperFlashFontFileHost, msg)
+    PPAPI_DISPATCH_HOST_RESOURCE_CALL(PpapiHostMsg_FlashFontFile_GetFontTable,
+                                      OnGetFontTable)
+  PPAPI_END_MESSAGE_MAP()
+  return PP_ERROR_FAILED;
+}
+bool PepperFlashFontFileHost::GetFontData(uint32_t table,
+                                          void* buffer,
+                                          size_t* length) {
+  bool result = false;
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
+  int fd = fd_.get();
+  if (fd != -1)
+    result = content::GetFontTable(fd, table, 0 /* offset */,
+                                   reinterpret_cast<uint8_t*>(buffer), length);
+#elif defined(OS_WIN)
+  if (typeface_) {
+    table = base::ByteSwap(table);
+    if (buffer == NULL) {
+      *length = typeface_->getTableSize(table);
+      if (*length > 0)
+        result = true;
+    } else {
+      size_t new_length = typeface_->getTableData(table, 0, *length, buffer);
+      if (new_length == *length)
+        result = true;
+    }
+  }
+#endif
+  return result;
+}
+
+int32_t PepperFlashFontFileHost::OnGetFontTable(
+    ppapi::host::HostMessageContext* context,
+    uint32_t table) {
+  std::string contents;
+  int32_t result = PP_ERROR_FAILED;
+  size_t length = 0;
+  if (GetFontData(table, NULL, &length)) {
+    contents.resize(length);
+    uint8_t* contents_ptr =
+        reinterpret_cast<uint8_t*>(const_cast<char*>(contents.c_str()));
+    if (GetFontData(table, contents_ptr, &length)) {
+      result = PP_OK;
+    } else {
+      contents.clear();
+    }
+  }
+
+  context->reply_msg = PpapiPluginMsg_FlashFontFile_GetFontTableReply(contents);
+  return result;
+}
added in remote
  their  100644 15eb73837b50dbb85d607a84bc3b3a71cf789ac5 chromium_src/chrome/renderer/pepper/pepper_flash_font_file_host.h
@@ -0,0 +1,56 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_RENDERER_PEPPER_PEPPER_FLASH_FONT_FILE_HOST_H_
+#define CHROME_RENDERER_PEPPER_PEPPER_FLASH_FONT_FILE_HOST_H_
+
+#include "ppapi/c/private/pp_private_font_charset.h"
+#include "ppapi/host/resource_host.h"
+
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
+#include "base/files/scoped_file.h"
+#elif defined(OS_WIN)
+#include "third_party/skia/include/core/SkRefCnt.h"
+#include "third_party/skia/include/core/SkTypeface.h"
+#endif
+
+namespace content {
+class RendererPpapiHost;
+}
+
+namespace ppapi {
+namespace proxy {
+struct SerializedFontDescription;
+}
+}  // namespace ppapi
+
+class PepperFlashFontFileHost : public ppapi::host::ResourceHost {
+ public:
+  PepperFlashFontFileHost(
+      content::RendererPpapiHost* host,
+      PP_Instance instance,
+      PP_Resource resource,
+      const ppapi::proxy::SerializedFontDescription& description,
+      PP_PrivateFontCharset charset);
+  ~PepperFlashFontFileHost() override;
+
+  int32_t OnResourceMessageReceived(
+      const IPC::Message& msg,
+      ppapi::host::HostMessageContext* context) override;
+
+ private:
+  int32_t OnGetFontTable(ppapi::host::HostMessageContext* context,
+                         uint32_t table);
+  bool GetFontData(uint32_t table, void* buffer, size_t* length);
+
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
+  base::ScopedFD fd_;
+#elif defined(OS_WIN)
+  sk_sp<SkTypeface> typeface_;
+#endif
+
+  DISALLOW_COPY_AND_ASSIGN(PepperFlashFontFileHost);
+};
+
+#endif  // CHROME_RENDERER_PEPPER_PEPPER_FLASH_FONT_FILE_HOST_H_
added in remote
  their  100644 f4367ef73ce882cec4392da24413800620237c25 chromium_src/chrome/renderer/pepper/pepper_flash_fullscreen_host.cc
@@ -0,0 +1,42 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/renderer/pepper/pepper_flash_fullscreen_host.h"
+
+#include "content/public/renderer/pepper_plugin_instance.h"
+#include "content/public/renderer/renderer_ppapi_host.h"
+#include "ppapi/c/pp_errors.h"
+#include "ppapi/host/dispatch_host_message.h"
+#include "ppapi/host/host_message_context.h"
+#include "ppapi/host/ppapi_host.h"
+#include "ppapi/proxy/ppapi_messages.h"
+
+PepperFlashFullscreenHost::PepperFlashFullscreenHost(
+    content::RendererPpapiHost* host,
+    PP_Instance instance,
+    PP_Resource resource)
+    : ResourceHost(host->GetPpapiHost(), instance, resource),
+      renderer_ppapi_host_(host) {}
+
+PepperFlashFullscreenHost::~PepperFlashFullscreenHost() {}
+
+int32_t PepperFlashFullscreenHost::OnResourceMessageReceived(
+    const IPC::Message& msg,
+    ppapi::host::HostMessageContext* context) {
+  PPAPI_BEGIN_MESSAGE_MAP(PepperFlashFullscreenHost, msg)
+    PPAPI_DISPATCH_HOST_RESOURCE_CALL(
+        PpapiHostMsg_FlashFullscreen_SetFullscreen, OnSetFullscreen)
+  PPAPI_END_MESSAGE_MAP()
+  return PP_ERROR_FAILED;
+}
+
+int32_t PepperFlashFullscreenHost::OnSetFullscreen(
+    ppapi::host::HostMessageContext* context,
+    bool fullscreen) {
+  content::PepperPluginInstance* plugin_instance =
+      renderer_ppapi_host_->GetPluginInstance(pp_instance());
+  if (plugin_instance && plugin_instance->FlashSetFullscreen(fullscreen, true))
+    return PP_OK;
+  return PP_ERROR_FAILED;
+}
added in remote
  their  100644 86d0af73aee54451905485e2afa0e4cd08d0037e chromium_src/chrome/renderer/pepper/pepper_flash_fullscreen_host.h
@@ -0,0 +1,35 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_RENDERER_PEPPER_PEPPER_FLASH_FULLSCREEN_HOST_H_
+#define CHROME_RENDERER_PEPPER_PEPPER_FLASH_FULLSCREEN_HOST_H_
+
+#include "ppapi/host/resource_host.h"
+
+namespace content {
+class RendererPpapiHost;
+}
+
+class PepperFlashFullscreenHost : public ppapi::host::ResourceHost {
+ public:
+  PepperFlashFullscreenHost(content::RendererPpapiHost* host,
+                            PP_Instance instance,
+                            PP_Resource resource);
+  ~PepperFlashFullscreenHost() override;
+
+  int32_t OnResourceMessageReceived(
+      const IPC::Message& msg,
+      ppapi::host::HostMessageContext* context) override;
+
+ private:
+  int32_t OnSetFullscreen(ppapi::host::HostMessageContext* context,
+                          bool fullscreen);
+
+  // Non-owning pointer.
+  content::RendererPpapiHost* renderer_ppapi_host_;
+
+  DISALLOW_COPY_AND_ASSIGN(PepperFlashFullscreenHost);
+};
+
+#endif  // CHROME_RENDERER_PEPPER_PEPPER_FLASH_FULLSCREEN_HOST_H_
added in remote
  their  100644 45a79349a1c5e6f0b2767cbb1f5e678358f714b8 chromium_src/chrome/renderer/pepper/pepper_flash_menu_host.cc
@@ -0,0 +1,201 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/renderer/pepper/pepper_flash_menu_host.h"
+
+#include "base/strings/utf_string_conversions.h"
+#include "content/public/common/context_menu_params.h"
+#include "content/public/renderer/render_frame.h"
+#include "content/public/renderer/renderer_ppapi_host.h"
+#include "ipc/ipc_message.h"
+#include "ppapi/c/private/ppb_flash_menu.h"
+#include "ppapi/host/dispatch_host_message.h"
+#include "ppapi/host/ppapi_host.h"
+#include "ppapi/proxy/ppapi_messages.h"
+#include "ppapi/proxy/serialized_flash_menu.h"
+#include "ui/gfx/geometry/point.h"
+
+namespace {
+
+// Maximum depth of submenus allowed (e.g., 1 indicates that submenus are
+// allowed, but not sub-submenus).
+const size_t kMaxMenuDepth = 2;
+
+// Maximum number of entries in any single menu (including separators).
+const size_t kMaxMenuEntries = 50;
+
+// Maximum total number of entries in the |menu_id_map| (see below).
+// (Limit to 500 real entries; reserve the 0 action as an invalid entry.)
+const size_t kMaxMenuIdMapEntries = 501;
+
+// Converts menu data from one form to another.
+//  - |depth| is the current nested depth (call it starting with 0).
+//  - |menu_id_map| is such that |menu_id_map[output_item.action] ==
+//    input_item.id| (where |action| is what a |MenuItem| has, |id| is what a
+//    |PP_Flash_MenuItem| has).
+bool ConvertMenuData(const PP_Flash_Menu* in_menu,
+                     size_t depth,
+                     std::vector<content::MenuItem>* out_menu,
+                     std::vector<int32_t>* menu_id_map) {
+  if (depth > kMaxMenuDepth || !in_menu)
+    return false;
+
+  // Clear the output, just in case.
+  out_menu->clear();
+
+  if (!in_menu->count)
+    return true;  // Nothing else to do.
+
+  if (!in_menu->items || in_menu->count > kMaxMenuEntries)
+    return false;
+  for (uint32_t i = 0; i < in_menu->count; i++) {
+    content::MenuItem item;
+
+    PP_Flash_MenuItem_Type type = in_menu->items[i].type;
+    switch (type) {
+      case PP_FLASH_MENUITEM_TYPE_NORMAL:
+        item.type = content::MenuItem::OPTION;
+        break;
+      case PP_FLASH_MENUITEM_TYPE_CHECKBOX:
+        item.type = content::MenuItem::CHECKABLE_OPTION;
+        break;
+      case PP_FLASH_MENUITEM_TYPE_SEPARATOR:
+        item.type = content::MenuItem::SEPARATOR;
+        break;
+      case PP_FLASH_MENUITEM_TYPE_SUBMENU:
+        item.type = content::MenuItem::SUBMENU;
+        break;
+      default:
+        return false;
+    }
+    if (in_menu->items[i].name)
+      item.label = base::UTF8ToUTF16(in_menu->items[i].name);
+    if (menu_id_map->size() >= kMaxMenuIdMapEntries)
+      return false;
+    item.action = static_cast<unsigned>(menu_id_map->size());
+    // This sets |(*menu_id_map)[item.action] = in_menu->items[i].id|.
+    menu_id_map->push_back(in_menu->items[i].id);
+    item.enabled = PP_ToBool(in_menu->items[i].enabled);
+    item.checked = PP_ToBool(in_menu->items[i].checked);
+    if (type == PP_FLASH_MENUITEM_TYPE_SUBMENU) {
+      if (!ConvertMenuData(in_menu->items[i].submenu, depth + 1, &item.submenu,
+                           menu_id_map))
+        return false;
+    }
+
+    out_menu->push_back(item);
+  }
+
+  return true;
+}
+
+}  // namespace
+
+PepperFlashMenuHost::PepperFlashMenuHost(
+    content::RendererPpapiHost* host,
+    PP_Instance instance,
+    PP_Resource resource,
+    const ppapi::proxy::SerializedFlashMenu& serial_menu)
+    : ppapi::host::ResourceHost(host->GetPpapiHost(), instance, resource),
+      renderer_ppapi_host_(host),
+      showing_context_menu_(false),
+      context_menu_request_id_(0),
+      has_saved_context_menu_action_(false),
+      saved_context_menu_action_(0) {
+  menu_id_map_.push_back(0);  // Reserve |menu_id_map_[0]|.
+  if (!ConvertMenuData(serial_menu.pp_menu(), 0, &menu_data_, &menu_id_map_)) {
+    menu_data_.clear();
+    menu_id_map_.clear();
+  }
+}
+
+PepperFlashMenuHost::~PepperFlashMenuHost() {
+  if (showing_context_menu_) {
+    content::RenderFrame* render_frame =
+        renderer_ppapi_host_->GetRenderFrameForInstance(pp_instance());
+    if (render_frame)
+      render_frame->CancelContextMenu(context_menu_request_id_);
+  }
+}
+
+int32_t PepperFlashMenuHost::OnResourceMessageReceived(
+    const IPC::Message& msg,
+    ppapi::host::HostMessageContext* context) {
+  PPAPI_BEGIN_MESSAGE_MAP(PepperFlashMenuHost, msg)
+    PPAPI_DISPATCH_HOST_RESOURCE_CALL(PpapiHostMsg_FlashMenu_Show,
+                                      OnHostMsgShow)
+  PPAPI_END_MESSAGE_MAP()
+  return PP_ERROR_FAILED;
+}
+
+int32_t PepperFlashMenuHost::OnHostMsgShow(
+    ppapi::host::HostMessageContext* context,
+    const PP_Point& location) {
+  // Note that all early returns must do a SendMenuReply. The sync result for
+  // this message isn't used, so to forward the error to the plugin, we need to
+  // additionally call SendMenuReply explicitly.
+  if (menu_data_.empty()) {
+    SendMenuReply(PP_ERROR_FAILED, -1);
+    return PP_ERROR_FAILED;
+  }
+  if (showing_context_menu_) {
+    SendMenuReply(PP_ERROR_INPROGRESS, -1);
+    return PP_ERROR_INPROGRESS;
+  }
+
+  content::RenderFrame* render_frame =
+      renderer_ppapi_host_->GetRenderFrameForInstance(pp_instance());
+
+  content::ContextMenuParams params;
+  params.x = location.x;
+  params.y = location.y;
+  params.custom_context.is_pepper_menu = true;
+  params.custom_context.render_widget_id =
+      renderer_ppapi_host_->GetRoutingIDForWidget(pp_instance());
+  params.custom_items = menu_data_;
+
+  // Transform the position to be in render frame's coordinates.
+  gfx::Point render_frame_pt = renderer_ppapi_host_->PluginPointToRenderFrame(
+      pp_instance(), gfx::Point(location.x, location.y));
+  params.x = render_frame_pt.x();
+  params.y = render_frame_pt.y();
+
+  showing_context_menu_ = true;
+  context_menu_request_id_ = render_frame->ShowContextMenu(this, params);
+
+  // Note: the show message is sync so this OK is for the sync reply which we
+  // don't actually use (see the comment in the resource file for this). The
+  // async message containing the context menu action will be sent in the
+  // future.
+  return PP_OK;
+}
+
+void PepperFlashMenuHost::OnMenuAction(int request_id, unsigned action) {
+  // Just save the action.
+  DCHECK(!has_saved_context_menu_action_);
+  has_saved_context_menu_action_ = true;
+  saved_context_menu_action_ = action;
+}
+
+void PepperFlashMenuHost::OnMenuClosed(int request_id) {
+  if (has_saved_context_menu_action_ &&
+      saved_context_menu_action_ < menu_id_map_.size()) {
+    SendMenuReply(PP_OK, menu_id_map_[saved_context_menu_action_]);
+    has_saved_context_menu_action_ = false;
+    saved_context_menu_action_ = 0;
+  } else {
+    SendMenuReply(PP_ERROR_USERCANCEL, -1);
+  }
+
+  showing_context_menu_ = false;
+  context_menu_request_id_ = 0;
+}
+
+void PepperFlashMenuHost::SendMenuReply(int32_t result, int action) {
+  ppapi::host::ReplyMessageContext reply_context(
+      ppapi::proxy::ResourceMessageReplyParams(pp_resource(), 0), NULL,
+      MSG_ROUTING_NONE);
+  reply_context.params.set_result(result);
+  host()->SendReply(reply_context, PpapiPluginMsg_FlashMenu_ShowReply(action));
+}
added in remote
  their  100644 a2b4f9cb40098aa65bd8c15759dbbfbcc4fa6674 chromium_src/chrome/renderer/pepper/pepper_flash_menu_host.h
@@ -0,0 +1,69 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_RENDERER_PEPPER_PEPPER_FLASH_MENU_HOST_H_
+#define CHROME_RENDERER_PEPPER_PEPPER_FLASH_MENU_HOST_H_
+
+#include <vector>
+
+#include "base/compiler_specific.h"
+#include "content/public/renderer/context_menu_client.h"
+#include "ppapi/c/pp_point.h"
+#include "ppapi/host/host_message_context.h"
+#include "ppapi/host/resource_host.h"
+
+namespace content {
+class RendererPpapiHost;
+struct MenuItem;
+}  // namespace content
+
+namespace ppapi {
+namespace proxy {
+class SerializedFlashMenu;
+}
+}  // namespace ppapi
+
+class PepperFlashMenuHost : public ppapi::host::ResourceHost,
+                            public content::ContextMenuClient {
+ public:
+  PepperFlashMenuHost(content::RendererPpapiHost* host,
+                      PP_Instance instance,
+                      PP_Resource resource,
+                      const ppapi::proxy::SerializedFlashMenu& serial_menu);
+  ~PepperFlashMenuHost() override;
+
+  int32_t OnResourceMessageReceived(
+      const IPC::Message& msg,
+      ppapi::host::HostMessageContext* context) override;
+
+ private:
+  int32_t OnHostMsgShow(ppapi::host::HostMessageContext* context,
+                        const PP_Point& location);
+
+  // ContextMenuClient implementation.
+  void OnMenuAction(int request_id, unsigned action) override;
+  void OnMenuClosed(int request_id) override;
+
+  void SendMenuReply(int32_t result, int action);
+
+  content::RendererPpapiHost* renderer_ppapi_host_;
+
+  bool showing_context_menu_;
+  int context_menu_request_id_;
+
+  std::vector<content::MenuItem> menu_data_;
+
+  // We send |MenuItem|s, which have an |unsigned| "action" field instead of
+  // an |int32_t| ID. (CONTENT also limits the range of valid values for
+  // actions.) This maps actions to IDs.
+  std::vector<int32_t> menu_id_map_;
+
+  // Used to send a single context menu "completion" upon menu close.
+  bool has_saved_context_menu_action_;
+  unsigned saved_context_menu_action_;
+
+  DISALLOW_COPY_AND_ASSIGN(PepperFlashMenuHost);
+};
+
+#endif  // CHROME_RENDERER_PEPPER_PEPPER_FLASH_MENU_HOST_H_
added in remote
  their  100644 50015122ccc7e2da02d0e9b2c7014e085c3ffec4 chromium_src/chrome/renderer/pepper/pepper_flash_renderer_host.cc
@@ -0,0 +1,370 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/renderer/pepper/pepper_flash_renderer_host.h"
+
+#include <map>
+#include <vector>
+
+#include "base/lazy_instance.h"
+#include "base/macros.h"
+#include "base/metrics/histogram_macros.h"
+#include "base/strings/string_util.h"
+#include "content/public/renderer/pepper_plugin_instance.h"
+#include "content/public/renderer/render_thread.h"
+#include "content/public/renderer/renderer_ppapi_host.h"
+#include "ipc/ipc_message_macros.h"
+#include "net/http/http_util.h"
+#include "ppapi/c/pp_errors.h"
+#include "ppapi/c/trusted/ppb_browser_font_trusted.h"
+#include "ppapi/host/dispatch_host_message.h"
+#include "ppapi/proxy/host_dispatcher.h"
+#include "ppapi/proxy/ppapi_messages.h"
+#include "ppapi/proxy/resource_message_params.h"
+#include "ppapi/proxy/serialized_structs.h"
+#include "ppapi/thunk/enter.h"
+#include "ppapi/thunk/ppb_image_data_api.h"
+#include "skia/ext/platform_canvas.h"
+#include "third_party/skia/include/core/SkCanvas.h"
+#include "third_party/skia/include/core/SkFontStyle.h"
+#include "third_party/skia/include/core/SkMatrix.h"
+#include "third_party/skia/include/core/SkPaint.h"
+#include "third_party/skia/include/core/SkPoint.h"
+#include "third_party/skia/include/core/SkTypeface.h"
+#include "ui/gfx/geometry/rect.h"
+#include "url/gurl.h"
+
+using ppapi::thunk::EnterResourceNoLock;
+using ppapi::thunk::PPB_ImageData_API;
+
+namespace {
+
+// Some non-simple HTTP request headers that Flash may set.
+// (Please see http://www.w3.org/TR/cors/#simple-header for the definition of
+// simple headers.)
+//
+// The list and the enum defined below are used to collect data about request
+// headers used in PPB_Flash.Navigate() calls, in order to understand the impact
+// of rejecting PPB_Flash.Navigate() requests with non-simple headers.
+//
+// TODO(yzshen): We should be able to remove the histogram recording code once
+// we get the answer.
+const char* const kRejectedHttpRequestHeaders[] = {
+    "authorization",     //
+    "cache-control",     //
+    "content-encoding",  //
+    "content-md5",       //
+    "content-type",      // If the media type is not one of those covered by the
+                         // simple header definition.
+    "expires",           //
+    "from",              //
+    "if-match",          //
+    "if-none-match",     //
+    "if-range",          //
+    "if-unmodified-since",  //
+    "pragma",               //
+    "referer"               //
+};
+
+// Please note that new entries should be added right above
+// FLASH_NAVIGATE_USAGE_ENUM_COUNT, and existing entries shouldn't be re-ordered
+// or removed, since this ordering is used in a histogram.
+enum FlashNavigateUsage {
+  // This section must be in the same order as kRejectedHttpRequestHeaders.
+  REJECT_AUTHORIZATION = 0,
+  REJECT_CACHE_CONTROL,
+  REJECT_CONTENT_ENCODING,
+  REJECT_CONTENT_MD5,
+  REJECT_CONTENT_TYPE,
+  REJECT_EXPIRES,
+  REJECT_FROM,
+  REJECT_IF_MATCH,
+  REJECT_IF_NONE_MATCH,
+  REJECT_IF_RANGE,
+  REJECT_IF_UNMODIFIED_SINCE,
+  REJECT_PRAGMA,
+  REJECT_REFERER,
+
+  // The navigate request is rejected because of headers not listed above
+  // (e.g., custom headers).
+  REJECT_OTHER_HEADERS,
+
+  // Total number of rejected navigate requests.
+  TOTAL_REJECTED_NAVIGATE_REQUESTS,
+
+  // Total number of navigate requests.
+  TOTAL_NAVIGATE_REQUESTS,
+  FLASH_NAVIGATE_USAGE_ENUM_COUNT
+};
+
+static base::LazyInstance<std::map<std::string, FlashNavigateUsage>>::
+    DestructorAtExit g_rejected_headers = LAZY_INSTANCE_INITIALIZER;
+
+bool IsSimpleHeader(const std::string& lower_case_header_name,
+                    const std::string& header_value) {
+  if (lower_case_header_name == "accept" ||
+      lower_case_header_name == "accept-language" ||
+      lower_case_header_name == "content-language") {
+    return true;
+  }
+
+  if (lower_case_header_name == "content-type") {
+    std::string lower_case_mime_type;
+    std::string lower_case_charset;
+    bool had_charset = false;
+    net::HttpUtil::ParseContentType(header_value, &lower_case_mime_type,
+                                    &lower_case_charset, &had_charset, NULL);
+    return lower_case_mime_type == "application/x-www-form-urlencoded" ||
+           lower_case_mime_type == "multipart/form-data" ||
+           lower_case_mime_type == "text/plain";
+  }
+
+  return false;
+}
+
+void RecordFlashNavigateUsage(FlashNavigateUsage usage) {
+  DCHECK_NE(FLASH_NAVIGATE_USAGE_ENUM_COUNT, usage);
+  UMA_HISTOGRAM_ENUMERATION("Plugin.FlashNavigateUsage", usage,
+                            FLASH_NAVIGATE_USAGE_ENUM_COUNT);
+}
+
+}  // namespace
+
+PepperFlashRendererHost::PepperFlashRendererHost(
+    content::RendererPpapiHost* host,
+    PP_Instance instance,
+    PP_Resource resource)
+    : ResourceHost(host->GetPpapiHost(), instance, resource),
+      host_(host),
+      weak_factory_(this) {}
+
+PepperFlashRendererHost::~PepperFlashRendererHost() {
+  // This object may be destroyed in the middle of a sync message. If that is
+  // the case, make sure we respond to all the pending navigate calls.
+  std::vector<ppapi::host::ReplyMessageContext>::reverse_iterator it;
+  for (it = navigate_replies_.rbegin(); it != navigate_replies_.rend(); ++it)
+    SendReply(*it, IPC::Message());
+}
+
+int32_t PepperFlashRendererHost::OnResourceMessageReceived(
+    const IPC::Message& msg,
+    ppapi::host::HostMessageContext* context) {
+  PPAPI_BEGIN_MESSAGE_MAP(PepperFlashRendererHost, msg)
+    PPAPI_DISPATCH_HOST_RESOURCE_CALL(PpapiHostMsg_Flash_GetProxyForURL,
+                                      OnGetProxyForURL)
+    PPAPI_DISPATCH_HOST_RESOURCE_CALL(PpapiHostMsg_Flash_SetInstanceAlwaysOnTop,
+                                      OnSetInstanceAlwaysOnTop)
+    PPAPI_DISPATCH_HOST_RESOURCE_CALL(PpapiHostMsg_Flash_DrawGlyphs,
+                                      OnDrawGlyphs)
+    PPAPI_DISPATCH_HOST_RESOURCE_CALL(PpapiHostMsg_Flash_Navigate, OnNavigate)
+    PPAPI_DISPATCH_HOST_RESOURCE_CALL(PpapiHostMsg_Flash_IsRectTopmost,
+                                      OnIsRectTopmost)
+  PPAPI_END_MESSAGE_MAP()
+  return PP_ERROR_FAILED;
+}
+
+int32_t PepperFlashRendererHost::OnGetProxyForURL(
+    ppapi::host::HostMessageContext* host_context,
+    const std::string& url) {
+  GURL gurl(url);
+  if (!gurl.is_valid())
+    return PP_ERROR_FAILED;
+  std::string proxy;
+  bool result = content::RenderThread::Get()->ResolveProxy(gurl, &proxy);
+  if (!result)
+    return PP_ERROR_FAILED;
+  host_context->reply_msg = PpapiPluginMsg_Flash_GetProxyForURLReply(proxy);
+  return PP_OK;
+}
+
+int32_t PepperFlashRendererHost::OnSetInstanceAlwaysOnTop(
+    ppapi::host::HostMessageContext* host_context,
+    bool on_top) {
+  content::PepperPluginInstance* plugin_instance =
+      host_->GetPluginInstance(pp_instance());
+  if (plugin_instance)
+    plugin_instance->SetAlwaysOnTop(on_top);
+  // Since no reply is sent for this message, it doesn't make sense to return an
+  // error.
+  return PP_OK;
+}
+
+int32_t PepperFlashRendererHost::OnDrawGlyphs(
+    ppapi::host::HostMessageContext* host_context,
+    ppapi::proxy::PPBFlash_DrawGlyphs_Params params) {
+  return PP_ERROR_FAILED;
+  // if (params.glyph_indices.size() != params.glyph_advances.size() ||
+  //     params.glyph_indices.empty())
+  //   return PP_ERROR_FAILED;
+  //
+  // // Set up the typeface.
+  // int weight = (params.font_desc.weight + 1) * 100;
+  // SkFontStyle::Slant slant = SkFontStyle::kUpright_Slant;
+  // if (params.font_desc.italic)
+  //   slant = SkFontStyle::kItalic_Slant;
+  // SkFontStyle style(weight, SkFontStyle::kNormal_Width, slant);
+  // sk_sp<SkTypeface> typeface(
+  //     SkTypeface::MakeFromName(params.font_desc.face.c_str(), style));
+  // if (!typeface)
+  //   return PP_ERROR_FAILED;
+  //
+  // EnterResourceNoLock<PPB_ImageData_API> enter(
+  //     params.image_data.host_resource(), true);
+  // if (enter.failed())
+  //   return PP_ERROR_FAILED;
+  //
+  // // Set up the canvas.
+  // PPB_ImageData_API* image = static_cast<PPB_ImageData_API*>(enter.object());
+  // SkCanvas* canvas = image->GetCanvas();
+  // bool needs_unmapping = false;
+  // if (!canvas) {
+  //   needs_unmapping = true;
+  //   image->Map();
+  //   canvas = image->GetCanvas();
+  //   if (!canvas)
+  //     return PP_ERROR_FAILED;  // Failure mapping.
+  // }
+  //
+  // SkAutoCanvasRestore acr(canvas, true);
+  //
+  // // Clip is applied in pixels before the transform.
+  // SkRect clip_rect = {
+  //     SkIntToScalar(params.clip.point.x), SkIntToScalar(params.clip.point.y),
+  //     SkIntToScalar(params.clip.point.x + params.clip.size.width),
+  //     SkIntToScalar(params.clip.point.y + params.clip.size.height)};
+  // canvas->clipRect(clip_rect);
+  //
+  // // Convert & set the matrix.
+  // SkMatrix matrix;
+  // matrix.set(SkMatrix::kMScaleX, SkFloatToScalar(params.transformation[0][0]));
+  // matrix.set(SkMatrix::kMSkewX, SkFloatToScalar(params.transformation[0][1]));
+  // matrix.set(SkMatrix::kMTransX, SkFloatToScalar(params.transformation[0][2]));
+  // matrix.set(SkMatrix::kMSkewY, SkFloatToScalar(params.transformation[1][0]));
+  // matrix.set(SkMatrix::kMScaleY, SkFloatToScalar(params.transformation[1][1]));
+  // matrix.set(SkMatrix::kMTransY, SkFloatToScalar(params.transformation[1][2]));
+  // matrix.set(SkMatrix::kMPersp0, SkFloatToScalar(params.transformation[2][0]));
+  // matrix.set(SkMatrix::kMPersp1, SkFloatToScalar(params.transformation[2][1]));
+  // matrix.set(SkMatrix::kMPersp2, SkFloatToScalar(params.transformation[2][2]));
+  // canvas->concat(matrix);
+  //
+  // SkPaint paint;
+  // paint.setColor(params.color);
+  // paint.setTextEncoding(SkPaint::kGlyphID_TextEncoding);
+  // paint.setAntiAlias(true);
+  // paint.setHinting(SkPaint::kFull_Hinting);
+  // paint.setTextSize(SkIntToScalar(params.font_desc.size));
+  // paint.setTypeface(std::move(typeface));
+  // if (params.allow_subpixel_aa) {
+  //   paint.setSubpixelText(true);
+  //   paint.setLCDRenderText(true);
+  // }
+  //
+  // SkScalar x = SkIntToScalar(params.position.x);
+  // SkScalar y = SkIntToScalar(params.position.y);
+  //
+  // // Build up the skia advances.
+  // size_t glyph_count = params.glyph_indices.size();
+  // if (glyph_count) {
+  //   std::vector<SkPoint> storage;
+  //   storage.resize(glyph_count);
+  //   SkPoint* sk_positions = &storage[0];
+  //   for (uint32_t i = 0; i < glyph_count; i++) {
+  //     sk_positions[i].set(x, y);
+  //     x += SkFloatToScalar(params.glyph_advances[i].x);
+  //     y += SkFloatToScalar(params.glyph_advances[i].y);
+  //   }
+  //
+  //   canvas->drawPosText(&params.glyph_indices[0], glyph_count * 2, sk_positions,
+  //                       paint);
+  // }
+  //
+  // if (needs_unmapping)
+  //   image->Unmap();
+  //
+  // return PP_OK;
+}
+
+// CAUTION: This code is subtle because Navigate is a sync call which may
+// cause re-entrancy or cause the instance to be destroyed. If the instance
+// is destroyed we need to ensure that we respond to all outstanding sync
+// messages so that the plugin process does not remain blocked.
+int32_t PepperFlashRendererHost::OnNavigate(
+    ppapi::host::HostMessageContext* host_context,
+    const ppapi::URLRequestInfoData& data,
+    const std::string& target,
+    bool from_user_action) {
+  // If our PepperPluginInstance is already destroyed, just return a failure.
+  content::PepperPluginInstance* plugin_instance =
+      host_->GetPluginInstance(pp_instance());
+  if (!plugin_instance)
+    return PP_ERROR_FAILED;
+
+  std::map<std::string, FlashNavigateUsage>& rejected_headers =
+      g_rejected_headers.Get();
+  if (rejected_headers.empty()) {
+    for (size_t i = 0; i < arraysize(kRejectedHttpRequestHeaders); ++i)
+      rejected_headers[kRejectedHttpRequestHeaders[i]] =
+          static_cast<FlashNavigateUsage>(i);
+  }
+
+  net::HttpUtil::HeadersIterator header_iter(data.headers.begin(),
+                                             data.headers.end(), "\n\r");
+  bool rejected = false;
+  while (header_iter.GetNext()) {
+    std::string lower_case_header_name = base::ToLowerASCII(header_iter.name());
+    if (!IsSimpleHeader(lower_case_header_name, header_iter.values())) {
+      rejected = true;
+
+      std::map<std::string, FlashNavigateUsage>::const_iterator iter =
+          rejected_headers.find(lower_case_header_name);
+      FlashNavigateUsage usage =
+          iter != rejected_headers.end() ? iter->second : REJECT_OTHER_HEADERS;
+      RecordFlashNavigateUsage(usage);
+    }
+  }
+
+  RecordFlashNavigateUsage(TOTAL_NAVIGATE_REQUESTS);
+  if (rejected) {
+    RecordFlashNavigateUsage(TOTAL_REJECTED_NAVIGATE_REQUESTS);
+    return PP_ERROR_NOACCESS;
+  }
+
+  // Navigate may call into Javascript (e.g. with a "javascript:" URL),
+  // or do things like navigate away from the page, either one of which will
+  // need to re-enter into the plugin. It is safe, because it is essentially
+  // equivalent to NPN_GetURL, where Flash would expect re-entrancy.
+  ppapi::proxy::HostDispatcher* host_dispatcher =
+      ppapi::proxy::HostDispatcher::GetForInstance(pp_instance());
+  host_dispatcher->set_allow_plugin_reentrancy();
+
+  // Grab a weak pointer to ourselves on the stack so we can check if we are
+  // still alive.
+  base::WeakPtr<PepperFlashRendererHost> weak_ptr = weak_factory_.GetWeakPtr();
+  // Keep track of reply contexts in case we are destroyed during a Navigate
+  // call. Even if we are destroyed, we still need to send these replies to
+  // unblock the plugin process.
+  navigate_replies_.push_back(host_context->MakeReplyMessageContext());
+  plugin_instance->Navigate(data, target.c_str(), from_user_action);
+  // This object might have been destroyed by this point. If it is destroyed
+  // the reply will be sent in the destructor. Otherwise send the reply here.
+  if (weak_ptr.get()) {
+    SendReply(navigate_replies_.back(), IPC::Message());
+    navigate_replies_.pop_back();
+  }
+
+  // Return PP_OK_COMPLETIONPENDING so that no reply is automatically sent.
+  return PP_OK_COMPLETIONPENDING;
+}
+
+int32_t PepperFlashRendererHost::OnIsRectTopmost(
+    ppapi::host::HostMessageContext* host_context,
+    const PP_Rect& rect) {
+  content::PepperPluginInstance* plugin_instance =
+      host_->GetPluginInstance(pp_instance());
+  if (plugin_instance &&
+      plugin_instance->IsRectTopmost(gfx::Rect(
+          rect.point.x, rect.point.y, rect.size.width, rect.size.height)))
+    return PP_OK;
+  return PP_ERROR_FAILED;
+}
added in remote
  their  100644 b080f1d9fbf0db2e6adaf67dd783b05eeb9d06a0 chromium_src/chrome/renderer/pepper/pepper_flash_renderer_host.h
@@ -0,0 +1,68 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_RENDERER_PEPPER_PEPPER_FLASH_RENDERER_HOST_H_
+#define CHROME_RENDERER_PEPPER_PEPPER_FLASH_RENDERER_HOST_H_
+
+#include <string>
+#include <vector>
+
+#include "base/memory/weak_ptr.h"
+#include "ppapi/host/host_message_context.h"
+#include "ppapi/host/resource_host.h"
+
+struct PP_Rect;
+
+namespace ppapi {
+struct URLRequestInfoData;
+}
+
+namespace ppapi {
+namespace proxy {
+struct PPBFlash_DrawGlyphs_Params;
+}
+}  // namespace ppapi
+
+namespace content {
+class RendererPpapiHost;
+}
+
+class PepperFlashRendererHost : public ppapi::host::ResourceHost {
+ public:
+  PepperFlashRendererHost(content::RendererPpapiHost* host,
+                          PP_Instance instance,
+                          PP_Resource resource);
+  ~PepperFlashRendererHost() override;
+
+  // ppapi::host::ResourceHost override.
+  int32_t OnResourceMessageReceived(
+      const IPC::Message& msg,
+      ppapi::host::HostMessageContext* context) override;
+
+ private:
+  int32_t OnGetProxyForURL(ppapi::host::HostMessageContext* host_context,
+                           const std::string& url);
+  int32_t OnSetInstanceAlwaysOnTop(
+      ppapi::host::HostMessageContext* host_context,
+      bool on_top);
+  int32_t OnDrawGlyphs(ppapi::host::HostMessageContext* host_context,
+                       ppapi::proxy::PPBFlash_DrawGlyphs_Params params);
+  int32_t OnNavigate(ppapi::host::HostMessageContext* host_context,
+                     const ppapi::URLRequestInfoData& data,
+                     const std::string& target,
+                     bool from_user_action);
+  int32_t OnIsRectTopmost(ppapi::host::HostMessageContext* host_context,
+                          const PP_Rect& rect);
+
+  // A stack of ReplyMessageContexts to track Navigate() calls which have not
+  // yet been replied to.
+  std::vector<ppapi::host::ReplyMessageContext> navigate_replies_;
+
+  content::RendererPpapiHost* host_;
+  base::WeakPtrFactory<PepperFlashRendererHost> weak_factory_;
+
+  DISALLOW_COPY_AND_ASSIGN(PepperFlashRendererHost);
+};
+
+#endif  // CHROME_RENDERER_PEPPER_PEPPER_FLASH_RENDERER_HOST_H_
added in remote
  their  100644 eef18560f9e577a77f8dc4eba64bf5907f77a0e2 chromium_src/chrome/renderer/pepper/pepper_helper.cc
@@ -0,0 +1,30 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/renderer/pepper/pepper_helper.h"
+
+#include "chrome/renderer/pepper/chrome_renderer_pepper_host_factory.h"
+#include "chrome/renderer/pepper/pepper_shared_memory_message_filter.h"
+#include "content/public/renderer/renderer_ppapi_host.h"
+#include "ppapi/host/ppapi_host.h"
+
+PepperHelper::PepperHelper(content::RenderFrame* render_frame)
+    : RenderFrameObserver(render_frame) {}
+
+PepperHelper::~PepperHelper() {}
+
+void PepperHelper::DidCreatePepperPlugin(content::RendererPpapiHost* host) {
+  // TODO(brettw) figure out how to hook up the host factory. It needs some
+  // kind of filter-like system to allow dynamic additions.
+  host->GetPpapiHost()->AddHostFactoryFilter(
+      std::unique_ptr<ppapi::host::HostFactory>(
+          new ChromeRendererPepperHostFactory(host)));
+  host->GetPpapiHost()->AddInstanceMessageFilter(
+      std::unique_ptr<ppapi::host::InstanceMessageFilter>(
+          new PepperSharedMemoryMessageFilter(host)));
+}
+
+void PepperHelper::OnDestruct() {
+  delete this;
+}
added in remote
  their  100644 6157d2c794868d5d2b5f39ddd6f38cbce72a0a9f chromium_src/chrome/renderer/pepper/pepper_helper.h
@@ -0,0 +1,26 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_RENDERER_PEPPER_PEPPER_HELPER_H_
+#define CHROME_RENDERER_PEPPER_PEPPER_HELPER_H_
+
+#include "base/compiler_specific.h"
+#include "content/public/renderer/render_frame_observer.h"
+
+// This class listens for Pepper creation events from the RenderFrame and
+// attaches the parts required for Chrome-specific plugin support.
+class PepperHelper : public content::RenderFrameObserver {
+ public:
+  explicit PepperHelper(content::RenderFrame* render_frame);
+  ~PepperHelper() override;
+
+  // RenderFrameObserver.
+  void DidCreatePepperPlugin(content::RendererPpapiHost* host) override;
+  void OnDestruct() override;
+
+ private:
+  DISALLOW_COPY_AND_ASSIGN(PepperHelper);
+};
+
+#endif  // CHROME_RENDERER_PEPPER_PEPPER_HELPER_H_
added in remote
  their  100644 fb72c2da786b3cbcef7ce149f560821592df1747 chromium_src/chrome/renderer/pepper/pepper_shared_memory_message_filter.cc
@@ -0,0 +1,63 @@
+// Copyright (c) 2013 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/renderer/pepper/pepper_shared_memory_message_filter.h"
+
+#include <memory>
+
+#include "base/memory/shared_memory.h"
+#include "base/process/process_handle.h"
+#include "content/public/common/content_client.h"
+#include "content/public/renderer/pepper_plugin_instance.h"
+#include "content/public/renderer/render_thread.h"
+#include "content/public/renderer/renderer_ppapi_host.h"
+#include "ppapi/host/ppapi_host.h"
+#include "ppapi/proxy/ppapi_messages.h"
+#include "ppapi/shared_impl/var_tracker.h"
+
+PepperSharedMemoryMessageFilter::PepperSharedMemoryMessageFilter(
+    content::RendererPpapiHost* host)
+    : InstanceMessageFilter(host->GetPpapiHost()), host_(host) {}
+
+PepperSharedMemoryMessageFilter::~PepperSharedMemoryMessageFilter() {}
+
+bool PepperSharedMemoryMessageFilter::OnInstanceMessageReceived(
+    const IPC::Message& msg) {
+  bool handled = true;
+  IPC_BEGIN_MESSAGE_MAP(PepperSharedMemoryMessageFilter, msg)
+    IPC_MESSAGE_HANDLER(PpapiHostMsg_SharedMemory_CreateSharedMemory,
+                        OnHostMsgCreateSharedMemory)
+    IPC_MESSAGE_UNHANDLED(handled = false)
+  IPC_END_MESSAGE_MAP()
+  return handled;
+}
+
+bool PepperSharedMemoryMessageFilter::Send(IPC::Message* msg) {
+  return host_->GetPpapiHost()->Send(msg);
+}
+
+void PepperSharedMemoryMessageFilter::OnHostMsgCreateSharedMemory(
+    PP_Instance instance,
+    uint32_t size,
+    int* host_handle_id,
+    ppapi::proxy::SerializedHandle* plugin_handle) {
+  plugin_handle->set_null_shmem();
+  *host_handle_id = -1;
+  std::unique_ptr<base::SharedMemory> shm(
+      content::RenderThread::Get()->HostAllocateSharedMemoryBuffer(size));
+  if (!shm.get())
+    return;
+
+  base::SharedMemoryHandle host_shm_handle = shm->handle().Duplicate();
+  *host_handle_id =
+      content::PepperPluginInstance::Get(instance)
+          ->GetVarTracker()
+          ->TrackSharedMemoryHandle(instance, host_shm_handle, size);
+
+  // We set auto_close to false since we need our file descriptor to
+  // actually be duplicated on linux. The shared memory destructor will
+  // close the original handle for us.
+  plugin_handle->set_shmem(
+      host_->ShareSharedMemoryHandleWithRemote(host_shm_handle), size);
+}
added in remote
  their  100644 d1e2dc1719e501561941cafeab4fd95ef0779314 chromium_src/chrome/renderer/pepper/pepper_shared_memory_message_filter.h
@@ -0,0 +1,46 @@
+// Copyright (c) 2013 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_RENDERER_PEPPER_PEPPER_SHARED_MEMORY_MESSAGE_FILTER_H_
+#define CHROME_RENDERER_PEPPER_PEPPER_SHARED_MEMORY_MESSAGE_FILTER_H_
+
+#include "ppapi/c/pp_instance.h"
+#include "ppapi/host/instance_message_filter.h"
+
+namespace content {
+class RendererPpapiHost;
+}
+
+namespace ppapi {
+namespace proxy {
+class SerializedHandle;
+}
+}  // namespace ppapi
+
+// Implements the backend for shared memory messages from a plugin process.
+class PepperSharedMemoryMessageFilter
+    : public ppapi::host::InstanceMessageFilter {
+ public:
+  explicit PepperSharedMemoryMessageFilter(content::RendererPpapiHost* host);
+  ~PepperSharedMemoryMessageFilter() override;
+
+  // InstanceMessageFilter:
+  bool OnInstanceMessageReceived(const IPC::Message& msg) override;
+
+  bool Send(IPC::Message* msg);
+
+ private:
+  // Message handlers.
+  void OnHostMsgCreateSharedMemory(
+      PP_Instance instance,
+      uint32_t size,
+      int* host_shm_handle_id,
+      ppapi::proxy::SerializedHandle* plugin_shm_handle);
+
+  content::RendererPpapiHost* host_;
+
+  DISALLOW_COPY_AND_ASSIGN(PepperSharedMemoryMessageFilter);
+};
+
+#endif  // CHROME_RENDERER_PEPPER_PEPPER_SHARED_MEMORY_MESSAGE_FILTER_H_
added in both
  our    100644 8744574f10aa0235234f87cd1b614572d9ba98e9 chromium_src/chrome/utility/printing_handler_win.h
  their  100644 d058e7e505569126827ba24b3a42051ba386630c chromium_src/chrome/utility/printing_handler_win.h
@@ -13,7 +13,11 @@
 
 namespace printing {
 
+<<<<<<< .our
 struct PdfRenderSettings;
+=======
+class PdfRenderSettings;
+>>>>>>> .their
 struct PwgRasterSettings;
 struct PageRange;
 
added in both
  our    100644 1b9da74e503ab4afa8d2c530cd45332f0868a463 default_app/default_app.js
  their  100644 e6ba9eea2cb5938fe71ab7c18a47921d3959061e default_app/default_app.js
@@ -18,17 +18,24 @@
       webPreferences: {
         nodeIntegrationInWorker: true
       },
+<<<<<<< .our
       useContentSize: true,
       show: false
+=======
+      useContentSize: true
+>>>>>>> .their
     }
     if (process.platform === 'linux') {
       options.icon = path.join(__dirname, 'icon.png')
     }
 
     mainWindow = new BrowserWindow(options)
+<<<<<<< .our
 
     mainWindow.on('ready-to-show', () => mainWindow.show())
 
+=======
+>>>>>>> .their
     mainWindow.loadURL(appUrl)
     mainWindow.focus()
   })
added in both
  our    100644 fd4525f128b5f7718e03998a9d83ae79ff163078 default_app/index.html
  their  100644 c8564cb57a11cbfea4bea37db09df4cd82dee4fb default_app/index.html
@@ -2,13 +2,174 @@
 
 <head>
   <title>Electron</title>
+<<<<<<< .our
   <meta http-equiv="Content-Security-Policy" content="default-src 'none'; script-src 'self'; style-src 'self'; img-src 'self'" />
   <link href="./styles.css" type="text/css" rel="stylesheet" />
   <link href="./node_modules/octicons/build/build.css" type="text/css" rel="stylesheet" />
+=======
+  <style>
+    body {
+      color: #86a5b1;
+      background-color: #2f3241;
+      font-family: Roboto, -apple-system, BlinkMacSystemFont, "Helvetica Neue", "Segoe UI", "Oxygen", "Ubuntu", "Cantarell", "Open Sans", sans-serif;
+      margin: 0;
+      display: flex;
+      flex-direction: column;
+    }
+
+    .container {
+      margin: 15px 30px 30px 30px;
+      background-color: #2f3241;
+      flex: 1;
+      display: flex;
+      flex-direction: column;
+    }
+
+    .svg-stroke {
+      stroke: #9feaf9;
+    }
+
+    .svg-fill {
+      fill: #9feaf9;
+    }
+
+    .vertical-middle {
+      vertical-align: middle !important;
+    }
+
+    h2, h4, p {
+      text-align: center;
+    }
+
+    h4 {
+      font-weight: normal;
+      margin: 0;
+      line-height: 3;
+    }
+
+    .hero-icons {
+      transform-origin: 50% 50%;
+    }
+
+    hero-icon.loop-3 {
+      transform: translate(79px, 21px);
+      opacity: 1;
+    }
+
+    .hero-icon {
+      fill: #c2f5ff;
+      opacity: 1;
+      transform-origin: 50% 50%;
+    }
+
+    .hero-app {
+      fill: #71abb7;
+      transform-origin: 50% 50%;
+    }
+
+    a {
+      color: #86a5b1;
+      text-decoration: none;
+      transition: all 0.2s;
+    }
+
+    a:hover {
+      color: #c2f5ff;
+      text-decoration: none;
+    }
+
+    pre, code, .code {
+      font-family: "Menlo", "Lucida Console", monospace;
+      color: #c2f5ff;
+    }
+
+    pre {
+      background-color: #26282E;
+      white-space: pre-wrap;
+      line-height: 2.5;
+      overflow: auto;
+      margin: 0 auto;
+      display: inline-block;
+      padding: 6px 15px;
+      text-align: center;
+      border-radius: 3px;
+    }
+
+    pre.with-prompt:before {
+      content: "$ ";
+      opacity: 0.7;
+    }
+
+    code {
+      padding: 1px 4px;
+      font-size: 14px;
+      text-align: center;
+    }
+
+    .versions {
+      list-style: none;
+      margin: 0 auto;
+      padding: 0;
+      float: none;
+      clear: both;
+      overflow: hidden;
+    }
+
+    .versions li {
+      display: block;
+      float: left;
+      border-right: 1px solid rgba(194, 245, 255, 0.4);
+      padding: 0 20px;
+      font-size: 13px;
+      opacity: 0.8;
+    }
+
+    .versions li:last-child {
+      border: none;
+    }
+
+    nav {
+      margin: 40px 0 0 0;
+    }
+
+    .linkcol {
+      width: 19%;
+      display: inline-block;
+      text-align: center;
+    }
+
+    .hero-octicon {
+      display: block;
+      width: 80px;
+      height: 80px;
+      margin: 0;
+      padding: 0;
+      font-size: 42px !important;
+      color: #9feaf9;
+      text-align: center;
+      background-color: rgba(194, 245, 255, 0.1);
+      border-radius: 50%;
+    }
+
+    .hero-octicon:before {
+      display: block;
+      padding-top: 20px;
+    }
+
+    .octicon-gist:before { padding-left: 10px; }
+    .octicon-gear:before { padding-left: 5px; }
+    .octicon-star:before { padding-left: 6px; }
+    .octicon-gift:before { padding-left: 2px; }
+  </style>
+>>>>>>> .their
 </head>
 
 <body>
   <div class="container">
+<<<<<<< .our
+=======
+    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/octicons/4.4.0/font/octicons.css">
+>>>>>>> .their
     <ul class="versions code">
       <li class="electron-version"></li>
       <li class="chrome-version"></li>
@@ -84,7 +245,13 @@
     </div>
   </nav>
 
+<<<<<<< .our
   <script src="./renderer.js"></script>
+=======
+  <script>
+    require('./renderer')
+  </script>
+>>>>>>> .their
 </body>
 
 </html>
\ No newline at end of file
added in both
  our    100644 0e93f684875ca8c4fd8c771c93dce9110de57c15 default_app/main.js
  their  100644 7fdfc7c3fa3607f1cb664bf50a9b536abe5c40d5 default_app/main.js
@@ -320,7 +320,11 @@
   const file = option.file
   const protocol = url.parse(file).protocol
   const extension = path.extname(file)
+<<<<<<< .our
   if (protocol === 'http:' || protocol === 'https:' || protocol === 'file:' || protocol === 'chrome:') {
+=======
+  if (protocol === 'http:' || protocol === 'https:' || protocol === 'file:') {
+>>>>>>> .their
     loadApplicationByUrl(file)
   } else if (extension === '.html' || extension === '.htm') {
     loadApplicationByUrl('file://' + path.resolve(file))
added in both
  our    100644 977aad7ab9d4171d2ab86b599eee1e39b4b82041 default_app/renderer.js
  their  100644 92e5530ada1aa971e28b276164e1a8885bce9f45 default_app/renderer.js
@@ -1,5 +1,8 @@
 const {remote, shell} = require('electron')
+<<<<<<< .our
 const fs = require('fs')
+=======
+>>>>>>> .their
 const path = require('path')
 const URL = require('url')
 const electronPath = path.relative(process.cwd(), remote.process.execPath)
@@ -21,6 +24,7 @@
 document.querySelector('.node-version').innerText = `Node v${process.versions.node}`
 document.querySelector('.v8-version').innerText = `v8 v${process.versions.v8}`
 document.querySelector('.command-example').innerText = `${electronPath} path-to-app`
+<<<<<<< .our
 
 function getOcticonSvg (name) {
   const octiconPath = path.resolve(__dirname, 'node_modules', 'octicons', 'build', 'svg', `${name}.svg`)
@@ -50,3 +54,5 @@
 for (const element of document.querySelectorAll('.octicon')) {
   loadSVG(element)
 }
+=======
+>>>>>>> .their
added in both
  our    100644 14dc557e237404cbbd5bcebabb0e65486dc36926 docs/api/app.md
  their  100644 740da22d82ee5662e5bb994fa8e1c2eadb907a5e docs/api/app.md
@@ -881,7 +881,11 @@
 
 Imports the certificate in pkcs12 format into the platform certificate store.
 `callback` is called with the `result` of import operation, a value of `0`
+<<<<<<< .our
 indicates success while any other value indicates failure according to Chromium [net_error_list](https://code.google.com/p/chromium/codesearch#chromium/src/net/base/net_error_list.h).
+=======
+indicates success while any other value indicates failure according to chromium [net_error_list](https://code.google.com/p/chromium/codesearch#chromium/src/net/base/net_error_list.h).
+>>>>>>> .their
 
 ### `app.disableHardwareAcceleration()`
 
@@ -1033,7 +1037,11 @@
 stopAccessingSecurityScopedResource()
 ```
 
+<<<<<<< .our
 Start accessing a security scoped resource. With this method Electron applications that are packaged for the Mac App Store may reach outside their sandbox to access files chosen by the user. See [Apple's documentation](https://developer.apple.com/library/content/documentation/Security/Conceptual/AppSandboxDesignGuide/AppSandboxInDepth/AppSandboxInDepth.html#//apple_ref/doc/uid/TP40011183-CH3-SW16) for a description of how this system works.
+=======
+Start accessing a security scoped resource. With this method electron applications that are packaged for the Mac App Store may reach outside their sandbox to access files chosen by the user. See [Apple's documentation](https://developer.apple.com/library/content/documentation/Security/Conceptual/AppSandboxDesignGuide/AppSandboxInDepth/AppSandboxInDepth.html#//apple_ref/doc/uid/TP40011183-CH3-SW16) for a description of how this system works.
+>>>>>>> .their
 
 ### `app.commandLine.appendSwitch(switch[, value])`
 
added in both
  our    100644 7f840f07102aae0f0308742e66692345a84cb84b docs/api/auto-updater.md
  their  100644 bb181347a0ae9c4f78c48f4932c569db9f2627b5 docs/api/auto-updater.md
@@ -84,9 +84,12 @@
 
 On Windows only `releaseName` is available.
 
+<<<<<<< .our
 **Note:** It is not strictly necessary to handle this event. A successfully 
 downloaded update will still be applied the next time the application starts.
 
+=======
+>>>>>>> .their
 ### Event: 'before-quit-for-update'
 
 This event is emitted after a user calls `quitAndInstall()`.
@@ -125,9 +128,15 @@
 windows first, and automatically call `app.quit()` after all windows have been
 closed.
 
+<<<<<<< .our
 **Note:** It is not strictly necessary to call this function to apply an update, 
 as a successfully downloaded update will always be applied the next time the 
 application starts.
+=======
+**Note:** If the application is quit without calling this API after the
+`update-downloaded` event has been emitted, the application will still be
+replaced by the updated one on the next run.
+>>>>>>> .their
 
 [squirrel-mac]: https://github.com/Squirrel/Squirrel.Mac
 [server-support]: https://github.com/Squirrel/Squirrel.Mac#server-support
added in both
  our    100644 dff61dd336f047cf2f6f06228b2df2b98ff2304d docs/api/browser-window.md
  their  100644 16657f6d55f05711ade1b726966b1889ca96403b docs/api/browser-window.md
@@ -305,6 +305,11 @@
     * `plugins` Boolean (optional) - Whether plugins should be enabled. Default is `false`.
     * `experimentalFeatures` Boolean (optional) - Enables Chromium's experimental features.
       Default is `false`.
+<<<<<<< .our
+=======
+    * `experimentalCanvasFeatures` Boolean (optional) - Enables Chromium's experimental
+      canvas features. Default is `false`.
+>>>>>>> .their
     * `scrollBounce` Boolean (optional) - Enables scroll bounce (rubber banding) effect on
       macOS. Default is `false`.
     * `enableBlinkFeatures` String (optional) - A list of feature strings separated by `,`, like
@@ -490,6 +495,7 @@
 
 Emitted when the window is restored from a minimized state.
 
+<<<<<<< .our
 #### Event: 'will-resize' _macOS_ _Windows_
 
 Returns:
@@ -504,6 +510,11 @@
 #### Event: 'resize'
 
 Emitted after the window has been resized.
+=======
+#### Event: 'resize'
+
+Emitted when the window is being resized.
+>>>>>>> .their
 
 #### Event: 'move'
 
@@ -1273,6 +1284,7 @@
 
 Returns `Number` - between 0.0 (fully transparent) and 1.0 (fully opaque)
 
+<<<<<<< .our
 #### `win.setShape(rects)` _Windows_ _Linux_ _Experimental_
 
 * `rects` [Rectangle[]](structures/rectangle.md) - Sets a shape on the window.
@@ -1284,6 +1296,8 @@
 the region will not be received by that window, but will fall through to
 whatever is behind the window.
 
+=======
+>>>>>>> .their
 #### `win.setThumbarButtons(buttons)` _Windows_
 
 * `buttons` [ThumbarButton[]](structures/thumbar-button.md)
@@ -1364,6 +1378,7 @@
 
 Changes window icon.
 
+<<<<<<< .our
 #### `win.setWindowButtonVisibility(visible)` _macOS_
 
 * `visible` Boolean
@@ -1372,6 +1387,8 @@
 
 This cannot be called when `titleBarStyle` is set to `customButtonsOnHover`.
 
+=======
+>>>>>>> .their
 #### `win.setAutoHideMenuBar(hide)`
 
 * `hide` Boolean
added in both
  our    100644 b2b28f5adb7de78a0d945e0ed1ee196d6aa45fd1 docs/api/chrome-command-line-switches.md
  their  100644 132eddfdeb74b007958793ca62a033ecbf8d486d docs/api/chrome-command-line-switches.md
@@ -60,8 +60,12 @@
 Use a specified proxy server, which overrides the system setting. This switch
 only affects requests with HTTP protocol, including HTTPS and WebSocket
 requests. It is also noteworthy that not all proxy servers support HTTPS and
+<<<<<<< .our
 WebSocket requests. The proxy URL does not support username and password
 authentication [per Chromium issue](https://bugs.chromium.org/p/chromium/issues/detail?id=615947).
+=======
+WebSocket requests.
+>>>>>>> .their
 
 ## --proxy-bypass-list=`hosts`
 
added in both
  our    100644 586c17e37ac1afaf7aaac3b213434ab4ecbb1ca2 docs/api/client-request.md
  their  100644 5cd9562b654a2e8d4483d25254bb2ae72ec5b7bc docs/api/client-request.md
@@ -215,6 +215,7 @@
 #### `request.followRedirect()`
 
 Continues any deferred redirection request when the redirection mode is `manual`.
+<<<<<<< .our
 
 #### `request.getUploadProgress()`
 
@@ -229,3 +230,5 @@
 
 You can use this method in conjunction with `POST` requests to get the progress
 of a file upload or other data transfer.
+=======
+>>>>>>> .their
added in both
  our    100644 80d266ab56382901e7745067488d3d316c172294 docs/api/crash-reporter.md
  their  100644 d8f9f060241760ac723f7202d11edf2b93c04272 docs/api/crash-reporter.md
@@ -42,7 +42,11 @@
 ### `crashReporter.start(options)`
 
 * `options` Object
+<<<<<<< .our
   * `companyName` String
+=======
+  * `companyName` String (optional)
+>>>>>>> .their
   * `submitURL` String - URL that crash reports will be sent to as POST.
   * `productName` String (optional) - Defaults to `app.getName()`.
   * `uploadToServer` Boolean (optional) - Whether crash reports should be sent to the server
added in both
  our    100644 11101ae3ec01954b61266051ee74078ebfe8b299 docs/api/dialog.md
  their  100644 a69cba8b969eeb8c7f06b9d246981d9291dae0ed docs/api/dialog.md
@@ -141,7 +141,11 @@
   * `cancelId` Integer (optional) - The index of the button to be used to cancel the dialog, via
     the `Esc` key. By default this is assigned to the first button with "cancel" or "no" as the
     label. If no such labeled buttons exist and this option is not set, `0` will be used as the
+<<<<<<< .our
     return value or callback response.
+=======
+    return value or callback response. This option is ignored on Windows.
+>>>>>>> .their
   * `noLink` Boolean (optional) - On Windows Electron will try to figure out which one of
     the `buttons` are common buttons (like "Cancel" or "Yes"), and show the
     others as command links in the dialog. This can make the dialog appear in
added in both
  our    100644 ae04a286821de314680b67c9a666e6d2a0f42db0 docs/api/menu-item.md
  their  100644 f687e43dbc9f5fa925a06ceeaa67bf503fff5c37 docs/api/menu-item.md
@@ -47,9 +47,12 @@
 The `label` and `accelerator` values are optional when using a `role` and will
 default to appropriate values for each platform.
 
+<<<<<<< .our
 Every menu item must have either a `role`, `label`, or in the case of a separator
 a `type`.
 
+=======
+>>>>>>> .their
 The `role` property can have following values:
 
 * `undo`
@@ -62,11 +65,19 @@
 * `delete`
 * `minimize` - Minimize current window.
 * `close` - Close current window.
+<<<<<<< .our
 * `quit` - Quit the application.
 * `reload` - Reload the current window.
 * `forceReload` - Reload the current window ignoring the cache.
 * `toggleDevTools` - Toggle developer tools in the current window.
 * `toggleFullScreen` - Toggle full screen mode on the current window.
+=======
+* `quit`- Quit the application.
+* `reload` - Reload the current window.
+* `forceReload` - Reload the current window ignoring the cache.
+* `toggleDevTools` - Toggle developer tools in the current window.
+* `toggleFullScreen`- Toggle full screen mode on the current window.
+>>>>>>> .their
 * `resetZoom` - Reset the focused page's zoom level to the original size.
 * `zoomIn` - Zoom in the focused page by 10%.
 * `zoomOut` - Zoom out the focused page by 10%.
added in both
  our    100644 e1d6e9958de7f2b95129c9c7e69f0941e466e3e8 docs/api/menu.md
  their  100644 339a9ef7986b545829195d5e5600a678849f3782 docs/api/menu.md
@@ -61,7 +61,11 @@
 
 #### `menu.popup(options)`
 
+<<<<<<< .our
 * `options` Object (optional)
+=======
+* `options` Object
+>>>>>>> .their
   * `window` [BrowserWindow](browser-window.md) (optional) - Default is the focused window.
   * `x` Number (optional) - Default is the current mouse cursor position.
     Must be declared if `y` is declared.
added in both
  our    100644 1f6b20d2f25c31b48fbb2bfedc6a064ae283424f docs/api/process.md
  their  100644 e6b34290b92c071ee8e7d4f9aa45ce04fb916ec9 docs/api/process.md
@@ -16,6 +16,7 @@
 - `getHeapStatistics()`
 - `getProcessMemoryInfo()`
 - `getSystemMemoryInfo()`
+<<<<<<< .our
 - `getCPUUsage()`
 - `getIOCounters()`
 - `argv`
@@ -29,6 +30,12 @@
 - `type`
 - `version`
 - `versions`
+=======
+- `argv`
+- `execPath`
+- `env`
+- `platform`
+>>>>>>> .their
 
 ## Events
 
@@ -77,11 +84,14 @@
 
 A `String` representing the path to the resources directory.
 
+<<<<<<< .our
 ### `process.sandboxed`
 
 A `Boolean`. When the renderer process is sandboxed, this property is `true`,
 otherwise it is `undefined`.
 
+=======
+>>>>>>> .their
 ### `process.throwDeprecation`
 
 A `Boolean` that controls whether or not deprecation warnings will be thrown as
@@ -125,6 +135,7 @@
 
 Causes the main thread of the current process crash.
 
+<<<<<<< .our
 ### `process.getCreationTime()`
 
 Returns `Number | null` - The number of milliseconds since epoch, or `null` if the information is unavailable
@@ -132,6 +143,8 @@
 Indicates the creation time of the application.
 The time is represented as number of milliseconds since epoch. It returns null if it is unable to get the process creation time.
 
+=======
+>>>>>>> .their
 ### `process.getCPUUsage()`
 
 Returns [`CPUUsage`](structures/cpu-usage.md)
added in both
  our    100644 8a9d242fce0e5b35af4d2a45dfe30153d73a0532 docs/api/sandbox-option.md
  their  100644 4923f93bbe6d47c86e9c2c5a273c4c469d3a1fa7 docs/api/sandbox-option.md
@@ -2,7 +2,11 @@
 
 > Create a browser window with a renderer that can run inside Chromium OS sandbox. With this
 option enabled, the renderer must communicate via IPC to the main process in order to access node APIs.
+<<<<<<< .our
 However, in order to enable the Chromium OS sandbox, Electron must be run with the `--enable-sandbox`
+=======
+However, in order to enable the Chromium OS sandbox, electron must be run with the `--enable-sandbox`
+>>>>>>> .their
 command line argument.
 
 One of the key security features of Chromium is that all blink rendering/JavaScript
@@ -14,14 +18,22 @@
 [Here's](https://www.chromium.org/developers/design-documents/sandbox) more
 information about the sandbox.
 
+<<<<<<< .our
 Since a major feature in Electron is the ability to run Node.js in the
 renderer process (making it easier to develop desktop applications using web
 technologies), the sandbox is disabled by electron. This is because
 most Node.js APIs require system access. `require()` for example, is not
+=======
+Since a major feature in electron is the ability to run node.js in the
+renderer process (making it easier to develop desktop applications using web
+technologies), the sandbox is disabled by electron. This is because
+most node.js APIs require system access. `require()` for example, is not
+>>>>>>> .their
 possible without file system permissions, which are not available in a sandboxed
 environment.
 
 Usually this is not a problem for desktop applications since the code is always
+<<<<<<< .our
 trusted, but it makes Electron less secure than Chromium for displaying
 untrusted web content. For applications that require more security, the
 `sandbox` flag will force Electron to spawn a classic Chromium renderer that is
@@ -34,6 +46,20 @@
 Another difference is that sandboxed renderers don't modify any of the default
 JavaScript APIs. Consequently, some APIs such as `window.open` will work as they
 do in Chromium (i.e. they do not return a [`BrowserWindowProxy`](browser-window-proxy.md)).
+=======
+trusted, but it makes electron less secure than chromium for displaying
+untrusted web content. For applications that require more security, the
+`sandbox` flag will force electron to spawn a classic chromium renderer that is
+compatible with the sandbox.
+
+A sandboxed renderer doesn't have a node.js environment running and doesn't
+expose node.js JavaScript APIs to client code. The only exception is the preload script,
+which has access to a subset of the electron renderer API.
+
+Another difference is that sandboxed renderers don't modify any of the default
+JavaScript APIs. Consequently, some APIs such as `window.open` will work as they
+do in chromium (i.e. they do not return a [`BrowserWindowProxy`](browser-window-proxy.md)).
+>>>>>>> .their
 
 ## Example
 
@@ -51,9 +77,15 @@
 })
 ```
 
+<<<<<<< .our
 In the above code the [`BrowserWindow`](browser-window.md) that was created has Node.js disabled and can communicate
 only via IPC. The use of this option stops Electron from creating a Node.js runtime in the renderer. Also,
 within this new window `window.open` follows the native behaviour (by default Electron creates a [`BrowserWindow`](browser-window.md)
+=======
+In the above code the [`BrowserWindow`](browser-window.md) that was created has node.js disabled and can communicate
+only via IPC. The use of this option stops electron from creating a node.js runtime in the renderer. Also,
+within this new window `window.open` follows the native behaviour (by default electron creates a [`BrowserWindow`](browser-window.md)
+>>>>>>> .their
 and returns a proxy to this via `window.open`).
 
 It is important to note that this option alone won't enable the OS-enforced sandbox. To enable this feature, the
@@ -75,19 +107,32 @@
 
 Note that it is not enough to call
 `app.commandLine.appendSwitch('--enable-sandbox')`, as electron/node startup
+<<<<<<< .our
 code runs after it is possible to make changes to Chromium sandbox settings. The
 switch must be passed to Electron on the command-line:
+=======
+code runs after it is possible to make changes to chromium sandbox settings. The
+switch must be passed to electron on the command-line:
+>>>>>>> .their
 
 ```sh
 electron --enable-sandbox app.js
 ```
 
 It is not possible to have the OS sandbox active only for some renderers, if
+<<<<<<< .our
 `--enable-sandbox` is enabled, normal Electron windows cannot be created.
 
 If you need to mix sandboxed and non-sandboxed renderers in one application,
 omit the `--enable-sandbox` argument. Without this argument, windows
 created with `sandbox: true` will still have Node.js disabled and communicate
+=======
+`--enable-sandbox` is enabled, normal electron windows cannot be created.
+
+If you need to mix sandboxed and non-sandboxed renderers in one application,
+omit the `--enable-sandbox` argument. Without this argument, windows
+created with `sandbox: true` will still have node.js disabled and communicate
+>>>>>>> .their
 only via IPC, which by itself is already a gain from security POV.
 
 ## Preload
@@ -112,7 +157,11 @@
 
 ```js
 // This file is loaded whenever a javascript context is created. It runs in a
+<<<<<<< .our
 // private scope that can access a subset of Electron renderer APIs. We must be
+=======
+// private scope that can access a subset of electron renderer APIs. We must be
+>>>>>>> .their
 // careful to not leak any objects into the global scope!
 const fs = require('fs')
 const {ipcRenderer} = require('electron')
@@ -136,7 +185,11 @@
 
 Important things to notice in the preload script:
 
+<<<<<<< .our
 - Even though the sandboxed renderer doesn't have Node.js running, it still has
+=======
+- Even though the sandboxed renderer doesn't have node.js running, it still has
+>>>>>>> .their
   access to a limited node-like environment: `Buffer`, `process`, `setImmediate`
   and `require` are available.
 - The preload script can indirectly access all APIs from the main process through the
@@ -146,7 +199,11 @@
 - The preload script must be contained in a single script, but it is possible to have
   complex preload code composed with multiple modules by using a tool like
   browserify, as explained below. In fact, browserify is already used by
+<<<<<<< .our
   Electron to provide a node-like environment to the preload script.
+=======
+  electron to provide a node-like environment to the preload script.
+>>>>>>> .their
 
 To create a browserify bundle and use it as a preload script, something like
 the following should be used:
@@ -178,7 +235,11 @@
 - `timers`
 - `url`
 
+<<<<<<< .our
 More may be added as needed to expose more Electron APIs in the sandbox, but any
+=======
+More may be added as needed to expose more electron APIs in the sandbox, but any
+>>>>>>> .their
 module in the main process can already be used through
 `electron.remote.require`.
 
@@ -186,7 +247,11 @@
 
 Please use the `sandbox` option with care, as it is still an experimental
 feature. We are still not aware of the security implications of exposing some
+<<<<<<< .our
 Electron renderer APIs to the preload script, but here are some things to
+=======
+electron renderer APIs to the preload script, but here are some things to
+>>>>>>> .their
 consider before rendering untrusted content:
 
 - A preload script can accidentally leak privileged APIs to untrusted code.
@@ -194,9 +259,15 @@
   APIs, effectively granting full access to the system through the `remote`
   module.
 
+<<<<<<< .our
 Since rendering untrusted content in Electron is still uncharted territory,
 the APIs exposed to the sandbox preload script should be considered more
 unstable than the rest of Electron APIs, and may have breaking changes to fix
+=======
+Since rendering untrusted content in electron is still uncharted territory,
+the APIs exposed to the sandbox preload script should be considered more
+unstable than the rest of electron APIs, and may have breaking changes to fix
+>>>>>>> .their
 security issues.
 
 One planned enhancement that should greatly increase security is to block IPC
added in both
  our    100644 2eb5574bffe05def2ec3646b200038db15df2e9b docs/api/structures/certificate-principal.md
  their  100644 12c46382aaf3d098b8845176eda99e9dddd82d83 docs/api/structures/certificate-principal.md
@@ -1,8 +1,17 @@
 # CertificatePrincipal Object
 
+<<<<<<< .our
 * `commonName` String - Common Name.
 * `organizations` String[] - Organization names.
 * `organizationUnits` String[] - Organization Unit names.
 * `locality` String - Locality.
 * `state` String - State or province.
 * `country` String - Country or region.
+=======
+* `commonName` String - Common Name
+* `organizations` String[] - Organization names
+* `organizationUnits` String[] - Organization Unit names
+* `locality` String - Locality
+* `state` String - State or province
+* `country` String - Country or region
+>>>>>>> .their
added in both
  our    100644 b0e5b8d15165b23035303bafe049c1824a759439 docs/api/structures/gpu-feature-status.md
  their  100644 f7bf3933d6c4c620c8f4d40fbda8a4c7c6b311ee docs/api/structures/gpu-feature-status.md
@@ -1,5 +1,6 @@
 # GPUFeatureStatus Object
 
+<<<<<<< .our
 * `2d_canvas` String - Canvas.
 * `flash_3d` String - Flash.
 * `flash_stage3d` String - Flash Stage3D.
@@ -13,6 +14,21 @@
 * `vpx_decode` String - VPx Video Decode.
 * `webgl` String - WebGL.
 * `webgl2` String - WebGL2.
+=======
+* `2d_canvas` String - Canvas
+* `flash_3d` String - Flash
+* `flash_stage3d` String - Flash Stage3D
+* `flash_stage3d_baseline` String - Flash Stage3D Baseline profile
+* `gpu_compositing` String - Compositing
+* `multiple_raster_threads` String - Multiple Raster Threads
+* `native_gpu_memory_buffers` String - Native GpuMemoryBuffers
+* `rasterization` String - Rasterization
+* `video_decode` String - Video Decode
+* `video_encode` String - Video Encode
+* `vpx_decode` String - VPx Video Decode
+* `webgl` String - WebGL
+* `webgl2` String - WebGL2
+>>>>>>> .their
 
 Possible values:
 
added in both
  our    100644 470dd3a3f7d70f059c0a42736c20213b19372014 docs/api/structures/mime-typed-buffer.md
  their  100644 08e5cd47a4a9a5f5ec7784c14b26c82502e20155 docs/api/structures/mime-typed-buffer.md
@@ -1,4 +1,9 @@
 # MimeTypedBuffer Object
 
+<<<<<<< .our
 * `mimeType` String - The mimeType of the Buffer that you are sending.
 * `data` Buffer - The actual Buffer content.
+=======
+* `mimeType` String - The mimeType of the Buffer that you are sending
+* `data` Buffer - The actual Buffer content
+>>>>>>> .their
added in both
  our    100644 9f7a000967d09895fe3f43b9792578d6219a43b5 docs/api/structures/rectangle.md
  their  100644 1a1228bc0b7c8d0d0f0ae3cea09048960f9df197 docs/api/structures/rectangle.md
@@ -1,6 +1,13 @@
 # Rectangle Object
 
+<<<<<<< .our
 * `x` Number - The x coordinate of the origin of the rectangle (must be an integer).
 * `y` Number - The y coordinate of the origin of the rectangle (must be an integer).
 * `width` Number - The width of the rectangle (must be an integer).
 * `height` Number - The height of the rectangle (must be an integer).
+=======
+* `x` Number - The x coordinate of the origin of the rectangle (must be an integer)
+* `y` Number - The y coordinate of the origin of the rectangle (must be an integer)
+* `width` Number - The width of the rectangle (must be an integer)
+* `height` Number - The height of the rectangle (must be an integer)
+>>>>>>> .their
added in both
  our    100644 538579684242b9de3921d944b9d2fb64cf957a13 docs/api/structures/scrubber-item.md
  their  100644 584593b6fde7e089fa296fc891eca05588c108cb docs/api/structures/scrubber-item.md
@@ -1,4 +1,9 @@
 # ScrubberItem Object
 
+<<<<<<< .our
 * `label` String (optional) - The text to appear in this item.
 * `icon` NativeImage (optional) - The image to appear in this item.
+=======
+* `label` String (optional) - The text to appear in this item
+* `icon` NativeImage (optional) - The image to appear in this item
+>>>>>>> .their
added in both
  our    100644 47dfaa24027550db196340bc4f63906b6cf43ee2 docs/api/structures/segmented-control-segment.md
  their  100644 06a8fd201a190e7787ed7f7c9c55fe31c8f1f37a docs/api/structures/segmented-control-segment.md
@@ -1,5 +1,11 @@
 # SegmentedControlSegment Object
 
+<<<<<<< .our
 * `label` String (optional) - The text to appear in this segment.
 * `icon` NativeImage (optional) - The image to appear in this segment.
 * `enabled` Boolean (optional) - Whether this segment is selectable. Default: true.
+=======
+* `label` String (optional) - The text to appear in this segment
+* `icon` NativeImage (optional) - The image to appear in this segment
+* `enabled` Boolean (optional) - Whether this segment is selectable. Default: true
+>>>>>>> .their
added in both
  our    100644 ec1fa27e5e7de32e18f4a8ca0ec1969d21054fd4 docs/api/structures/stream-protocol-response.md
  their  100644 64847075a05e796a32e46c57eec865ae46740eed docs/api/structures/stream-protocol-response.md
@@ -1,5 +1,11 @@
 # StreamProtocolResponse Object
 
+<<<<<<< .our
 * `statusCode` Number - The HTTP response code.
 * `headers` Object - An object containing the response headers.
 * `data` ReadableStream - A Node.js readable stream representing the response body.
+=======
+* `statusCode` Number - The HTTP response code
+* `headers` Object - An object containing the response headers
+* `data` ReadableStream - A Node.js readable stream representing the response body
+>>>>>>> .their
added in both
  our    100644 8990fe2e97ab62eafdd3f7a4eb8ee782415124c5 docs/api/web-contents.md
  their  100644 520b3cce7bc7c42cecd80ac88d01669c0d5bba5b docs/api/web-contents.md
@@ -832,10 +832,13 @@
 
 Returns `Boolean` - Whether this page has been muted.
 
+<<<<<<< .our
 #### `contents.isCurrentlyAudible()`
 
 Returns `Boolean` - Whether audio is currently playing.
 
+=======
+>>>>>>> .their
 #### `contents.setZoomFactor(factor)`
 
 * `factor` Number - Zoom factor.
@@ -1451,7 +1454,11 @@
 
 #### `contents.getProcessId()`
 
+<<<<<<< .our
 Returns `Integer` - The Chromium internal `pid` of the associated renderer. Can
+=======
+Returns `Integer` - The chromium internal `pid` of the associated renderer. Can
+>>>>>>> .their
 be compared to the `frameProcessId` passed by frame specific navigation events
 (e.g. `did-frame-navigate`)
 
added in both
  our    100644 989060ef3e50c5d93db1a914997f1d190edf3cf5 docs/api/web-frame.md
  their  100644 5a191da39b6534e78914d01f6486bae9a84ceaff docs/api/web-frame.md
@@ -4,7 +4,11 @@
 
 Process: [Renderer](../glossary.md#renderer-process)
 
+<<<<<<< .our
 `webFrame` export of the Electron module is an instance of the `WebFrame`
+=======
+`webFrame` export of the electron module is an instance of the `WebFrame`
+>>>>>>> .their
 class representing the top frame of the current `BrowserWindow`. Sub-frames can
 be retrieved by certain properties and methods (e.g. `webFrame.firstChild`).
 
@@ -232,8 +236,13 @@
    current renderer process. Routing IDs can be retrieved from `WebFrame`
    instances (`webFrame.routingId`) and are also passed by frame
    specific `WebContents` navigation events (e.g. `did-frame-navigate`)
+<<<<<<< .our
 
 Returns `WebFrame` - that has the supplied `routingId`, `null` if not found.
+=======
+  
+Returns `WebFrame` - that has the supplied `routingId`, `null` if not found. 
+>>>>>>> .their
 
 ## Properties
 
added in both
  our    100644 0904db05accd92a661a6b02275c2166b7a8af2af docs/api/web-request.md
  their  100644 2d039923d6f14f3231c7177b8c1b4242b3e4126c docs/api/web-request.md
@@ -9,9 +9,14 @@
 
 The methods of `WebRequest` accept an optional `filter` and a `listener`. The
 `listener` will be called with `listener(details)` when the API's event has
+<<<<<<< .our
 happened. The `details` object describes the request.
 
 ⚠️ Only the last attached `listener` will be used. Passing `null` as `listener` will unsubscribe from the event.
+=======
+happened. The `details` object describes the request. Passing `null`
+as `listener` will unsubscribe from the event.
+>>>>>>> .their
 
 The `filter` object has a `urls` property which is an Array of URL
 patterns that will be used to filter out the requests that do not match the URL
added in both
  our    100644 8dc16b4a4e92ad132c7722ac400e2be851723f9b docs/api/webview-tag.md
  their  100644 fd48cf064f93e57a8e4475e8718fa00ac5a32b30 docs/api/webview-tag.md
@@ -407,10 +407,13 @@
 
 Returns `Boolean` - Whether guest page has been muted.
 
+<<<<<<< .our
 #### `<webview>.isCurrentlyAudible()`
 
 Returns `Boolean` - Whether audio is currently playing.
 
+=======
+>>>>>>> .their
 ### `<webview>.undo()`
 
 Executes editing command `undo` in page.
added in both
  our    100644 cbbdaf4c3d1998ccce8e5438eea1a7c9b00f2e37 docs/development/build-instructions-gn.md
  their  100644 cdddc4dc8e54b8ce21c4bba333edd128eab5636f docs/development/build-instructions-gn.md
@@ -3,6 +3,7 @@
 Follow the guidelines below for building Electron with the experimental GN
 build.
 
+<<<<<<< .our
 > **NOTE**: The GN build system is in _experimental_ status.
 
 ## Platform prerequisites
@@ -61,6 +62,34 @@
     --name "src/electron" \
     --unmanaged \
     https://github.com/electron/electron
+=======
+> **NOTE**: The GN build system is in _experimental_ status, and currently only
+> works on macOS and Linux, in debug mode, as a component build.
+
+## Prerequisites
+
+See the [macOS](build-instructions-osx.md#prerequisites) or
+[Linux](build-instructions-linux.md#prerequisites) build instructions for the
+requirements for your platform. In addition, you'll need to install
+[`depot_tools`][depot-tools], the toolset used for fetching Chromium and its
+dependencies.
+
+[depot-tools]: http://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html#_setting_up
+
+## Getting the Code
+
+```sh
+$ mkdir electron-gn && cd electron-gn
+$ cat > .gclient <<-GCLIENT
+solutions = [
+  {
+    "url": "https://github.com/electron/electron",
+    "managed": False,
+    "name": "src/electron",
+  },
+]
+GCLIENT
+>>>>>>> .their
 $ gclient sync --with_branch_heads --with_tags
 # This will take a while, go get a coffee.
 ```
@@ -70,6 +99,7 @@
 ```sh
 $ cd src
 $ export CHROMIUM_BUILDTOOLS_PATH=`pwd`/buildtools
+<<<<<<< .our
 # this next line is needed only if building with sccache
 $ export GN_EXTRA_ARGS="${GN_EXTRA_ARGS} cc_wrapper=\"${PWD}/electron/external_binaries/sccache\""
 $ gn gen out/Default --args="import(\"//electron/build/args/debug.gn\") $GN_EXTRA_ARGS"
@@ -99,6 +129,16 @@
 ```
 
 **To build, run `ninja` with the `electron:electron_app` target:**
+=======
+$ gn gen out/Default --args='root_extra_deps=["//electron"] is_electron_build=true is_component_build=true use_jumbo_build=true v8_promise_internal_field_count=1 v8_typed_array_max_size_in_heap=0'
+```
+
+This will generate all the ninja files needed for the build. You shouldn't have
+to run `gn gen` again—if you want to change the build arguments you can run `gn
+args out/Default` to bring up an editor.
+
+To build, run `ninja` with the `electron:electron_app` target:
+>>>>>>> .their
 
 ```sh
 $ ninja -C out/Default electron:electron_app
@@ -110,8 +150,12 @@
 so it will take a while.
 
 To speed up subsequent builds, you can use [sccache][sccache]. Add the GN arg
+<<<<<<< .our
 `cc_wrapper = "sccache"` by running `gn args out/Default` to bring up an
 editor and adding a line to the end of the file.
+=======
+`cc_wrapper="sccache"` by running `gn args out/Default` to bring up an editor.
+>>>>>>> .their
 
 [sccache]: https://github.com/mozilla/sccache
 
@@ -119,12 +163,16 @@
 
 ```sh
 $ ./out/Default/Electron.app/Contents/MacOS/Electron
+<<<<<<< .our
 # or, on Windows
 $ ./out/Default/electron.exe
+=======
+>>>>>>> .their
 # or, on Linux
 $ ./out/Default/electron
 ```
 
+<<<<<<< .our
 ### Cross-compiling
 
 To compile for a platform that isn't the same as the one you're building on,
@@ -157,17 +205,30 @@
 $ ninja -C out/Default third_party/electron_node:headers
 # Install the test modules with the generated headers
 $ (cd electron/spec && npm i --nodedir=../../out/Default/gen/node_headers)
+=======
+## Tests
+
+To run the tests, you'll first need to build the test modules against the
+same version of node.js that was built as part of the build process.
+
+```sh
+$ (cd electron/spec && npm i --nodedir=../../third_party/electron_node)
+>>>>>>> .their
 ```
 
 Then, run Electron with `electron/spec` as the argument:
 
 ```sh
+<<<<<<< .our
 # on Mac:
 $ ./out/Default/Electron.app/Contents/MacOS/Electron electron/spec
 # on Windows:
 $ ./out/Default/electron.exe electron/spec
 # on Linux:
 $ ./out/Default/electron electron/spec
+=======
+$ ./out/Default/Electron.app/Contents/MacOS/Electron electron/spec
+>>>>>>> .their
 ```
 
 If you're debugging something, it can be helpful to pass some extra flags to
added in both
  our    100644 3276b494aec5d1a49626b8c24d725ec665cf2c62 docs/development/build-instructions-linux.md
  their  100644 6f7660669bf071628d6d3d9458640a61e5bcda0e docs/development/build-instructions-linux.md
@@ -12,7 +12,11 @@
   For a quick test, run the following script:
 
   ```sh
+<<<<<<< .our
   $ npm run check-tls
+=======
+  $ python ./script/tls.py
+>>>>>>> .their
   ```
 
   If the script returns that your configuration is using an outdated security
@@ -71,6 +75,7 @@
 Downloading certain files can take a long time. Notice that we are using
 `ninja` to build Electron so there is no `Makefile` generated.
 
+<<<<<<< .our
 To bootstrap for a static, non-developer build, run:
 
 ```sh
@@ -83,6 +88,11 @@
 ```sh
 $ cd electron
 $ npm run bootstrap:dev
+=======
+```sh
+$ cd electron
+$ ./script/bootstrap.py --verbose
+>>>>>>> .their
 ```
 
 If you are using editor supports [JSON compilation database](http://clang.llvm.org/docs/JSONCompilationDatabase.html) based
@@ -121,7 +131,11 @@
 If you would like to build both `Release` and `Debug` targets:
 
 ```sh
+<<<<<<< .our
 $ npm run build
+=======
+$ ./script/build.py
+>>>>>>> .their
 ```
 
 This script will cause a very large Electron executable to be placed in
@@ -137,6 +151,7 @@
 the `dist` directory. After running the `create-dist.py` script, you
 may want to remove the 1.3+ gigabyte binary which is still in `out/R`.
 
+<<<<<<< .our
 You can also build either the `Debug` or `Release` target on its own:
 
 ```sh
@@ -145,6 +160,12 @@
 
 ```sh
 $ npm run build:release
+=======
+You can also build the `Debug` target only:
+
+```sh
+$ ./script/build.py -c D
+>>>>>>> .their
 ```
 
 After building is done, you can find the `electron` debug binary under `out/D`.
added in both
  our    100644 22dba096b73d1f99ee323f6822abb54a8b453477 docs/development/build-instructions-osx.md
  their  100644 157ab0d3e5f38e0c07695128832565f9aeffd27e docs/development/build-instructions-osx.md
@@ -15,7 +15,11 @@
 This depends on both your version of macOS and Python. For a quick test, run:
 
 ```sh
+<<<<<<< .our
 $ npm run check-tls
+=======
+$ python ./script/tls.py
+>>>>>>> .their
 ```
 
 If the script returns that your configuration is using an outdated security
@@ -69,6 +73,7 @@
 the build project files. Notice that we're using [ninja](https://ninja-build.org/)
 to build Electron so there is no Xcode project generated.
 
+<<<<<<< .our
 To bootstrap for a static, non-developer build, run:
 
 ```sh
@@ -81,6 +86,11 @@
 ```sh
 $ cd electron
 $ npm run bootstrap:dev
+=======
+```sh
+$ cd electron
+$ ./script/bootstrap.py -v
+>>>>>>> .their
 ```
 
 If you are using editor supports [JSON compilation database](http://clang.llvm.org/docs/JSONCompilationDatabase.html) based
@@ -92,6 +102,7 @@
 
 ## Building
 
+<<<<<<< .our
 To build both `Release` and `Debug` targets:
 
 ```sh
@@ -106,6 +117,18 @@
 
 ```sh
 $ npm run build:release
+=======
+Build both `Release` and `Debug` targets:
+
+```sh
+$ ./script/build.py
+```
+
+You can also only build the `Debug` target:
+
+```sh
+$ ./script/build.py -c D
+>>>>>>> .their
 ```
 
 After building is done, you can find `Electron.app` under `out/D`.
added in both
  our    100644 86f9d2b6f82bb28fe8dda7ec2bea9eccd6119fd4 docs/development/build-instructions-windows.md
  their  100644 0afd0ef3ea4636acfb2f67c05cb913403f9da2b7 docs/development/build-instructions-windows.md
@@ -4,7 +4,11 @@
 
 ## Prerequisites
 
+<<<<<<< .our
 * Windows 10 / Server 2012 R2 or higher
+=======
+* Windows 7 / Server 2008 R2 or higher
+>>>>>>> .their
 * Visual Studio 2017 15.7.2 or higher - [download VS 2017 Community Edition for
   free](https://www.visualstudio.com/vs/)
 * [Python 2.7](http://www.python.org/download/releases/2.7/)
@@ -37,6 +41,7 @@
 the build project files. Notice that we're using `ninja` to build Electron so
 there is no Visual Studio project generated.
 
+<<<<<<< .our
 To bootstrap for a static, non-developer build, run:
 
 ```powershell
@@ -49,10 +54,16 @@
 ```powershell
 $ cd electron
 $ npm run bootstrap:dev
+=======
+```powershell
+$ cd electron
+$ python script\bootstrap.py -v
+>>>>>>> .their
 ```
 
 ## Building
 
+<<<<<<< .our
 Build both `Release` and `Debug` targets:
 
 ```powershell
@@ -67,6 +78,18 @@
 
 ```powershell
 $ npm run build:release
+=======
+Build both Release and Debug targets:
+
+```powershell
+$ python script\build.py
+```
+
+You can also only build the Debug target:
+
+```powershell
+$ python script\build.py -c D
+>>>>>>> .their
 ```
 
 After building is done, you can find `electron.exe` under `out\D` (debug
@@ -166,6 +189,7 @@
 
 You may get this error if you are using Git Bash for building, you should use
 PowerShell or VS2015 Command Prompt instead.
+<<<<<<< .our
 
 ### cannot create directory at '...': Filename too long
 
@@ -174,3 +198,5 @@
 ```sh
 $ git config --system core.longpaths true
 ```
+=======
+>>>>>>> .their
added in both
  our    100644 0abaea2417d7e88955bf60c6dd8f2206b51c99af docs/development/coding-style.md
  their  100644 870cb85c7f1855a089b1adc76b6ea0cc2819d58d docs/development/coding-style.md
@@ -40,7 +40,11 @@
 
 ## Documentation
 
+<<<<<<< .our
 * Write [remark](https://github.com/remarkjs/remark) markdown style.
+=======
+* Write [remark](https://github.com/remarkjs/remark) markdown style
+>>>>>>> .their
 
 You can run `npm run lint-docs` to ensure that your documentation changes are
 formatted correctly.
added in both
  our    100644 95f4cbab47f5a4ae40f733fd3f8942a63bf4382d docs/development/debug-instructions-windows.md
  their  100644 b689ef4480365ad1b56c9bdd2fd028f0d797f1be docs/development/debug-instructions-windows.md
@@ -7,8 +7,11 @@
 and the Electron source code, you can enable step-through debugging
 with breakpoints inside Electron's source code.
 
+<<<<<<< .our
 **See also**: There's a wealth of information on debugging Chromium, much of which also applies to Electron, on the Chromium developers site: [Debugging Chromium on Windows](https://www.chromium.org/developers/how-tos/debugging-on-windows).
 
+=======
+>>>>>>> .their
 ## Requirements
 
 * **A debug build of Electron**: The easiest way is usually building it
added in both
  our    100644 6c2234477a35701b5d2e4f845d954bccbb203977 docs/development/debugging-instructions-macos-xcode.md
  their  100644 e136ee9253cea6fb4debe3c4d73454468cbc8551 docs/development/debugging-instructions-macos-xcode.md
@@ -1,12 +1,21 @@
 ## Debugging with XCode
 
 ### Build Debug Electron with Release libchromiumcontent
+<<<<<<< .our
 You can create a debug build of Electron by following [build instructions for macOS](build-instructions-osx.md).
 The bootstrap process will download Release version of libchromiumcontent by default,
 so you will not be able to step through the Chromium source.
 
 ### Build Debug Electron with Debug libchromiumcontent
 If you want to debug and step through libchromiumcontent, you will have to run the
+=======
+You can create a debug build of electron by following [build instructions for macOS](build-instructions-osx.md).
+The bootstrap process will download Release version of libchromiumcontent by default,
+so you will not be able to step through the chromium source.
+
+### Build Debug Electron with Debug libchromiumcontent
+If you want to debug and step through libchromiumcontent, you will have to run the 
+>>>>>>> .their
 bootsrap script with the `--build_debug_libcc` argument.
 
 ```sh
@@ -25,7 +34,11 @@
 ```sh
 $ ./script/build.py -c D --libcc
 ```
+<<<<<<< .our
 This will build debug Electron with debug version of libchromiumcontent.
+=======
+This will build debug electron with debug version of libchromiumcontent.
+>>>>>>> .their
 
 ### Generate xcode project for debugging sources (cannot build code from xcode)
 Run the update script with the --xcode argument.
@@ -37,16 +50,30 @@
 
 ### Debugging and breakpoints
 
+<<<<<<< .our
 Launch Electron app after build.
 You can now open the xcode workspace created above and attach to the Electron process
+=======
+Launch electron app after build.
+You can now open the xcode workspace created above and attach to the electron process
+>>>>>>> .their
 through the Debug > Attach To Process > Electron debug menu. [Note: If you want to debug
 the renderer process, you need to attach to the Electron Helper as well.]
 
 You can now set breakpoints in any of the indexed files. However, you will not be able
+<<<<<<< .our
 to set breakpoints directly in the Chromium source.
 To set break points in the Chromium source, you can choose Debug > Breakpoints > Create
+=======
+to set breakpoints directly in the chromium source.
+To set break points in the chromium source, you can choose Debug > Breakpoints > Create
+>>>>>>> .their
 Symbolic Breakpoint and set any function name as the symbol. This will set the breakpoint
 for all functions with that name, from all the classes if there are more than one.
 You can also do this step of setting break points prior to attaching the debugger,
 however, actual breakpoints for symbolic breakpoint functions may not show up until the
+<<<<<<< .our
+debugger is attached to the app.
+=======
 debugger is attached to the app.
+>>>>>>> .their
added in both
  our    100644 c7b4ae62d30fe55da6ba4d03ae2df95141920f99 docs/development/pull-requests.md
  their  100644 3b404343efa0d00e06e5bbab4b81a3b6eb25c737 docs/development/pull-requests.md
@@ -86,7 +86,14 @@
 uses [semantic commit messages](https://conventionalcommits.org/) to streamline
 the release process.
 
+<<<<<<< .our
 Before a pull request can be merged, it **must** have a pull request title with a semantic prefix.
+=======
+Before a pull request can be merged, it should include at least one semantic
+commit message, though it's not necessary for all commits in the pull request
+to be semantic. Alternatively, you can **update your pull request title**  to
+start with a semantic prefix.
+>>>>>>> .their
 
 Examples of commit messages with semantic prefixes:
 
@@ -105,7 +112,10 @@
   - perf: A code change that improves performance
   - refactor: A code change that neither fixes a bug nor adds a feature
   - style: Changes that do not affect the meaning of the code (linting)
+<<<<<<< .our
   - vendor: Bumping a dependency like libchromiumcontent or node
+=======
+>>>>>>> .their
 
 Other things to keep in mind when writing a commit message:
 
added in both
  our    100644 85a5fa0a935201521155dc60de45986db5829613 docs/development/releasing.md
  their  100644 7fe929515bcdffbbbf3e454cbd72fdda0e25c7cb docs/development/releasing.md
@@ -8,16 +8,25 @@
 information.
 
 There are a handful of `*_TOKEN` environment variables needed by the release
+<<<<<<< .our
 scripts:
 
 * `ELECTRON_GITHUB_TOKEN`:
 Create this by visiting https://github.com/settings/tokens/new?scopes=repo
+=======
+scripts. Once you've generated these per-user tokens, you may want to keep
+them in a local file that you can `source` when starting a release.
+* `ELECTRON_GITHUB_TOKEN`:
+Create as described at https://github.com/settings/tokens/new,
+giving the token repo access scope.
+>>>>>>> .their
 * `APPVEYOR_TOKEN`:
 Create a token from https://windows-ci.electronjs.org/api-token
 If you don't have an account, ask a team member to add you.
 * `CIRCLE_TOKEN`:
 Create a token from "Personal API Tokens" at https://circleci.com/account/api
 * `VSTS_TOKEN`:
+<<<<<<< .our
 Create a Personal Access Token at https://github.visualstudio.com/_usersSettings/tokens or https://github.visualstudio.com/_details/security/tokens
 with the scope of `Build (read and execute)`.
 * `ELECTRON_S3_BUCKET`:
@@ -29,6 +38,10 @@
 of the project. This file is gitignored, and will be loaded into the 
 environment by the release scripts.
 
+=======
+Create a Personal Access Token at https://github.visualstudio.com/_usersSettings/tokens
+with the scope of `Build (read and execute)`.
+>>>>>>> .their
 
 ## Determine which branch to release from
 
@@ -73,7 +86,11 @@
 ```
 ### Patch version change
 ```sh
+<<<<<<< .our
 npm run prepare-release -- patch --stable
+=======
+npm run prepare-release -- patch
+>>>>>>> .their
 ```
 ### Beta version change
 ```sh
@@ -212,10 +229,13 @@
 ```sh
 $ npm run release -- --validateRelease
 ```
+<<<<<<< .our
 Note, if you need to run `--validateRelease` more than once to check the assets,
 run it as above the first time, then `node ./script/release.js --validateRelease`
 for subsequent calls so that you don't have to rebuild each time you want to
 check the assets.
+=======
+>>>>>>> .their
 
 ## Publish the release
 
@@ -259,6 +279,7 @@
 $ npm run publish-to-npm
 ```
 
+<<<<<<< .our
 After publishing, you can check the `latest` release:
 ```sh
 $ npm dist-tag ls electron
@@ -274,6 +295,8 @@
 $ npm dist-tag add electron@2.0.0 latest
 ```
 
+=======
+>>>>>>> .their
 [the releases page]: https://github.com/electron/electron/releases
 [this bump commit]: https://github.com/electron/electron/commit/78ec1b8f89b3886b856377a1756a51617bc33f5a
 [versioning]: /docs/tutorial/electron-versioning.md
@@ -303,7 +326,11 @@
 ```
 
 Additionally you can pass a job name to the script to run an individual job, eg:
+<<<<<<< .our
 ```sh
+=======
+````sh
+>>>>>>> .their
 node script/ci-release-build.js --ci=AppVeyor --ghRelease --job=electron-x64 TARGET_BRANCH
 ```
 
added in both
  our    100644 1c61b3ee66504a23d72478c2e35a48ebeba3372a docs/development/upgrading-node.md
  their  100644 821a89391dfd06a158d0fe76272a244ead5f3971 docs/development/upgrading-node.md
@@ -61,6 +61,7 @@
 2. Run `script/update` to get the latest libcc
   - This will be time-consuming
 3. Remove our copies of the old Node v8 patches
+<<<<<<< .our
   - (In libchromiumcontent repo) Read `patches/common/v8/README.md` to see which patchfiles
     were created during the last update
   - Remove those files from `patches/common/v8/`:
@@ -77,6 +78,52 @@
 7. Apply all patches with the [`get-patch` script](https://github.com/electron/libchromiumcontent/blob/master/script/README.md#get-patch):
   - `./script/get-patch --repo src/v8 --output-dir patches/v8 --commit abc123 def456 ...`
 8. Update `patches/common/v8/README.md` with references to all new patches that have been added so that the next person will know which need to be removed.
+=======
+  - (In libchromiumcontent repo) Read `patches/v8/README.md` to see which patchfiles
+    were created during the last update
+  - Remove those files from `patches/v8/`:
+    - `git rm` the patchfiles
+    - edit `patches/v8/README.md`
+    - commit these removals
+4. Inspect Node [repo](https://github.com/electron/node) to see what patches upstream Node
+  used with their v8 after bumping its version
+  - `git log --oneline deps/V8`
+5. Create a checklist of the patches. This is useful for tracking your work and for
+  having a quick reference of commit hashes to use in the `git diff-tree` step below.
+6. Read `patches/v8/README.md` to see which patchfiles came from the previous version of V8 and therefore need to be removed.
+  - Delete each patchfile referenced in `patches/v8/README.md`
+7. For each patch, do:
+  - (In node repo) `git diff-tree --patch HASH > ~/path_to_libchromiumcontent/patches/v8/xxx-patch_name.patch`
+    - `xxx` is an incremented three-digit number (to force patch order)
+    - `patch_name` should loosely match the node commit messages,
+      e.g. `030-cherry_pick_cc55747,patch` if the Node commit message was "cherry-pick cc55747"
+  - (remainder of steps in libchromium repo)
+     Manually edit the `.patch` file to match upstream V8's directory:
+    - If a diff section has no instances of `deps/V8`, remove it altogether.
+      - We don’t want those patches because we’re only patching V8.
+    - Replace instances of `a/deps/v8/filename.ext` with `a/filename.ext`
+      - This is needed because upstream Node keeps its V8 files in a subdirectory
+  - Ensure that local status is clean: `git status` to make sure there are no unstaged changes.
+  - Confirm that the patch applies cleanly with
+     `script/patch.py -r src/V8 -p patches/v8/xxx-patch_name.patch.patch`
+  - Create a new copy of the patch:
+     - `cd src/v8 && git diff > ../../test.patch && cd ../..`
+     - This is needed because the first patch has Node commit checksums that we don't want
+  - Confirm that checksums are the only difference between the two patches:
+     - `diff -u test.patch patches/v8/xxx-patch_name.patch`
+  - Replace the old patch with the new:
+     - `mv test.patch patches/v8/xxx-patch_name.patch`
+  - Add the patched code to the index _without_ committing:
+     - `cd src/v8 && git add . && cd ../..`
+     - We don't want to commit the changes (they're kept in the patchfiles)
+        but need them locally so that they don't show up in subsequent diffs
+        while we iterate through more patches
+  - Add the patch file to the index:
+     - `git add a patches/v8/`
+  - (Optionally) commit each patch file to ensure you can back up if you mess up a step:
+     - `git commit patches/v8/`
+8. Update `patches/v8/README.md` with references to all new patches that have been added so that the next person will know which need to be removed.
+>>>>>>> .their
 9. Update Electron's submodule references:
   ```sh
   $ cd electron/vendor/node
@@ -87,8 +134,13 @@
   electron/vendor/libchromiumcontent$ git checkout upgrade-to-chromium-X
   electron/vendor/libchromiumcontent$ cd ../..
   electron$ git add vendor
+<<<<<<< .our
   electron$ git commit -m "update submodule references for node and libcc"
   electron$ git push origin upgrade-to-chromium-<VERSION>
+=======
+  electron$ git commit -m "update submodule referefences for node and libc"
+  electron$ git pso upgrade-to-chromium-62
+>>>>>>> .their
   electron$ script/bootstrap.py -d
   electron$ script/build.py -c -D
   ```
added in both
  our    100644 162300c6e17ce19fef7ee7c3baa1d74a2cb0dc7a docs/tutorial/application-architecture.md
  their  100644 7411f025823483cb2d755a4a033102e1ca1b1f36 docs/tutorial/application-architecture.md
@@ -39,7 +39,11 @@
 
 > #### Aside: Communication Between Processes
 > In Electron, we have several ways to communicate between the main process
+<<<<<<< .our
 and renderer processes, such as [`ipcRenderer`](../api/ipc-renderer.md) and
+=======
+and renderer processes. Like [`ipcRenderer`](../api/ipc-renderer.md) and
+>>>>>>> .their
 [`ipcMain`](../api/ipc-main.md) modules for sending messages, and the
 [remote](../api/remote.md) module for RPC style communication. There is also
 an FAQ entry on [how to share data between web pages][share-data].
added in both
  our    100644 22b861749cb9c5d7fe6982d273856fb3c4bf04c9 docs/tutorial/application-distribution.md
  their  100644 83d7c7bdfe6ac01d981e1bae47c8303f8de9e4fe docs/tutorial/application-distribution.md
@@ -141,7 +141,11 @@
 2. Create a new S3 bucket and create the following empty directory structure:
 
     ```sh
+<<<<<<< .our
     - electron/
+=======
+    - atom-shell/
+>>>>>>> .their
       - symbols/
       - dist/
     ```
@@ -150,7 +154,11 @@
 
   * `ELECTRON_GITHUB_TOKEN` - a token that can create releases on GitHub
   * `ELECTRON_S3_ACCESS_KEY`, `ELECTRON_S3_BUCKET`, `ELECTRON_S3_SECRET_KEY` -
+<<<<<<< .our
     the place where you'll upload Node.js headers as well as symbols
+=======
+    the place where you'll upload node.js headers as well as symbols
+>>>>>>> .their
   * `ELECTRON_RELEASE` - Set to `true` and the upload part will run, leave unset
     and `surf-build` will do CI-type checks, appropriate to run for every
     pull request.
added in both
  our    100644 16eb961fabe09001e621b834b297cada6918c102 docs/tutorial/code-signing.md
  their  100644 236ebe80ef02f38a094404a79f067120d32adaa7 docs/tutorial/code-signing.md
@@ -66,7 +66,11 @@
 See the [Windows Store Guide].
 
 [Apple Developer Program]: https://developer.apple.com/programs/
+<<<<<<< .our
 [`electron-builder`]: https://github.com/electron-userland/electron-builder
+=======
+[`electron-builder`]: https://github.com/electron/electron-builder
+>>>>>>> .their
 [`electron-forge`]: https://github.com/electron-userland/electron-forge
 [`electron-osx-sign`]: https://github.com/electron-userland/electron-osx-sign
 [`electron-packager`]: https://github.com/electron-userland/electron-packager
added in both
  our    100644 9629bb98282d080bc53171a619d83a193041a022 docs/tutorial/electron-versioning.md
  their  100644 883f20eefa9e59450efaed9fbd4dbafb2632b4e5 docs/tutorial/electron-versioning.md
@@ -49,7 +49,11 @@
 | Chromium version updates        |                                    | fix-related chromium patches  |
 
 
+<<<<<<< .our
 Note that most Chromium updates will be considered breaking. Fixes that can be backported will likely be cherry-picked as patches.
+=======
+Note that most chromium updates will be considered breaking. Fixes that can be backported will likely be cherry-picked as patches.
+>>>>>>> .their
 
 # Stabilization Branches
 
@@ -136,12 +140,20 @@
 
 We seek to increase clarity at all levels of the update and releases process. Starting with `2.0.0` we will require pull requests adhere to the [Conventional Commits](https://conventionalcommits.org/) spec, which can be summarized as follows:
 
+<<<<<<< .our
 * Commits that would result in a semver **major** bump must start their body with `BREAKING CHANGE:`.
+=======
+* Commits that would result in a semver **major** bump must start with `BREAKING CHANGE:`.
+>>>>>>> .their
 * Commits that would result in a semver **minor** bump must start with `feat:`.
 * Commits that would result in a semver **patch** bump must start with `fix:`.
 
 * We allow squashing of commits, provided that the squashed message adheres the the above message format.
+<<<<<<< .our
 * It is acceptable for some commits in a pull request to not include a semantic prefix, as long as the pull request title contains a meaningful encompassing semantic message.
+=======
+* It is acceptable for some commits in a pull request to not include a semantic prefix, as long as a later commit in the same pull request contains a meaningful encompassing semantic message.
+>>>>>>> .their
 
 # Versionless `master`
 
added in both
  our    100644 081c82031907404938387485dc95414c7de4e4db docs/tutorial/mac-app-store-submission-guide.md
  their  100644 e8812a85b57f6d10900b8932ebe790c499ba8476 docs/tutorial/mac-app-store-submission-guide.md
@@ -229,6 +229,20 @@
 See the [Enabling User-Selected File Access documentation][user-selected] for
 more details.
 
+<<<<<<< .our
+=======
+## Known issues
+
+### `shell.openItem(filePath)`
+
+This will fail when the app is signed for distribution in the Mac App Store.
+Subscribe to [#9005](https://github.com/electron/electron/issues/9005) for updates.
+
+#### Workaround
+
+`shell.openExternal('file://' + filePath)` will open the file in the default application as long as the extension is associated with an installed app.
+
+>>>>>>> .their
 ## Cryptographic Algorithms Used by Electron
 
 Depending on the country and region you are located, Mac App Store may require
added in both
  our    100644 77f5d9632f58a1874c3d962b981619872a73a8b2 docs/tutorial/security.md
  their  100644 70c455236e0b45e540eb55f168feb851625a7f08 docs/tutorial/security.md
@@ -31,7 +31,11 @@
 developers should be aware that upgrading is a serious undertaking - involving
 hand-editing dozens or even hundreds of files. Given the resources and
 contributions available today, Electron will often not be on the very latest
+<<<<<<< .our
 version of Chromium, lagging behind by several weeks or a few months.
+=======
+version of Chromium, lagging behind by either days or weeks.
+>>>>>>> .their
 
 We feel that our current system of updating the Chromium component strikes an
 appropriate balance between the resources we have available and the needs of
@@ -82,7 +86,11 @@
 11. [`<webview>`: Do not use `allowpopups`](#11-do-not-use-allowpopups)
 12. [`<webview>`: Verify options and params](#12-verify-webview-options-before-creation)
 13. [Disable or limit navigation](#13-disable-or-limit-navigation)
+<<<<<<< .our
 14. [Disable or limit creation of new windows](#14-disable-or-limit-creation-of-new-windows)
+=======
+14. [Disable or limit creation of new windows](#13-disable-or-limit-creation-of-new-windows)
+>>>>>>> .their
 
 ## 1) Only Load Secure Content
 
@@ -340,7 +348,16 @@
 Electron can load for that given web page. `https://your-page.com` should
 be allowed to load scripts from the origins you defined while scripts from
 `https://evil.attacker.com` should not be allowed to run. Defining a CSP is an
+<<<<<<< .our
 easy way to improve your application's security.
+=======
+easy way to improve your applications security.
+
+### How?
+
+Electron respects [the `Content-Security-Policy` HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy)
+and the respective `<meta>` tag.
+>>>>>>> .their
 
 The following CSP will allow Electron to execute scripts from the current
 website and from `apis.mydomain.com`.
@@ -353,6 +370,7 @@
 Content-Security-Policy: script-src 'self' https://apis.mydomain.com
 ```
 
+<<<<<<< .our
 ### CSP HTTP Header
 
 Electron respects the [`Content-Security-Policy` HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy)
@@ -379,6 +397,8 @@
 
 #### `webRequest.onHeadersReceived([filter, ]listener)`
 
+=======
+>>>>>>> .their
 
 ## 7) Override and Disable `eval`
 
@@ -446,7 +466,11 @@
 _Recommendation is Electron's default_
 
 Advanced users of Electron can enable experimental Chromium features using the
+<<<<<<< .our
 `experimentalFeatures` property.
+=======
+`experimentalFeatures` and `experimentalCanvasFeatures` properties.
+>>>>>>> .their
 
 ### Why?
 
@@ -612,13 +636,21 @@
 `https://google.com.attacker.com` through.
 
 ```js
+<<<<<<< .our
 const URL = require('url').URL
+=======
+const URL = require('url')
+>>>>>>> .their
 
 app.on('web-contents-created', (event, contents) => {
   contents.on('will-navigate', (event, navigationUrl) => {
     const parsedUrl = new URL(navigationUrl)
 
+<<<<<<< .our
     if (parsedUrl.origin !== 'https://my-own-server.com') {
+=======
+    if (parsedUrl.hostname !== 'my-own-server.com') {
+>>>>>>> .their
       event.preventDefault()
     }
   })
added in both
  our    100644 bf01dc632319a6dfa147fcbc8376686778e71714 docs/tutorial/using-pepper-flash-plugin.md
  their  100644 42ead0d694916bd22dad19e3487ccf73fc9f6190 docs/tutorial/using-pepper-flash-plugin.md
@@ -7,7 +7,11 @@
 ## Prepare a Copy of Flash Plugin
 
 On macOS and Linux, the details of the Pepper Flash plugin can be found by
+<<<<<<< .our
 navigating to `chrome://flash` in the Chrome browser. Its location and version
+=======
+navigating to `chrome://plugins` in the Chrome browser. Its location and version
+>>>>>>> .their
 are useful for Electron's Pepper Flash support. You can also copy it to another
 location.
 
added in both
  our    100644 1ceae13473af2a1ccd888924f342e5137c83e7e5 docs/tutorial/using-selenium-and-webdriver.md
  their  100644 5df8818d5b83c73469de4b3e5760baa5ee37591a docs/tutorial/using-selenium-and-webdriver.md
@@ -164,7 +164,11 @@
 [place](https://github.com/electron/electron/blob/master/docs/tutorial/application-distribution.md)
 your app source into Electron's resource directory.
 
+<<<<<<< .our
 Alternatively, pass an argument to run with your Electron binary that points to
+=======
+Alternatively, pass an argument to run with your electron binary that points to
+>>>>>>> .their
 your app's folder. This eliminates the need to copy-paste your app into
 Electron's resource directory.
 
added in both
  our    100644 944ddab2a3fd879044e31677e4bac2843fffbdee electron.gyp
  their  100644 52537ba11dadcd28a6c4b69a61268a64540cb29a electron.gyp
@@ -4,7 +4,11 @@
     'product_name%': 'Electron',
     'company_name%': 'GitHub, Inc',
     'company_abbr%': 'github',
+<<<<<<< .our
     'version%': '4.0.0-nightly.20180821',
+=======
+    'version%': '3.0.0-beta.7',
+>>>>>>> .their
     'js2c_input_dir': '<(SHARED_INTERMEDIATE_DIR)/js2c',
   },
   'includes': [
@@ -48,11 +52,14 @@
           'ENABLE_VIEW_API',
         ],
       }],  # enable_view_api
+<<<<<<< .our
       ['enable_pepper_flash==1', {
         'defines': [
           'ENABLE_PEPPER_FLASH',
         ],
       }],  # enable_pepper_flash
+=======
+>>>>>>> .their
     ],
   },
   'targets': [
@@ -163,6 +170,12 @@
           ],
         }],  # OS!="mac"
         ['OS=="win"', {
+<<<<<<< .our
+=======
+          'include_dirs': [
+            '<(libchromiumcontent_dir)/gen/ui/resources',
+          ],
+>>>>>>> .their
           'msvs_settings': {
             'VCManifestTool': {
               'EmbedManifest': 'true',
@@ -272,6 +285,11 @@
         'NODE_SHARED_MODE',
         'HAVE_OPENSSL=1',
         'HAVE_INSPECTOR=1',
+<<<<<<< .our
+=======
+        # This is defined in skia/skia_common.gypi.
+        'SK_SUPPORT_LEGACY_GETTOPDEVICE',
+>>>>>>> .their
         # Disable warnings for g_settings_list_schemas.
         'GLIB_DISABLE_DEPRECATION_WARNINGS',
         # Defined in Chromium but not exposed in its gyp file.
@@ -285,6 +303,12 @@
         # See Chromium src/third_party/protobuf/BUILD.gn
         'GOOGLE_PROTOBUF_NO_RTTI',
         'GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER',
+<<<<<<< .our
+=======
+
+        # Enables SkBitmap size 64 operations
+        'SK_SUPPORT_LEGACY_SAFESIZE64',
+>>>>>>> .their
       ],
       'sources': [
         '<@(lib_sources)',
@@ -333,6 +357,7 @@
             'vendor/pdf_viewer/pdf_viewer.gyp:pdf_viewer',
           ],
         }],  # enable_pdf_viewer
+<<<<<<< .our
         ['enable_pepper_flash==1', {
           'include_dirs': [
             '<(libchromiumcontent_src_dir)/chrome/browser/renderer_host/pepper',
@@ -352,6 +377,8 @@
             ],
           },
         }],  # enable_pepper_flash
+=======
+>>>>>>> .their
         ['libchromiumcontent_component', {
           'link_settings': {
             'libraries': [ '<@(libchromiumcontent_v8_libraries)' ],
@@ -363,9 +390,13 @@
           ],
           'link_settings': {
             'libraries': [
+<<<<<<< .our
               '-ldwmapi.lib',
               '-limm32.lib',
               '-lgdi32.lib',
+=======
+              '-limm32.lib',
+>>>>>>> .their
               '-loleacc.lib',
               '-lcomctl32.lib',
               '-lcomdlg32.lib',
added in both
  our    100644 86543a4db1195223a3556fa71583038f15d79a0a features.gypi
  their  100644 ae08bc63a5c3bec6a8b1e13e532538e40aed0b05 features.gypi
@@ -7,13 +7,19 @@
       'enable_pdf_viewer%': 0,  # FIXME(deepak1556)
       'enable_run_as_node%': 1,
       'enable_view_api%': 0,
+<<<<<<< .our
       'enable_pepper_flash%': 1,
+=======
+>>>>>>> .their
     },
     'enable_desktop_capturer%': '<(enable_desktop_capturer)',
     'enable_osr%': '<(enable_osr)',
     'enable_pdf_viewer%': '<(enable_pdf_viewer)',
     'enable_run_as_node%': '<(enable_run_as_node)',
     'enable_view_api%': '<(enable_view_api)',
+<<<<<<< .our
     'enable_pepper_flash%': '<(enable_pepper_flash)',
+=======
+>>>>>>> .their
   },
 }
added in both
  our    100644 f57860558f06b7e5d8a50f48cfc7e53044df0bc6 filenames.gypi
  their  100644 a9e59f5cdf4d17f6b669765af9a9e5e2ce55aeef filenames.gypi
@@ -98,6 +98,7 @@
       'default_app/main.js',
       'default_app/package.json',
       'default_app/renderer.js',
+<<<<<<< .our
       'default_app/styles.css',
       'node_modules/octicons/build/build.css',
       'node_modules/octicons/build/svg/gist.svg',
@@ -105,6 +106,8 @@
       'node_modules/octicons/build/svg/gear.svg',
       'node_modules/octicons/build/svg/star.svg',
       'node_modules/octicons/build/svg/gift.svg',
+=======
+>>>>>>> .their
     ],
     'lib_sources': [
       'atom/app/atom_content_client.cc',
@@ -317,8 +320,11 @@
       'atom/browser/request_context_delegate.h',
       'atom/browser/session_preferences.cc',
       'atom/browser/session_preferences.h',
+<<<<<<< .our
       'atom/browser/special_storage_policy.cc',
       'atom/browser/special_storage_policy.h',
+=======
+>>>>>>> .their
       'atom/browser/ui/accelerator_util.cc',
       'atom/browser/ui/accelerator_util.h',
       'atom/browser/ui/accelerator_util_mac.mm',
@@ -533,8 +539,11 @@
       'atom/common/platform_util_linux.cc',
       'atom/common/platform_util_mac.mm',
       'atom/common/platform_util_win.cc',
+<<<<<<< .our
       'atom/common/promise_util.h',
       'atom/common/promise_util.cc',
+=======
+>>>>>>> .their
       'atom/renderer/api/atom_api_renderer_ipc.h',
       'atom/renderer/api/atom_api_renderer_ipc.cc',
       'atom/renderer/api/atom_api_spell_check_client.cc',
@@ -608,6 +617,23 @@
       'chromium_src/chrome/browser/process_singleton_posix.cc',
       'chromium_src/chrome/browser/process_singleton_win.cc',
       'chromium_src/chrome/browser/process_singleton.h',
+<<<<<<< .our
+=======
+      'chromium_src/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.cc',
+      'chromium_src/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.h',
+      'chromium_src/chrome/browser/renderer_host/pepper/monitor_finder_mac.h',
+      'chromium_src/chrome/browser/renderer_host/pepper/monitor_finder_mac.mm',
+      'chromium_src/chrome/browser/renderer_host/pepper/pepper_broker_message_filter.cc',
+      'chromium_src/chrome/browser/renderer_host/pepper/pepper_broker_message_filter.h',
+      'chromium_src/chrome/browser/renderer_host/pepper/pepper_flash_browser_host.cc',
+      'chromium_src/chrome/browser/renderer_host/pepper/pepper_flash_browser_host.h',
+      'chromium_src/chrome/browser/renderer_host/pepper/pepper_flash_clipboard_message_filter.cc',
+      'chromium_src/chrome/browser/renderer_host/pepper/pepper_flash_clipboard_message_filter.h',
+      'chromium_src/chrome/browser/renderer_host/pepper/pepper_flash_drm_host.cc',
+      'chromium_src/chrome/browser/renderer_host/pepper/pepper_flash_drm_host.h',
+      'chromium_src/chrome/browser/renderer_host/pepper/pepper_isolated_file_system_message_filter.cc',
+      'chromium_src/chrome/browser/renderer_host/pepper/pepper_isolated_file_system_message_filter.h',
+>>>>>>> .their
       'chromium_src/chrome/browser/speech/tts_controller.h',
       'chromium_src/chrome/browser/speech/tts_controller_impl.cc',
       'chromium_src/chrome/browser/speech/tts_controller_impl.h',
@@ -645,6 +671,23 @@
       'chromium_src/chrome/common/widevine_cdm_constants.h',
       'chromium_src/chrome/renderer/media/chrome_key_systems.cc',
       'chromium_src/chrome/renderer/media/chrome_key_systems.h',
+<<<<<<< .our
+=======
+      'chromium_src/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc',
+      'chromium_src/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.h',
+      'chromium_src/chrome/renderer/pepper/pepper_flash_font_file_host.cc',
+      'chromium_src/chrome/renderer/pepper/pepper_flash_font_file_host.h',
+      'chromium_src/chrome/renderer/pepper/pepper_flash_fullscreen_host.cc',
+      'chromium_src/chrome/renderer/pepper/pepper_flash_fullscreen_host.h',
+      'chromium_src/chrome/renderer/pepper/pepper_flash_menu_host.cc',
+      'chromium_src/chrome/renderer/pepper/pepper_flash_menu_host.h',
+      'chromium_src/chrome/renderer/pepper/pepper_flash_renderer_host.cc',
+      'chromium_src/chrome/renderer/pepper/pepper_flash_renderer_host.h',
+      'chromium_src/chrome/renderer/pepper/pepper_helper.cc',
+      'chromium_src/chrome/renderer/pepper/pepper_helper.h',
+      'chromium_src/chrome/renderer/pepper/pepper_shared_memory_message_filter.cc',
+      'chromium_src/chrome/renderer/pepper/pepper_shared_memory_message_filter.h',
+>>>>>>> .their
       'chromium_src/chrome/renderer/printing/print_web_view_helper.cc',
       'chromium_src/chrome/renderer/printing/print_web_view_helper_linux.cc',
       'chromium_src/chrome/renderer/printing/print_web_view_helper_mac.mm',
added in both
  our    100644 66f6ae651acf10fb19b8ec068fc5280850dd3d91 lib/browser/api/app.js
  their  100644 a6d94a20a40051faf01c2c15cd6d492235d17a1d lib/browser/api/app.js
@@ -12,12 +12,36 @@
 const {EventEmitter} = require('events')
 
 let dockMenu = null
+<<<<<<< .our
+=======
+let readyPromise = null
+>>>>>>> .their
 
 // App is an EventEmitter.
 Object.setPrototypeOf(App.prototype, EventEmitter.prototype)
 EventEmitter.call(app)
 
 Object.assign(app, {
+<<<<<<< .our
+=======
+  whenReady () {
+    if (readyPromise !== null) {
+      return readyPromise
+    }
+
+    if (app.isReady()) {
+      readyPromise = Promise.resolve()
+    } else {
+      readyPromise = new Promise(resolve => {
+        // XXX(alexeykuzmin): Explicitly ignore any data
+        // passed to the event handler to avoid memory leaks.
+        app.once('ready', () => resolve())
+      })
+    }
+
+    return readyPromise
+  },
+>>>>>>> .their
   setApplicationMenu (menu) {
     return Menu.setApplicationMenu(menu)
   },
added in both
  our    100644 506e3525c10ce142cafe3fc1bf4de1c255e48503 lib/browser/api/menu.js
  their  100644 dcc446587913f37a58c86f4d1bf612371589960e lib/browser/api/menu.js
@@ -47,7 +47,11 @@
   this.delegate = delegate
 }
 
+<<<<<<< .our
 Menu.prototype.popup = function (options = {}) {
+=======
+Menu.prototype.popup = function (options) {
+>>>>>>> .their
   if (options == null || typeof options !== 'object') {
     throw new TypeError('Options must be an object')
   }
@@ -156,6 +160,7 @@
 
 Menu.buildFromTemplate = function (template) {
   if (!Array.isArray(template)) {
+<<<<<<< .our
     throw new TypeError('Invalid template for Menu: Menu template must be an array')
   }
   const menu = new Menu()
@@ -166,18 +171,36 @@
   const sorted = sortTemplate(filtered)
 
   sorted.forEach((item) => menu.append(new MenuItem(item)))
+=======
+    throw new TypeError('Invalid template for Menu')
+  }
+
+  const menu = new Menu()
+  const filtered = removeExtraSeparators(template)
+  const sorted = sortTemplate(filtered)
+
+  sorted.forEach((item) => {
+    if (typeof item !== 'object') {
+      throw new TypeError('Invalid template for MenuItem')
+    }
+    menu.append(new MenuItem(item))
+  })
+>>>>>>> .their
 
   return menu
 }
 
 /* Helper Functions */
 
+<<<<<<< .our
 // validate the template against having the wrong attribute
 function areValidTemplateItems (template) {
   return template.every(item =>
   item != null && typeof item === 'object' && (item.hasOwnProperty('label') || item.hasOwnProperty('role') || item.type === 'separator'))
 }
 
+=======
+>>>>>>> .their
 function sortTemplate (template) {
   const sorted = sortMenuItems(template)
   for (let id in sorted) {
added in both
  our    100644 3f2d470a270378ce1221c928e549d0857755fa09 lib/browser/api/net.js
  their  100644 54ef99d407ff3a7d7e853b8ccda350d5f8d47fa8 lib/browser/api/net.js
@@ -352,10 +352,13 @@
   abort () {
     this.urlRequest.cancel()
   }
+<<<<<<< .our
 
   getUploadProgress () {
     return this.urlRequest.getUploadProgress()
   }
+=======
+>>>>>>> .their
 }
 
 function writeAfterEndNT (self, error, callback) {
added in both
  our    100644 1e4029e39a981c85fb6ff18c5ccd52f81b3c56f2 lib/browser/guest-view-manager.js
  their  100644 191fa6f3f019bf776f48a18e67a3c4999b1991fe lib/browser/guest-view-manager.js
@@ -158,7 +158,11 @@
 const attachGuest = function (event, embedderFrameId, elementInstanceId, guestInstanceId, params) {
   const embedder = event.sender
   // Destroy the old guest when attaching.
+<<<<<<< .our
   const key = `${embedder.id}-${elementInstanceId}`
+=======
+  const key = `${embedder.getId()}-${elementInstanceId}`
+>>>>>>> .their
   const oldGuestInstanceId = embedderElementsMap[key]
   if (oldGuestInstanceId != null) {
     // Reattachment to the same guest is just a no-op.
@@ -181,7 +185,11 @@
 
   // If this guest is already attached to an element then remove it
   if (guestInstance.elementInstanceId) {
+<<<<<<< .our
     const oldKey = `${guestInstance.embedder.id}-${guestInstance.elementInstanceId}`
+=======
+    const oldKey = `${guestInstance.embedder.getId()}-${guestInstance.elementInstanceId}`
+>>>>>>> .their
     delete embedderElementsMap[oldKey]
 
     // Remove guest from embedder if moving across web views
@@ -269,7 +277,11 @@
   webViewManager.removeGuest(embedder, guestInstanceId)
   delete guestInstances[guestInstanceId]
 
+<<<<<<< .our
   const key = `${embedder.id}-${guestInstance.elementInstanceId}`
+=======
+  const key = `${embedder.getId()}-${guestInstance.elementInstanceId}`
+>>>>>>> .their
   delete embedderElementsMap[key]
 }
 
added in both
  our    100644 7253c1942b0956ae6b9b0c80a23470fc26669b8a lib/browser/guest-window-manager.js
  their  100644 7985dec4b9ef1ddfc7b88ea4885d7f7136060369 lib/browser/guest-window-manager.js
@@ -63,9 +63,14 @@
   }
 
   // Inherit certain option values from parent window
+<<<<<<< .our
   const webPreferences = embedder.getLastWebPreferences()
   for (const [name, value] of inheritedWebPreferences) {
     if (webPreferences[name] === value) {
+=======
+  for (const [name, value] of inheritedWebPreferences) {
+    if (embedder.getLastWebPreferences()[name] === value) {
+>>>>>>> .their
       options.webPreferences[name] = value
     }
   }
added in both
  our    100644 f03a23d2f6910d6555bb9469180d1b60b94bc313 lib/browser/objects-registry.js
  their  100644 3fb0923df10da778f3e6bd096e771038fd026cb8 lib/browser/objects-registry.js
@@ -2,10 +2,13 @@
 
 const v8Util = process.atomBinding('v8_util')
 
+<<<<<<< .our
 const getOwnerKey = (webContents, contextId) => {
   return `${webContents.id}-${contextId}`
 }
 
+=======
+>>>>>>> .their
 class ObjectsRegistry {
   constructor () {
     this.nextId = 0
@@ -15,7 +18,11 @@
     this.storage = {}
 
     // Stores the IDs of objects referenced by WebContents.
+<<<<<<< .our
     // (ownerKey) => [id]
+=======
+    // (webContentsContextId) => [id]
+>>>>>>> .their
     this.owners = {}
   }
 
@@ -26,10 +33,17 @@
     const id = this.saveToStorage(obj)
 
     // Add object to the set of referenced objects.
+<<<<<<< .our
     const ownerKey = getOwnerKey(webContents, contextId)
     let owner = this.owners[ownerKey]
     if (!owner) {
       owner = this.owners[ownerKey] = new Set()
+=======
+    const webContentsContextId = `${webContents.id}-${contextId}`
+    let owner = this.owners[webContentsContextId]
+    if (!owner) {
+      owner = this.owners[webContentsContextId] = new Set()
+>>>>>>> .their
       this.registerDeleteListener(webContents, contextId)
     }
     if (!owner.has(id)) {
@@ -50,8 +64,13 @@
   // Note that an object may be double-freed (cleared when page is reloaded, and
   // then garbage collected in old page).
   remove (webContents, contextId, id) {
+<<<<<<< .our
     const ownerKey = getOwnerKey(webContents, contextId)
     let owner = this.owners[ownerKey]
+=======
+    const webContentsContextId = `${webContents.id}-${contextId}`
+    let owner = this.owners[webContentsContextId]
+>>>>>>> .their
     if (owner) {
       // Remove the reference in owner.
       owner.delete(id)
@@ -62,13 +81,22 @@
 
   // Clear all references to objects refrenced by the WebContents.
   clear (webContents, contextId) {
+<<<<<<< .our
     const ownerKey = getOwnerKey(webContents, contextId)
     let owner = this.owners[ownerKey]
+=======
+    const webContentsContextId = `${webContents.id}-${contextId}`
+    let owner = this.owners[webContentsContextId]
+>>>>>>> .their
     if (!owner) return
 
     for (let id of owner) this.dereference(id)
 
+<<<<<<< .our
     delete this.owners[ownerKey]
+=======
+    delete this.owners[webContentsContextId]
+>>>>>>> .their
   }
 
   // Private: Saves the object into storage and assigns an ID for it.
@@ -87,7 +115,10 @@
 
   // Private: Dereference the object from store.
   dereference (id) {
+<<<<<<< .our
     // FIXME(MarshallOfSound): We should remove this once remote deref works well
+=======
+>>>>>>> .their
     if (process.env.ELECTRON_DISABLE_REMOTE_DEREFERENCING) return
 
     let pointer = this.storage[id]
@@ -101,7 +132,11 @@
     }
   }
 
+<<<<<<< .our
   // Private: Clear the storage when renderer process is destroyed.
+=======
+  // Private: Clear the storage when renderer process is destoryed.
+>>>>>>> .their
   registerDeleteListener (webContents, contextId) {
     const processId = webContents.getProcessId()
     const listener = (event, deletedProcessId) => {
added in both
  our    100644 ff9f77321de3a4145946b67f3fe2a597f98e2510 lib/browser/rpc-server.js
  their  100644 09ffb13dcb497383bd7d97e0d26ce72688028d11 lib/browser/rpc-server.js
@@ -171,6 +171,10 @@
 // Convert array of meta data from renderer into array of real values.
 const unwrapArgs = function (sender, contextId, args) {
   const metaToValue = function (meta) {
+<<<<<<< .our
+=======
+    let i, len, member, ref, returnValue
+>>>>>>> .their
     switch (meta.type) {
       case 'value':
         return meta.value
@@ -190,13 +194,24 @@
         let ret = {}
         Object.defineProperty(ret.constructor, 'name', { value: meta.name })
 
+<<<<<<< .our
         for (const {name, value} of meta.members) {
           ret[name] = metaToValue(value)
+=======
+        ref = meta.members
+        for (i = 0, len = ref.length; i < len; i++) {
+          member = ref[i]
+          ret[member.name] = metaToValue(member.value)
+>>>>>>> .their
         }
         return ret
       }
       case 'function-with-return-value':
+<<<<<<< .our
         const returnValue = metaToValue(meta.value)
+=======
+        returnValue = metaToValue(meta.value)
+>>>>>>> .their
         return function () {
           return returnValue
         }
@@ -210,9 +225,15 @@
           return rendererFunctions.get(objectId)
         }
 
+<<<<<<< .our
         const processId = sender.getProcessId()
         let callIntoRenderer = function (...args) {
           if (!sender.isDestroyed() && processId === sender.getProcessId()) {
+=======
+        const webContentsId = sender.getId()
+        let callIntoRenderer = function (...args) {
+          if (!sender.isDestroyed() && webContentsId === sender.getId()) {
+>>>>>>> .their
             sender.send('ELECTRON_RENDERER_CALLBACK', contextId, meta.id, valueToMeta(sender, contextId, args))
           } else {
             removeRemoteListenersAndLogWarning(this, meta, callIntoRenderer)
@@ -234,8 +255,14 @@
 // Call a function and send reply asynchronously if it's a an asynchronous
 // style function and the caller didn't pass a callback.
 const callFunction = function (event, contextId, func, caller, args) {
+<<<<<<< .our
   const funcMarkedAsync = v8Util.getHiddenValue(func, 'asynchronous')
   const funcPassedCallback = typeof args[args.length - 1] === 'function'
+=======
+  let err, funcMarkedAsync, funcName, funcPassedCallback, ref, ret
+  funcMarkedAsync = v8Util.getHiddenValue(func, 'asynchronous')
+  funcPassedCallback = typeof args[args.length - 1] === 'function'
+>>>>>>> .their
   try {
     if (funcMarkedAsync && !funcPassedCallback) {
       args.push(function (ret) {
@@ -243,15 +270,24 @@
       })
       func.apply(caller, args)
     } else {
+<<<<<<< .our
       const ret = func.apply(caller, args)
+=======
+      ret = func.apply(caller, args)
+>>>>>>> .their
       event.returnValue = valueToMeta(event.sender, contextId, ret, true)
     }
   } catch (error) {
     // Catch functions thrown further down in function invocation and wrap
     // them with the function name so it's easier to trace things like
     // `Error processing argument -1.`
+<<<<<<< .our
     const funcName = func.name || 'anonymous'
     const err = new Error(`Could not call remote function '${funcName}'. Check that the function signature is correct. Underlying error: ${error.message}`)
+=======
+    funcName = ((ref = func.name) != null) ? ref : 'anonymous'
+    err = new Error(`Could not call remote function '${funcName}'. Check that the function signature is correct. Underlying error: ${error.message}`)
+>>>>>>> .their
     err.cause = error
     throw err
   }
@@ -302,7 +338,14 @@
       throwRPCError(`Cannot call constructor on missing remote object ${id}`)
     }
 
+<<<<<<< .our
     event.returnValue = valueToMeta(event.sender, contextId, new constructor(...args))
+=======
+    // Call new with array of arguments.
+    // http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible
+    let obj = new (Function.prototype.bind.apply(constructor, [null].concat(args)))()
+    event.returnValue = valueToMeta(event.sender, contextId, obj)
+>>>>>>> .their
   } catch (error) {
     event.returnValue = exceptionToMeta(event.sender, contextId, error)
   }
@@ -332,7 +375,14 @@
       throwRPCError(`Cannot call constructor '${method}' on missing remote object ${id}`)
     }
 
+<<<<<<< .our
     event.returnValue = valueToMeta(event.sender, contextId, new object[method](...args))
+=======
+    // Call new with array of arguments.
+    let constructor = object[method]
+    let obj = new (Function.prototype.bind.apply(constructor, [null].concat(args)))()
+    event.returnValue = valueToMeta(event.sender, contextId, obj)
+>>>>>>> .their
   } catch (error) {
     event.returnValue = exceptionToMeta(event.sender, contextId, error)
   }
@@ -454,6 +504,7 @@
   event.returnValue = {
     preloadSrc: preloadSrc,
     preloadError: preloadError,
+<<<<<<< .our
     process: {
       arch: process.arch,
       platform: process.platform,
@@ -461,5 +512,10 @@
       version: process.version,
       versions: process.versions
     }
+=======
+    webContentsId: event.sender.getId(),
+    platform: process.platform,
+    env: process.env
+>>>>>>> .their
   }
 })
added in both
  our    100644 b24f9e28b879154457be0342b9d4b44c0e651253 lib/renderer/security-warnings.js
  their  100644 41557164ce716dec6d934ce49fe654a22c6658e3 lib/renderer/security-warnings.js
@@ -210,7 +210,12 @@
    */
   warnAboutExperimentalFeatures: () => {
     const webPreferences = getWebPreferences()
+<<<<<<< .our
     if (!webPreferences || (!webPreferences.experimentalFeatures)) {
+=======
+    if (!webPreferences || (!webPreferences.experimentalFeatures &&
+        !webPreferences.experimentalCanvasFeatures)) {
+>>>>>>> .their
       return
     }
 
added in both
  our    100644 574a2b545597f9d1c05ec9b7147585063e90ae89 lib/renderer/web-view/web-view.js
  their  100644 9e7f15bf084bbef671daa348b4264364c56837fc lib/renderer/web-view/web-view.js
@@ -131,7 +131,11 @@
   }
 
   onElementResize () {
+<<<<<<< .our
     const resizeEvent = new Event('resize')
+=======
+    const resizeEvent = new Event('resize', { bubbles: true })
+>>>>>>> .their
     resizeEvent.newWidth = this.webviewNode.clientWidth
     resizeEvent.newHeight = this.webviewNode.clientHeight
     this.dispatchEvent(resizeEvent)
@@ -288,7 +292,10 @@
     'inspectElement',
     'setAudioMuted',
     'isAudioMuted',
+<<<<<<< .our
     'isCurrentlyAudible',
+=======
+>>>>>>> .their
     'undo',
     'redo',
     'cut',
@@ -302,6 +309,10 @@
     'replaceMisspelling',
     'findInPage',
     'stopFindInPage',
+<<<<<<< .our
+=======
+    'getId',
+>>>>>>> .their
     'downloadURL',
     'inspectServiceWorker',
     'print',
added in both
  our    100644 30a3fa55216f6bf7588c3accc07b150a31163b7c lib/sandboxed_renderer/init.js
  their  100644 2b0d3b81ceef5480c28e8da249e38d8350808d15 lib/sandboxed_renderer/init.js
@@ -36,9 +36,21 @@
 ])
 
 const {
+<<<<<<< .our
   preloadSrc, preloadError, process: processProps
 } = electron.ipcRenderer.sendSync('ELECTRON_BROWSER_SANDBOX_LOAD')
 
+=======
+  preloadSrc, preloadError, webContentsId, platform, env
+} = electron.ipcRenderer.sendSync('ELECTRON_BROWSER_SANDBOX_LOAD')
+
+Object.defineProperty(process, 'webContentsId', {
+  configurable: false,
+  writable: false,
+  value: webContentsId
+})
+
+>>>>>>> .their
 require('../renderer/web-frame-init')()
 
 // Pass different process object to the preload script(which should not have
@@ -49,6 +61,7 @@
 preloadProcess.getHeapStatistics = () => binding.getHeapStatistics()
 preloadProcess.getProcessMemoryInfo = () => binding.getProcessMemoryInfo()
 preloadProcess.getSystemMemoryInfo = () => binding.getSystemMemoryInfo()
+<<<<<<< .our
 preloadProcess.getCPUUsage = () => binding.getCPUUsage()
 preloadProcess.getIOCounters = () => binding.getIOCounters()
 preloadProcess.argv = process.argv = binding.getArgv()
@@ -59,6 +72,12 @@
 preloadProcess.type = 'renderer'
 Object.assign(preloadProcess, processProps)
 Object.assign(process, processProps)
+=======
+preloadProcess.argv = process.argv = binding.getArgv()
+preloadProcess.execPath = process.execPath = binding.getExecPath()
+preloadProcess.platform = process.platform = platform
+preloadProcess.env = process.env = env
+>>>>>>> .their
 
 process.on('exit', () => preloadProcess.emit('exit'))
 
@@ -112,8 +131,15 @@
   ${preloadSrc}
   })`
 
+<<<<<<< .our
   // eval in window scope
   const preloadFn = binding.createPreloadScript(preloadWrapperSrc)
+=======
+  // eval in window scope:
+  // http://www.ecma-international.org/ecma-262/5.1/#sec-10.4.2
+  const geval = eval
+  const preloadFn = geval(preloadWrapperSrc)
+>>>>>>> .their
   const {setImmediate, clearImmediate} = require('timers')
   preloadFn(preloadRequire, preloadProcess, Buffer, global, setImmediate, clearImmediate)
 } else if (preloadError) {
added in both
  our    100644 bac533f6786ffad78ef1e711bc4a94d5b51cd36d native_mate/native_mate/dictionary.cc
  their  100644 3caff114597440fecf0494c8565b4524602f2694 native_mate/native_mate/dictionary.cc
@@ -6,6 +6,7 @@
 
 namespace mate {
 
+<<<<<<< .our
 Dictionary::Dictionary() : isolate_(NULL) {}
 
 Dictionary::Dictionary(v8::Isolate* isolate, v8::Local<v8::Object> object)
@@ -14,6 +15,20 @@
 Dictionary::Dictionary(const Dictionary& other) = default;
 
 Dictionary::~Dictionary() = default;
+=======
+Dictionary::Dictionary()
+    : isolate_(NULL) {
+}
+
+Dictionary::Dictionary(v8::Isolate* isolate,
+                       v8::Local<v8::Object> object)
+    : isolate_(isolate),
+      object_(object) {
+}
+
+Dictionary::~Dictionary() {
+}
+>>>>>>> .their
 
 Dictionary Dictionary::CreateEmpty(v8::Isolate* isolate) {
   return Dictionary(isolate, v8::Object::New(isolate));
@@ -24,7 +39,11 @@
 }
 
 v8::Local<v8::Value> Converter<Dictionary>::ToV8(v8::Isolate* isolate,
+<<<<<<< .our
                                                  Dictionary val) {
+=======
+                                                  Dictionary val) {
+>>>>>>> .their
   return val.GetHandle();
 }
 
added in both
  our    100644 63a1350597604f9a0ab3233f7f6f24b0d3a81c22 native_mate/native_mate/dictionary.h
  their  100644 9e80cb99acfdbedbeacc6a98d2398f9a2c17713f native_mate/native_mate/dictionary.h
@@ -35,12 +35,19 @@
  public:
   Dictionary();
   Dictionary(v8::Isolate* isolate, v8::Local<v8::Object> object);
+<<<<<<< .our
   Dictionary(const Dictionary& other);
+=======
+>>>>>>> .their
   virtual ~Dictionary();
 
   static Dictionary CreateEmpty(v8::Isolate* isolate);
 
+<<<<<<< .our
   template <typename T>
+=======
+  template<typename T>
+>>>>>>> .their
   bool Get(const base::StringPiece& key, T* out) const {
     // Check for existence before getting, otherwise this method will always
     // returns true when T == v8::Local<v8::Value>.
@@ -55,30 +62,54 @@
     return ConvertFromV8(isolate_, val, out);
   }
 
+<<<<<<< .our
   template <typename T>
+=======
+  template<typename T>
+>>>>>>> .their
   bool GetHidden(const base::StringPiece& key, T* out) const {
     v8::Local<v8::Context> context = isolate_->GetCurrentContext();
     v8::Local<v8::Private> privateKey =
         v8::Private::ForApi(isolate_, StringToV8(isolate_, key));
     v8::Local<v8::Value> value;
+<<<<<<< .our
     v8::Maybe<bool> result = GetHandle()->HasPrivate(context, privateKey);
+=======
+    v8::Maybe<bool> result =
+        GetHandle()->HasPrivate(context, privateKey);
+>>>>>>> .their
     if (internal::IsTrue(result) &&
         GetHandle()->GetPrivate(context, privateKey).ToLocal(&value))
       return ConvertFromV8(isolate_, value, out);
     return false;
   }
 
+<<<<<<< .our
   template <typename T>
+=======
+  template<typename T>
+>>>>>>> .their
   bool Set(const base::StringPiece& key, const T& val) {
     v8::Local<v8::Value> v8_value;
     if (!TryConvertToV8(isolate_, val, &v8_value))
       return false;
+<<<<<<< .our
     v8::Maybe<bool> result = GetHandle()->Set(
         isolate_->GetCurrentContext(), StringToV8(isolate_, key), v8_value);
     return !result.IsNothing() && result.FromJust();
   }
 
   template <typename T>
+=======
+    v8::Maybe<bool> result =
+        GetHandle()->Set(isolate_->GetCurrentContext(),
+                         StringToV8(isolate_, key),
+                         v8_value);
+    return !result.IsNothing() && result.FromJust();
+  }
+
+  template<typename T>
+>>>>>>> .their
   bool SetHidden(const base::StringPiece& key, T val) {
     v8::Local<v8::Value> v8_value;
     if (!TryConvertToV8(isolate_, val, &v8_value))
@@ -91,11 +122,16 @@
     return !result.IsNothing() && result.FromJust();
   }
 
+<<<<<<< .our
   template <typename T>
+=======
+  template<typename T>
+>>>>>>> .their
   bool SetReadOnly(const base::StringPiece& key, T val) {
     v8::Local<v8::Value> v8_value;
     if (!TryConvertToV8(isolate_, val, &v8_value))
       return false;
+<<<<<<< .our
     v8::Maybe<bool> result = GetHandle()->DefineOwnProperty(
         isolate_->GetCurrentContext(), StringToV8(isolate_, key), v8_value,
         v8::ReadOnly);
@@ -103,6 +139,17 @@
   }
 
   template <typename T>
+=======
+    v8::Maybe<bool> result =
+        GetHandle()->DefineOwnProperty(isolate_->GetCurrentContext(),
+                                       StringToV8(isolate_, key),
+                                       v8_value,
+                                       v8::ReadOnly);
+    return !result.IsNothing() && result.FromJust();
+  }
+
+  template<typename T>
+>>>>>>> .their
   bool SetMethod(const base::StringPiece& key, const T& callback) {
     return GetHandle()->Set(
         StringToV8(isolate_, key),
@@ -128,9 +175,16 @@
   v8::Local<v8::Object> object_;
 };
 
+<<<<<<< .our
 template <>
 struct Converter<Dictionary> {
   static v8::Local<v8::Value> ToV8(v8::Isolate* isolate, Dictionary val);
+=======
+template<>
+struct Converter<Dictionary> {
+  static v8::Local<v8::Value> ToV8(v8::Isolate* isolate,
+                                    Dictionary val);
+>>>>>>> .their
   static bool FromV8(v8::Isolate* isolate,
                      v8::Local<v8::Value> val,
                      Dictionary* out);
added in both
  our    100644 6a5e5a0253f4f465747fd0a4d96aad2336784d9c native_mate/native_mate/persistent_dictionary.cc
  their  100644 fd68cdced275ed4848a9b866caea02b50fff8613 native_mate/native_mate/persistent_dictionary.cc
@@ -6,7 +6,12 @@
 
 namespace mate {
 
+<<<<<<< .our
 PersistentDictionary::PersistentDictionary() {}
+=======
+PersistentDictionary::PersistentDictionary() {
+}
+>>>>>>> .their
 
 PersistentDictionary::PersistentDictionary(v8::Isolate* isolate,
                                            v8::Local<v8::Object> object)
@@ -14,10 +19,15 @@
   isolate_ = isolate;
 }
 
+<<<<<<< .our
 PersistentDictionary::PersistentDictionary(const PersistentDictionary& other) =
     default;
 
 PersistentDictionary::~PersistentDictionary() {}
+=======
+PersistentDictionary::~PersistentDictionary() {
+}
+>>>>>>> .their
 
 v8::Local<v8::Object> PersistentDictionary::GetHandle() const {
   return handle_->NewHandle();
added in both
  our    100644 7a83916f1505d53a8694c9d438485177d6cb539e native_mate/native_mate/persistent_dictionary.h
  their  100644 26c8998632bd80876f5448a86a8f57b25e73801e native_mate/native_mate/persistent_dictionary.h
@@ -16,16 +16,27 @@
  public:
   PersistentDictionary();
   PersistentDictionary(v8::Isolate* isolate, v8::Local<v8::Object> object);
+<<<<<<< .our
   PersistentDictionary(const PersistentDictionary& other);
   ~PersistentDictionary() override;
+=======
+  virtual ~PersistentDictionary();
+>>>>>>> .their
 
   v8::Local<v8::Object> GetHandle() const override;
 
  private:
+<<<<<<< .our
   scoped_refptr<RefCountedPersistent<v8::Object>> handle_;
 };
 
 template <>
+=======
+  scoped_refptr<RefCountedPersistent<v8::Object> > handle_;
+};
+
+template<>
+>>>>>>> .their
 struct Converter<PersistentDictionary> {
   static bool FromV8(v8::Isolate* isolate,
                      v8::Local<v8::Value> val,
added in both
  our    100644 faba6f332e4ac31eb55f08e9a76ae216f0916311 native_mate/native_mate/wrappable.h
  their  100644 489c5817481b8663ffc2500ec89bf8c1e72dea0e native_mate/native_mate/wrappable.h
@@ -6,9 +6,15 @@
 #define NATIVE_MATE_WRAPPABLE_H_
 
 #include "base/bind.h"
+<<<<<<< .our
 #include "gin/per_isolate_data.h"
 #include "native_mate/constructor.h"
 #include "native_mate/converter.h"
+=======
+#include "native_mate/converter.h"
+#include "native_mate/constructor.h"
+#include "gin/per_isolate_data.h"
+>>>>>>> .their
 
 namespace mate {
 
@@ -18,25 +24,42 @@
 
 }  // namespace internal
 
+<<<<<<< .our
 template <typename T>
+=======
+template<typename T>
+>>>>>>> .their
 class Wrappable : public WrappableBase {
  public:
   Wrappable() {}
 
+<<<<<<< .our
   template <typename Sig>
+=======
+  template<typename Sig>
+>>>>>>> .their
   static void SetConstructor(v8::Isolate* isolate,
                              const base::Callback<Sig>& constructor) {
     v8::Local<v8::FunctionTemplate> templ = CreateFunctionTemplate(
         isolate, base::Bind(&internal::InvokeNew<Sig>, constructor));
     templ->InstanceTemplate()->SetInternalFieldCount(1);
     T::BuildPrototype(isolate, templ);
+<<<<<<< .our
     gin::PerIsolateData::From(isolate)->SetFunctionTemplate(&kWrapperInfo,
                                                             templ);
+=======
+    gin::PerIsolateData::From(isolate)->SetFunctionTemplate(
+        &kWrapperInfo, templ);
+>>>>>>> .their
   }
 
   static v8::Local<v8::FunctionTemplate> GetConstructor(v8::Isolate* isolate) {
     // Fill the object template.
+<<<<<<< .our
     auto* data = gin::PerIsolateData::From(isolate);
+=======
+    auto data = gin::PerIsolateData::From(isolate);
+>>>>>>> .their
     auto templ = data->GetFunctionTemplate(&kWrapperInfo);
     if (templ.IsEmpty()) {
       templ = v8::FunctionTemplate::New(isolate);
@@ -55,9 +78,14 @@
     // |wrapper| may be empty in some extreme cases, e.g., when
     // Object.prototype.constructor is overwritten.
     v8::Local<v8::Object> wrapper;
+<<<<<<< .our
     if (!templ->InstanceTemplate()
              ->NewInstance(isolate->GetCurrentContext())
              .ToLocal(&wrapper)) {
+=======
+    if (!templ->InstanceTemplate()->NewInstance(
+            isolate->GetCurrentContext()).ToLocal(&wrapper)) {
+>>>>>>> .their
       // The current wrappable object will be no longer managed by V8. Delete
       // this now.
       delete this;
@@ -73,8 +101,13 @@
 };
 
 // static
+<<<<<<< .our
 template <typename T>
 gin::WrapperInfo Wrappable<T>::kWrapperInfo = {gin::kEmbedderNativeGin};
+=======
+template<typename T>
+gin::WrapperInfo Wrappable<T>::kWrapperInfo = { gin::kEmbedderNativeGin };
+>>>>>>> .their
 
 // This converter handles any subclass of Wrappable.
 template <typename T>
@@ -89,8 +122,13 @@
   }
 
   static bool FromV8(v8::Isolate* isolate, v8::Local<v8::Value> val, T** out) {
+<<<<<<< .our
     *out = static_cast<T*>(
         static_cast<WrappableBase*>(internal::FromV8Impl(isolate, val)));
+=======
+    *out = static_cast<T*>(static_cast<WrappableBase*>(
+        internal::FromV8Impl(isolate, val)));
+>>>>>>> .their
     return *out != nullptr;
   }
 };
added in both
  our    100644 b1d8824658ea05c277e82d1ac6c6febab9c55030 package-lock.json
  their  100644 5951cdf249d38722c0f19e847ce3f16c750f468f package-lock.json
@@ -1,13 +1,23 @@
 {
   "name": "electron",
+<<<<<<< .our
   "version": "4.0.0-nightly.20180819",
+=======
+  "version": "3.0.0-nightly.20180821",
+>>>>>>> .their
   "lockfileVersion": 1,
   "requires": true,
   "dependencies": {
     "@types/node": {
+<<<<<<< .our
       "version": "7.0.69",
       "resolved": "https://registry.npmjs.org/@types/node/-/node-7.0.69.tgz",
       "integrity": "sha512-S5NC8HV6HnRipg8nC0j30TPl7ktXjRTKqgyINLNe8K/64UJUI8Lq0sRopXC0hProsV2F5ibj8IqPkl1xpGggrw==",
+=======
+      "version": "7.0.68",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-7.0.68.tgz",
+      "integrity": "sha512-ym3LNHwJQU0XDyPrTK6NHJTH5YmGKKe0k56in6pg+Wx4HD8fiKrt8xute6/unHvHujCfzmOQTGz1NoEKgFF5Mw==",
+>>>>>>> .their
       "dev": true
     },
     "JSONStream": {
@@ -30,7 +40,11 @@
     "abbrev": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
+<<<<<<< .our
       "integrity": "sha1-+PLIh60Qv2f2NPAFtph/7TF5qsg=",
+=======
+      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==",
+>>>>>>> .their
       "dev": true
     },
     "accepts": {
@@ -192,7 +206,11 @@
         "string-width": {
           "version": "2.1.1",
           "resolved": "https://registry.npmjs.org/string-width/-/string-width-2.1.1.tgz",
+<<<<<<< .our
           "integrity": "sha1-q5Pyeo3BPSjKyBXEYhQ6bZASrp4=",
+=======
+          "integrity": "sha512-nOqH59deCq9SRHlxq1Aw85Jnt4w6KvLKqWVik6oA9ZklXLNIOlqg4F2yrT1MVaTjAqvVwdfeZ7w7aCvJD7ugkw==",
+>>>>>>> .their
           "dev": true,
           "requires": {
             "is-fullwidth-code-point": "2.0.0",
@@ -231,7 +249,11 @@
     "anymatch": {
       "version": "1.3.2",
       "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-1.3.2.tgz",
+<<<<<<< .our
       "integrity": "sha1-VT3Lj5HjyImEXf26NMd3IbkLnXo=",
+=======
+      "integrity": "sha512-0XNayC8lTHQ2OI8aljNCN3sSx6hsr/1+rlcDAotXJR7C1oZZHCNsfpbKwMjRA3Uqb5tF1Rae2oloTr4xpq+WjA==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "micromatch": "2.3.11",
@@ -239,6 +261,7 @@
       }
     },
     "arch": {
+<<<<<<< .our
       "version": "2.1.1",
       "resolved": "https://registry.npmjs.org/arch/-/arch-2.1.1.tgz",
       "integrity": "sha512-BLM56aPo9vLLFVa8+/+pJLnrZ7QGGTVHWsCwieAWT9o9K8UeGaQbzZbGoabWLOo2ksBCztoXdqBZBplqLDDCSg==",
@@ -248,6 +271,11 @@
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/arg/-/arg-2.0.0.tgz",
       "integrity": "sha512-XxNTUzKnz1ctK3ZIcI2XUPlD96wbHP2nGqkPKpvk/HNRlPveYrXIVSTk9m3LcqOgDPg3B1nMvdV/K8wZd7PG4w==",
+=======
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/arch/-/arch-2.1.0.tgz",
+      "integrity": "sha1-NhOqRhSQZLPB8GB5Gb8dR4boKIk=",
+>>>>>>> .their
       "dev": true
     },
     "argparse": {
@@ -326,7 +354,11 @@
     "arr-flatten": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/arr-flatten/-/arr-flatten-1.1.0.tgz",
+<<<<<<< .our
       "integrity": "sha1-NgSLv/TntH4TZkQxbJlmnqWukfE=",
+=======
+      "integrity": "sha512-L3hKV5R/p5o81R7O02IGnwpDmkp6E982XhtbuwSe3O4qOtMMMtodicASA1Cny2U+aCXcNpml+m4dPsvsJ3jatg==",
+>>>>>>> .their
       "dev": true
     },
     "array-filter": {
@@ -611,7 +643,11 @@
     "bn.js": {
       "version": "4.11.8",
       "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-4.11.8.tgz",
+<<<<<<< .our
       "integrity": "sha1-LN4J617jQfSEdGuwMJsyU7GxRC8=",
+=======
+      "integrity": "sha512-ItfYfPLkWHUjckQCk8xC+LwxgK8NYcXywGigJgSwOP8Y2iyWT4f2vsZnoOXTTbo+o5yXmIUJ4gn5538SO5S3gA==",
+>>>>>>> .their
       "dev": true
     },
     "boolbase": {
@@ -691,7 +727,11 @@
         "string-width": {
           "version": "2.1.1",
           "resolved": "https://registry.npmjs.org/string-width/-/string-width-2.1.1.tgz",
+<<<<<<< .our
           "integrity": "sha1-q5Pyeo3BPSjKyBXEYhQ6bZASrp4=",
+=======
+          "integrity": "sha512-nOqH59deCq9SRHlxq1Aw85Jnt4w6KvLKqWVik6oA9ZklXLNIOlqg4F2yrT1MVaTjAqvVwdfeZ7w7aCvJD7ugkw==",
+>>>>>>> .their
           "dev": true,
           "requires": {
             "is-fullwidth-code-point": "2.0.0",
@@ -834,7 +874,11 @@
         "glob": {
           "version": "7.1.2",
           "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.2.tgz",
+<<<<<<< .our
           "integrity": "sha1-wZyd+aAocC1nhhI4SmVSQExjbRU=",
+=======
+          "integrity": "sha512-MJTUg1kjuLeQCJ+ccE4Vpa6kKVXkPYJ2mOCQyUuKLcLQsdrMCpBPUi8qVE6+YuaJkozeA9NusTAw3hLr8Xe5EQ==",
+>>>>>>> .their
           "dev": true,
           "requires": {
             "fs.realpath": "1.0.0",
@@ -1159,7 +1203,11 @@
     "check-for-leaks": {
       "version": "1.2.0",
       "resolved": "https://registry.npmjs.org/check-for-leaks/-/check-for-leaks-1.2.0.tgz",
+<<<<<<< .our
       "integrity": "sha1-6jtQFk6XV3kzLGKBMZX/jGr4Jsw=",
+=======
+      "integrity": "sha512-bJ2Bzo6RtsYqamMnsjtVzowGvBNVrR5IPK8Bd+lx5W1TNgOKMsF+AyNHVkqFqO7cpDZNfny5SaqH6gEovpV5Gw==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "anymatch": "1.3.2",
@@ -1239,7 +1287,11 @@
     "cipher-base": {
       "version": "1.0.4",
       "resolved": "https://registry.npmjs.org/cipher-base/-/cipher-base-1.0.4.tgz",
+<<<<<<< .our
       "integrity": "sha1-h2Dk7MJy9MNjUy+SbYdKriwTl94=",
+=======
+      "integrity": "sha512-Kkht5ye6ZGmwv40uUDZztayT2ThLQGfnj/T71N/XzeZeo3nf8foyW7zGTsPYkEya3m5f3cAypH+qe7YOrM1U2Q==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "inherits": "2.0.3",
@@ -1249,7 +1301,11 @@
     "circular-json": {
       "version": "0.3.3",
       "resolved": "https://registry.npmjs.org/circular-json/-/circular-json-0.3.3.tgz",
+<<<<<<< .our
       "integrity": "sha1-gVyZ6oT2gJUp0vRXkb34JxE1LWY=",
+=======
+      "integrity": "sha512-UZK3NBx2Mca+b5LsG7bY183pHWt5Y1xts4P3Pz7ENTwGVnJOUWbRb3ocjvX7hx9tq/yTAdclXm9sZ38gNuem4A==",
+>>>>>>> .their
       "dev": true
     },
     "clang-format": {
@@ -1323,7 +1379,11 @@
       "integrity": "sha512-2WNImOvCRe6r63Gk9pShfkwXsVtKCroMAevIbiae021mS850UkWPbevxsBz3tnvjZIEGvlwaqCPsw+4ulzNgJA==",
       "dev": true,
       "requires": {
+<<<<<<< .our
         "arch": "2.1.1",
+=======
+        "arch": "2.1.0",
+>>>>>>> .their
         "execa": "0.8.0"
       },
       "dependencies": {
@@ -1442,6 +1502,7 @@
       }
     },
     "compressible": {
+<<<<<<< .our
       "version": "2.0.14",
       "resolved": "https://registry.npmjs.org/compressible/-/compressible-2.0.14.tgz",
       "integrity": "sha1-MmxfUH+7BV9UEWeCuWmoG2einac=",
@@ -1462,15 +1523,45 @@
       "version": "1.7.3",
       "resolved": "https://registry.npmjs.org/compression/-/compression-1.7.3.tgz",
       "integrity": "sha512-HSjyBG5N1Nnz7tF2+O7A9XUhyjru71/fwgNb7oIsEVHR0WShfs2tIS/EySLgiTe98aOK18YDlMXpzjCXY/n9mg==",
+=======
+      "version": "2.0.13",
+      "resolved": "https://registry.npmjs.org/compressible/-/compressible-2.0.13.tgz",
+      "integrity": "sha1-DRAgq5JLL9tNYnmHXH1tq6a6p6k=",
+      "dev": true,
+      "requires": {
+        "mime-db": "1.33.0"
+      }
+    },
+    "compression": {
+      "version": "1.7.2",
+      "resolved": "http://registry.npmjs.org/compression/-/compression-1.7.2.tgz",
+      "integrity": "sha1-qv+81qr4VLROuygDU9WtFlH1mmk=",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "accepts": "1.3.5",
         "bytes": "3.0.0",
+<<<<<<< .our
         "compressible": "2.0.14",
         "debug": "2.6.9",
         "on-headers": "1.0.1",
         "safe-buffer": "5.1.2",
         "vary": "1.1.2"
+=======
+        "compressible": "2.0.13",
+        "debug": "2.6.9",
+        "on-headers": "1.0.1",
+        "safe-buffer": "5.1.1",
+        "vary": "1.1.2"
+      },
+      "dependencies": {
+        "safe-buffer": {
+          "version": "5.1.1",
+          "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.1.tgz",
+          "integrity": "sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg==",
+          "dev": true
+        }
+>>>>>>> .their
       }
     },
     "concat-map": {
@@ -1535,7 +1626,11 @@
         "dot-prop": {
           "version": "4.2.0",
           "resolved": "https://registry.npmjs.org/dot-prop/-/dot-prop-4.2.0.tgz",
+<<<<<<< .our
           "integrity": "sha1-HxngwuGqDjJ5fEl5nyg3rGr2nFc=",
+=======
+          "integrity": "sha512-tUMXrxlExSW6U2EXiiKGSBVdYgtV8qlHL+C10TsW4PURY/ic+eaysnSkwB4kA/mBlCyy/IKDJ+Lc3wbWeaXtuQ==",
+>>>>>>> .their
           "dev": true,
           "requires": {
             "is-obj": "1.0.1"
@@ -1836,7 +1931,11 @@
         "boom": {
           "version": "5.2.0",
           "resolved": "https://registry.npmjs.org/boom/-/boom-5.2.0.tgz",
+<<<<<<< .our
           "integrity": "sha1-XdnabuOl8wIHdDYpDLcX0/SlTgI=",
+=======
+          "integrity": "sha512-Z5BTk6ZRe4tXXQlkqftmsAUANpXmuwlsF5Oov8ThoMbQRzdGTA1ngYRW160GexgOgjsFOKJz0LYhoNi+2AMBUw==",
+>>>>>>> .their
           "dev": true,
           "requires": {
             "hoek": "4.2.1"
@@ -1960,7 +2059,11 @@
     "debug": {
       "version": "2.6.9",
       "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
+<<<<<<< .our
       "integrity": "sha1-XRKFFd8TT/Mn6QpMk/Tgd6U2NB8=",
+=======
+      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "ms": "2.0.0"
@@ -2070,7 +2173,11 @@
         "glob": {
           "version": "7.1.2",
           "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.2.tgz",
+<<<<<<< .our
           "integrity": "sha1-wZyd+aAocC1nhhI4SmVSQExjbRU=",
+=======
+          "integrity": "sha512-MJTUg1kjuLeQCJ+ccE4Vpa6kKVXkPYJ2mOCQyUuKLcLQsdrMCpBPUi8qVE6+YuaJkozeA9NusTAw3hLr8Xe5EQ==",
+>>>>>>> .their
           "dev": true,
           "requires": {
             "fs.realpath": "1.0.0",
@@ -2139,9 +2246,15 @@
       "dev": true
     },
     "detect-port": {
+<<<<<<< .our
       "version": "1.2.3",
       "resolved": "https://registry.npmjs.org/detect-port/-/detect-port-1.2.3.tgz",
       "integrity": "sha512-IDbrX6PxqnYy8jV4wSHBaJlErYKTJvW8OQb9F7xivl1iQLqiUYHGa+nZ61Do6+N5uuOn/pReXKNqI9rUn04vug==",
+=======
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/detect-port/-/detect-port-1.2.2.tgz",
+      "integrity": "sha512-06H99JMCwgbYbA+codm97aBhFLAjABftetp+v+Z88Pvvlkawp2N+1bP/9J24+mihrvk9yBvUYTyIj3NixG1CsA==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "address": "1.0.3",
@@ -2441,7 +2554,11 @@
         "glob": {
           "version": "7.1.2",
           "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.2.tgz",
+<<<<<<< .our
           "integrity": "sha1-wZyd+aAocC1nhhI4SmVSQExjbRU=",
+=======
+          "integrity": "sha512-MJTUg1kjuLeQCJ+ccE4Vpa6kKVXkPYJ2mOCQyUuKLcLQsdrMCpBPUi8qVE6+YuaJkozeA9NusTAw3hLr8Xe5EQ==",
+>>>>>>> .their
           "dev": true,
           "requires": {
             "fs.realpath": "1.0.0",
@@ -2523,12 +2640,21 @@
       }
     },
     "electron-typescript-definitions": {
+<<<<<<< .our
       "version": "1.3.6",
       "resolved": "https://registry.npmjs.org/electron-typescript-definitions/-/electron-typescript-definitions-1.3.6.tgz",
       "integrity": "sha512-Wz6tPaaZ22lbfWwF9bzVSki7LMW96xilCT1M8eeNYZG6LcpA9x34jlrAZg5HZWTHXR2tfbTQhSmrY+FEVulD/A==",
       "dev": true,
       "requires": {
         "@types/node": "7.0.69",
+=======
+      "version": "1.3.5",
+      "resolved": "https://registry.npmjs.org/electron-typescript-definitions/-/electron-typescript-definitions-1.3.5.tgz",
+      "integrity": "sha512-7Ryb7AN0Re63oeX3wHytjX0ScVlDcgj+GSBi6Q8aSNpo4B/sffAgZK6P/b4idqF26hp2jPJWcjBMizUb0VNfAQ==",
+      "dev": true,
+      "requires": {
+        "@types/node": "7.0.68",
+>>>>>>> .their
         "colors": "1.2.5",
         "debug": "2.6.9",
         "electron-docs": "2.0.1",
@@ -2795,7 +2921,11 @@
         "glob": {
           "version": "7.1.2",
           "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.2.tgz",
+<<<<<<< .our
           "integrity": "sha1-wZyd+aAocC1nhhI4SmVSQExjbRU=",
+=======
+          "integrity": "sha512-MJTUg1kjuLeQCJ+ccE4Vpa6kKVXkPYJ2mOCQyUuKLcLQsdrMCpBPUi8qVE6+YuaJkozeA9NusTAw3hLr8Xe5EQ==",
+>>>>>>> .their
           "dev": true,
           "requires": {
             "fs.realpath": "1.0.0",
@@ -2901,7 +3031,11 @@
     "eslint-plugin-node": {
       "version": "4.2.3",
       "resolved": "https://registry.npmjs.org/eslint-plugin-node/-/eslint-plugin-node-4.2.3.tgz",
+<<<<<<< .our
       "integrity": "sha1-wEOQq428u2iHF0Aj1vOnJ2nmO5c=",
+=======
+      "integrity": "sha512-vIUQPuwbVYdz/CYnlTLsJrRy7iXHQjdEe5wz0XhhdTym3IInM/zZLlPf9nZ2mThsH0QcsieCOWs2vOeCy/22LQ==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "ignore": "3.3.8",
@@ -3057,7 +3191,11 @@
     "evp_bytestokey": {
       "version": "1.0.3",
       "resolved": "https://registry.npmjs.org/evp_bytestokey/-/evp_bytestokey-1.0.3.tgz",
+<<<<<<< .our
       "integrity": "sha1-f8vbGY3HGVlDLv4ThCaE4FJaywI=",
+=======
+      "integrity": "sha512-/f2Go4TognH/KvCISP7OUsHn85hT9nUkxxA9BEWxFn+Oj9o8ZNLm/40hdlgSLyuOimsrTKLUMEorQexp/aPQeA==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "md5.js": "1.3.4",
@@ -3199,7 +3337,11 @@
     "find-root": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/find-root/-/find-root-1.1.0.tgz",
+<<<<<<< .our
       "integrity": "sha1-q8/Iunb3CMQql7PWhbfpRQv7nOQ=",
+=======
+      "integrity": "sha512-NKfW6bec6GfKc0SGx1e07QZY9PE99u0Bft/0rzSD5k3sO/vwkVUpDUKVm5Gpp5Ue3YfShPFTX2070tDs5kB9Ng==",
+>>>>>>> .their
       "dev": true
     },
     "find-up": {
@@ -3880,7 +4022,11 @@
     "function-bind": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
+<<<<<<< .our
       "integrity": "sha1-pWiZ0+o8m6uHS7l3O3xe3pL0iV0=",
+=======
+      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==",
+>>>>>>> .their
       "dev": true
     },
     "generate-function": {
@@ -4059,7 +4205,11 @@
     "github": {
       "version": "9.3.1",
       "resolved": "https://registry.npmjs.org/github/-/github-9.3.1.tgz",
+<<<<<<< .our
       "integrity": "sha1-ajxanMKhzQtdCXpHuu+50Ryu+J4=",
+=======
+      "integrity": "sha512-LvVb6iR8/7bqYgj0VeAtqys0t427jwIBkv/+or/ssypfIk5R1fnz4aeIEv4udPw6VFoH6vL4gi+foBoD5aazXg==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "follow-redirects": "0.0.7",
@@ -4112,7 +4262,11 @@
     "globals": {
       "version": "9.18.0",
       "resolved": "https://registry.npmjs.org/globals/-/globals-9.18.0.tgz",
+<<<<<<< .our
       "integrity": "sha1-qjiWs+abSH8X4x7SFD1pqOMMLYo=",
+=======
+      "integrity": "sha512-S0nG3CLEQiY/ILxqtztTWH/3iRRdyBLw6KMDxnKMchrtbj2OFmehVh0WUCfW3DUrIgx/qFrJPICrq4Z4sTR9UQ==",
+>>>>>>> .their
       "dev": true
     },
     "globby": {
@@ -4132,7 +4286,11 @@
         "glob": {
           "version": "7.1.2",
           "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.2.tgz",
+<<<<<<< .our
           "integrity": "sha1-wZyd+aAocC1nhhI4SmVSQExjbRU=",
+=======
+          "integrity": "sha512-MJTUg1kjuLeQCJ+ccE4Vpa6kKVXkPYJ2mOCQyUuKLcLQsdrMCpBPUi8qVE6+YuaJkozeA9NusTAw3hLr8Xe5EQ==",
+>>>>>>> .their
           "dev": true,
           "requires": {
             "fs.realpath": "1.0.0",
@@ -4173,7 +4331,11 @@
     "gunzip-maybe": {
       "version": "1.4.1",
       "resolved": "https://registry.npmjs.org/gunzip-maybe/-/gunzip-maybe-1.4.1.tgz",
+<<<<<<< .our
       "integrity": "sha1-Occu2J0bSbpwjhh3ZQBIiQKlICc=",
+=======
+      "integrity": "sha512-qtutIKMthNJJgeHQS7kZ9FqDq59/Wn0G2HYCRNjpup7yKfVI6/eqwpmroyZGFoCYaG+sW6psNVb4zoLADHpp2g==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "browserify-zlib": "0.1.4",
@@ -4282,7 +4444,11 @@
     "hash.js": {
       "version": "1.1.3",
       "resolved": "https://registry.npmjs.org/hash.js/-/hash.js-1.1.3.tgz",
+<<<<<<< .our
       "integrity": "sha1-NA3tvmKQGHFRweodd3o0SJNd+EY=",
+=======
+      "integrity": "sha512-/UETyP0W22QILqS+6HowevwhEFJ3MBJnwTf75Qob9Wz9t0DPuisL8kW8YZMK62dHAKE1c1p+gY1TtOLY+USEHA==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "inherits": "2.0.3",
@@ -4292,7 +4458,11 @@
     "hawk": {
       "version": "6.0.2",
       "resolved": "https://registry.npmjs.org/hawk/-/hawk-6.0.2.tgz",
+<<<<<<< .our
       "integrity": "sha1-r02RTrBl+bXOTZ0RwcshJu7MMDg=",
+=======
+      "integrity": "sha512-miowhl2+U7Qle4vdLqDdPt9m09K6yZhkLDTWGoUiUzrQCn+mHHSmfJgAyGaLRZbPmTqfFFjRV1QWCW0VWUJBbQ==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "boom": "4.3.1",
@@ -4425,7 +4595,11 @@
     "husky": {
       "version": "0.14.3",
       "resolved": "https://registry.npmjs.org/husky/-/husky-0.14.3.tgz",
+<<<<<<< .our
       "integrity": "sha1-xp7XTi0neXaaF7qDmbVM4LY8EsM=",
+=======
+      "integrity": "sha512-e21wivqHpstpoiWA/Yi8eFti8E+sQDSS53cpJsPptPs295QTOQR0ZwnHo2TXy1XOpZFD9rPOd3NpmqTK6uMLJA==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "is-ci": "1.1.0",
@@ -5086,7 +5260,11 @@
         "esprima": {
           "version": "4.0.0",
           "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.0.tgz",
+<<<<<<< .our
           "integrity": "sha1-RJnt3NERDgshi6zy+n9/WfVcqAQ=",
+=======
+          "integrity": "sha512-oftTcaMu/EGrEIu904mWteKIv8vMuOgGYo7EhVJJN00R/EED9DCua/xxHRdYnKtcECzVg7xOWhflvJMnqcFZjw==",
+>>>>>>> .their
           "dev": true
         }
       }
@@ -5683,7 +5861,11 @@
     "matcher-collection": {
       "version": "1.0.5",
       "resolved": "https://registry.npmjs.org/matcher-collection/-/matcher-collection-1.0.5.tgz",
+<<<<<<< .our
       "integrity": "sha1-LuCVQ4Nyy4iE8FgjQTjAXGROwzk=",
+=======
+      "integrity": "sha512-nUCmzKipcJEwYsBVAFh5P+d7JBuhJaW1xs85Hara9xuMLqtCVUrW6DSC0JVIkluxEH2W45nPBM/wjHtBXa/tYA==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "minimatch": "3.0.4"
@@ -5832,6 +6014,7 @@
       }
     },
     "micro": {
+<<<<<<< .our
       "version": "9.3.1",
       "resolved": "https://registry.npmjs.org/micro/-/micro-9.3.1.tgz",
       "integrity": "sha512-83uimpPJqfwkfKvJl2WWontBlV3hmzrIgyJ+L2uhDXKNk7Ll+/ezK3zBz7TljubpKPqjM0JdT2Ker4MTPmhjgA==",
@@ -5879,6 +6062,17 @@
             "has-flag": "3.0.0"
           }
         }
+=======
+      "version": "9.1.4",
+      "resolved": "https://registry.npmjs.org/micro/-/micro-9.1.4.tgz",
+      "integrity": "sha512-2eQ5QpO33LAPQJ/1iA3BrtLzdYlOCAXlstY4vcIj3SEmv0tsWuNZpsfgn1o8xGAYzf15kb+FXnEx8EklXz+pPg==",
+      "dev": true,
+      "requires": {
+        "content-type": "1.0.4",
+        "is-stream": "1.1.0",
+        "mri": "1.1.0",
+        "raw-body": "2.3.2"
+>>>>>>> .their
       }
     },
     "micro-compress": {
@@ -5887,7 +6081,11 @@
       "integrity": "sha1-U/WoC0rQMgyhZaVZtuPfFF1PcE8=",
       "dev": true,
       "requires": {
+<<<<<<< .our
         "compression": "1.7.3"
+=======
+        "compression": "1.7.2"
+>>>>>>> .their
       }
     },
     "micromatch": {
@@ -5914,7 +6112,11 @@
     "miller-rabin": {
       "version": "4.0.1",
       "resolved": "https://registry.npmjs.org/miller-rabin/-/miller-rabin-4.0.1.tgz",
+<<<<<<< .our
       "integrity": "sha1-8IA1HIZbDcViqEYpZtqlNUPHik0=",
+=======
+      "integrity": "sha512-115fLhvZVqWwHPbClyntxEVfVDfl9DLLTuJvq3g2O/Oxi8AiNouAHvDSzHS0viUJc+V5vm3eq91Xwqn9dp4jRA==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "bn.js": "4.11.8",
@@ -5963,7 +6165,11 @@
     "minimatch": {
       "version": "3.0.4",
       "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz",
+<<<<<<< .our
       "integrity": "sha1-UWbihkV/AzBgZL5Ul+jbsMPTIIM=",
+=======
+      "integrity": "sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "brace-expansion": "1.1.11"
@@ -6181,7 +6387,11 @@
     "normalize-package-data": {
       "version": "2.4.0",
       "resolved": "https://registry.npmjs.org/normalize-package-data/-/normalize-package-data-2.4.0.tgz",
+<<<<<<< .our
       "integrity": "sha1-EvlaMH1YNSB1oEkHuErIvpisAS8=",
+=======
+      "integrity": "sha512-9jjUFbTPfEy3R/ad/2oNbKtW9Hgovl5O1FvFWKkKblNXoN/Oou6+9+KKohPK13Yc3/TyunyWhJp6gvRNR/PPAw==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "hosted-git-info": "2.6.0",
@@ -6304,6 +6514,7 @@
         "is-extendable": "0.1.1"
       }
     },
+<<<<<<< .our
     "octicons": {
       "version": "7.3.0",
       "resolved": "https://registry.npmjs.org/octicons/-/octicons-7.3.0.tgz",
@@ -6313,6 +6524,8 @@
         "object-assign": "4.1.1"
       }
     },
+=======
+>>>>>>> .their
     "on-finished": {
       "version": "2.3.0",
       "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz",
@@ -7247,7 +7460,11 @@
     "regex-cache": {
       "version": "0.4.4",
       "resolved": "https://registry.npmjs.org/regex-cache/-/regex-cache-0.4.4.tgz",
+<<<<<<< .our
       "integrity": "sha1-db3FiioUls7EihKDW8VMjVYjNt0=",
+=======
+      "integrity": "sha512-nVIZwtCjkC9YgvWkpM55B5rBhBYRZhAaJbgcFYXXsHnbZ9UZI9nnVWYZpBlCqv9ho2eZryPnWrZGsOdPwVWXWQ==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "is-equal-shallow": "0.1.3"
@@ -8064,7 +8281,11 @@
     "rimraf": {
       "version": "2.6.2",
       "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.6.2.tgz",
+<<<<<<< .our
       "integrity": "sha1-LtgVDSShbqhlHm1u8PR8QVjOejY=",
+=======
+      "integrity": "sha512-lreewLK/BlghmxtfH36YYVg1i8IAce4TI7oao75I1g245+6BctqTVQiBP3YUJ9C6DQOXJmkYR9X9fCLtCOJc5w==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "glob": "7.1.2"
@@ -8073,7 +8294,11 @@
         "glob": {
           "version": "7.1.2",
           "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.2.tgz",
+<<<<<<< .our
           "integrity": "sha1-wZyd+aAocC1nhhI4SmVSQExjbRU=",
+=======
+          "integrity": "sha512-MJTUg1kjuLeQCJ+ccE4Vpa6kKVXkPYJ2mOCQyUuKLcLQsdrMCpBPUi8qVE6+YuaJkozeA9NusTAw3hLr8Xe5EQ==",
+>>>>>>> .their
           "dev": true,
           "requires": {
             "fs.realpath": "1.0.0",
@@ -8126,7 +8351,11 @@
     "sax": {
       "version": "1.2.4",
       "resolved": "https://registry.npmjs.org/sax/-/sax-1.2.4.tgz",
+<<<<<<< .our
       "integrity": "sha1-KBYjTiN4vdxOU1T6tcqold9xANk=",
+=======
+      "integrity": "sha512-NqVDv9TpANUjFm0N8uM5GxL36UgKi9/atZw+x7YFnQ8ckwFGKrl4xX4yWtrey3UJm5nP1kUbnYgLopqWNSRhWw==",
+>>>>>>> .their
       "dev": true,
       "optional": true
     },
@@ -8187,15 +8416,22 @@
       }
     },
     "serve": {
+<<<<<<< .our
       "version": "6.5.8",
       "resolved": "https://registry.npmjs.org/serve/-/serve-6.5.8.tgz",
       "integrity": "sha512-GZYlJz7f6E7Xq6xbg1rTSvQQV9x4v/yYB/sum6egzSBLa/mdk1PViDSX2JvL0Me83sxu3JpEpQELfakDKbGcrw==",
+=======
+      "version": "6.5.6",
+      "resolved": "https://registry.npmjs.org/serve/-/serve-6.5.6.tgz",
+      "integrity": "sha512-rdbHRzBh94UdZPktcoNjWEUqY0ILanZ8Q+VwNfhw5n93pkCPn86wH8x+hXgRi8II9+xj3DvGMWL/6hGUQyfuXg==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "args": "4.0.0",
         "basic-auth": "2.0.0",
         "bluebird": "3.5.1",
         "boxen": "1.3.0",
+<<<<<<< .our
         "chalk": "2.4.1",
         "clipboardy": "1.2.3",
         "dargs": "5.1.0",
@@ -8205,6 +8441,17 @@
         "handlebars": "4.0.11",
         "ip": "1.1.5",
         "micro": "9.3.1",
+=======
+        "chalk": "2.4.0",
+        "clipboardy": "1.2.3",
+        "dargs": "5.1.0",
+        "detect-port": "1.2.2",
+        "filesize": "3.6.1",
+        "fs-extra": "5.0.0",
+        "handlebars": "4.0.11",
+        "ip": "1.1.5",
+        "micro": "9.1.4",
+>>>>>>> .their
         "micro-compress": "1.0.0",
         "mime-types": "2.1.18",
         "node-version": "1.1.3",
@@ -8213,7 +8460,11 @@
         "path-is-inside": "1.0.2",
         "path-type": "3.0.0",
         "send": "0.16.2",
+<<<<<<< .our
         "update-check": "1.5.1"
+=======
+        "update-check": "1.3.2"
+>>>>>>> .their
       },
       "dependencies": {
         "ansi-styles": {
@@ -8226,9 +8477,15 @@
           }
         },
         "chalk": {
+<<<<<<< .our
           "version": "2.4.1",
           "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.1.tgz",
           "integrity": "sha512-ObN6h1v2fTJSmUXoS3nMQ92LbDK9be4TV+6G+omQlGJFdcUX5heKi1LZ1YnRMIgwTLEj3E24bT6tYni50rlCfQ==",
+=======
+          "version": "2.4.0",
+          "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.0.tgz",
+          "integrity": "sha512-Wr/w0f4o9LuE7K53cD0qmbAMM+2XNLzR29vFn5hqko4sxGlUsyy363NvmyGIyk5tpe9cjTr9SJYbysEyPkRnFw==",
+>>>>>>> .their
           "dev": true,
           "requires": {
             "ansi-styles": "3.2.1",
@@ -8243,14 +8500,24 @@
           "dev": true
         },
         "fs-extra": {
+<<<<<<< .our
           "version": "6.0.1",
           "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-6.0.1.tgz",
           "integrity": "sha512-GnyIkKhhzXZUWFCaJzvyDLEEgDkPfb4/TPvJCJVuS8MWZgoSsErf++QpiAlDnKFcqhRlm+tIOcencCjyJE6ZCA==",
+=======
+          "version": "5.0.0",
+          "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-5.0.0.tgz",
+          "integrity": "sha512-66Pm4RYbjzdyeuqudYqhFiNBbCIuI9kgRqLPSHIlXHidW8NIQtVdkM1yeZ4lXwuhbTETv3EUGMNHAAw6hiundQ==",
+>>>>>>> .their
           "dev": true,
           "requires": {
             "graceful-fs": "4.1.11",
             "jsonfile": "4.0.0",
+<<<<<<< .our
             "universalify": "0.1.2"
+=======
+            "universalify": "0.1.1"
+>>>>>>> .their
           }
         },
         "has-flag": {
@@ -8373,7 +8640,11 @@
         "glob": {
           "version": "7.1.2",
           "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.2.tgz",
+<<<<<<< .our
           "integrity": "sha1-wZyd+aAocC1nhhI4SmVSQExjbRU=",
+=======
+          "integrity": "sha512-MJTUg1kjuLeQCJ+ccE4Vpa6kKVXkPYJ2mOCQyUuKLcLQsdrMCpBPUi8qVE6+YuaJkozeA9NusTAw3hLr8Xe5EQ==",
+>>>>>>> .their
           "dev": true,
           "requires": {
             "fs.realpath": "1.0.0",
@@ -8475,7 +8746,11 @@
     "split": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/split/-/split-1.0.1.tgz",
+<<<<<<< .our
       "integrity": "sha1-YFvZvjA6pZ+zX5Ip++oN3snqB9k=",
+=======
+      "integrity": "sha512-mTyOoPbrivtXnwnIxZRFYRrPNtEFKlpB2fvjSnCQUiAA6qAZzqwna5envK4uk6OIeP17CsdF3rSBGYVBsU0Tkg==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "through": "2.3.8"
@@ -8484,7 +8759,11 @@
     "split2": {
       "version": "2.2.0",
       "resolved": "https://registry.npmjs.org/split2/-/split2-2.2.0.tgz",
+<<<<<<< .our
       "integrity": "sha1-GGsldbz4PoW30YRldWI47k7kJJM=",
+=======
+      "integrity": "sha512-RAb22TG39LhI31MbreBgIuKiIKhVsawfTgEGqKHTK87aG+ul/PB8Sqoi3I7kVdRWiCfrKxK3uo4/YUkpNvhPbw==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "through2": "2.0.3"
@@ -8552,7 +8831,11 @@
     "standard-markdown": {
       "version": "4.0.2",
       "resolved": "https://registry.npmjs.org/standard-markdown/-/standard-markdown-4.0.2.tgz",
+<<<<<<< .our
       "integrity": "sha1-NaC1bLtX5JzuLXQ9ocmERMNK1Lg=",
+=======
+      "integrity": "sha512-h+WTmoGN0qmse8I1VX8VD6V5JeVLXZOPQltvxQP9FfSpSl6RmKYMLTUQ2j/QhdmsdxQKDqulZF/Bf8oEnttIQA==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "async": "2.6.0",
@@ -8611,7 +8894,11 @@
         "glob": {
           "version": "7.1.2",
           "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.2.tgz",
+<<<<<<< .our
           "integrity": "sha1-wZyd+aAocC1nhhI4SmVSQExjbRU=",
+=======
+          "integrity": "sha512-MJTUg1kjuLeQCJ+ccE4Vpa6kKVXkPYJ2mOCQyUuKLcLQsdrMCpBPUi8qVE6+YuaJkozeA9NusTAw3hLr8Xe5EQ==",
+>>>>>>> .their
           "dev": true,
           "requires": {
             "fs.realpath": "1.0.0",
@@ -9055,7 +9342,11 @@
         "string-width": {
           "version": "2.1.1",
           "resolved": "https://registry.npmjs.org/string-width/-/string-width-2.1.1.tgz",
+<<<<<<< .our
           "integrity": "sha1-q5Pyeo3BPSjKyBXEYhQ6bZASrp4=",
+=======
+          "integrity": "sha512-nOqH59deCq9SRHlxq1Aw85Jnt4w6KvLKqWVik6oA9ZklXLNIOlqg4F2yrT1MVaTjAqvVwdfeZ7w7aCvJD7ugkw==",
+>>>>>>> .their
           "dev": true,
           "requires": {
             "is-fullwidth-code-point": "2.0.0",
@@ -9207,7 +9498,11 @@
     "text-extensions": {
       "version": "1.7.0",
       "resolved": "https://registry.npmjs.org/text-extensions/-/text-extensions-1.7.0.tgz",
+<<<<<<< .our
       "integrity": "sha1-+qq6JiXtdG1WiiPk0KrNm/CKizk=",
+=======
+      "integrity": "sha512-AKXZeDq230UaSzaO5s3qQUZOaC7iKbzq0jOFL614R7d9R593HLqAOL0cYoqLdkNrjBSOdmoQI06yigq1TSBXAg==",
+>>>>>>> .their
       "dev": true
     },
     "text-table": {
@@ -9409,7 +9704,11 @@
         "glob": {
           "version": "7.1.2",
           "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.2.tgz",
+<<<<<<< .our
           "integrity": "sha1-wZyd+aAocC1nhhI4SmVSQExjbRU=",
+=======
+          "integrity": "sha512-MJTUg1kjuLeQCJ+ccE4Vpa6kKVXkPYJ2mOCQyUuKLcLQsdrMCpBPUi8qVE6+YuaJkozeA9NusTAw3hLr8Xe5EQ==",
+>>>>>>> .their
           "dev": true,
           "requires": {
             "fs.realpath": "1.0.0",
@@ -9744,9 +10043,15 @@
       }
     },
     "universalify": {
+<<<<<<< .our
       "version": "0.1.2",
       "resolved": "https://registry.npmjs.org/universalify/-/universalify-0.1.2.tgz",
       "integrity": "sha512-rBJeI5CXAlmy1pV+617WB9J63U6XcazHHF2f2dbJix4XzpUF0RS3Zbj0FGIOCAva5P/d/GBOYaACQ1w+0azUkg==",
+=======
+      "version": "0.1.1",
+      "resolved": "https://registry.npmjs.org/universalify/-/universalify-0.1.1.tgz",
+      "integrity": "sha1-+nG63UQ3r0wUiEHjs7Fl+enlkLc=",
+>>>>>>> .their
       "dev": true
     },
     "unpipe": {
@@ -9771,9 +10076,15 @@
       "dev": true
     },
     "update-check": {
+<<<<<<< .our
       "version": "1.5.1",
       "resolved": "https://registry.npmjs.org/update-check/-/update-check-1.5.1.tgz",
       "integrity": "sha512-M3rjq5KwSrWZrm2GVPIQIF+NXpIn5I9mIV67gGoydptQvzRjLp9ZbM6ctFJeNuaWSm5+mNP7aInELjSiLcIw6A==",
+=======
+      "version": "1.3.2",
+      "resolved": "https://registry.npmjs.org/update-check/-/update-check-1.3.2.tgz",
+      "integrity": "sha512-0iGt63gXrsU4VTw4tIGVVk14H6KLHI7ExNPuSmdDdwUrUAQTBnh1hQcRpnoBWetb3/Ab4YyXK1iDWXP7D0VHTQ==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "registry-auth-token": "3.3.2",
@@ -10002,7 +10313,11 @@
     "walk-sync": {
       "version": "0.3.2",
       "resolved": "https://registry.npmjs.org/walk-sync/-/walk-sync-0.3.2.tgz",
+<<<<<<< .our
       "integrity": "sha1-SCcoCvxC0OA1NnxKTjHurA0Tb3U=",
+=======
+      "integrity": "sha512-FMB5VqpLqOCcqrzA9okZFc0wq0Qbmdm396qJxvQZhDpyu0W95G9JCmp74tx7iyYnyOcBtUuKJsgIKAqjozvmmQ==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "ensure-posix-path": "1.0.2",
@@ -10029,7 +10344,11 @@
     "which": {
       "version": "1.3.0",
       "resolved": "https://registry.npmjs.org/which/-/which-1.3.0.tgz",
+<<<<<<< .our
       "integrity": "sha1-/wS9/AEO5UfXgL7DjhrBwnd9JTo=",
+=======
+      "integrity": "sha512-xcJpopdamTuY5duC/KnTTNBraPK54YwpenP4lzxU8H91GudWpFv38u0CKjclE1Wi2EH2EDz5LRcHcKbCIzqGyg==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "isexe": "2.0.0"
@@ -10142,7 +10461,11 @@
     "write-file-atomic": {
       "version": "2.3.0",
       "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-2.3.0.tgz",
+<<<<<<< .our
       "integrity": "sha1-H/YVdcLipOjlENb6TiQ8zhg5mas=",
+=======
+      "integrity": "sha512-xuPeK4OdjWqtfi59ylvVL0Yn35SF3zgcAcv7rBPFHVaEapaDr4GdGgm3j7ckTwH9wHL7fGmgfAnb0+THrHb8tA==",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "graceful-fs": "4.1.11",
added in both
  our    100644 c081cd89450cd50efba1ec280ff1349a96ea3ce0 package.json
  their  100644 76ec83ce2fab14c29f975bef623d45febcb4166e package.json
@@ -1,6 +1,10 @@
 {
   "name": "electron",
+<<<<<<< .our
   "version": "4.0.0-nightly.20180821",
+=======
+  "version": "3.0.0-beta.7",
+>>>>>>> .their
   "repository": "https://github.com/electron/electron",
   "description": "Build cross platform desktop apps with JavaScript, HTML, and CSS",
   "devDependencies": {
@@ -13,7 +17,11 @@
     "dugite": "^1.45.0",
     "electabul": "~0.0.4",
     "electron-docs-linter": "^2.3.4",
+<<<<<<< .our
     "electron-typescript-definitions": "^1.3.6",
+=======
+    "electron-typescript-definitions": "^1.3.5",
+>>>>>>> .their
     "github": "^9.2.0",
     "html-entities": "^1.2.1",
     "husky": "^0.14.3",
@@ -21,12 +29,19 @@
     "minimist": "^1.2.0",
     "node-fetch": "^2.1.2",
     "nugget": "^2.0.1",
+<<<<<<< .our
     "octicons": "^7.3.0",
+=======
+>>>>>>> .their
     "remark-cli": "^4.0.0",
     "remark-preset-lint-markdown-style-guide": "^2.1.1",
     "request": "^2.68.0",
     "semver": "^5.5.0",
+<<<<<<< .our
     "serve": "^6.5.8",
+=======
+    "serve": "^6.5.3",
+>>>>>>> .their
     "standard": "^10.0.0",
     "standard-markdown": "^4.0.0",
     "sumchecker": "^2.0.2",
@@ -45,6 +60,7 @@
   "private": true,
   "scripts": {
     "asar": "asar",
+<<<<<<< .our
     "bootstrap:dev": "python ./script/bootstrap.py -d -v",
     "bootstrap": "python ./script/bootstrap.py -v",
     "browserify": "browserify",
@@ -54,6 +70,13 @@
     "build:release": "python ./script/build.py -c R",
     "rebuild-test-modules": "python ./script/rebuild-test-modules.py",
     "check-tls": "python ./script/tls.py",
+=======
+    "bootstrap": "python ./script/bootstrap.py",
+    "browserify": "browserify",
+    "bump-version": "./script/bump-version.py",
+    "build": "python ./script/build.py -c D",
+    "rebuild-test-modules": "python ./script/rebuild-test-modules.py",
+>>>>>>> .their
     "clean": "python ./script/clean.py",
     "clean-build": "python ./script/clean.py --build",
     "clang-format": "find atom/ brightray/ chromium_src/ -iname *.h -o -iname *.cc -o -iname *.mm | xargs clang-format -i",
added in both
  our    100755 4a6c0c7ce8f275175e48c4c380ff33627f7a5961 script/create-dist.py
  their  100755 ae5ce3707c38e61716f96cf5e7627cc909597fb8 script/create-dist.py
@@ -11,6 +11,7 @@
 if sys.platform == "win32":
   import _winreg
 
+<<<<<<< .our
 from lib.config import BASE_URL, PLATFORM, build_env, \
                        enable_verbose_mode, get_target_arch, get_zip_name
 
@@ -18,6 +19,12 @@
                      execute, get_electron_version, make_zip, \
                      parse_version, rm_rf, scoped_cwd
 
+=======
+from lib.config import BASE_URL, PLATFORM, enable_verbose_mode, \
+                       get_target_arch, get_zip_name, build_env
+from lib.util import scoped_cwd, rm_rf, get_electron_version, make_zip, \
+                     execute, electron_gyp, electron_features, parse_version
+>>>>>>> .their
 from lib.env_util import get_vs_location
 
 
@@ -147,7 +154,11 @@
 
   # Copy file and keep the executable bit.
   shutil.copyfile(src, dest)
+<<<<<<< .our
   add_exec_bit(dest)
+=======
+  os.chmod(dest, os.stat(dest).st_mode | stat.S_IEXEC)
+>>>>>>> .their
 
 def copy_vcruntime_binaries():
   arch = get_target_arch()
@@ -302,7 +313,11 @@
     dest = os.path.join(DIST_DIR, binary)
     # Copy file and keep the executable bit.
     shutil.copyfile(src, dest)
+<<<<<<< .our
     add_exec_bit(dest)
+=======
+    os.chmod(dest, os.stat(dest).st_mode | stat.S_IEXEC)
+>>>>>>> .their
 
     dist_name = get_zip_name(binary, version)
     zip_file = os.path.join(SOURCE_ROOT, 'dist', dist_name)
added in both
  our    100644 d479d5a9556534c5d98ae1fdc97397cdd14376f5 script/lib/util.py
  their  100644 617b576b88402a98233dda952a262176221bdc54 script/lib/util.py
@@ -8,7 +8,10 @@
 import re
 import shutil
 import ssl
+<<<<<<< .our
 import stat
+=======
+>>>>>>> .their
 import subprocess
 import sys
 import tarfile
@@ -84,7 +87,10 @@
     if hasattr(ssl, '_create_unverified_context'):
       ssl._create_default_https_context = ssl._create_unverified_context
 
+<<<<<<< .our
     print "Downloading %s to %s" % (url, path)
+=======
+>>>>>>> .their
     web_file = urllib2.urlopen(url)
     file_size = int(web_file.info().getheaders("Content-Length")[0])
     downloaded_size = 0
@@ -297,9 +303,12 @@
     else:
       execute_stdout(args, env)
 
+<<<<<<< .our
 def add_exec_bit(filename):
   os.chmod(filename, os.stat(filename).st_mode | stat.S_IEXEC)
 
+=======
+>>>>>>> .their
 def clean_parse_version(v):
   return parse_version(v.split("-")[0])        
 
@@ -347,7 +356,11 @@
     return make_version(pv[0] , pv[1],  pv[2], 'beta.1')
 
   lv = parse_version(tag_list[-1])
+<<<<<<< .our
   return make_version(pv[0] , pv[1],  pv[2], 'beta.' + str(int(lv[3]) + 1))
+=======
+  return make_version(pv[0], pv[1], pv[2], 'beta.' + str(int(lv[3]) + 1))
+>>>>>>> .their
 
 def get_next_stable_from_pre(v):
   pv = clean_parse_version(v)
added in both
  our    100755 72a28b719bf1ff7770692caef86c76746c4d8edf script/prepare-release.js
  their  100755 30b0a0e54967ef967c8e2bb1abc0f72b24b11ace script/prepare-release.js
@@ -141,6 +141,10 @@
 }
 
 async function createRelease (branchToTarget, isBeta) {
+<<<<<<< .our
+=======
+  console.log('creating release for', branchToTarget, `isBeta=${isBeta}`)
+>>>>>>> .their
   let releaseNotes = await getReleaseNotes(branchToTarget)
   let newVersion = await getNewVersion()
   await tagRelease(newVersion)
@@ -182,6 +186,10 @@
   }
   githubOpts.tag_name = newVersion
   githubOpts.target_commitish = newVersion.indexOf('nightly') !== -1 ? 'master' : branchToTarget
+<<<<<<< .our
+=======
+  console.log('creating release with github opts', githubOpts)
+>>>>>>> .their
   await github.repos.createRelease(githubOpts)
     .catch(err => {
       console.log(`${fail} Error creating new release: `, err)
added in both
  our    100755 0bc9d0f632057f4a17aa811340ba21631433f173 script/update-external-binaries.py
  their  100755 e67ac996e2605be675a0431db7fb61fd28a1445c script/update-external-binaries.py
@@ -4,11 +4,19 @@
 import sys
 import os
 
+<<<<<<< .our
 from lib.config import PLATFORM, get_target_arch
 from lib.util import add_exec_bit, download, extract_zip, rm_rf, \
                      safe_mkdir, tempdir
 
 VERSION = 'v1.4.0'
+=======
+from lib.config import get_target_arch
+from lib.util import safe_mkdir, rm_rf, extract_zip, tempdir, download
+
+
+VERSION = 'v1.3.0'
+>>>>>>> .their
 SOURCE_ROOT = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
 FRAMEWORKS_URL = 'http://github.com/electron/electron-frameworks/releases' \
                  '/download/' + VERSION
@@ -31,6 +39,7 @@
   elif sys.platform in ['cygwin', 'win32']:
     download_and_unzip('directxsdk-' + get_target_arch())
 
+<<<<<<< .our
   # get sccache & set exec bit. https://bugs.python.org/issue15795
   download_and_unzip('sccache-{0}-x64'.format(PLATFORM))
   appname = 'sccache'
@@ -38,6 +47,8 @@
     appname += '.exe'
   add_exec_bit(os.path.join('external_binaries', appname))
 
+=======
+>>>>>>> .their
   with open(version_file, 'w') as f:
     f.write(VERSION)
 
added in both
  our    100755 5fe196270e64f8d9b5f16483a10425382135cc2e script/verify-ffmpeg.py
  their  100755 1d78515a4ade0f9f283e9064ad08e3637affb003 script/verify-ffmpeg.py
@@ -1,5 +1,9 @@
 #!/usr/bin/env python
+<<<<<<< .our
 import argparse
+=======
+
+>>>>>>> .their
 import os
 import shutil
 import subprocess
@@ -17,10 +21,21 @@
 
 
 def main():
+<<<<<<< .our
   args = parse_args()
   os.chdir(args.source_root)
 
   app_path = create_app_copy(args)
+=======
+  os.chdir(SOURCE_ROOT)
+
+  if len(sys.argv) == 2 and sys.argv[1] == '-R':
+    config = 'R'
+  else:
+    config = 'D'
+
+  app_path = create_app_copy(config)
+>>>>>>> .their
 
   if sys.platform == 'darwin':
     electron = os.path.join(app_path, 'Contents', 'MacOS', PRODUCT_NAME)
@@ -38,12 +53,20 @@
     ffmpeg_name = 'libffmpeg.so'
 
   # Copy ffmpeg without proprietary codecs into app
+<<<<<<< .our
   shutil.copy(os.path.join(args.ffmpeg_path, ffmpeg_name), ffmpeg_app_path)
 
   returncode = 0
   try:
     test_path = os.path.join(SOURCE_ROOT, 'spec', 'fixtures',
         'no-proprietary-codecs.js')
+=======
+  shutil.copy(os.path.join(FFMPEG_LIBCC_PATH, ffmpeg_name), ffmpeg_app_path)
+
+  returncode = 0
+  try:
+    test_path = os.path.join('spec', 'fixtures', 'no-proprietary-codecs.js')
+>>>>>>> .their
     subprocess.check_call([electron, test_path] + sys.argv[1:])
   except subprocess.CalledProcessError as e:
     returncode = e.returncode
@@ -54,10 +77,16 @@
 
 
 # Create copy of app to install ffmpeg library without proprietary codecs into
+<<<<<<< .our
 def create_app_copy(args):
   initial_app_path = os.path.join(args.source_root, 'out', args.config)
   app_path = os.path.join(args.source_root, 'out',
     args.config + '-no-proprietary-codecs')
+=======
+def create_app_copy(config):
+  initial_app_path = os.path.join(SOURCE_ROOT, 'out', config)
+  app_path = os.path.join(SOURCE_ROOT, 'out', config + '-no-proprietary-codecs')
+>>>>>>> .their
 
   if sys.platform == 'darwin':
     app_name = '{0}.app'.format(PRODUCT_NAME)
@@ -68,6 +97,7 @@
   shutil.copytree(initial_app_path, app_path, symlinks=True)
   return app_path
 
+<<<<<<< .our
 def parse_args():
   parser = argparse.ArgumentParser(description='Test non-proprietary ffmpeg')
   parser.add_argument('-c', '--config',
@@ -81,6 +111,8 @@
                       default=FFMPEG_LIBCC_PATH,
                       required=False)
   return parser.parse_args()
+=======
+>>>>>>> .their
 
 if __name__ == '__main__':
   sys.exit(main())
added in both
  our    100644 d224eda2989332c18d655cef05a8bacc2eb6d4b8 spec/api-app-spec.js
  their  100644 37c5520a1d27d6988eb30267b7a8ca6ae83d2b20 spec/api-app-spec.js
@@ -168,9 +168,14 @@
       const electronPath = remote.getGlobal('process').execPath
 
       appProcess = ChildProcess.spawn(electronPath, [appPath])
+<<<<<<< .our
       appProcess.on('close', (code, signal) => {
         expect(signal).to.equal(null, 'exit signal should be null, if you see this please tag @MarshallOfSound')
         expect(code).to.equal(123, 'exit code should be 123, if you see this please tag @MarshallOfSound')
+=======
+      appProcess.on('close', code => {
+        expect(code).to.equal(123)
+>>>>>>> .their
         done()
       })
     })
@@ -796,7 +801,12 @@
     })
   })
 
+<<<<<<< .our
   describe('getAppMetrics() API', () => {
+=======
+  // TODO(marshallofsound): [Ch66] Failed on Windows x64 + ia32 on CI, passes locally
+  xdescribe('getAppMetrics() API', () => {
+>>>>>>> .their
     it('returns memory and cpu stats of all running electron processes', () => {
       const appMetrics = app.getAppMetrics()
       expect(appMetrics).to.be.an('array').and.have.lengthOf.at.least(1, 'App memory info object is not > 0')
@@ -804,6 +814,7 @@
       const types = []
       for (const {memory, pid, type, cpu} of appMetrics) {
         expect(memory.workingSetSize).to.be.above(0, 'working set size is not > 0')
+<<<<<<< .our
 
         // windows causes failures here due to CI server configuration
         if (process.platform !== 'win32') {
@@ -811,6 +822,10 @@
           expect(memory.sharedBytes).to.be.above(0, 'shared bytes is not > 0')
         }
 
+=======
+        expect(memory.privateBytes).to.be.above(0, 'private bytes is not > 0')
+        expect(memory.sharedBytes).to.be.above(0, 'shared bytes is not > 0')
+>>>>>>> .their
         expect(pid).to.be.above(0, 'pid is not > 0')
         expect(type).to.be.a('string').that.is.not.empty()
 
added in both
  our    100644 f4cba12ec19d224bc46fca898db42a99baf4972e spec/api-browser-window-spec.js
  their  100644 8349bbd4d5b1b19ce52c7cc519cfe757d7c09e3f spec/api-browser-window-spec.js
@@ -1,8 +1,12 @@
 'use strict'
 
 const assert = require('assert')
+<<<<<<< .our
 const chai = require('chai')
 const dirtyChai = require('dirty-chai')
+=======
+const {expect} = require('chai')
+>>>>>>> .their
 const fs = require('fs')
 const path = require('path')
 const os = require('os')
@@ -14,12 +18,19 @@
 const {app, ipcMain, BrowserWindow, BrowserView, protocol, session, webContents} = remote
 
 const features = process.atomBinding('features')
+<<<<<<< .our
 const {expect} = chai
 const isCI = remote.getGlobal('isCi')
 const nativeModulesEnabled = remote.getGlobal('nativeModulesEnabled')
 
 chai.use(dirtyChai)
 
+=======
+
+const isCI = remote.getGlobal('isCi')
+const nativeModulesEnabled = remote.getGlobal('nativeModulesEnabled')
+
+>>>>>>> .their
 describe('BrowserWindow module', () => {
   const fixtures = path.resolve(__dirname, 'fixtures')
   let w = null
@@ -27,6 +38,7 @@
   let server
   let postData
 
+<<<<<<< .our
   const defaultOptions = {
     show: false,
     width: 400,
@@ -45,6 +57,8 @@
     return w
   }
 
+=======
+>>>>>>> .their
   const closeTheWindow = function () {
     return closeWindow(w).then(() => { w = null })
   }
@@ -99,13 +113,32 @@
     server = null
   })
 
+<<<<<<< .our
   beforeEach(openTheWindow)
+=======
+  beforeEach(() => {
+    w = new BrowserWindow({
+      show: false,
+      width: 400,
+      height: 400,
+      webPreferences: {
+        backgroundThrottling: false
+      }
+    })
+  })
+>>>>>>> .their
 
   afterEach(closeTheWindow)
 
   describe('BrowserWindow constructor', () => {
     it('allows passing void 0 as the webContents', () => {
+<<<<<<< .our
       openTheWindow({
+=======
+      w.close()
+      w = null
+      w = new BrowserWindow({
+>>>>>>> .their
         webContents: void 0
       })
     })
@@ -217,7 +250,11 @@
       const contents = w.webContents
       w.destroy()
       assert.throws(() => {
+<<<<<<< .our
         contents.getProcessId()
+=======
+        contents.getId()
+>>>>>>> .their
       }, /Object has been destroyed/)
     })
   })
@@ -422,6 +459,7 @@
   })
 
   describe('BrowserWindow.capturePage(rect, callback)', () => {
+<<<<<<< .our
     it('calls the callback with a Buffer', async () => {
       const image = await new Promise((resolve) => {
         w.capturePage({
@@ -452,10 +490,46 @@
       // Check the 25th byte in the PNG.
       // Values can be 0,2,3,4, or 6. We want 6, which is RGB + Alpha
       expect(imgBuffer[25]).to.equal(6)
+=======
+    it('calls the callback with a Buffer', (done) => {
+      w.capturePage({
+        x: 0,
+        y: 0,
+        width: 100,
+        height: 100
+      }, (image) => {
+        assert.equal(image.isEmpty(), true)
+        done()
+      })
+    })
+
+    it('preserves transparency', (done) => {
+      w.close()
+      const width = 400
+      const height = 400
+      w = new BrowserWindow({
+        show: false,
+        width: width,
+        height: height,
+        transparent: true
+      })
+      w.loadURL('data:text/html,<html><body background-color: rgba(255,255,255,0)></body></html>')
+      w.once('ready-to-show', () => {
+        w.show()
+        w.capturePage((image) => {
+          let imgBuffer = image.toPNG()
+          // Check 25th byte in the PNG
+          // Values can be 0,2,3,4, or 6. We want 6, which is RGB + Alpha
+          assert.equal(imgBuffer[25], 6)
+          done()
+        })
+      })
+>>>>>>> .their
     })
   })
 
   describe('BrowserWindow.setSize(width, height)', () => {
+<<<<<<< .our
     it('sets the window size', async () => {
       const size = [300, 400]
 
@@ -464,6 +538,15 @@
       await resized
 
       assertBoundsEqual(w.getSize(), size)
+=======
+    it('sets the window size', (done) => {
+      const size = [300, 400]
+      w.once('resize', () => {
+        assertBoundsEqual(w.getSize(), size)
+        done()
+      })
+      w.setSize(size[0], size[1])
+>>>>>>> .their
     })
   })
 
@@ -765,6 +848,7 @@
     })
   })
 
+<<<<<<< .our
   describe('BrowserWindow.setWindowButtonVisibility()', () => {
     before(function () {
       if (process.platform !== 'darwin') {
@@ -792,6 +876,8 @@
     })
   })
 
+=======
+>>>>>>> .their
   describe('BrowserWindow.setVibrancy(type)', () => {
     it('allows setting, changing, and removing the vibrancy', () => {
       assert.doesNotThrow(() => {
@@ -928,6 +1014,7 @@
     })
   })
 
+<<<<<<< .our
   describe('BrowserWindow.setShape(rects)', () => {
     it('allows setting shape', () => {
       assert.doesNotThrow(() => {
@@ -939,6 +1026,8 @@
     })
   })
 
+=======
+>>>>>>> .their
   describe('"useContentSize" option', () => {
     it('make window created with content size when used', () => {
       w.destroy()
@@ -1617,6 +1706,7 @@
 
       it('validates process APIs access in sandboxed renderer', (done) => {
         ipcMain.once('answer', function (event, test) {
+<<<<<<< .our
           assert.equal(test.pid, w.webContents.getOSProcessId())
           assert.equal(test.arch, remote.process.arch)
           assert.equal(test.platform, remote.process.platform)
@@ -1627,6 +1717,11 @@
           assert.equal(test.type, 'renderer')
           assert.equal(test.version, remote.process.version)
           assert.deepEqual(test.versions, remote.process.versions)
+=======
+          assert.equal(test.platform, remote.process.platform)
+          assert.deepEqual(test.env, remote.process.env)
+          assert.equal(test.execPath, remote.process.helperExecPath)
+>>>>>>> .their
           done()
         })
         remote.process.env.sandboxmain = 'foo'
added in both
  our    100644 fb3ee998eace4401d6f129930d802677ce5feb85 spec/api-menu-item-spec.js
  their  100644 9bbb2e38da2cecb068528ded21307b387da337f1 spec/api-menu-item-spec.js
@@ -1,11 +1,16 @@
+<<<<<<< .our
 const chai = require('chai')
 const dirtyChai = require('dirty-chai')
+=======
+const assert = require('assert')
+>>>>>>> .their
 
 const {remote} = require('electron')
 const {BrowserWindow, app, Menu, MenuItem} = remote
 const roles = require('../lib/browser/api/menu-item-roles')
 const {closeWindow} = require('./window-helpers')
 
+<<<<<<< .our
 const {expect} = chai
 chai.use(dirtyChai)
 
@@ -17,6 +22,16 @@
         click: (item) => {
           expect(item.constructor.name).to.equal('MenuItem')
           expect(item.label).to.equal('text')
+=======
+describe('MenuItems', () => {
+  describe('MenuItem.click', () => {
+    it('should be called with the item object passed', (done) => {
+      const menu = Menu.buildFromTemplate([{
+        label: 'text',
+        click: (item) => {
+          assert.equal(item.constructor.name, 'MenuItem')
+          assert.equal(item.label, 'text')
+>>>>>>> .their
           done()
         }
       }])
@@ -31,9 +46,15 @@
         type: 'checkbox'
       }])
 
+<<<<<<< .our
       expect(menu.items[0].checked).to.be.false()
       menu.delegate.executeCommand(menu, {}, menu.items[0].commandId)
       expect(menu.items[0].checked).to.be.true()
+=======
+      assert.equal(menu.items[0].checked, false)
+      menu.delegate.executeCommand(menu, {}, menu.items[0].commandId)
+      assert.equal(menu.items[0].checked, true)
+>>>>>>> .their
     })
 
     it('clicking an radio item should always make checked property true', () => {
@@ -43,9 +64,15 @@
       }])
 
       menu.delegate.executeCommand(menu, {}, menu.items[0].commandId)
+<<<<<<< .our
       expect(menu.items[0].checked).to.be.true()
       menu.delegate.executeCommand(menu, {}, menu.items[0].commandId)
       expect(menu.items[0].checked).to.be.true()
+=======
+      assert.equal(menu.items[0].checked, true)
+      menu.delegate.executeCommand(menu, {}, menu.items[0].commandId)
+      assert.equal(menu.items[0].checked, true)
+>>>>>>> .their
     })
 
     describe('MenuItem group properties', () => {
@@ -100,7 +127,11 @@
         const groups = findRadioGroups(template)
 
         groups.forEach(g => {
+<<<<<<< .our
           expect(findChecked(menu.items, g.begin, g.end)).to.deep.equal([g.begin])
+=======
+          assert.deepEqual(findChecked(menu.items, g.begin, g.end), [g.begin])
+>>>>>>> .their
         })
       })
 
@@ -113,12 +144,20 @@
           const groupId = menu.items[g.begin].groupId
 
           // groupId should be previously unused
+<<<<<<< .our
           expect(usedGroupIds.has(groupId)).to.be.false()
+=======
+          assert(!usedGroupIds.has(groupId))
+>>>>>>> .their
           usedGroupIds.add(groupId)
 
           // everything in the group should have the same id
           for (let i = g.begin; i < g.end; ++i) {
+<<<<<<< .our
             expect(menu.items[i].groupId).to.equal(groupId)
+=======
+            assert.equal(menu.items[i].groupId, groupId)
+>>>>>>> .their
           }
         })
       })
@@ -128,6 +167,7 @@
 
         const groups = findRadioGroups(template)
         groups.forEach(g => {
+<<<<<<< .our
           expect(findChecked(menu.items, g.begin, g.end)).to.deep.equal([])
 
           menu.items[g.begin].checked = true
@@ -135,6 +175,15 @@
 
           menu.items[g.end - 1].checked = true
           expect(findChecked(menu.items, g.begin, g.end)).to.deep.equal([g.end - 1])
+=======
+          assert.deepEqual(findChecked(menu.items, g.begin, g.end), [])
+
+          menu.items[g.begin].checked = true
+          assert.deepEqual(findChecked(menu.items, g.begin, g.end), [g.begin])
+
+          menu.items[g.end - 1].checked = true
+          assert.deepEqual(findChecked(menu.items, g.begin, g.end), [g.end - 1])
+>>>>>>> .their
         })
       })
     })
@@ -146,7 +195,11 @@
       let item = new MenuItem({role: 'asdfghjkl'})
 
       const canExecute = roles.execute(item.role, win, win.webContents)
+<<<<<<< .our
       expect(canExecute).to.be.false()
+=======
+      assert.equal(false, canExecute)
+>>>>>>> .their
 
       closeWindow(win).then(() => { win = null })
     })
@@ -156,7 +209,11 @@
       let item = new MenuItem({role: 'reload'})
 
       const canExecute = roles.execute(item.role, win, win.webContents)
+<<<<<<< .our
       expect(canExecute).to.be.true()
+=======
+      assert.equal(true, canExecute)
+>>>>>>> .their
 
       closeWindow(win).then(() => { win = null })
     })
@@ -166,7 +223,11 @@
       let item = new MenuItem({role: 'resetzoom'})
 
       const canExecute = roles.execute(item.role, win, win.webContents)
+<<<<<<< .our
       expect(canExecute).to.be.true()
+=======
+      assert.equal(true, canExecute)
+>>>>>>> .their
 
       closeWindow(win).then(() => { win = null })
     })
@@ -177,31 +238,53 @@
       const item = new MenuItem({label: 'item'})
 
       const commandId = item.commandId
+<<<<<<< .our
       expect(commandId).to.not.be.undefined()
       item.commandId = `${commandId}-modified`
       expect(item.commandId).to.equal(commandId)
+=======
+      assert(commandId)
+      item.commandId = `${commandId}-modified`
+      assert.equal(item.commandId, commandId)
+>>>>>>> .their
     })
   })
 
   describe('MenuItem with invalid type', () => {
     it('throws an exception', () => {
+<<<<<<< .our
       expect(() => {
+=======
+      assert.throws(() => {
+>>>>>>> .their
         Menu.buildFromTemplate([{
           label: 'text',
           type: 'not-a-type'
         }])
+<<<<<<< .our
       }).to.throw(/Unknown menu item type: not-a-type/)
+=======
+      }, /Unknown menu item type: not-a-type/)
+>>>>>>> .their
     })
   })
 
   describe('MenuItem with submenu type and missing submenu', () => {
     it('throws an exception', () => {
+<<<<<<< .our
       expect(() => {
+=======
+      assert.throws(() => {
+>>>>>>> .their
         Menu.buildFromTemplate([{
           label: 'text',
           type: 'submenu'
         }])
+<<<<<<< .our
       }).to.throw(/Invalid submenu/)
+=======
+      }, /Invalid submenu/)
+>>>>>>> .their
     })
   })
 
@@ -231,7 +314,11 @@
 
       for (let role in roleList) {
         const item = new MenuItem({role})
+<<<<<<< .our
         expect(item.getDefaultRoleAccelerator()).to.be.undefined()
+=======
+        assert.equal(item.getDefaultRoleAccelerator(), undefined)
+>>>>>>> .their
       }
     })
 
@@ -260,7 +347,11 @@
 
       for (let role in roleList) {
         const item = new MenuItem({role})
+<<<<<<< .our
         expect(item.label).to.equal(roleList[role])
+=======
+        assert.equal(item.label, roleList[role])
+>>>>>>> .their
       }
     })
 
@@ -289,7 +380,11 @@
 
       for (let role in roleList) {
         const item = new MenuItem({role})
+<<<<<<< .our
         expect(item.getDefaultRoleAccelerator()).to.equal(roleList[role])
+=======
+        assert.equal(item.getDefaultRoleAccelerator(), roleList[role])
+>>>>>>> .their
       }
     })
 
@@ -300,9 +395,15 @@
         accelerator: 'D'
       })
 
+<<<<<<< .our
       expect(item.label).to.equal('Custom Close!')
       expect(item.accelerator).to.equal('D')
       expect(item.getDefaultRoleAccelerator()).to.equal('CommandOrControl+W')
+=======
+      assert.equal(item.label, 'Custom Close!')
+      assert.equal(item.accelerator, 'D')
+      assert.equal(item.getDefaultRoleAccelerator(), 'CommandOrControl+W')
+>>>>>>> .their
     })
   })
 
@@ -310,6 +411,7 @@
     it('includes a default submenu layout when submenu is empty', () => {
       const item = new MenuItem({role: 'editMenu'})
 
+<<<<<<< .our
       expect(item.label).to.equal('Edit')
       expect(item.submenu.items[0].role).to.equal('undo')
       expect(item.submenu.items[1].role).to.equal('redo')
@@ -328,6 +430,26 @@
         expect(item.submenu.items[6].role).to.equal('delete')
         expect(item.submenu.items[7].type).to.equal('separator')
         expect(item.submenu.items[8].role).to.equal('selectall')
+=======
+      assert.equal(item.label, 'Edit')
+      assert.equal(item.submenu.items[0].role, 'undo')
+      assert.equal(item.submenu.items[1].role, 'redo')
+      assert.equal(item.submenu.items[2].type, 'separator')
+      assert.equal(item.submenu.items[3].role, 'cut')
+      assert.equal(item.submenu.items[4].role, 'copy')
+      assert.equal(item.submenu.items[5].role, 'paste')
+
+      if (process.platform === 'darwin') {
+        assert.equal(item.submenu.items[6].role, 'pasteandmatchstyle')
+        assert.equal(item.submenu.items[7].role, 'delete')
+        assert.equal(item.submenu.items[8].role, 'selectall')
+      }
+
+      if (process.platform === 'win32') {
+        assert.equal(item.submenu.items[6].role, 'delete')
+        assert.equal(item.submenu.items[7].type, 'separator')
+        assert.equal(item.submenu.items[8].role, 'selectall')
+>>>>>>> .their
       }
     })
 
@@ -338,8 +460,13 @@
           role: 'close'
         }]
       })
+<<<<<<< .our
       expect(item.label).to.equal('Edit')
       expect(item.submenu.items[0].role).to.equal('close')
+=======
+      assert.equal(item.label, 'Edit')
+      assert.equal(item.submenu.items[0].role, 'close')
+>>>>>>> .their
     })
   })
 
@@ -347,6 +474,7 @@
     it('includes a default submenu layout when submenu is empty', () => {
       const item = new MenuItem({role: 'windowMenu'})
 
+<<<<<<< .our
       expect(item.label).to.equal('Window')
       expect(item.submenu.items[0].role).to.equal('minimize')
       expect(item.submenu.items[1].role).to.equal('close')
@@ -354,6 +482,15 @@
       if (process.platform === 'darwin') {
         expect(item.submenu.items[2].type).to.equal('separator')
         expect(item.submenu.items[3].role).to.equal('front')
+=======
+      assert.equal(item.label, 'Window')
+      assert.equal(item.submenu.items[0].role, 'minimize')
+      assert.equal(item.submenu.items[1].role, 'close')
+
+      if (process.platform === 'darwin') {
+        assert.equal(item.submenu.items[2].type, 'separator')
+        assert.equal(item.submenu.items[3].role, 'front')
+>>>>>>> .their
       }
     })
 
@@ -363,8 +500,13 @@
         submenu: [{role: 'copy'}]
       })
 
+<<<<<<< .our
       expect(item.label).to.equal('Window')
       expect(item.submenu.items[0].role).to.equal('copy')
+=======
+      assert.equal(item.label, 'Window')
+      assert.equal(item.submenu.items[0].role, 'copy')
+>>>>>>> .their
     })
   })
 
@@ -383,10 +525,17 @@
         overrideProperty: 'oops not allowed'
       }))
 
+<<<<<<< .our
       expect(menu.items[0].customProp).to.equal('foo')
       expect(menu.items[0].submenu.items[0].label).to.equal('item 1')
       expect(menu.items[0].submenu.items[0].customProp).to.equal('bar')
       expect(menu.items[0].submenu.items[0].overrideProperty).to.be.a('function')
+=======
+      assert.equal(menu.items[0].customProp, 'foo')
+      assert.equal(menu.items[0].submenu.items[0].label, 'item 1')
+      assert.equal(menu.items[0].submenu.items[0].customProp, 'bar')
+      assert.equal(typeof menu.items[0].submenu.items[0].overrideProperty, 'function')
+>>>>>>> .their
     })
   })
 })
added in both
  our    100644 ed2749700c6c8bf299f507d52606c1ae3f597e5c spec/api-menu-spec.js
  their  100644 4a25e3ce4d7c05892374a0e93928e3a33b643174 spec/api-menu-spec.js
@@ -1,14 +1,21 @@
+<<<<<<< .our
 const chai = require('chai')
 const dirtyChai = require('dirty-chai')
+=======
+const assert = require('assert')
+>>>>>>> .their
 
 const {ipcRenderer, remote} = require('electron')
 const {BrowserWindow, Menu, MenuItem} = remote
 const {sortMenuItems} = require('../lib/browser/api/menu-utils')
 const {closeWindow} = require('./window-helpers')
 
+<<<<<<< .our
 const {expect} = chai
 chai.use(dirtyChai)
 
+=======
+>>>>>>> .their
 describe('Menu module', () => {
   describe('Menu.buildFromTemplate', () => {
     it('should be able to attach extra fields', () => {
@@ -18,17 +25,29 @@
           extra: 'field'
         }
       ])
+<<<<<<< .our
       expect(menu.items[0].extra).to.equal('field')
+=======
+      assert.equal(menu.items[0].extra, 'field')
+>>>>>>> .their
     })
 
     it('does not modify the specified template', () => {
       const template = [{label: 'text', submenu: [{label: 'sub'}]}]
       const result = ipcRenderer.sendSync('eval', `const template = [{label: 'text', submenu: [{label: 'sub'}]}]\nrequire('electron').Menu.buildFromTemplate(template)\ntemplate`)
+<<<<<<< .our
       expect(result).to.deep.equal(template)
     })
 
     it('does not throw exceptions for undefined/null values', () => {
       expect(() => {
+=======
+      assert.deepStrictEqual(result, template)
+    })
+
+    it('does not throw exceptions for undefined/null values', () => {
+      assert.doesNotThrow(() => {
+>>>>>>> .their
         Menu.buildFromTemplate([
           {
             label: 'text',
@@ -39,6 +58,7 @@
             accelerator: null
           }
         ])
+<<<<<<< .our
       }).to.not.throw()
     })
 
@@ -57,6 +77,9 @@
       expect(() => {
         Menu.buildFromTemplate([undefined])
       }).to.throw(/Invalid template for MenuItem: must have at least one of label, role or type/)
+=======
+      })
+>>>>>>> .their
     })
 
     describe('Menu sorting and building', () => {
@@ -87,7 +110,11 @@
             }
           ]
 
+<<<<<<< .our
           expect(sortMenuItems(items)).to.deep.equal(expected)
+=======
+          assert.deepEqual(sortMenuItems(items), expected)
+>>>>>>> .their
         })
 
         it('resolves cycles by ignoring things that conflict', () => {
@@ -119,7 +146,11 @@
             }
           ]
 
+<<<<<<< .our
           expect(sortMenuItems(items)).to.deep.equal(expected)
+=======
+          assert.deepEqual(sortMenuItems(items), expected)
+>>>>>>> .their
         })
 
         it('ignores references to commands that do not exist', () => {
@@ -149,7 +180,11 @@
             }
           ]
 
+<<<<<<< .our
           expect(sortMenuItems(items)).to.deep.equal(expected)
+=======
+          assert.deepEqual(sortMenuItems(items), expected)
+>>>>>>> .their
         })
 
         it('only respects the first matching [before|after]GroupContaining rule in a given group', () => {
@@ -199,7 +234,11 @@
             }
           ]
 
+<<<<<<< .our
           expect(sortMenuItems(items)).to.deep.equal(expected)
+=======
+          assert.deepEqual(sortMenuItems(items), expected)
+>>>>>>> .their
         })
       })
 
@@ -241,7 +280,11 @@
             }
           ]
 
+<<<<<<< .our
           expect(sortMenuItems(items)).to.deep.equal(expected)
+=======
+          assert.deepEqual(sortMenuItems(items), expected)
+>>>>>>> .their
         })
 
         it("moves all items in the moving item's group", () => {
@@ -289,7 +332,11 @@
             }
           ]
 
+<<<<<<< .our
           expect(sortMenuItems(items)).to.deep.equal(expected)
+=======
+          assert.deepEqual(sortMenuItems(items), expected)
+>>>>>>> .their
         })
 
         it("ignores positions relative to commands that don't exist", () => {
@@ -339,7 +386,11 @@
             }
           ]
 
+<<<<<<< .our
           expect(sortMenuItems(items)).to.deep.equal(expected)
+=======
+          assert.deepEqual(sortMenuItems(items), expected)
+>>>>>>> .their
         })
 
         it('can handle recursive group merging', () => {
@@ -377,7 +428,11 @@
             }
           ]
 
+<<<<<<< .our
           expect(sortMenuItems(items)).to.deep.equal(expected)
+=======
+          assert.deepEqual(sortMenuItems(items), expected)
+>>>>>>> .their
         })
 
         it('can merge multiple groups when given a list of before/after commands', () => {
@@ -415,7 +470,11 @@
             }
           ]
 
+<<<<<<< .our
           expect(sortMenuItems(items)).to.deep.equal(expected)
+=======
+          assert.deepEqual(sortMenuItems(items), expected)
+>>>>>>> .their
         })
 
         it('can merge multiple groups based on both before/after commands', () => {
@@ -455,7 +514,11 @@
             }
           ]
 
+<<<<<<< .our
           expect(sortMenuItems(items)).to.deep.equal(expected)
+=======
+          assert.deepEqual(sortMenuItems(items), expected)
+>>>>>>> .their
         })
       })
 
@@ -474,9 +537,15 @@
           }
         ])
 
+<<<<<<< .our
         expect(menu.items[0].label).to.equal('one')
         expect(menu.items[1].label).to.equal('two')
         expect(menu.items[2].label).to.equal('three')
+=======
+        assert.equal(menu.items[0].label, 'one')
+        assert.equal(menu.items[1].label, 'two')
+        assert.equal(menu.items[2].label, 'three')
+>>>>>>> .their
       })
 
       it('should position after existing item', () => {
@@ -495,9 +564,15 @@
           }
         ])
 
+<<<<<<< .our
         expect(menu.items[0].label).to.equal('one')
         expect(menu.items[1].label).to.equal('two')
         expect(menu.items[2].label).to.equal('three')
+=======
+        assert.equal(menu.items[0].label, 'one')
+        assert.equal(menu.items[1].label, 'two')
+        assert.equal(menu.items[2].label, 'three')
+>>>>>>> .their
       })
 
       it('should filter excess menu separators', () => {
@@ -515,10 +590,17 @@
           }
         ])
 
+<<<<<<< .our
         expect(menuOne.items).to.have.length(3)
         expect(menuOne.items[0].label).to.equal('a')
         expect(menuOne.items[1].label).to.equal('b')
         expect(menuOne.items[2].label).to.equal('c')
+=======
+        assert.equal(menuOne.items.length, 3)
+        assert.equal(menuOne.items[0].label, 'a')
+        assert.equal(menuOne.items[1].label, 'b')
+        assert.equal(menuOne.items[2].label, 'c')
+>>>>>>> .their
 
         const menuTwo = Menu.buildFromTemplate([
           {
@@ -538,10 +620,17 @@
           }
         ])
 
+<<<<<<< .our
         expect(menuTwo.items).to.have.length(3)
         expect(menuTwo.items[0].label).to.equal('a')
         expect(menuTwo.items[1].label).to.equal('b')
         expect(menuTwo.items[2].label).to.equal('c')
+=======
+        assert.equal(menuTwo.items.length, 3)
+        assert.equal(menuTwo.items[0].label, 'a')
+        assert.equal(menuTwo.items[1].label, 'b')
+        assert.equal(menuTwo.items[2].label, 'c')
+>>>>>>> .their
       })
 
       it('should continue inserting items at next index when no specifier is present', () => {
@@ -565,11 +654,19 @@
           }
         ])
 
+<<<<<<< .our
         expect(menu.items[0].label).to.equal('one')
         expect(menu.items[1].label).to.equal('two')
         expect(menu.items[2].label).to.equal('three')
         expect(menu.items[3].label).to.equal('four')
         expect(menu.items[4].label).to.equal('five')
+=======
+        assert.equal(menu.items[0].label, 'one')
+        assert.equal(menu.items[1].label, 'two')
+        assert.equal(menu.items[2].label, 'three')
+        assert.equal(menu.items[3].label, 'four')
+        assert.equal(menu.items[4].label, 'five')
+>>>>>>> .their
       })
     })
   })
@@ -589,7 +686,11 @@
         }
       ])
       const fsc = menu.getMenuItemById('fullScreen')
+<<<<<<< .our
       expect(menu.items[0].submenu.items[0]).to.equal(fsc)
+=======
+      assert.equal(menu.items[0].submenu.items[0], fsc)
+>>>>>>> .their
     })
   })
 
@@ -604,10 +705,17 @@
       const item = new MenuItem({ label: 'inserted' })
 
       menu.insert(1, item)
+<<<<<<< .our
       expect(menu.items[0].label).to.equal('1')
       expect(menu.items[1].label).to.equal('inserted')
       expect(menu.items[2].label).to.equal('2')
       expect(menu.items[3].label).to.equal('3')
+=======
+      assert.equal(menu.items[0].label, '1')
+      assert.equal(menu.items[1].label, 'inserted')
+      assert.equal(menu.items[2].label, '2')
+      assert.equal(menu.items[3].label, '3')
+>>>>>>> .their
     })
   })
 
@@ -622,10 +730,17 @@
       const item = new MenuItem({ label: 'inserted' })
       menu.append(item)
 
+<<<<<<< .our
       expect(menu.items[0].label).to.equal('1')
       expect(menu.items[1].label).to.equal('2')
       expect(menu.items[2].label).to.equal('3')
       expect(menu.items[3].label).to.equal('inserted')
+=======
+      assert.equal(menu.items[0].label, '1')
+      assert.equal(menu.items[1].label, '2')
+      assert.equal(menu.items[2].label, '3')
+      assert.equal(menu.items[3].label, 'inserted')
+>>>>>>> .their
     })
   })
 
@@ -649,6 +764,7 @@
     })
 
     it('throws an error if options is not an object', () => {
+<<<<<<< .our
       expect(() => {
         menu.popup('this is a string, not an object')
       }).to.throw(/Options must be an object/)
@@ -658,6 +774,11 @@
       expect(() => {
         menu.popup({})
       }).to.not.throw()
+=======
+      assert.throws(() => {
+        menu.popup()
+      }, /Options must be an object/)
+>>>>>>> .their
     })
 
     it('should emit menu-will-show event', (done) => {
@@ -674,17 +795,29 @@
     it('returns immediately', () => {
       const input = {window: w, x: 100, y: 101}
       const output = menu.popup(input)
+<<<<<<< .our
       expect(output.x).to.equal(input.x)
       expect(output.y).to.equal(input.y)
       expect(output.browserWindow).to.equal(input.window)
+=======
+      assert.equal(output.x, input.x)
+      assert.equal(output.y, input.y)
+      assert.equal(output.browserWindow, input.window)
+>>>>>>> .their
     })
 
     it('works without a given BrowserWindow and options', () => {
       const {browserWindow, x, y} = menu.popup({x: 100, y: 101})
 
+<<<<<<< .our
       expect(browserWindow.constructor.name).to.equal('BrowserWindow')
       expect(x).to.equal(100)
       expect(y).to.equal(101)
+=======
+      assert.equal(browserWindow.constructor.name, 'BrowserWindow')
+      assert.equal(x, 100)
+      assert.equal(y, 101)
+>>>>>>> .their
     })
 
     it('works with a given BrowserWindow, options and callback', (done) => {
@@ -695,8 +828,13 @@
         callback: () => done()
       })
 
+<<<<<<< .our
       expect(x).to.equal(100)
       expect(y).to.equal(101)
+=======
+      assert.equal(x, 100)
+      assert.equal(y, 101)
+>>>>>>> .their
       menu.closePopup()
     })
 
@@ -714,12 +852,20 @@
       ])
 
       Menu.setApplicationMenu(menu)
+<<<<<<< .our
       expect(Menu.getApplicationMenu()).to.not.be.null()
+=======
+      assert.notEqual(Menu.getApplicationMenu(), null)
+>>>>>>> .their
     })
 
     it('unsets a menu with null', () => {
       Menu.setApplicationMenu(null)
+<<<<<<< .our
       expect(Menu.getApplicationMenu()).to.be.null()
+=======
+      assert.equal(Menu.getApplicationMenu(), null)
+>>>>>>> .their
     })
   })
 })
added in both
  our    100644 0546971b716e0d29d1e76d689be0a182c3f4b52d spec/api-native-image-spec.js
  their  100644 87399921ff14ac2c594bb88a0c4493d4e9575e49 spec/api-native-image-spec.js
@@ -1,5 +1,6 @@
 'use strict'
 
+<<<<<<< .our
 const chai = require('chai')
 const dirtyChai = require('dirty-chai')
 const {nativeImage} = require('electron')
@@ -8,6 +9,14 @@
 const {expect} = chai
 chai.use(dirtyChai)
 
+=======
+/* eslint-disable no-unused-expressions */
+
+const {expect} = require('chai')
+const {nativeImage} = require('electron')
+const path = require('path')
+
+>>>>>>> .their
 describe('nativeImage module', () => {
   const ImageFormat = {
     PNG: 'png',
@@ -113,6 +122,7 @@
       expect(empty.toDataURL()).to.equal('data:image/png;base64,')
       expect(empty.toDataURL({scaleFactor: 2.0})).to.equal('data:image/png;base64,')
       expect(empty.getSize()).to.deep.equal({width: 0, height: 0})
+<<<<<<< .our
       expect(empty.getBitmap()).to.be.empty()
       expect(empty.getBitmap({scaleFactor: 2.0})).to.be.empty()
       expect(empty.toBitmap()).to.be.empty()
@@ -123,6 +133,18 @@
 
       if (process.platform === 'darwin') {
         expect(empty.getNativeHandle()).to.be.empty()
+=======
+      expect(empty.getBitmap()).to.be.empty
+      expect(empty.getBitmap({scaleFactor: 2.0})).to.be.empty
+      expect(empty.toBitmap()).to.be.empty
+      expect(empty.toBitmap({scaleFactor: 2.0})).to.be.empty
+      expect(empty.toJPEG(100)).to.be.empty
+      expect(empty.toPNG()).to.be.empty
+      expect(empty.toPNG({scaleFactor: 2.0})).to.be.empty
+
+      if (process.platform === 'darwin') {
+        expect(empty.getNativeHandle()).to.be.empty
+>>>>>>> .their
       }
     })
   })
@@ -137,7 +159,11 @@
 
       const imageB = nativeImage.createFromBuffer(imageA.toPNG())
       expect(imageB.getSize()).to.deep.equal({width: 538, height: 190})
+<<<<<<< .our
       expect(imageA.toBitmap().equals(imageB.toBitmap())).to.be.true()
+=======
+      expect(imageA.toBitmap().equals(imageB.toBitmap())).to.be.true
+>>>>>>> .their
 
       const imageC = nativeImage.createFromBuffer(imageA.toJPEG(100))
       expect(imageC.getSize()).to.deep.equal({width: 538, height: 190})
@@ -216,7 +242,11 @@
       expect(imageTwo.getSize()).to.deep.equal(
           {width: imageData.width, height: imageData.height})
 
+<<<<<<< .our
       expect(imageOne.toBitmap().equals(imageTwo.toBitmap())).to.be.true()
+=======
+      expect(imageOne.toBitmap().equals(imageTwo.toBitmap())).to.be.true
+>>>>>>> .their
     })
 
     it('supports a scale factor', () => {
@@ -251,7 +281,11 @@
       expect(imageC.getSize()).to.deep.equal(
           {width: imageData.width, height: imageData.height})
 
+<<<<<<< .our
       expect(imageB.toBitmap().equals(imageC.toBitmap())).to.be.true()
+=======
+      expect(imageB.toBitmap().equals(imageC.toBitmap())).to.be.true
+>>>>>>> .their
     })
 
     it('supports a scale factor', () => {
@@ -280,23 +314,37 @@
     })
 
     it('loads images from paths relative to the current working directory', () => {
+<<<<<<< .our
       const imagePath = path.relative('.', path.join(__dirname, 'fixtures', 'assets', 'logo.png'))
       const image = nativeImage.createFromPath(imagePath)
       expect(image.isEmpty()).to.be.false()
+=======
+      const imagePath = `.${path.sep}${path.join('spec', 'fixtures', 'assets', 'logo.png')}`
+      const image = nativeImage.createFromPath(imagePath)
+      expect(image.isEmpty()).to.be.false
+>>>>>>> .their
       expect(image.getSize()).to.deep.equal({width: 538, height: 190})
     })
 
     it('loads images from paths with `.` segments', () => {
       const imagePath = `${path.join(__dirname, 'fixtures')}${path.sep}.${path.sep}${path.join('assets', 'logo.png')}`
       const image = nativeImage.createFromPath(imagePath)
+<<<<<<< .our
       expect(image.isEmpty()).to.be.false()
+=======
+      expect(image.isEmpty()).to.be.false
+>>>>>>> .their
       expect(image.getSize()).to.deep.equal({width: 538, height: 190})
     })
 
     it('loads images from paths with `..` segments', () => {
       const imagePath = `${path.join(__dirname, 'fixtures', 'api')}${path.sep}..${path.sep}${path.join('assets', 'logo.png')}`
       const image = nativeImage.createFromPath(imagePath)
+<<<<<<< .our
       expect(image.isEmpty()).to.be.false()
+=======
+      expect(image.isEmpty()).to.be.false
+>>>>>>> .their
       expect(image.getSize()).to.deep.equal({width: 538, height: 190})
     })
 
@@ -327,7 +375,11 @@
 
       const imagePath = path.join(__dirname, 'fixtures', 'assets', 'icon.ico')
       const image = nativeImage.createFromPath(imagePath)
+<<<<<<< .our
       expect(image.isEmpty()).to.be.false()
+=======
+      expect(image.isEmpty()).to.be.false
+>>>>>>> .their
       expect(image.getSize()).to.deep.equal({width: 256, height: 256})
     })
   })
@@ -357,7 +409,11 @@
       }
 
       const image = nativeImage.createFromNamedImage('NSActionTemplate')
+<<<<<<< .our
       expect(image.isEmpty()).to.be.false()
+=======
+      expect(image.isEmpty()).to.be.false
+>>>>>>> .their
     })
 
     it('returns allows an HSL shift for a valid image on darwin', function () {
@@ -368,7 +424,11 @@
       }
 
       const image = nativeImage.createFromNamedImage('NSActionTemplate', [0.5, 0.2, 0.8])
+<<<<<<< .our
       expect(image.isEmpty()).to.be.false()
+=======
+      expect(image.isEmpty()).to.be.false
+>>>>>>> .their
     })
   })
 
@@ -427,7 +487,11 @@
       const cropB = image.crop({width: 25, height: 64, x: 30, y: 40})
       expect(cropA.getSize()).to.deep.equal({width: 25, height: 64})
       expect(cropB.getSize()).to.deep.equal({width: 25, height: 64})
+<<<<<<< .our
       expect(cropA.toPNG().equals(cropB.toPNG())).to.be.false()
+=======
+      expect(cropA.toPNG().equals(cropB.toPNG())).to.be.false
+>>>>>>> .their
     })
   })
 
@@ -473,7 +537,11 @@
         buffer: 'invalid'
       })
 
+<<<<<<< .our
       expect(image.isEmpty()).to.be.false()
+=======
+      expect(image.isEmpty()).to.be.false
+>>>>>>> .their
       expect(image.getSize()).to.deep.equal({width: 1, height: 1})
 
       expect(image.toDataURL({scaleFactor: 1.0})).to.equal(imageDataOne.dataUrl)
@@ -508,7 +576,11 @@
         dataURL: 'invalid'
       })
 
+<<<<<<< .our
       expect(image.isEmpty()).to.be.false()
+=======
+      expect(image.isEmpty()).to.be.false
+>>>>>>> .their
       expect(image.getSize()).to.deep.equal({width: 1, height: 1})
 
       expect(image.toDataURL({scaleFactor: 1.0})).to.equal(imageDataOne.dataUrl)
added in both
  our    100644 fa282244df66e955c97554c240f8e7bb7ca4cbf3 spec/api-net-log-spec.js
  their  100644 1e9ca66722dc2f5fccc450729ef405d8d2bd8246 spec/api-net-log-spec.js
@@ -1,5 +1,9 @@
+<<<<<<< .our
 const chai = require('chai')
 const dirtyChai = require('dirty-chai')
+=======
+const assert = require('assert')
+>>>>>>> .their
 const http = require('http')
 const fs = require('fs')
 const os = require('os')
@@ -11,15 +15,22 @@
 const dumpFile = path.join(os.tmpdir(), 'net_log.json')
 const dumpFileDynamic = path.join(os.tmpdir(), 'net_log_dynamic.json')
 
+<<<<<<< .our
 const {expect} = chai
 chai.use(dirtyChai)
+=======
+>>>>>>> .their
 const isCI = remote.getGlobal('isCi')
 
 describe('netLog module', () => {
   let server
   const connections = new Set()
 
+<<<<<<< .our
   before(done => {
+=======
+  before((done) => {
+>>>>>>> .their
     server = http.createServer()
     server.listen(0, '127.0.0.1', () => {
       server.url = `http://127.0.0.1:${server.address().port}`
@@ -36,7 +47,11 @@
     })
   })
 
+<<<<<<< .our
   after(done => {
+=======
+  after((done) => {
+>>>>>>> .their
     for (const connection of connections) {
       connection.destroy()
     }
@@ -55,6 +70,7 @@
     }
   })
 
+<<<<<<< .our
   it('should begin and end logging to file when .startLogging() and .stopLogging() is called', done => {
     expect(netLog.currentlyLogging).to.be.false()
     expect(netLog.currentlyLoggingPath).to.equal('')
@@ -70,11 +86,30 @@
 
       expect(path).to.equal(dumpFileDynamic)
       expect(fs.existsSync(dumpFileDynamic)).to.be.true()
+=======
+  it('should begin and end logging to file when .startLogging() and .stopLogging() is called', (done) => {
+    assert(!netLog.currentlyLogging)
+    assert.equal(netLog.currentlyLoggingPath, '')
+
+    netLog.startLogging(dumpFileDynamic)
+
+    assert(netLog.currentlyLogging)
+    assert.equal(netLog.currentlyLoggingPath, dumpFileDynamic)
+
+    netLog.stopLogging((path) => {
+      assert(!netLog.currentlyLogging)
+      assert.equal(netLog.currentlyLoggingPath, '')
+
+      assert.equal(path, dumpFileDynamic)
+
+      assert(fs.existsSync(dumpFileDynamic))
+>>>>>>> .their
 
       done()
     })
   })
 
+<<<<<<< .our
   it('should silence when .stopLogging() is called without calling .startLogging()', done => {
     expect(netLog.currentlyLogging).to.be.false()
     expect(netLog.currentlyLoggingPath).to.equal('')
@@ -84,6 +119,17 @@
       expect(netLog.currentlyLoggingPath).to.equal('')
 
       expect(path).to.equal('')
+=======
+  it('should silence when .stopLogging() is called without calling .startLogging()', (done) => {
+    assert(!netLog.currentlyLogging)
+    assert.equal(netLog.currentlyLoggingPath, '')
+
+    netLog.stopLogging((path) => {
+      assert(!netLog.currentlyLogging)
+      assert.equal(netLog.currentlyLoggingPath, '')
+
+      assert.equal(path, '')
+>>>>>>> .their
 
       done()
     })
@@ -91,7 +137,11 @@
 
   // The following tests are skipped on Linux CI
 
+<<<<<<< .our
   it('should begin and end logging automatically when --log-net-log is passed', done => {
+=======
+  it('should begin and end logging automatically when --log-net-log is passed', (done) => {
+>>>>>>> .their
     if (isCI && process.platform === 'linux') {
       done()
       return
@@ -105,12 +155,20 @@
       })
 
     appProcess.once('exit', () => {
+<<<<<<< .our
       expect(fs.existsSync(dumpFile)).to.be.true()
+=======
+      assert(fs.existsSync(dumpFile))
+>>>>>>> .their
       done()
     })
   })
 
+<<<<<<< .our
   it('should begin and end logging automtically when --log-net-log is passed, and behave correctly when .startLogging() and .stopLogging() is called', done => {
+=======
+  it('should begin and end logging automtically when --log-net-log is passed, and behave correctly when .startLogging() and .stopLogging() is called', (done) => {
+>>>>>>> .their
     if (isCI && process.platform === 'linux') {
       done()
       return
@@ -125,18 +183,31 @@
         }
       })
 
+<<<<<<< .our
     appProcess.stdout.on('data', data => {
+=======
+    appProcess.stdout.on('data', (data) => {
+>>>>>>> .their
       console.log(data.toString())
     })
 
     appProcess.once('exit', () => {
+<<<<<<< .our
       expect(fs.existsSync(dumpFile)).to.be.true()
       expect(fs.existsSync(dumpFileDynamic)).to.be.true()
+=======
+      assert(fs.existsSync(dumpFile))
+      assert(fs.existsSync(dumpFileDynamic))
+>>>>>>> .their
       done()
     })
   })
 
+<<<<<<< .our
   it('should end logging automatically when only .startLogging() is called', done => {
+=======
+  it('should end logging automatically when only .startLogging() is called', (done) => {
+>>>>>>> .their
     if (isCI && process.platform === 'linux') {
       done()
       return
@@ -151,7 +222,11 @@
       })
 
     appProcess.once('exit', () => {
+<<<<<<< .our
       expect(fs.existsSync(dumpFileDynamic)).to.be.true()
+=======
+      assert(fs.existsSync(dumpFileDynamic))
+>>>>>>> .their
       done()
     })
   })
added in both
  our    100644 9ab56d88e50ae5891364cb271362e5ec0c0edd26 spec/api-notification-dbus-spec.js
  their  100644 81c1b68f31d0c9490742d3bd4b4227abaaf72ca3 spec/api-notification-dbus-spec.js
@@ -6,7 +6,11 @@
 //
 // See https://pypi.python.org/pypi/python-dbusmock to read about dbusmock.
 
+<<<<<<< .our
 const {expect} = require('chai')
+=======
+const assert = require('assert')
+>>>>>>> .their
 const dbus = require('dbus-native')
 const Promise = require('bluebird')
 
@@ -27,12 +31,20 @@
   before(async () => {
     // init app
     app.setName(appName)
+<<<<<<< .our
     app.setDesktopName(`${appName}.desktop`)
+=======
+    app.setDesktopName(appName + '.desktop')
+>>>>>>> .their
     // init dbus
     const path = '/org/freedesktop/Notifications'
     const iface = 'org.freedesktop.DBus.Mock'
     const bus = dbus.sessionBus()
+<<<<<<< .our
     console.log(`session bus: ${process.env.DBUS_SESSION_BUS_ADDRESS}`)
+=======
+    console.log('session bus: ' + process.env.DBUS_SESSION_BUS_ADDRESS)
+>>>>>>> .their
     const service = bus.getService(serviceName)
     const getInterface = Promise.promisify(service.getInterface, {context: service})
     mock = await getInterface(path, iface)
@@ -48,10 +60,17 @@
     app.setVersion(realAppVersion)
   })
 
+<<<<<<< .our
   describe(`Notification module using ${serviceName}`, () => {
     function onMethodCalled (done) {
       function cb (name) {
         console.log(`onMethodCalled: ${name}`)
+=======
+  describe('Notification module using ' + serviceName, () => {
+    function onMethodCalled (done) {
+      function cb (name) {
+        console.log('onMethodCalled: ' + name)
+>>>>>>> .their
         if (name === 'Notify') {
           mock.removeListener('MethodCalled', cb)
           console.log('done')
@@ -83,7 +102,11 @@
       }
     }
 
+<<<<<<< .our
     before(done => {
+=======
+    before((done) => {
+>>>>>>> .their
       mock.on('MethodCalled', onMethodCalled(done))
       // lazy load Notification after we listen to MethodCalled mock signal
       Notification = require('electron').remote.Notification
@@ -98,6 +121,7 @@
       n.show()
     })
 
+<<<<<<< .our
     it(`should call ${serviceName} to show notifications`, async () => {
       const calls = await getCalls()
       expect(calls).to.be.an('array').of.lengthOf.at.least(1)
@@ -108,6 +132,16 @@
 
       let args = unmarshalDBusNotifyArgs(lastCall[2])
       expect(args).to.deep.equal({
+=======
+    it('should call ' + serviceName + ' to show notifications', async () => {
+      const calls = await getCalls()
+      assert(calls.length >= 1)
+      let lastCall = calls[calls.length - 1]
+      let methodName = lastCall[1]
+      assert.equal(methodName, 'Notify')
+      let args = unmarshalDBusNotifyArgs(lastCall[2])
+      assert.deepEqual(args, {
+>>>>>>> .their
         app_name: appName,
         replaces_id: 0,
         app_icon: '',
added in both
  our    100644 ad8f1faea14208d2659c505105c1e70938bba2b9 spec/api-process-spec.js
  their  100644 1de5e1a19dc7175eac1338b89d0f882a37bd91c0 spec/api-process-spec.js
@@ -1,3 +1,4 @@
+<<<<<<< .our
 const {expect} = require('chai')
 
 describe('process module', () => {
@@ -13,6 +14,16 @@
       const cpuUsage = process.getCPUUsage()
       expect(cpuUsage.percentCPUUsage).to.be.a('number')
       expect(cpuUsage.idleWakeupsPerSecond).to.be.a('number')
+=======
+const assert = require('assert')
+
+describe('process module', () => {
+  describe('process.getCPUUsage()', () => {
+    it('returns a cpu usage object', () => {
+      const cpuUsage = process.getCPUUsage()
+      assert.equal(typeof cpuUsage.percentCPUUsage, 'number')
+      assert.equal(typeof cpuUsage.idleWakeupsPerSecond, 'number')
+>>>>>>> .their
     })
   })
 
@@ -25,6 +36,7 @@
 
     it('returns an io counters object', () => {
       const ioCounters = process.getIOCounters()
+<<<<<<< .our
       expect(ioCounters.readOperationCount).to.be.a('number')
       expect(ioCounters.writeOperationCount).to.be.a('number')
       expect(ioCounters.otherOperationCount).to.be.a('number')
@@ -49,12 +61,21 @@
       const systemMemoryInfo = process.getSystemMemoryInfo()
       expect(systemMemoryInfo.free).to.be.a('number')
       expect(systemMemoryInfo.total).to.be.a('number')
+=======
+      assert.equal(typeof ioCounters.readOperationCount, 'number')
+      assert.equal(typeof ioCounters.writeOperationCount, 'number')
+      assert.equal(typeof ioCounters.otherOperationCount, 'number')
+      assert.equal(typeof ioCounters.readTransferCount, 'number')
+      assert.equal(typeof ioCounters.writeTransferCount, 'number')
+      assert.equal(typeof ioCounters.otherTransferCount, 'number')
+>>>>>>> .their
     })
   })
 
   describe('process.getHeapStatistics()', () => {
     it('returns heap statistics object', () => {
       const heapStats = process.getHeapStatistics()
+<<<<<<< .our
       expect(heapStats.totalHeapSize).to.be.a('number')
       expect(heapStats.totalHeapSizeExecutable).to.be.a('number')
       expect(heapStats.totalPhysicalSize).to.be.a('number')
@@ -64,6 +85,17 @@
       expect(heapStats.mallocedMemory).to.be.a('number')
       expect(heapStats.peakMallocedMemory).to.be.a('number')
       expect(heapStats.doesZapGarbage).to.be.a('boolean')
+=======
+      assert.equal(typeof heapStats.totalHeapSize, 'number')
+      assert.equal(typeof heapStats.totalHeapSizeExecutable, 'number')
+      assert.equal(typeof heapStats.totalPhysicalSize, 'number')
+      assert.equal(typeof heapStats.totalAvailableSize, 'number')
+      assert.equal(typeof heapStats.usedHeapSize, 'number')
+      assert.equal(typeof heapStats.heapSizeLimit, 'number')
+      assert.equal(typeof heapStats.mallocedMemory, 'number')
+      assert.equal(typeof heapStats.peakMallocedMemory, 'number')
+      assert.equal(typeof heapStats.doesZapGarbage, 'boolean')
+>>>>>>> .their
     })
   })
 })
added in both
  our    100644 b9093d1d6335ece5ca713a668a67bf3b40f4fabe spec/api-session-spec.js
  their  100644 7ac14e1f1f88549aa6594e96906cc77906c0accd spec/api-session-spec.js
@@ -289,17 +289,24 @@
       res.end(mockPDF)
       downloadServer.close()
     })
+<<<<<<< .our
 
     const isPathEqual = (path1, path2) => {
       return path.relative(path1, path2) === ''
     }
+=======
+>>>>>>> .their
     const assertDownload = (event, state, url, mimeType,
                                    receivedBytes, totalBytes, disposition,
                                    filename, port, savePath, isCustom) => {
       assert.equal(state, 'completed')
       assert.equal(filename, 'mock.pdf')
+<<<<<<< .our
       assert.ok(path.isAbsolute(savePath))
       assert.ok(isPathEqual(savePath, path.join(__dirname, 'fixtures', 'mock.pdf')))
+=======
+      assert.equal(savePath, path.join(__dirname, 'fixtures', 'mock.pdf'))
+>>>>>>> .their
       if (isCustom) {
         assert.equal(url, `${protocolName}://item`)
       } else {
added in both
  our    100644 be02cb3f84001a541d64b11fe6eda50fc32e8afd spec/api-web-contents-spec.js
  their  100644 b1b1d206a2934dbc0e6d3b57cffdc9b9345d7b7a spec/api-web-contents-spec.js
@@ -4,6 +4,7 @@
 const http = require('http')
 const path = require('path')
 const {closeWindow} = require('./window-helpers')
+<<<<<<< .our
 const {emittedOnce} = require('./events-helpers')
 const chai = require('chai')
 const dirtyChai = require('dirty-chai')
@@ -16,6 +17,14 @@
 
 chai.use(dirtyChai)
 
+=======
+
+const {ipcRenderer, remote} = require('electron')
+const {BrowserWindow, webContents, ipcMain, session} = remote
+
+const isCi = remote.getGlobal('isCi')
+
+>>>>>>> .their
 /* The whole webContents API doesn't use standard callbacks */
 /* eslint-disable standard/no-callback-literal */
 
@@ -40,7 +49,11 @@
     it('returns an array of web contents', (done) => {
       w.webContents.on('devtools-opened', () => {
         const all = webContents.getAllWebContents().sort((a, b) => {
+<<<<<<< .our
           return a.id - b.id
+=======
+          return a.getId() - b.getId()
+>>>>>>> .their
         })
 
         assert.ok(all.length >= 4)
@@ -61,15 +74,26 @@
       if (isCi) return done()
 
       const specWebContents = remote.getCurrentWebContents()
+<<<<<<< .our
       assert.equal(specWebContents.id, webContents.getFocusedWebContents().id)
 
       specWebContents.once('devtools-opened', () => {
         assert.equal(specWebContents.devToolsWebContents.id, webContents.getFocusedWebContents().id)
+=======
+      assert.equal(specWebContents.getId(), webContents.getFocusedWebContents().getId())
+
+      specWebContents.once('devtools-opened', () => {
+        assert.equal(specWebContents.devToolsWebContents.getId(), webContents.getFocusedWebContents().getId())
+>>>>>>> .their
         specWebContents.closeDevTools()
       })
 
       specWebContents.once('devtools-closed', () => {
+<<<<<<< .our
         assert.equal(specWebContents.id, webContents.getFocusedWebContents().id)
+=======
+        assert.equal(specWebContents.getId(), webContents.getFocusedWebContents().getId())
+>>>>>>> .their
         done()
       })
 
@@ -122,6 +146,7 @@
     })
   })
 
+<<<<<<< .our
   // Disabled because flaky. See #13969
   xdescribe('isCurrentlyAudible() API', () => {
     it('returns whether audio is playing', async () => {
@@ -138,6 +163,8 @@
     })
   })
 
+=======
+>>>>>>> .their
   describe('getWebPreferences() API', () => {
     it('should not crash when called for devTools webContents', (done) => {
       w.webContents.openDevTools()
added in both
  our    100644 d90269769d269e4054d25cba4b6c4ac8a1929aa6 spec/chromium-spec.js
  their  100644 938798f001b866a34eae50db37c40e314866c28a spec/chromium-spec.js
@@ -319,7 +319,11 @@
       b = window.open(windowUrl, '', 'nodeIntegration=no,show=no')
     })
 
+<<<<<<< .our
     // TODO(codebytere): re-enable this test
+=======
+    // TODO(alexeykuzmin): [Ch66] Fix the test.
+>>>>>>> .their
     xit('disables node integration when it is disabled on the parent window for chrome devtools URLs', (done) => {
       let b
       app.once('web-contents-created', (event, contents) => {
added in both
  our    100644 6901be56d0c5fa9f0a318edeb235eef60624ac52 spec/fixtures/module/preload-sandbox.js
  their  100644 38d14a8be50ce4e0eb5804336e8bc1f2e23dac0e spec/fixtures/module/preload-sandbox.js
@@ -11,6 +11,7 @@
       window.test = {
         env: process.env,
         execPath: process.execPath,
+<<<<<<< .our
         pid: process.pid,
         arch: process.arch,
         platform: process.platform,
@@ -19,6 +20,9 @@
         type: process.type,
         version: process.version,
         versions: process.versions
+=======
+        platform: process.platform
+>>>>>>> .their
       }
     }
   } else if (location.href !== 'about:blank') {
added in both
  our    100644 675d81e97b7240d61b49fbbbee857144033a0378 spec/fixtures/pages/a.html
  their  100644 568973aed1cf5d40100d8b233fb9548d61bbebf2 spec/fixtures/pages/a.html
@@ -1,7 +1,10 @@
 <html>
 <link rel="icon" type="image/png" href="/favicon.png"/>
 <link rel="icon" type="image/png" href="http://test.com/favicon.png"/>
+<<<<<<< .our
 <meta http-equiv="content-security-policy" content="script-src 'self' 'unsafe-inline'" />
+=======
+>>>>>>> .their
 <body>
 <script type="text/javascript" charset="utf-8">
   console.log('a');
added in both
  our    100644 5659c44c8de4456a25e0026e29199b827c89cb08 spec/static/main.js
  their  100644 21a8515d66d1ccbf34fb549d85f8f1480110bdb8 spec/static/main.js
@@ -99,7 +99,11 @@
   })
 }
 
+<<<<<<< .our
 global.nativeModulesEnabled = !process.env.ELECTRON_SKIP_NATIVE_MODULE_TESTS
+=======
+global.nativeModulesEnabled = process.platform !== 'win32' || process.execPath.toLowerCase().indexOf('\\out\\d\\') === -1
+>>>>>>> .their
 
 // Register app as standard scheme.
 global.standardScheme = 'app'
added in both
  our    100644 db75a4e3754e24a5e6740be61be4f4098c58006e spec/webview-spec.js
  their  100644 9b4dc3e8b80c7ff8596f1d89a4894d9946ac245e spec/webview-spec.js
@@ -248,6 +248,7 @@
       })
     })
 
+<<<<<<< .our
     it('runs in the correct scope when sandboxed', async () => {
       const message = await startLoadingWebViewAndWaitForMessage(webview, {
         preload: `${fixtures}/module/preload-context.js`,
@@ -264,6 +265,8 @@
       })
     })
 
+=======
+>>>>>>> .their
     it('preload script can require modules that still use "process" and "Buffer" when nodeintegration is off', async () => {
       const message = await startLoadingWebViewAndWaitForMessage(webview, {
         preload: `${fixtures}/module/preload-node-off-wrapper.js`,
@@ -1034,7 +1037,11 @@
       assert.ok(webview.partition)
 
       const listener = function (webContents, permission, callback) {
+<<<<<<< .our
         if (webContents.id === webview.getWebContents().id) {
+=======
+        if (webContents.getId() === webview.getId()) {
+>>>>>>> .their
           // requestMIDIAccess with sysex requests both midi and midiSysex so
           // grant the first midi one and then reject the midiSysex one
           if (requestedPermission === 'midiSysex' && permission === 'midi') {
@@ -1120,7 +1127,11 @@
       webview.partition = 'permissionTest'
       webview.setAttribute('nodeintegration', 'on')
       session.fromPartition(webview.partition).setPermissionRequestHandler((webContents, permission, callback) => {
+<<<<<<< .our
         if (webContents.id === webview.getWebContents().id) {
+=======
+        if (webContents.getId() === webview.getId()) {
+>>>>>>> .their
           assert.equal(permission, 'notifications')
           setTimeout(() => { callback(true) }, 10)
         }
added in both
  our    100644 808f646f3cf52981f8d75aa8212f3c97b02f055a spec/window-helpers.js
  their  100644 5a63100f9d0e6452c35c5d31190b37f840066d2a spec/window-helpers.js
@@ -1,3 +1,4 @@
+<<<<<<< .our
 const {expect} = require('chai')
 const {BrowserWindow} = require('electron').remote
 
@@ -15,5 +16,27 @@
 
   if (assertSingleWindow) {
     expect(BrowserWindow.getAllWindows()).to.have.lengthOf(1)
+=======
+const assert = require('assert')
+const {BrowserWindow} = require('electron').remote
+
+exports.closeWindow = (window, {assertSingleWindow} = {assertSingleWindow: true}) => {
+  if (window == null || window.isDestroyed()) {
+    if (assertSingleWindow) {
+      assert.equal(BrowserWindow.getAllWindows().length, 1)
+    }
+    return Promise.resolve()
+  } else {
+    return new Promise((resolve, reject) => {
+      window.once('closed', () => {
+        if (assertSingleWindow) {
+          assert.equal(BrowserWindow.getAllWindows().length, 1)
+        }
+        resolve()
+      })
+      window.setClosable(true)
+      window.close()
+    })
+>>>>>>> .their
   }
 }
added in both
  our    100755 145c1298c6fbba0a7863fa32cb25e2c6c8eb7e2c tools/js2asar.py
  their  100755 adad1751e33d21173eaa0b60a9f987f7f074a6fd tools/js2asar.py
@@ -16,11 +16,16 @@
   source_files = sys.argv[3:]
 
   output_dir = tempfile.mkdtemp()
+<<<<<<< .our
   copy_files(source_files, output_dir, folder_name)
+=======
+  copy_files(source_files, output_dir)
+>>>>>>> .their
   call_asar(archive, os.path.join(output_dir, folder_name))
   shutil.rmtree(output_dir)
 
 
+<<<<<<< .our
 def copy_files(source_files, output_dir, folder_name):
   for source_file in source_files:
     output_path = os.path.join(output_dir, source_file)
@@ -28,6 +33,11 @@
     # the temp one we are making so they end up in the ASAR
     if not os.path.normpath(source_file).startswith(folder_name + os.sep):
       output_path = os.path.join(output_dir, folder_name, source_file)
+=======
+def copy_files(source_files, output_dir):
+  for source_file in source_files:
+    output_path = os.path.join(output_dir, source_file)
+>>>>>>> .their
     safe_mkdir(os.path.dirname(output_path))
     shutil.copy2(source_file, output_path)
 
added in both
  our    160000 f5f20660f20c281c1cbf1097ed55204b50711846 vendor/breakpad
  their  160000 82f0452e6b687b3c1e14e08d172b2f3fb79ae91a vendor/breakpad
added in both
  our    160000 c85470a1c379b1c4bedb372c146521bc4be9b75d vendor/libchromiumcontent
  their  160000 92dc0accfae5cd133fa2a6758ae6b3ff4ff7e569 vendor/libchromiumcontent
added in both
  our    160000 ece0a06ac8147efb5b5af431c21f312f1884616e vendor/node
  their  160000 c3c62e09865f925e0f040d8689cf2a207e36c2a1 vendor/node
added in both
  our    100644 84bd69c2b2868ac23bc30061aa208ad38fbb9506 vsts.yml
  their  100644 72418c7baa6ff63e01b55e0f4051abb2830ea746 vsts.yml
@@ -59,7 +59,11 @@
 - bash: |
     echo 'Verifying ffmpeg on build'
     if [ "$ELECTRON_RELEASE" == "1" ]; then
+<<<<<<< .our
       script/verify-ffmpeg.py -c R
+=======
+      script/verify-ffmpeg.py -R
+>>>>>>> .their
     else
       script/verify-ffmpeg.py
     fi
@@ -69,8 +73,14 @@
 - task: PublishTestResults@2
   displayName: Publish Test Results
   inputs:
+<<<<<<< .our
     testResultsFiles: '**/test-*.xml'
   condition: and(always(), eq(variables['MOCHA_FILE'], 'test-results.xml'))
+=======
+    testResultsFiles: 'test-results.xml'
+    searchFolder: junit
+  condition: and(always(), ne(variables['ELECTRON_RELEASE'], '1'))
+>>>>>>> .their
 
 - bash: |
     export BUILD_URL="${SYSTEM_TEAMFOUNDATIONCOLLECTIONURI}${SYSTEM_TEAMPROJECT}/_build/results?buildId=${BUILD_BUILDID}"
