changed in both
  base   100644 92bccccbd8f42cd6ae7f0db96b976967c64661ff docs/README.md
  our    100644 f7b956e8feb95ceb64743ad260a1759e5a298afe docs/README.md
  their  100644 88f3af820fac9e5b4ed49db19d6113c3bb4952c0 docs/README.md
@@ -1,3 +1,4 @@
+<<<<<<< .our
 # Official Guides
 
 Please make sure that you use the documents that match your Electron version.
@@ -8,6 +9,57 @@
 [browse by tag](https://github.com/electron/electron/tree/v1.4.0)
 on GitHub by opening the "Switch branches/tags" dropdown and selecting the tag
 that matches your version.
+=======
+# Guides to Electron Development
+
+- Development Environment
+    - Setting up Windows
+    - Setting up Mac
+    - Setting up Linux
+- Installing Electron
+    - Global vs Local
+    - [Versioning](tutorial/electron-versioning)
+    - Alternatives (prebuilt-compile)
+- Creating an App
+    - Choosing an Editor
+    - [Quick Start](tutorial/quick-start.md)
+    - Boilerplates (.e.g. Typescript)
+    - Electron Forge
+- Electron APIs
+    - Main and Renderer Processes
+    - IPC
+- User Interface
+    - Browser Windows
+    - Menus
+    - Dialogs
+    - Keyboard Shortcuts
+- Chromium
+    - Renderer Process
+    - JavaScript Support
+- Node
+    - Renderer and Main Process
+    - Node Core Modules
+    - Using npm Modules
+    - Native Modules
+- Debugging
+    - Chromium DevTools
+    - Extensions
+    - Devtron
+    - Node Debugger
+    - Userland Tools
+- Testing
+    - Unit Testing
+    - Integration Testing
+    - spectron
+    - electron-mocha
+- Security
+    - Node Integration
+    - Remote Content
+- Signing
+- Packaging 
+- Releasing
+- Updating
+>>>>>>> .their
 
 ## FAQ
 
added in remote
  their  100644 cedae617e3289e13d9c2b5d83bef6c5dec3a794e docs/tutorial/processes.md
@@ -0,0 +1,62 @@
+# Processes
+
+## Main Process
+
+The main process, commonly a file named `main.js`, is the entry point to every
+Electron app. It controls the life of the app, from open to close. It also
+manages native elements such as the Menu, Menu Bar, Dock, Tray, etc.  The
+main process is responsible for creating each new renderer process in the app.
+The full Node API is built in.
+
+Every app's main process file is specified in the `main` property in
+`package.json`. This is how `electron .` knows what file to execute at startup.
+
+In Chromium, this process is referred to as the "browser process". It is
+renamed in Electron to avoid confusion with renderer processes.
+
+## Renderer Process
+
+The renderer process is a browser window in your app. Unlike the main process,
+there can be multiple of these and each is run in a separate process.
+They can also be hidden.
+
+In normal browsers, web pages usually run in a sandboxed environment and are not
+allowed access to native resources. Electron users, however, have the power to
+use Node.js APIs in web pages allowing lower level operating system
+interactions.
+
+## Differences Between the Main Process and Renderer Process
+
+The main process creates web pages by creating `BrowserWindow` instances. Each
+`BrowserWindow` instance runs the web page in its own renderer process. When a
+`BrowserWindow` instance is destroyed, the corresponding renderer process
+is also terminated.
+
+The main process manages all web pages and their corresponding renderer
+processes. Each renderer process is isolated and only cares about the web page
+running in it.
+
+In web pages, calling native GUI related APIs is not allowed because managing
+native GUI resources in web pages is very dangerous and it is easy to leak
+resources. If you want to perform GUI operations in a web page, the renderer
+process of the web page must communicate with the main process to request that
+the main process perform those operations.
+
+In Electron, we have several ways to communicate between the main process and
+renderer processes. Like [`ipcRenderer`](api/ipc-renderer.md) and
+[`ipcMain`](api/ipc-main.md) modules for sending messages, and the
+[remote](api/remote.md) module for RPC style communication. There is also
+an FAQ entry on [how to share data between web pages][share-data].
+
+### The `process` Global
+
+Like Node.js, all Electron processes have a `process` object which is 
+available in both the main and renderer processes. It contains information 
+about the currently running process. It inherits from the Node.js `process` 
+object but includes additional information like the current versions of 
+Chromium, V8, Node.js, etc.
+
+For more info, see the [`process` API documentation](api/process.md).
+
+[share-data]: faq.md#how-to-share-data-between-web-pages
+
changed in both
  base   100644 a641a0d0c756011d74d0275fa6c453ca670ffddb docs/tutorial/quick-start.md
  our    100644 dbc77f49051853ea6fd60357a814b088e5734383 docs/tutorial/quick-start.md
  their  100644 9f4502372ecdb542905e80914f2849584c43302d docs/tutorial/quick-start.md
@@ -8,6 +8,7 @@
 The old "Quick Start" document that used to live here has been split up into
 two documents:
 
+<<<<<<< .our
 * To check out how a simple Electron app is built, see
 [Writing Your First Electron App][first-app]
 * To check out the process architecture, see
@@ -20,3 +21,198 @@
 [processes]: ./application-architecture.md#main-and-renderer-processes
 [readme]: ../
 
+=======
+## Write your First Electron App
+
+Generally, an Electron app is structured like this:
+
+```text
+your-app/
+├── package.json
+├── main.js
+└── index.html
+```
+
+The format of `package.json` is exactly the same as that of Node's modules, and
+the script specified by the `main` field is the startup script of your app,
+which will run the main process. An example of your `package.json` might look
+like this:
+
+```json
+{
+  "name"    : "your-app",
+  "version" : "0.1.0",
+  "main"    : "main.js"
+}
+```
+
+__Note__: If the `main` field is not present in `package.json`, Electron will
+attempt to load an `index.js`.
+
+The `main.js` should create windows and handle system events, a typical
+example being:
+
+```javascript
+const {app, BrowserWindow} = require('electron')
+const path = require('path')
+const url = require('url')
+
+// Keep a global reference of the window object, if you don't, the window will
+// be closed automatically when the JavaScript object is garbage collected.
+let win
+
+function createWindow () {
+  // Create the browser window.
+  win = new BrowserWindow({width: 800, height: 600})
+
+  // and load the index.html of the app.
+  win.loadURL(url.format({
+    pathname: path.join(__dirname, 'index.html'),
+    protocol: 'file:',
+    slashes: true
+  }))
+
+  // Open the DevTools.
+  win.webContents.openDevTools()
+
+  // Emitted when the window is closed.
+  win.on('closed', () => {
+    // Dereference the window object, usually you would store windows
+    // in an array if your app supports multi windows, this is the time
+    // when you should delete the corresponding element.
+    win = null
+  })
+}
+
+// This method will be called when Electron has finished
+// initialization and is ready to create browser windows.
+// Some APIs can only be used after this event occurs.
+app.on('ready', createWindow)
+
+// Quit when all windows are closed.
+app.on('window-all-closed', () => {
+  // On macOS it is common for applications and their menu bar
+  // to stay active until the user quits explicitly with Cmd + Q
+  if (process.platform !== 'darwin') {
+    app.quit()
+  }
+})
+
+app.on('activate', () => {
+  // On macOS it's common to re-create a window in the app when the
+  // dock icon is clicked and there are no other windows open.
+  if (win === null) {
+    createWindow()
+  }
+})
+
+// In this file you can include the rest of your app's specific main process
+// code. You can also put them in separate files and require them here.
+```
+
+Finally the `index.html` is the web page you want to show:
+
+```html
+<!DOCTYPE html>
+<html>
+  <head>
+    <meta charset="UTF-8">
+    <title>Hello World!</title>
+  </head>
+  <body>
+    <h1>Hello World!</h1>
+    We are using node <script>document.write(process.versions.node)</script>,
+    Chrome <script>document.write(process.versions.chrome)</script>,
+    and Electron <script>document.write(process.versions.electron)</script>.
+  </body>
+</html>
+```
+
+## Run your app
+
+Once you've created your initial `main.js`, `index.html`, and `package.json` files,
+you'll probably want to try running your app locally to test it and make sure it's
+working as expected.
+
+### `electron`
+
+[`electron`](https://github.com/electron-userland/electron-prebuilt) is
+an `npm` module that contains pre-compiled versions of Electron.
+
+If you've installed it globally with `npm`, then you will only need to run the
+following in your app's source directory:
+
+```bash
+electron .
+```
+
+If you've installed it locally, then run:
+
+#### macOS / Linux
+
+```bash
+$ ./node_modules/.bin/electron .
+```
+
+#### Windows
+
+```
+$ .\node_modules\.bin\electron .
+```
+
+### Manually Downloaded Electron Binary
+
+If you downloaded Electron manually, you can also use the included
+binary to execute your app directly.
+
+#### macOS
+
+```bash
+$ ./Electron.app/Contents/MacOS/Electron your-app/
+```
+
+#### Linux
+
+```bash
+$ ./electron/electron your-app/
+```
+
+#### Windows
+
+```
+$ .\electron\electron.exe your-app\
+```
+
+`Electron.app` here is part of the Electron's release package, you can download
+it from [here](https://github.com/electron/electron/releases).
+
+### Run as a distribution
+
+After you're done writing your app, you can create a distribution by
+following the [Application Distribution](./application-distribution.md) guide
+and then executing the packaged app.
+
+### Try this Example
+
+Clone and run the code in this tutorial by using the [`electron/electron-quick-start`](https://github.com/electron/electron-quick-start)
+repository.
+
+**Note**: Running this requires [Git](https://git-scm.com) and [Node.js](https://nodejs.org/en/download/) (which includes [npm](https://npmjs.org)) on your system.
+
+```bash
+# Clone the repository
+$ git clone https://github.com/electron/electron-quick-start
+# Go into the repository
+$ cd electron-quick-start
+# Install dependencies
+$ npm install
+# Run the app
+$ npm start
+```
+
+For more example apps, see the
+[list of boilerplates](https://electron.atom.io/community/#boilerplates)
+created by the awesome electron community.
+
+[share-data]: ../faq.md#how-to-share-data-between-web-pages
+>>>>>>> .their
