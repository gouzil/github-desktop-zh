changed in both
  base   100644 832661ddeaa214176b55270f93f777a26c11ba48 spec/api-app-spec.js
  our    100644 d224eda2989332c18d655cef05a8bacc2eb6d4b8 spec/api-app-spec.js
  their  100644 8cbe66a8c48296012c92c5927e24d899fd43272b spec/api-app-spec.js
@@ -41,7 +41,7 @@
 
     it('always returns the internal electron module', (done) => {
       ipcMain.once('answer', () => done())
-      window.loadURL(`file://${path.join(__dirname, 'fixtures', 'api', 'electron-module-app', 'index.html')}`)
+      window.loadFile(path.join(__dirname, 'fixtures', 'api', 'electron-module-app', 'index.html'))
     })
   })
 })
changed in both
  base   100644 f4b70cb6e1363e44e3346c0b897683f4dca6b7d9 spec/api-browser-window-affinity-spec.js
  our    100644 f90e784bed5115013032d52be3eaae0ae14c9e8b spec/api-browser-window-affinity-spec.js
  their  100644 1b520bc918919e5e4ed34502e55afce33fff8068 spec/api-browser-window-affinity-spec.js
@@ -21,8 +21,15 @@
         height: 400,
         webPreferences: webPrefs || {}
       })
+<<<<<<< .our
       w.webContents.on('did-finish-load', () => { resolve(w) })
       w.loadURL(`file://${path.join(fixtures, 'api', 'blank.html')}`)
+=======
+      w.webContents.on('did-finish-load', () => {
+        resolve(w)
+      })
+      w.loadFile(path.join(fixtures, 'api', 'blank.html'))
+>>>>>>> .their
     })
   }
 
changed in both
  base   100644 ae45b330e6dfc574771602ef7a7ba6e80a4e81a1 spec/api-browser-window-spec.js
  our    100644 f4cba12ec19d224bc46fca898db42a99baf4972e spec/api-browser-window-spec.js
  their  100644 7318131945a6509ec5fd720fcde93de50eca0455 spec/api-browser-window-spec.js
@@ -157,12 +157,12 @@
         assert.equal(String(content), 'unload')
         done()
       })
-      w.loadURL('file://' + path.join(fixtures, 'api', 'unload.html'))
+      w.loadFile(path.join(fixtures, 'api', 'unload.html'))
     })
     it('should emit beforeunload handler', (done) => {
       w.once('onbeforeunload', () => { done() })
       w.webContents.on('did-finish-load', () => { w.close() })
-      w.loadURL(`file://${path.join(fixtures, 'api', 'beforeunload-false.html')}`)
+      w.loadFile(path.join(fixtures, 'api', 'beforeunload-false.html'))
     })
     it('should not crash when invoked synchronously inside navigation observer', (done) => {
       const events = [
@@ -204,11 +204,11 @@
         assert.equal(String(content), 'close')
         done()
       })
-      w.loadURL(`file://${path.join(fixtures, 'api', 'close.html')}`)
+      w.loadFile(path.join(fixtures, 'api', 'close.html'))
     })
     it('should emit beforeunload handler', (done) => {
       w.once('onbeforeunload', () => { done() })
-      w.loadURL(`file://${path.join(fixtures, 'api', 'close-beforeunload-false.html')}`)
+      w.loadFile(path.join(fixtures, 'api', 'close-beforeunload-false.html'))
     })
   })
 
@@ -231,6 +231,33 @@
       w.on('ready-to-show', () => { done() })
       w.loadURL('about:blank')
     })
+<<<<<<< .our
+=======
+    // TODO(nitsakh): Deprecated
+    it('should emit did-get-response-details(deprecated) event', (done) => {
+      // expected {fileName: resourceType} pairs
+      const expectedResources = {
+        'did-get-response-details.html': 'mainFrame',
+        'logo.png': 'image'
+      }
+      let responses = 0
+      w.webContents.on('-did-get-response-details', (event, status, newUrl, oldUrl, responseCode, method, referrer, headers, resourceType) => {
+        responses += 1
+        const fileName = newUrl.slice(newUrl.lastIndexOf('/') + 1)
+        const expectedType = expectedResources[fileName]
+        assert(!!expectedType, `Unexpected response details for ${newUrl}`)
+        assert(typeof status === 'boolean', 'status should be boolean')
+        assert.equal(responseCode, 200)
+        assert.equal(method, 'GET')
+        assert(typeof referrer === 'string', 'referrer should be string')
+        assert(!!headers, 'headers should be present')
+        assert(typeof headers === 'object', 'headers should be object')
+        assert.equal(resourceType, expectedType, 'Incorrect resourceType')
+        if (responses === Object.keys(expectedResources).length) done()
+      })
+      w.loadFile(path.join(fixtures, 'pages', 'did-get-response-details.html'))
+    })
+>>>>>>> .their
     it('should emit did-fail-load event for files that do not exist', (done) => {
       w.webContents.on('did-fail-load', (event, code, desc, url, isMainFrame) => {
         assert.equal(code, -6)
@@ -254,7 +281,7 @@
         assert.equal(isMainFrame, false)
         done()
       })
-      w.loadURL(`file://${path.join(fixtures, 'api', 'did-fail-load-iframe.html')}`)
+      w.loadFile(path.join(fixtures, 'api', 'did-fail-load-iframe.html'))
     })
     it('does not crash in did-fail-provisional-load handler', (done) => {
       w.webContents.once('did-fail-provisional-load', () => {
@@ -333,7 +360,7 @@
     it('allows the window to be closed from the event listener', (done) => {
       ipcRenderer.send('close-on-will-navigate', w.id)
       ipcRenderer.once('closed-on-will-navigate', () => { done() })
-      w.loadURL(`file://${fixtures}/pages/will-navigate.html`)
+      w.loadFile(path.join(fixtures, 'pages', 'will-navigate.html'))
     })
   })
 
@@ -1093,7 +1120,7 @@
             preload: preload
           }
         })
-        w.loadURL(`file://${path.join(fixtures, 'api', 'preload.html')}`)
+        w.loadFile(path.join(fixtures, 'api', 'preload.html'))
       })
       it('can successfully delete the Buffer global', (done) => {
         const preload = path.join(fixtures, 'module', 'delete-buffer.js')
@@ -1108,7 +1135,7 @@
             preload: preload
           }
         })
-        w.loadURL(`file://${path.join(fixtures, 'api', 'preload.html')}`)
+        w.loadFile(path.join(fixtures, 'api', 'preload.html'))
       })
     })
 
@@ -1145,7 +1172,7 @@
             preload: path.join(fixtures, 'module', 'set-global-preload-3.js')
           }
         })
-        w.loadURL('file://' + path.join(fixtures, 'api', 'preloads.html'))
+        w.loadFile(path.join(fixtures, 'api', 'preloads.html'))
       })
     })
 
@@ -1164,7 +1191,7 @@
             additionalArguments: ['--my-magic-arg']
           }
         })
-        w.loadURL(`file://${path.join(fixtures, 'api', 'blank.html')}`)
+        w.loadFile(path.join(fixtures, 'api', 'blank.html'))
       })
 
       it('adds extra value args to process.argv in the renderer process', (done) => {
@@ -1181,7 +1208,7 @@
             additionalArguments: ['--my-magic-arg=foo']
           }
         })
-        w.loadURL(`file://${path.join(fixtures, 'api', 'blank.html')}`)
+        w.loadFile(path.join(fixtures, 'api', 'blank.html'))
       })
     })
 
@@ -1201,7 +1228,7 @@
             nodeIntegration: false
           }
         })
-        w.loadURL(`file://${path.join(fixtures, 'api', 'blank.html')}`)
+        w.loadFile(path.join(fixtures, 'api', 'blank.html'))
       })
     })
 
@@ -1253,7 +1280,7 @@
             preload: preload
           }
         })
-        w.loadURL('file://' + path.join(fixtures, 'api', 'preload.html'))
+        w.loadFile(path.join(fixtures, 'api', 'preload.html'))
       })
 
       it('exposes ipcRenderer to preload script (path has special chars)', function (done) {
@@ -1270,7 +1297,7 @@
             preload: preloadSpecialChars
           }
         })
-        w.loadURL('file://' + path.join(fixtures, 'api', 'preload.html'))
+        w.loadFile(path.join(fixtures, 'api', 'preload.html'))
       })
 
       it('exposes "exit" event to preload script', function (done) {
@@ -1284,7 +1311,7 @@
         })
         let htmlPath = path.join(fixtures, 'api', 'sandbox.html?exit-event')
         const pageUrl = 'file://' + htmlPath
-        w.loadURL(pageUrl)
+        w.loadFile(htmlPath)
         ipcMain.once('answer', function (event, url) {
           let expectedUrl = pageUrl
           if (process.platform === 'win32') {
@@ -1307,7 +1334,7 @@
         ipcRenderer.send('set-web-preferences-on-next-new-window', w.webContents.id, 'preload', preload)
         let htmlPath = path.join(fixtures, 'api', 'sandbox.html?window-open')
         const pageUrl = 'file://' + htmlPath
-        w.loadURL(pageUrl)
+        w.loadFile(htmlPath)
         w.webContents.once('new-window', (e, url, frameName, disposition, options) => {
           let expectedUrl = pageUrl
           if (process.platform === 'win32') {
@@ -1335,9 +1362,8 @@
         })
         ipcRenderer.send('set-web-preferences-on-next-new-window', w.webContents.id, 'preload', preload)
         let htmlPath = path.join(fixtures, 'api', 'sandbox.html?window-open-external')
-        const pageUrl = 'file://' + htmlPath
         let popupWindow
-        w.loadURL(pageUrl)
+        w.loadFile(htmlPath)
         w.webContents.once('new-window', (e, url, frameName, disposition, options) => {
           assert.equal(url, 'http://www.google.com/#q=electron')
           assert.equal(options.width, 505)
@@ -1378,7 +1404,7 @@
           assert.equal(args.includes('--enable-sandbox'), true)
           done()
         })
-        w.loadURL(`file://${path.join(fixtures, 'api', 'new-window.html')}`)
+        w.loadFile(path.join(fixtures, 'api', 'new-window.html'))
       })
 
       it('should open windows with the options configured via new-window event listeners', (done) => {
@@ -1397,7 +1423,7 @@
           assert.equal(webPreferences.foo, 'bar')
           done()
         })
-        w.loadURL(`file://${path.join(fixtures, 'api', 'new-window.html')}`)
+        w.loadFile(path.join(fixtures, 'api', 'new-window.html'))
       })
 
       it('should set ipc event sender correctly', (done) => {
@@ -1412,8 +1438,12 @@
         ipcRenderer.send('set-web-preferences-on-next-new-window', w.webContents.id, 'preload', preload)
 
         let htmlPath = path.join(fixtures, 'api', 'sandbox.html?verify-ipc-sender')
+<<<<<<< .our
         const pageUrl = 'file://' + htmlPath
         let childWc
+=======
+        w.loadFile(htmlPath)
+>>>>>>> .their
         w.webContents.once('new-window', (e, url, frameName, disposition, options) => {
           childWc = options.webContents
           assert.notEqual(w.webContents, childWc)
@@ -1521,7 +1551,7 @@
             done()
           }, 100)
         })
-        w.loadURL('file://' + path.join(fixtures, 'pages', 'window-open.html'))
+        w.loadFile(path.join(fixtures, 'pages', 'window-open.html'))
       })
 
       it('releases memory after popup is closed', (done) => {
@@ -1638,7 +1668,7 @@
             preload: preload
           }
         })
-        w.loadURL('file://' + path.join(fixtures, 'api', 'preload.html'))
+        w.loadFile(path.join(fixtures, 'api', 'preload.html'))
       })
 
       it('webview in sandbox renderer', async () => {
@@ -1675,28 +1705,28 @@
           assert.equal(content, 'Hello')
           done()
         })
-        w.loadURL(`file://${path.join(fixtures, 'api', 'native-window-open-blank.html')}`)
+        w.loadFile(path.join(fixtures, 'api', 'native-window-open-blank.html'))
       })
       it('opens window of same domain with cross-scripting enabled', (done) => {
         ipcMain.once('answer', (event, content) => {
           assert.equal(content, 'Hello')
           done()
         })
-        w.loadURL(`file://${path.join(fixtures, 'api', 'native-window-open-file.html')}`)
+        w.loadFile(path.join(fixtures, 'api', 'native-window-open-file.html'))
       })
       it('blocks accessing cross-origin frames', (done) => {
         ipcMain.once('answer', (event, content) => {
           assert.equal(content, 'Blocked a frame with origin "file://" from accessing a cross-origin frame.')
           done()
         })
-        w.loadURL(`file://${path.join(fixtures, 'api', 'native-window-open-cross-origin.html')}`)
+        w.loadFile(path.join(fixtures, 'api', 'native-window-open-cross-origin.html'))
       })
       it('opens window from <iframe> tags', (done) => {
         ipcMain.once('answer', (event, content) => {
           assert.equal(content, 'Hello')
           done()
         })
-        w.loadURL(`file://${path.join(fixtures, 'api', 'native-window-open-iframe.html')}`)
+        w.loadFile(path.join(fixtures, 'api', 'native-window-open-iframe.html'))
       })
       it('loads native addons correctly after reload', (done) => {
         if (!nativeModulesEnabled) return done()
@@ -1709,7 +1739,7 @@
           })
           w.reload()
         })
-        w.loadURL(`file://${path.join(fixtures, 'api', 'native-window-open-native-addon.html')}`)
+        w.loadFile(path.join(fixtures, 'api', 'native-window-open-native-addon.html'))
       })
       it('should inherit the nativeWindowOpen setting in opened windows', (done) => {
         w.destroy()
@@ -1726,7 +1756,7 @@
           assert.equal(args.includes('--native-window-open'), true)
           done()
         })
-        w.loadURL(`file://${path.join(fixtures, 'api', 'new-window.html')}`)
+        w.loadFile(path.join(fixtures, 'api', 'new-window.html'))
       })
       it('should open windows with the options configured via new-window event listeners', (done) => {
         w.destroy()
@@ -1744,7 +1774,7 @@
           assert.equal(webPreferences.foo, 'bar')
           done()
         })
-        w.loadURL(`file://${path.join(fixtures, 'api', 'new-window.html')}`)
+        w.loadFile(path.join(fixtures, 'api', 'new-window.html'))
       })
       it('retains the original web preferences when window.location is changed to a new origin', async () => {
         await serveFileFromProtocol('foo', path.join(fixtures, 'api', 'window-open-location-change.html'))
@@ -1767,7 +1797,7 @@
             assert.equal(typeofProcess, 'undefined')
             resolve()
           })
-          w.loadURL(`file://${path.join(fixtures, 'api', 'window-open-location-open.html')}`)
+          w.loadFile(path.join(fixtures, 'api', 'window-open-location-open.html'))
         })
       })
     })
@@ -1791,22 +1821,22 @@
         assert.equal(content, 'Hello')
         done()
       })
-      w.loadURL(`file://${path.join(fixtures, 'api', 'native-window-open-isolated.html')}`)
+      w.loadFile(path.join(fixtures, 'api', 'native-window-open-isolated.html'))
     })
   })
 
   describe('beforeunload handler', () => {
     it('returning undefined would not prevent close', (done) => {
       w.once('closed', () => { done() })
-      w.loadURL('file://' + path.join(fixtures, 'api', 'close-beforeunload-undefined.html'))
+      w.loadFile(path.join(fixtures, 'api', 'close-beforeunload-undefined.html'))
     })
     it('returning false would prevent close', (done) => {
       w.once('onbeforeunload', () => { done() })
-      w.loadURL(`file://${path.join(fixtures, 'api', 'close-beforeunload-false.html')}`)
+      w.loadFile(path.join(fixtures, 'api', 'close-beforeunload-false.html'))
     })
     it('returning empty string would prevent close', (done) => {
       w.once('onbeforeunload', () => { done() })
-      w.loadURL(`file://${path.join(fixtures, 'api', 'close-beforeunload-empty-string.html')}`)
+      w.loadFile(path.join(fixtures, 'api', 'close-beforeunload-empty-string.html'))
     })
     it('emits for each close attempt', (done) => {
       let beforeUnloadCount = 0
@@ -1819,7 +1849,7 @@
         }
       })
       w.webContents.once('did-finish-load', () => { w.close() })
-      w.loadURL(`file://${path.join(fixtures, 'api', 'beforeunload-false-prevent3.html')}`)
+      w.loadFile(path.join(fixtures, 'api', 'beforeunload-false-prevent3.html'))
     })
     it('emits for each reload attempt', (done) => {
       let beforeUnloadCount = 0
@@ -1837,7 +1867,7 @@
         })
         w.reload()
       })
-      w.loadURL(`file://${path.join(fixtures, 'api', 'beforeunload-false-prevent3.html')}`)
+      w.loadFile(path.join(fixtures, 'api', 'beforeunload-false-prevent3.html'))
     })
     it('emits for each navigation attempt', (done) => {
       let beforeUnloadCount = 0
@@ -1855,7 +1885,7 @@
         })
         w.loadURL('about:blank')
       })
-      w.loadURL(`file://${path.join(fixtures, 'api', 'beforeunload-false-prevent3.html')}`)
+      w.loadFile(path.join(fixtures, 'api', 'beforeunload-false-prevent3.html'))
     })
   })
 
@@ -1897,7 +1927,7 @@
         done()
       })
 
-      w.loadURL(`file://${path.join(fixtures, 'pages', 'visibilitychange.html')}`)
+      w.loadFile(path.join(fixtures, 'pages', 'visibilitychange.html'))
     })
     it('visibilityState changes when window is hidden', (done) => {
       w = new BrowserWindow({width: 100, height: 100})
@@ -1915,7 +1945,7 @@
         w.hide()
       })
 
-      w.loadURL(`file://${path.join(fixtures, 'pages', 'visibilitychange.html')}`)
+      w.loadFile(path.join(fixtures, 'pages', 'visibilitychange.html'))
     })
     it('visibilityState changes when window is shown', (done) => {
       w = new BrowserWindow({width: 100, height: 100})
@@ -1932,7 +1962,7 @@
         w.show()
       })
 
-      w.loadURL(`file://${path.join(fixtures, 'pages', 'visibilitychange.html')}`)
+      w.loadFile(path.join(fixtures, 'pages', 'visibilitychange.html'))
     })
     it('visibilityState changes when window is shown inactive', function (done) {
       if (isCI && process.platform === 'win32') {
@@ -1958,7 +1988,7 @@
         w.showInactive()
       })
 
-      w.loadURL(`file://${path.join(fixtures, 'pages', 'visibilitychange.html')}`)
+      w.loadFile(path.join(fixtures, 'pages', 'visibilitychange.html'))
     })
     it('visibilityState changes when window is minimized', function (done) {
       if (isCI && process.platform === 'linux') {
@@ -1985,7 +2015,7 @@
         w.minimize()
       })
 
-      w.loadURL(`file://${path.join(fixtures, 'pages', 'visibilitychange.html')}`)
+      w.loadFile(path.join(fixtures, 'pages', 'visibilitychange.html'))
     })
     it('visibilityState remains visible if backgroundThrottling is disabled', (done) => {
       w = new BrowserWindow({
@@ -2017,7 +2047,7 @@
       })
       w.show()
 
-      w.loadURL(`file://${path.join(fixtures, 'pages', 'visibilitychange.html')}`)
+      w.loadFile(path.join(fixtures, 'pages', 'visibilitychange.html'))
     })
   })
 
@@ -2036,7 +2066,7 @@
         assert.equal(additionalFeatures[0], 'this-is-not-a-standard-feature')
         done()
       })
-      w.loadURL(`file://${fixtures}/pages/window-open.html`)
+      w.loadFile(path.join(fixtures, 'pages', 'window-open.html'))
     })
     it('emits when window.open is called with no webPreferences', (done) => {
       w.destroy()
@@ -2048,8 +2078,9 @@
         assert.equal(additionalFeatures[0], 'this-is-not-a-standard-feature')
         done()
       })
-      w.loadURL(`file://${fixtures}/pages/window-open.html`)
+      w.loadFile(path.join(fixtures, 'pages', 'window-open.html'))
     })
+
     it('emits when link with target is called', (done) => {
       w.webContents.once('new-window', (e, url, frameName) => {
         e.preventDefault()
@@ -2057,7 +2088,7 @@
         assert.equal(frameName, 'target')
         done()
       })
-      w.loadURL(`file://${fixtures}/pages/target-name.html`)
+      w.loadFile(path.join(fixtures, 'pages', 'target-name.html'))
     })
   })
 
@@ -2157,7 +2188,7 @@
 
     it('subscribes to frame updates', (done) => {
       let called = false
-      w.loadURL(`file://${fixtures}/api/frame-subscriber.html`)
+      w.loadFile(path.join(fixtures, 'api', 'frame-subscriber.html'))
       w.webContents.on('dom-ready', () => {
         w.webContents.beginFrameSubscription(function (data) {
           // This callback might be called twice.
@@ -2172,7 +2203,7 @@
     })
     it('subscribes to frame updates (only dirty rectangle)', (done) => {
       let called = false
-      w.loadURL(`file://${fixtures}/api/frame-subscriber.html`)
+      w.loadFile(path.join(fixtures, 'api', 'frame-subscriber.html'))
       w.webContents.on('dom-ready', () => {
         w.webContents.beginFrameSubscription(true, (data) => {
           // This callback might be called twice.
@@ -2186,7 +2217,7 @@
       })
     })
     it('throws error when subscriber is not well defined', (done) => {
-      w.loadURL(`file://${fixtures}'/api/frame-subscriber.html`)
+      w.loadFile(path.join(fixtures, 'api', 'frame-subscriber.html'))
       try {
         w.webContents.beginFrameSubscription(true, true)
       } catch (e) {
@@ -2223,7 +2254,7 @@
           done()
         })
       })
-      w.loadURL('file://' + fixtures + '/pages/save_page/index.html')
+      w.loadFile(path.join(fixtures, 'pages', 'save_page', 'index.html'))
     })
   })
 
@@ -3172,7 +3203,7 @@
         assert.deepEqual(data, expectedContextData)
         done()
       })
-      w.loadURL(`file://${fixtures}/api/isolated.html`)
+      w.loadFile(path.join(fixtures, 'api', 'isolated.html'))
     })
     it('recreates the contexts on reload', (done) => {
       w.webContents.once('did-finish-load', () => {
@@ -3182,21 +3213,21 @@
         })
         w.webContents.reload()
       })
-      w.loadURL(`file://${fixtures}/api/isolated.html`)
+      w.loadFile(path.join(fixtures, 'api', 'isolated.html'))
     })
     it('enables context isolation on child windows', (done) => {
       app.once('browser-window-created', (event, window) => {
         assert.equal(window.webContents.getLastWebPreferences().contextIsolation, true)
         done()
       })
-      w.loadURL(`file://${fixtures}/pages/window-open.html`)
+      w.loadFile(path.join(fixtures, 'pages', 'window-open.html'))
     })
     it('separates the page context from the Electron/preload context with sandbox on', (done) => {
       ipcMain.once('isolated-sandbox-world', (event, data) => {
         assert.deepEqual(data, expectedContextData)
         done()
       })
-      w.loadURL(`file://${fixtures}/api/isolated.html`)
+      w.loadFile(path.join(fixtures, 'api', 'isolated.html'))
     })
     it('recreates the contexts on reload with sandbox on', (done) => {
       w.webContents.once('did-finish-load', () => {
@@ -3206,7 +3237,7 @@
         })
         w.webContents.reload()
       })
-      w.loadURL(`file://${fixtures}/api/isolated.html`)
+      w.loadFile(path.join(fixtures, 'api', 'isolated.html'))
     })
   })
 
@@ -3238,12 +3269,12 @@
         assertWithinDelta(size.height, 100, 2, 'height')
         done()
       })
-      w.loadURL('file://' + fixtures + '/api/offscreen-rendering.html')
+      w.loadFile(path.join(fixtures, 'api', 'offscreen-rendering.html'))
     })
 
     describe('window.webContents.isOffscreen()', () => {
       it('is true for offscreen type', () => {
-        w.loadURL('file://' + fixtures + '/api/offscreen-rendering.html')
+        w.loadFile(path.join(fixtures, 'api', 'offscreen-rendering.html'))
         assert.equal(w.webContents.isOffscreen(), true)
       })
 
@@ -3260,7 +3291,7 @@
           assert.equal(w.webContents.isPainting(), true)
           done()
         })
-        w.loadURL('file://' + fixtures + '/api/offscreen-rendering.html')
+        w.loadFile(path.join(fixtures, 'api', 'offscreen-rendering.html'))
       })
     })
 
@@ -3271,7 +3302,7 @@
           assert.equal(w.webContents.isPainting(), false)
           done()
         })
-        w.loadURL('file://' + fixtures + '/api/offscreen-rendering.html')
+        w.loadFile(path.join(fixtures, 'api', 'offscreen-rendering.html'))
       })
     })
 
@@ -3285,7 +3316,7 @@
             done()
           })
         })
-        w.loadURL('file://' + fixtures + '/api/offscreen-rendering.html')
+        w.loadFile(path.join(fixtures, 'api', 'offscreen-rendering.html'))
       })
     })
 
@@ -3295,7 +3326,7 @@
           assert.equal(w.webContents.getFrameRate(), 60)
           done()
         })
-        w.loadURL('file://' + fixtures + '/api/offscreen-rendering.html')
+        w.loadFile(path.join(fixtures, 'api', 'offscreen-rendering.html'))
       })
     })
 
@@ -3308,7 +3339,7 @@
             done()
           })
         })
-        w.loadURL('file://' + fixtures + '/api/offscreen-rendering.html')
+        w.loadFile(path.join(fixtures, 'api', 'offscreen-rendering.html'))
       })
     })
   })
changed in both
  base   100644 1d98e7993946f8f855670da3b53a60677b7d029b spec/api-debugger-spec.js
  our    100644 0f5cc614c98bfe6c679575bc1a9c76e3b145ac71 spec/api-debugger-spec.js
  their  100644 405f1c6f08b00ae1cda982bc9f16d0f58c09c082 spec/api-debugger-spec.js
@@ -33,7 +33,7 @@
           done()
         }
       })
-      w.webContents.loadURL(`file://${path.join(fixtures, 'pages', 'a.html')}`)
+      w.webContents.loadFile(path.join(fixtures, 'pages', 'a.html'))
     })
 
     it('fails when protocol version is not supported', done => {
@@ -107,9 +107,14 @@
     it('fires message event', done => {
       const url = process.platform !== 'win32'
         ? `file://${path.join(fixtures, 'pages', 'a.html')}`
+<<<<<<< .our
         : `file:///${path.join(fixtures, 'pages', 'a.html').replace(/\\/g, '/')}`
       w.webContents.loadURL(url)
 
+=======
+        : 'file:///' + path.join(fixtures, 'pages', 'a.html').replace(/\\/g, '/')
+      w.webContents.loadFile(path.join(fixtures, 'pages', 'a.html'))
+>>>>>>> .their
       try {
         w.webContents.debugger.attach()
       } catch (err) {
changed in both
  base   100644 63e0e24bdc3472bdfaa435ec9b8551648fee6ab7 spec/api-ipc-main-spec.js
  our    100644 e31369faca4d4ee7ff24fdae4aa9a404ed8d28f4 spec/api-ipc-main-spec.js
  their  100644 4aae972d5353eca03c78951c0ff8376f3dde2d12 spec/api-ipc-main-spec.js
@@ -27,7 +27,7 @@
         event.returnValue = null
         done()
       })
-      w.loadURL(`file://${path.join(fixtures, 'api', 'send-sync-message.html')}`)
+      w.loadFile(path.join(fixtures, 'api', 'send-sync-message.html'))
     })
 
     it('does not crash when reply is sent by multiple listeners', (done) => {
@@ -39,7 +39,7 @@
         event.returnValue = null
         done()
       })
-      w.loadURL(`file://${path.join(fixtures, 'api', 'send-sync-message.html')}`)
+      w.loadFile(path.join(fixtures, 'api', 'send-sync-message.html'))
     })
   })
 
@@ -77,7 +77,7 @@
         done()
       })
 
-      w.loadURL(`file://${path.join(fixtures, 'api', 'render-view-deleted.html')}`)
+      w.loadFile(path.join(fixtures, 'api', 'render-view-deleted.html'))
     })
   })
 })
changed in both
  base   100644 679637d52e0ca745ff5dcfa81b4af6717962af63 spec/api-ipc-renderer-spec.js
  our    100644 748851ec1c0a7e499bdfd9d0ae4cd1be1d02d705 spec/api-ipc-renderer-spec.js
  their  100644 8f06d3b31ae1500120e0aaace57c0f4227552b3a spec/api-ipc-renderer-spec.js
@@ -152,7 +152,7 @@
         ipcRenderer.sendTo(contents.id, 'ping', webContentsId)
       })
 
-      contents.loadURL(`file://${path.join(fixtures, 'pages', 'ping-pong.html')}`)
+      contents.loadFile(path.join(fixtures, 'pages', 'ping-pong.html'))
     })
   })
 
@@ -180,7 +180,7 @@
 
         w.webContents.reload()
       })
-      w.loadURL(`file://${path.join(fixtures, 'api', 'remote-event-handler.html')}`)
+      w.loadFile(path.join(fixtures, 'api', 'remote-event-handler.html'))
     })
   })
 
changed in both
  base   100644 1b864440fe88bd2559ee00601fe19df8f7e743da spec/api-session-spec.js
  our    100644 b9093d1d6335ece5ca713a668a67bf3b40f4fabe spec/api-session-spec.js
  their  100644 da58280a31f8bac185ba69f6bdd4c68edf950a07 spec/api-session-spec.js
@@ -221,7 +221,7 @@
         assert.equal(count, 0)
         done()
       })
-      w.loadURL('file://' + path.join(fixtures, 'api', 'localstorage.html'))
+      w.loadFile(path.join(fixtures, 'api', 'localstorage.html'))
       w.webContents.on('did-finish-load', () => {
         const options = {
           origin: 'file://',
changed in both
  base   100644 847462e2f48eca7bd5b5fe442fac4a5765542d88 spec/api-web-contents-spec.js
  our    100644 be02cb3f84001a541d64b11fe6eda50fc32e8afd spec/api-web-contents-spec.js
  their  100644 aa03921c0db302a49d2c96d612307d1c1ab45feb spec/api-web-contents-spec.js
@@ -51,7 +51,7 @@
         done()
       })
 
-      w.loadURL(`file://${path.join(fixtures, 'pages', 'webview-zoom-factor.html')}`)
+      w.loadFile(path.join(fixtures, 'pages', 'webview-zoom-factor.html'))
       w.webContents.openDevTools()
     })
   })
@@ -150,7 +150,7 @@
 
   describe('before-input-event event', () => {
     it('can prevent document keyboard events', (done) => {
-      w.loadURL(`file://${path.join(__dirname, 'fixtures', 'pages', 'key-events.html')}`)
+      w.loadFile(path.join(__dirname, 'fixtures', 'pages', 'key-events.html'))
       w.webContents.once('did-finish-load', () => {
         ipcMain.once('keydown', (event, key) => {
           assert.equal(key, 'b')
@@ -164,7 +164,7 @@
     })
 
     it('has the correct properties', (done) => {
-      w.loadURL(`file://${path.join(__dirname, 'fixtures', 'pages', 'base-page.html')}`)
+      w.loadFile(path.join(__dirname, 'fixtures', 'pages', 'base-page.html'))
       w.webContents.once('did-finish-load', () => {
         const testBeforeInput = (opts) => {
           return new Promise((resolve, reject) => {
@@ -250,7 +250,7 @@
 
   describe('sendInputEvent(event)', () => {
     beforeEach((done) => {
-      w.loadURL(`file://${path.join(__dirname, 'fixtures', 'pages', 'key-events.html')}`)
+      w.loadFile(path.join(__dirname, 'fixtures', 'pages', 'key-events.html'))
       w.webContents.once('did-finish-load', () => done())
     })
 
@@ -367,7 +367,7 @@
           done()
         })
         w.show()
-        w.loadURL(`file://${path.join(__dirname, 'fixtures', 'pages', 'focus-web-contents.html')}`)
+        w.loadFile(path.join(fixtures, 'pages', 'focus-web-contents.html'))
       })
     })
   })
@@ -556,10 +556,10 @@
         })
       })
       ipcMain.once('temporary-zoom-set', (e, zoomLevel) => {
-        w2.loadURL(`file://${fixtures}/pages/c.html`)
+        w2.loadFile(path.join(fixtures, 'pages', 'c.html'))
         finalZoomLevel = zoomLevel
       })
-      w.loadURL(`file://${fixtures}/pages/webframe-zoom.html`)
+      w.loadFile(path.join(fixtures, 'pages', 'webframe-zoom.html'))
     })
 
     it('cannot persist zoom level after navigation with webFrame', (done) => {
@@ -581,10 +581,10 @@
       })
       ipcMain.once('zoom-level-set', (e, zoomLevel) => {
         assert.equal(zoomLevel, 0.6)
-        w.loadURL(`file://${fixtures}/pages/d.html`)
+        w.loadFile(path.join(fixtures, 'pages', 'd.html'))
         initialNavigation = false
       })
-      w.loadURL(`file://${fixtures}/pages/c.html`)
+      w.loadFile(path.join(fixtures, 'pages', 'c.html'))
     })
   })
 
@@ -611,20 +611,20 @@
       w.webContents.on('will-prevent-unload', (e) => {
         assert.fail('should not have fired')
       })
-      w.loadURL('file://' + path.join(fixtures, 'api', 'close-beforeunload-undefined.html'))
+      w.loadFile(path.join(fixtures, 'api', 'close-beforeunload-undefined.html'))
     })
 
     it('emits if beforeunload returns false', (done) => {
       w.webContents.on('will-prevent-unload', () => {
         done()
       })
-      w.loadURL('file://' + path.join(fixtures, 'api', 'close-beforeunload-false.html'))
+      w.loadFile(path.join(fixtures, 'api', 'close-beforeunload-false.html'))
     })
 
     it('supports calling preventDefault on will-prevent-unload events', (done) => {
       ipcRenderer.send('prevent-next-will-prevent-unload', w.webContents.id)
       w.once('closed', () => done())
-      w.loadURL('file://' + path.join(fixtures, 'api', 'close-beforeunload-false.html'))
+      w.loadFile(path.join(fixtures, 'api', 'close-beforeunload-false.html'))
     })
   })
 
@@ -708,13 +708,13 @@
         if (count === 0) {
           count += 1
           assert.equal(color, '#FFEEDD')
-          w.loadURL(`file://${path.join(__dirname, 'fixtures', 'pages', 'base-page.html')}`)
+          w.loadFile(path.join(fixtures, 'pages', 'base-page.html'))
         } else if (count === 1) {
           assert.equal(color, null)
           done()
         }
       })
-      w.loadURL(`file://${path.join(__dirname, 'fixtures', 'pages', 'theme-color.html')}`)
+      w.loadFile(path.join(fixtures, 'pages', 'theme-color.html'))
     })
   })
 
@@ -726,7 +726,7 @@
           done()
         }
       })
-      w.loadURL(`file://${fixtures}/pages/a.html`)
+      w.loadFile(path.join(fixtures, 'pages', 'a.html'))
     })
   })
 
changed in both
  base   100644 f87554f32e267b46fe3501405617a289b6cccedb spec/asar-spec.js
  our    100644 489f68c96d41e80c308560a98486a07756a03be7 spec/asar-spec.js
  their  100644 9d70de09cb48b015115a90a5d9736c737100a434 spec/asar-spec.js
@@ -1003,7 +1003,6 @@
   })
 
   describe('asar protocol', function () {
-    var url = require('url')
     var w = null
 
     afterEach(function () {
@@ -1064,16 +1063,11 @@
         height: 400
       })
       var p = path.resolve(fixtures, 'asar', 'web.asar', 'index.html')
-      var u = url.format({
-        protocol: 'file',
-        slashed: true,
-        pathname: p
-      })
       ipcMain.once('dirname', function (event, dirname) {
         assert.equal(dirname, path.dirname(p))
         done()
       })
-      w.loadURL(u)
+      w.loadFile(p)
     })
 
     it('loads script tag in html', function (done) {
@@ -1087,12 +1081,7 @@
         height: 400
       })
       var p = path.resolve(fixtures, 'asar', 'script.asar', 'index.html')
-      var u = url.format({
-        protocol: 'file',
-        slashed: true,
-        pathname: p
-      })
-      w.loadURL(u)
+      w.loadFile(p)
       ipcMain.once('ping', function (event, message) {
         assert.equal(message, 'pong')
         done()
@@ -1112,12 +1101,7 @@
         height: 400
       })
       var p = path.resolve(fixtures, 'asar', 'video.asar', 'index.html')
-      var u = url.format({
-        protocol: 'file',
-        slashed: true,
-        pathname: p
-      })
-      w.loadURL(u)
+      w.loadFile(p)
       ipcMain.on('asar-video', function (event, message, error) {
         if (message === 'ended') {
           assert(!error)
changed in both
  base   100644 05b833fae9a82dd08457ee8854a2a416b0f54941 spec/chromium-spec.js
  our    100644 d90269769d269e4054d25cba4b6c4ac8a1929aa6 spec/chromium-spec.js
  their  100644 7931e728334de04cbacada65b897881345a5c6c4 spec/chromium-spec.js
@@ -145,7 +145,7 @@
           })
         }
       })
-      w.loadURL(`file://${fixtures}/pages/media-id-reset.html`)
+      w.loadFile(path.join(fixtures, 'pages', 'media-id-reset.html'))
     })
   })
 
@@ -184,7 +184,7 @@
         }
       })
       w.webContents.on('crashed', () => done(new Error('WebContents crashed.')))
-      w.loadURL(`file://${fixtures}/pages/service-worker/index.html`)
+      w.loadFile(path.join(fixtures, 'pages', 'service-worker', 'index.html'))
     })
 
     it('should register for intercepted file scheme', (done) => {
@@ -222,7 +222,7 @@
         }
       })
       w.webContents.on('crashed', () => done(new Error('WebContents crashed.')))
-      w.loadURL(`file://${fixtures}/pages/service-worker/index.html`)
+      w.loadFile(path.join(fixtures, 'pages', 'service-worker', 'index.html'))
     })
   })
 
@@ -275,7 +275,7 @@
           w.close()
           done()
         })
-        w.loadURL(`file://${fixtures}/pages/window-open.html`)
+        w.loadFile(path.join(fixtures, 'pages', 'window-open.html'))
       })
     }
 
@@ -396,7 +396,7 @@
 
     it('handles cycles when merging the parent options into the child options', (done) => {
       w = BrowserWindow.fromId(ipcRenderer.sendSync('create-window-with-options-cycle'))
-      w.loadURL(`file://${fixtures}/pages/window-open.html`)
+      w.loadFile(path.join(fixtures, 'pages', 'window-open.html'))
       w.webContents.once('new-window', (event, url, frameName, disposition, options) => {
         assert.equal(options.show, false)
         assert.deepEqual(options.foo, {
@@ -513,15 +513,13 @@
   })
 
   describe('window.opener', () => {
-    let url = `file://${fixtures}/pages/window-opener.html`
-
     it('is null for main window', (done) => {
       w = new BrowserWindow({ show: false })
       w.webContents.once('ipc-message', (event, args) => {
         assert.deepEqual(args, ['opener', null])
         done()
       })
-      w.loadURL(url)
+      w.loadFile(path.join(fixtures, 'pages', 'window-opener.html'))
     })
 
     it('is not null for window opened by window.open', (done) => {
@@ -1101,7 +1099,7 @@
           assert.equal(parsedURL.query.src, pagePath)
           assert.equal(w.webContents.getTitle(), 'cat.pdf')
         })
-        w.webContents.loadURL(pagePath)
+        w.loadFile(path.join(fixtures, 'pages', page))
       }
     })
 
merged
  result 100644 27dfd3286919f69c119d25c0a7f0928791458f17 spec/fixtures/no-proprietary-codecs.js
  our    100644 23a7d815a9249d4191d7d5045a83fa683b14824b spec/fixtures/no-proprietary-codecs.js
@@ -6,7 +6,6 @@
 
 const {app, BrowserWindow, ipcMain} = require('electron')
 const path = require('path')
-const url = require('url')
 
 const MEDIA_ERR_SRC_NOT_SUPPORTED = 4
 const FIVE_MINUTES = 5 * 60 * 1000
@@ -18,11 +17,7 @@
     show: false
   })
 
-  window.loadURL(url.format({
-    protocol: 'file',
-    slashed: true,
-    pathname: path.resolve(__dirname, 'asar', 'video.asar', 'index.html')
-  }))
+  window.loadFile(path.resolve(__dirname, 'asar', 'video.asar', 'index.html'))
 
   ipcMain.on('asar-video', (event, message, error) => {
     if (message === 'ended') {
changed in both
  base   100644 072719e6ad8abdae8dd664b2fec2e1267cfe8ad2 spec/webview-spec.js
  our    100644 db75a4e3754e24a5e6740be61be4f4098c58006e spec/webview-spec.js
  their  100644 6accbb6d262f77253d7c75b132634699ec68a9bc spec/webview-spec.js
@@ -64,10 +64,17 @@
     return closeTheWindow()
   })
 
+<<<<<<< .our
   it('works without script tag in page', async () => {
     const w = await openTheWindow({show: false})
     w.loadURL('file://' + fixtures + '/pages/webview-no-script.html')
     await emittedOnce(ipcMain, 'pong')
+=======
+  it('works without script tag in page', (done) => {
+    w = new BrowserWindow({show: false})
+    ipcMain.once('pong', () => done())
+    w.loadFile(path.join(fixtures, 'pages', 'webview-no-script.html'))
+>>>>>>> .their
   })
 
   it('is disabled when nodeIntegration is disabled', async () => {
@@ -78,11 +85,22 @@
         preload: path.join(fixtures, 'module', 'preload-webview.js')
       }
     })
+<<<<<<< .our
 
     w.loadURL(`file://${fixtures}/pages/webview-no-script.html`)
     const [, type] = await emittedOnce(ipcMain, 'webview')
 
     expect(type).to.equal('undefined', 'WebView still exists')
+=======
+    ipcMain.once('webview', (event, type) => {
+      if (type === 'undefined') {
+        done()
+      } else {
+        done('WebView still exists')
+      }
+    })
+    w.loadFile(path.join(fixtures, 'pages', 'webview-no-script.html'))
+>>>>>>> .their
   })
 
   it('is enabled when the webviewTag option is enabled and the nodeIntegration option is disabled', async () => {
@@ -94,11 +112,22 @@
         webviewTag: true
       }
     })
+<<<<<<< .our
 
     w.loadURL(`file://${fixtures}/pages/webview-no-script.html`)
     const [, type] = await emittedOnce(ipcMain, 'webview')
 
     expect(type).to.not.equal('undefined', 'WebView is not created')
+=======
+    ipcMain.once('webview', (event, type) => {
+      if (type !== 'undefined') {
+        done()
+      } else {
+        done('WebView is not created')
+      }
+    })
+    w.loadFile(path.join(fixtures, 'pages', 'webview-no-script.html'))
+>>>>>>> .their
   })
 
   describe('src attribute', () => {
@@ -1160,9 +1189,14 @@
       assert.equal(visibilityState, 'visible')
     })
 
+<<<<<<< .our
     it('inherits the parent window visibility state and receives visibilitychange events', async () => {
       const w = await openTheWindow({ show: false })
       w.loadURL(`file://${fixtures}/pages/webview-visibilitychange.html`)
+=======
+      w.loadFile(path.join(fixtures, 'pages', 'webview-visibilitychange.html'))
+    })
+>>>>>>> .their
 
       let [, visibilityState, hidden] = await emittedOnce(ipcMain, 'pong')
       assert.equal(visibilityState, 'hidden')
@@ -1177,6 +1211,10 @@
         assert.equal(visibilityState, 'visible')
         assert.equal(hidden, false)
       })
+<<<<<<< .our
+=======
+      w.loadFile(path.join(fixtures, 'pages', 'webview-visibilitychange.html'))
+>>>>>>> .their
     })
   })
 
@@ -1232,6 +1270,7 @@
   })
 
   describe('did-attach-webview event', () => {
+<<<<<<< .our
     it('is emitted when a webview has been attached', async () => {
       const w = await openTheWindow({ show: false })
       w.loadURL(`file://${fixtures}/pages/webview-did-attach-event.html`)
@@ -1239,6 +1278,17 @@
       const [, webContents] = await emittedOnce(w.webContents, 'did-attach-webview')
       const [, id] = await emittedOnce(ipcMain, 'webview-dom-ready')
       expect(webContents.id).to.equal(id)
+=======
+    it('is emitted when a webview has been attached', (done) => {
+      w = new BrowserWindow({ show: false })
+      w.webContents.on('did-attach-webview', (event, webContents) => {
+        ipcMain.once('webview-dom-ready', (event, id) => {
+          assert.equal(webContents.id, id)
+          done()
+        })
+      })
+      w.loadFile(path.join(fixtures, 'pages', 'webview-did-attach-event.html'))
+>>>>>>> .their
     })
   })
 
@@ -1249,11 +1299,248 @@
     const extensionPath = path.join(__dirname, 'fixtures', 'devtools-extensions', 'foo')
     BrowserWindow.addDevToolsExtension(extensionPath)
 
-    w.loadURL(`file://${fixtures}/pages/webview-devtools.html`)
+    w.loadFile(path.join(fixtures, 'pages', 'webview-devtools.html'))
 
+<<<<<<< .our
     const [, {runtimeId, tabId}] = await emittedOnce(ipcMain, 'answer')
     expect(runtimeId).to.equal('foo')
     expect(tabId).to.be.not.equal(w.webContents.id)
+=======
+    ipcMain.once('answer', (event, message) => {
+      assert.equal(message.runtimeId, 'foo')
+      assert.notEqual(message.tabId, w.webContents.id)
+      done()
+    })
+  })
+
+  describe('guestinstance attribute', () => {
+    it('before loading there is no attribute', () => {
+      loadWebView(webview)  // Don't wait for loading to finish.
+      assert(!webview.hasAttribute('guestinstance'))
+    })
+
+    it('loading a page sets the guest view', async () => {
+      await loadWebView(webview, {
+        src: `file://${fixtures}/api/blank.html`
+      })
+
+      const instance = webview.getAttribute('guestinstance')
+      assert.equal(instance, parseInt(instance))
+
+      const guest = getGuestWebContents(parseInt(instance))
+      assert.equal(guest, webview.getWebContents())
+    })
+
+    it('deleting the attribute destroys the webview', async () => {
+      await loadWebView(webview, {
+        src: `file://${fixtures}/api/blank.html`
+      })
+
+      const instance = parseInt(webview.getAttribute('guestinstance'))
+      const waitForDestroy = waitForEvent(webview, 'destroyed')
+      webview.removeAttribute('guestinstance')
+
+      await waitForDestroy
+      assert.equal(getGuestWebContents(instance), null)
+    })
+
+    it('setting the attribute on a new webview moves the contents', (done) => {
+      const loadListener = () => {
+        const webContents = webview.getWebContents()
+        const instance = webview.getAttribute('guestinstance')
+
+        const destroyListener = () => {
+          assert.equal(webContents, webview2.getWebContents())
+
+          // Make sure that events are hooked up to the right webview now
+          webview2.addEventListener('console-message', (e) => {
+            assert.equal(e.message, 'a')
+            document.body.removeChild(webview2)
+            done()
+          })
+
+          webview2.src = `file://${fixtures}/pages/a.html`
+        }
+        webview.addEventListener('destroyed', destroyListener, {once: true})
+
+        const webview2 = new WebView()
+        loadWebView(webview2, {
+          guestinstance: instance
+        })
+      }
+      webview.addEventListener('did-finish-load', loadListener, {once: true})
+      loadWebView(webview, {
+        src: `file://${fixtures}/api/blank.html`
+      })
+    })
+
+    it('setting the attribute to an invalid guestinstance does nothing', async () => {
+      await loadWebView(webview, {
+        src: `file://${fixtures}/api/blank.html`
+      })
+      webview.setAttribute('guestinstance', 55)
+
+      // Make sure that events are still hooked up to the webview
+      const waitForMessage = waitForEvent(webview, 'console-message')
+      webview.src = `file://${fixtures}/pages/a.html`
+      const {message} = await waitForMessage
+      assert.equal(message, 'a')
+    })
+
+    it('setting the attribute on an existing webview moves the contents', (done) => {
+      const load1Listener = () => {
+        const webContents = webview.getWebContents()
+        const instance = webview.getAttribute('guestinstance')
+        let destroyedInstance
+
+        const destroyListener = () => {
+          assert.equal(webContents, webview2.getWebContents())
+          assert.equal(null, getGuestWebContents(parseInt(destroyedInstance)))
+
+          // Make sure that events are hooked up to the right webview now
+          webview2.addEventListener('console-message', (e) => {
+            assert.equal(e.message, 'a')
+            document.body.removeChild(webview2)
+            done()
+          })
+
+          webview2.src = 'file://' + fixtures + '/pages/a.html'
+        }
+        webview.addEventListener('destroyed', destroyListener, {once: true})
+
+        const webview2 = new WebView()
+        const load2Listener = () => {
+          destroyedInstance = webview2.getAttribute('guestinstance')
+          assert.notEqual(instance, destroyedInstance)
+
+          webview2.setAttribute('guestinstance', instance)
+        }
+        webview2.addEventListener('did-finish-load', load2Listener, {once: true})
+        loadWebView(webview2, {
+          src: `file://${fixtures}/api/blank.html`
+        })
+      }
+
+      webview.addEventListener('did-finish-load', load1Listener, {once: true})
+      loadWebView(webview, {
+        src: `file://${fixtures}/api/blank.html`
+      })
+    })
+
+    it('moving a guest back to its original webview should work', (done) => {
+      const loadListener = () => {
+        const webContents = webview.getWebContents()
+        const instance = webview.getAttribute('guestinstance')
+
+        const destroy1Listener = () => {
+          assert.equal(webContents, webview2.getWebContents())
+          assert.equal(null, webview.getWebContents())
+
+          const destroy2Listener = () => {
+            assert.equal(webContents, webview.getWebContents())
+            assert.equal(null, webview2.getWebContents())
+
+            // Make sure that events are hooked up to the right webview now
+            webview.addEventListener('console-message', (e) => {
+              document.body.removeChild(webview2)
+              assert.equal(e.message, 'a')
+              done()
+            })
+
+            webview.src = `file://${fixtures}/pages/a.html`
+          }
+          webview2.addEventListener('destroyed', destroy2Listener, {once: true})
+          webview.setAttribute('guestinstance', instance)
+        }
+        webview.addEventListener('destroyed', destroy1Listener, {once: true})
+
+        const webview2 = new WebView()
+        webview2.setAttribute('guestinstance', instance)
+        document.body.appendChild(webview2)
+      }
+
+      webview.addEventListener('did-finish-load', loadListener, {once: true})
+      loadWebView(webview, {
+        src: `file://${fixtures}/api/blank.html`
+      })
+    })
+
+    it('setting the attribute on a webview in a different window moves the contents', (done) => {
+      const loadListener = () => {
+        const instance = webview.getAttribute('guestinstance')
+
+        w = new BrowserWindow({ show: false })
+        w.webContents.once('did-finish-load', () => {
+          ipcMain.once('pong', () => {
+            assert(!webview.hasAttribute('guestinstance'))
+            done()
+          })
+
+          w.webContents.send('guestinstance', instance)
+        })
+        w.loadFile(path.join(fixtures, 'pages', 'webview-move-to-window.html'))
+      }
+      webview.addEventListener('did-finish-load', loadListener, {once: true})
+      webview.src = `file://${fixtures}/api/blank.html`
+      document.body.appendChild(webview)
+    })
+
+    it('does not delete the guestinstance attribute when moving the webview to another parent node', (done) => {
+      webview.addEventListener('dom-ready', function domReadyListener () {
+        webview.addEventListener('did-attach', () => {
+          assert(webview.guestinstance != null)
+          assert(webview.getWebContents() != null)
+          done()
+        })
+
+        document.body.replaceChild(webview, div)
+      })
+      webview.src = `file://${fixtures}/pages/a.html`
+
+      const div = document.createElement('div')
+      div.appendChild(webview)
+      document.body.appendChild(div)
+    })
+
+    it('does not destroy the webContents when hiding/showing the webview (regression)', (done) => {
+      webview.addEventListener('dom-ready', function domReadyListener () {
+        const instance = webview.getAttribute('guestinstance')
+        assert(instance != null)
+
+        // Wait for event directly since attach happens asynchronously over IPC
+        ipcMain.once('ELECTRON_GUEST_VIEW_MANAGER_ATTACH_GUEST', () => {
+          assert(webview.getWebContents() != null)
+          assert.equal(instance, webview.getAttribute('guestinstance'))
+          done()
+        })
+
+        webview.style.display = 'none'
+        webview.offsetHeight // eslint-disable-line
+        webview.style.display = 'block'
+      })
+      webview.src = `file://${fixtures}/pages/a.html`
+      document.body.appendChild(webview)
+    })
+
+    it('does not reload the webContents when hiding/showing the webview (regression)', (done) => {
+      webview.addEventListener('dom-ready', function domReadyListener () {
+        webview.addEventListener('did-start-loading', () => {
+          done(new Error('webview started loading unexpectedly'))
+        })
+
+        // Wait for event directly since attach happens asynchronously over IPC
+        webview.addEventListener('did-attach', () => {
+          done()
+        })
+
+        webview.style.display = 'none'
+        webview.offsetHeight  // eslint-disable-line
+        webview.style.display = 'block'
+      })
+      webview.src = `file://${fixtures}/pages/a.html`
+      document.body.appendChild(webview)
+    })
+>>>>>>> .their
   })
 
   describe('DOM events', () => {
@@ -1280,10 +1567,22 @@
       div.appendChild(webview)
       document.body.appendChild(div)
 
+<<<<<<< .our
       const firstResizeEvent = await firstResizeSignal
       expect(firstResizeEvent.target).to.equal(webview)
       expect(firstResizeEvent.newWidth).to.equal(100)
       expect(firstResizeEvent.newHeight).to.equal(10)
+=======
+  describe('disableguestresize attribute', () => {
+    it('does not have attribute by default', () => {
+      document.body.appendChild(webview)
+      assert(!webview.hasAttribute('disableguestresize'))
+    })
+
+    it('resizes guest when attribute is not present', (done) => {
+      w = new BrowserWindow({show: false, width: 200, height: 200})
+      w.loadFile(path.join(fixtures, 'pages', 'webview-guest-resize.html'))
+>>>>>>> .their
 
       await domReadySignal
 
@@ -1294,10 +1593,92 @@
       div.style.width = `${newWidth}px`
       div.style.height = `${newHeight}px`
 
+<<<<<<< .our
       const secondResizeEvent = await secondResizeSignal
       expect(secondResizeEvent.target).to.equal(webview)
       expect(secondResizeEvent.newWidth).to.equal(newWidth)
       expect(secondResizeEvent.newHeight).to.equal(newHeight)
+=======
+        w.setContentSize(CONTENT_SIZE, CONTENT_SIZE)
+      })
+    })
+
+    it('does not resize guest when attribute is present', done => {
+      w = new BrowserWindow({show: false, width: 200, height: 200})
+      w.loadFile(path.join(fixtures, 'pages', 'webview-no-guest-resize.html'))
+
+      w.webContents.once('did-finish-load', () => {
+        const CONTENT_SIZE = 300
+
+        const elementResizePromise = new Promise(resolve => {
+          ipcMain.once('webview-element-resize', (event, width, height) => {
+            assert.equal(width, CONTENT_SIZE)
+            assert.equal(height, CONTENT_SIZE)
+            resolve()
+          })
+        })
+
+        const noGuestResizePromise = new Promise(resolve => {
+          const onGuestResize = (event, width, height) => {
+            done(new Error('Unexpected guest resize message'))
+          }
+          ipcMain.once('webview-guest-resize', onGuestResize)
+
+          setTimeout(() => {
+            ipcMain.removeListener('webview-guest-resize', onGuestResize)
+            resolve()
+          }, 500)
+        })
+
+        Promise.all([elementResizePromise, noGuestResizePromise]).then(() => done())
+
+        w.setContentSize(CONTENT_SIZE, CONTENT_SIZE)
+      })
+    })
+
+    it('dispatches element resize event even when attribute is present', done => {
+      w = new BrowserWindow({show: false, width: 200, height: 200})
+      w.loadFile(path.join(fixtures, 'pages', 'webview-no-guest-resize.html'))
+
+      w.webContents.once('did-finish-load', () => {
+        const CONTENT_SIZE = 300
+
+        ipcMain.once('webview-element-resize', (event, width, height) => {
+          assert.equal(width, CONTENT_SIZE)
+          done()
+        })
+
+        w.setContentSize(CONTENT_SIZE, CONTENT_SIZE)
+      })
+    })
+
+    it('can be manually resized with setSize even when attribute is present', function (done) {
+      w = new BrowserWindow({show: false, width: 200, height: 200})
+      w.loadFile(path.join(fixtures, 'pages', 'webview-no-guest-resize.html'))
+
+      w.webContents.once('did-finish-load', () => {
+        const GUEST_WIDTH = 10
+        const GUEST_HEIGHT = 20
+
+        ipcMain.once('webview-guest-resize', (event, width, height) => {
+          assert.equal(width, GUEST_WIDTH)
+          assert.equal(height, GUEST_HEIGHT)
+          done()
+        })
+
+        for (const wc of webContents.getAllWebContents()) {
+          if (wc.hostWebContents &&
+              wc.hostWebContents.id === w.webContents.id) {
+            wc.setSize({
+              normal: {
+                width: GUEST_WIDTH,
+                height: GUEST_HEIGHT
+              }
+            })
+          }
+        }
+      })
+>>>>>>> .their
     })
   })
 
@@ -1324,11 +1705,20 @@
           zoomFactor: 1.2
         }
       })
+<<<<<<< .our
       w.loadURL(`file://${fixtures}/pages/webview-zoom-factor.html`)
 
       const [, zoomFactor, zoomLevel] = await emittedOnce(ipcMain, 'webview-parent-zoom-level')
       expect(zoomFactor).to.equal(1.2)
       expect(zoomLevel).to.equal(1)
+=======
+      ipcMain.once('webview-parent-zoom-level', (event, zoomFactor, zoomLevel) => {
+        assert.equal(zoomFactor, 1.2)
+        assert.equal(zoomLevel, 1)
+        done()
+      })
+      w.loadFile(path.join(fixtures, 'pages', 'webview-zoom-factor.html'))
+>>>>>>> .their
     })
 
     it('maintains zoom level on navigation', async () => {
@@ -1358,6 +1748,20 @@
 
         return promise
       })
+<<<<<<< .our
+=======
+      ipcMain.on('webview-zoom-level', (event, zoomLevel, zoomFactor, newHost, final) => {
+        if (!newHost) {
+          assert.equal(zoomFactor, 1.44)
+          assert.equal(zoomLevel, 2.0)
+        } else {
+          assert.equal(zoomFactor, 1.2)
+          assert.equal(zoomLevel, 1)
+        }
+        if (final) done()
+      })
+      w.loadFile(path.join(fixtures, 'pages', 'webview-custom-zoom-level.html'))
+>>>>>>> .their
     })
 
     it('maintains zoom level when navigating within same page', async () => {
@@ -1382,6 +1786,15 @@
 
         return promise
       })
+<<<<<<< .our
+=======
+      ipcMain.on('webview-zoom-in-page', (event, zoomLevel, zoomFactor, final) => {
+        assert.equal(zoomFactor, 1.44)
+        assert.equal(zoomLevel, 2.0)
+        if (final) done()
+      })
+      w.loadFile(path.join(fixtures, 'pages', 'webview-in-page-navigate.html'))
+>>>>>>> .their
     })
 
     it('inherits zoom level for the origin when available', async () => {
@@ -1391,10 +1804,18 @@
           zoomFactor: 1.2
         }
       })
+<<<<<<< .our
       w.loadURL(`file://${fixtures}/pages/webview-origin-zoom-level.html`)
 
       const [, zoomLevel] = await emittedOnce(ipcMain, 'webview-origin-zoom-level')
       expect(zoomLevel).to.equal(2.0)
+=======
+      ipcMain.once('webview-origin-zoom-level', (event, zoomLevel) => {
+        assert.equal(zoomLevel, 2.0)
+        done()
+      })
+      w.loadFile(path.join(fixtures, 'pages', 'webview-origin-zoom-level.html'))
+>>>>>>> .their
     })
   })
 
