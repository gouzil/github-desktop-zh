changed in both
  base   100644 962e25d180eb17debea55ac49117cc6972ae91eb .circleci/config.yml
  our    100644 6d44d618aabcce04c60344f2274dec5b0c2a1f68 .circleci/config.yml
  their  100644 7c36f10ad96948599ca8e8ca8149038b4348459c .circleci/config.yml
@@ -484,7 +484,10 @@
       TARGET_ARCH: x64
       RUN_RELEASE_BUILD: true
       INSTALL_MACOS_NODE: true
+<<<<<<< .our
       NIGHTLY_BUILD: true
+=======
+>>>>>>> .their
     macos:
       xcode: "8.3.3"
     <<: *build-steps
@@ -505,7 +508,10 @@
       MAS_BUILD: 1
       RUN_RELEASE_BUILD: true
       INSTALL_MACOS_NODE: true
+<<<<<<< .our
       NIGHTLY_BUILD: true
+=======
+>>>>>>> .their
     macos:
       xcode: "8.3.3"
     <<: *build-steps
added in both
  our    100644 67a2b2124619d866f67d849f57f3548ba28be26a appveyor.yml
  their  100644 cb0c8a67db55630fd6d94204955c56016c9937cf appveyor.yml
@@ -1,4 +1,5 @@
 version: 1.0.{build}
+<<<<<<< .our
 branches:
   except:
   - /^release$|^release-\d-\d-x$/
@@ -6,10 +7,20 @@
 image: electron-16-vs2017-15.4.5
 environment:
   DISABLE_CRASH_REPORTER_TESTS: true
+=======
+build_cloud: electron-16
+image: electron-16-vs2017
+environment:
+  DISABLE_CRASH_REPORTER_TESTS: true
+  matrix:
+  - TARGET_ARCH: ia32
+  - TARGET_ARCH: x64
+>>>>>>> .their
 build_script:
 - ps: >-
     if(($env:APPVEYOR_PULL_REQUEST_HEAD_REPO_NAME -split "/")[0] -eq ($env:APPVEYOR_REPO_NAME -split "/")[0]) {
       Write-warning "Skipping PR build for branch"; Exit-AppveyorBuild
+<<<<<<< .our
     } else {
       Add-Path "$env:ProgramFiles (x86)\Windows Kits\10\Debuggers\x64"
       $env:path = "$env:ProgramFiles (x86)\Windows Kits\10\Debuggers\x64;$env:path"
@@ -17,10 +28,24 @@
         $env:RUN_RELEASE_BUILD = "1"
       }
       $Message = (git log --format=%B -n 1 HEAD) | Out-String
+=======
+
+    } else {
+      Add-Path "$env:ProgramFiles (x86)\Windows Kits\10\Debuggers\x64"
+
+      $env:path = "$env:ProgramFiles (x86)\Windows Kits\10\Debuggers\x64;$env:path"
+
+      $Message = (git log --format=%B -n 1 HEAD) | Out-String
+
+>>>>>>> .their
       if ((Test-Path Env:\RUN_RELEASE_BUILD)) {
         $env:ELECTRON_RELEASE = '1'
         Write-Output "release build triggered from api"
       }
+<<<<<<< .our
+=======
+
+>>>>>>> .their
       if ((Test-Path Env:\ELECTRON_RELEASE)) {
         Write-Output "Running release build"
         python script\bootstrap.py --target_arch=$env:TARGET_ARCH
@@ -36,21 +61,34 @@
       } else {
         "Build succeeded."
       }
+<<<<<<< .our
       Push-AppveyorArtifact out
     }
+=======
+    }
+
+>>>>>>> .their
 test_script:
 - ps: >-
     if (Test-Path Env:\ELECTRON_RELEASE) {
       Write-Output "Skipping tests for release build"
     } else {
       Write-Output "Running tests for debug build"
+<<<<<<< .our
       python script\test.py --ci --rebuild_native_modules
+=======
+      python script\test.py --ci
+>>>>>>> .their
       if ($LASTEXITCODE -ne '0') {
         throw "Tests failed with exit code $LASTEXITCODE"
       } else {
         Write-Output "Tests succeeded."
       }
       python script\verify-ffmpeg.py
+<<<<<<< .our
+=======
+
+>>>>>>> .their
       if ($LASTEXITCODE -ne '0') {
         throw "Verify ffmpeg failed with exit code $LASTEXITCODE"
       } else {
@@ -58,6 +96,7 @@
       }
     }
 artifacts:
+<<<<<<< .our
 - path: test-results.xml
   name: test-results.xml
 deploy_script:
@@ -71,3 +110,7 @@
         & python script\upload.py
       }
     }
+=======
+- path: out
+  name: out
+>>>>>>> .their
changed in both
  base   100644 08e0776daf674e01202cdb55435c71ea554a1409 atom/app/atom_main_delegate.cc
  our    100644 b3b5b8f2a8f24b8928f69a286c80e8a3b8464366 atom/app/atom_main_delegate.cc
  their  100644 5cb10dece3e145ac5a4a7a3da2e277a511d826e8 atom/app/atom_main_delegate.cc
changed in both
  base   100644 61a661e4ad9e09fa469b39ab532f20e82fbd5381 atom/app/node_main.cc
  our    100644 9a95165f77a2585b06975bb3dfd0f5e573329410 atom/app/node_main.cc
  their  100644 e687266a11a79d56a7955abff2725841f1a32ef2 atom/app/node_main.cc
changed in both
  base   100644 69d8aaf4825b91fc8517838baf4a92bd52267ac9 atom/browser/api/atom_api_app.cc
  our    100644 089a2b63d1bae3afebea925582a3aac81ddeaa4f atom/browser/api/atom_api_app.cc
  their  100644 5d4715c3ad4bc233b87807f1f79fcac068ff298d atom/browser/api/atom_api_app.cc
changed in both
  base   100644 f4f5b325a4da16137da737fd9f3f4b8b7309d45e atom/browser/api/atom_api_app.h
  our    100644 ee0ad42c05fe33be17146b79cbe3422953516621 atom/browser/api/atom_api_app.h
  their  100644 6093ad05b6343c85799789a9dc68abbf7294dc88 atom/browser/api/atom_api_app.h
changed in both
  base   100644 a987828be55bc9fe76f8d9addcc71f459c4c63c4 atom/browser/api/atom_api_browser_window.cc
  our    100644 d0ae6f4ea78407c70e4cce6ff1181ce01e395133 atom/browser/api/atom_api_browser_window.cc
  their  100644 7cb8ecc0b58b5c565971e50bb814017bf13d0241 atom/browser/api/atom_api_browser_window.cc
changed in both
  base   100644 5f9610f3a3c2c2946f7a0ec38e3094f7b494cb29 atom/browser/api/atom_api_browser_window.h
  our    100644 770181f5b7f4e01f0124f44991ee5332771db6e2 atom/browser/api/atom_api_browser_window.h
  their  100644 d39a1583b2ec7a488613bff60bb0670b0091711b atom/browser/api/atom_api_browser_window.h
changed in both
  base   100644 9c4f2e97f22ada9be327b52862cbf70cc102c95c atom/browser/api/atom_api_cookies.cc
  our    100644 daccf443927abdf444845613b6e2916d167f96f3 atom/browser/api/atom_api_cookies.cc
  their  100644 f55ed136adfb15fed7065a60df6320de90c63fdb atom/browser/api/atom_api_cookies.cc
changed in both
  base   100644 3bf2df9679a050ddc0ee1e882fdae778bcf2e515 atom/browser/api/atom_api_desktop_capturer.cc
  our    100644 135b4edd11048a4635f9017f569f4b4ae644a09c atom/browser/api/atom_api_desktop_capturer.cc
  their  100644 1d33bbbd4a7e08369592e716e9b081c994ca313f atom/browser/api/atom_api_desktop_capturer.cc
@@ -57,6 +57,7 @@
   cap->Emit("finished", sources);
 }
 
+<<<<<<< .our
 void StartHandlingTask(bool capture_window,
                        bool capture_screen,
                        const gfx::Size& thumbnail_size,
@@ -70,12 +71,27 @@
     cap->using_directx_capturer_ =
         webrtc::ScreenCapturerWinDirectx::IsSupported();
   }
+=======
+DesktopCapturer::~DesktopCapturer() {}
+
+void DesktopCapturer::StartHandling(bool capture_window,
+                                    bool capture_screen,
+                                    const gfx::Size& thumbnail_size) {
+#if defined(OS_WIN)
+  using_directx_capturer_ =
+      content::desktop_capture::CreateDesktopCaptureOptions()
+          .allow_directx_capturer();
+>>>>>>> .their
 #endif  // defined(OS_WIN)
   std::unique_ptr<webrtc::DesktopCapturer> screen_capturer(
       capture_screen ? content::desktop_capture::CreateScreenCapturer()
                      : nullptr);
   std::unique_ptr<webrtc::DesktopCapturer> window_capturer(
+<<<<<<< .our
       capture_window ? content::desktop_capture::CreateWindowCapturer()
+=======
+      capture_window ? content::desktop_capture::CreateScreenCapturer()
+>>>>>>> .their
                      : nullptr);
   cap->media_list_.reset(new NativeDesktopMediaList(
       std::move(screen_capturer), std::move(window_capturer)));
changed in both
  base   100644 51df0a63a5e835f9eee83c3d957b3269d918bb57 atom/browser/api/atom_api_power_save_blocker.cc
  our    100644 0b06a9f583782b55296498159059e35b8f27f186 atom/browser/api/atom_api_power_save_blocker.cc
  their  100644 d16265f50115de48112778c3ede58b423bb2b4d3 atom/browser/api/atom_api_power_save_blocker.cc
@@ -70,6 +70,7 @@
   }
 
   if (!power_save_blocker_ || new_blocker_type != current_blocker_type_) {
+<<<<<<< .our
     auto new_blocker = std::make_unique<device::PowerSaveBlocker>(
         new_blocker_type, device::mojom::WakeLockReason::kOther,
         ATOM_PRODUCT_NAME, base::ThreadTaskRunnerHandle::Get(),
@@ -79,6 +80,18 @@
         // therefore require a single-thread runner.
         base::CreateSingleThreadTaskRunnerWithTraits(
             {base::MayBlock(), base::TaskPriority::BACKGROUND}));
+=======
+    std::unique_ptr<device::PowerSaveBlocker> new_blocker(
+        new device::PowerSaveBlocker(
+            new_blocker_type, device::mojom::WakeLockReason::kOther,
+            ATOM_PRODUCT_NAME, base::ThreadTaskRunnerHandle::Get(),
+            // This task runner may be used by some device service
+            // implementation bits to interface with dbus client code, which in
+            // turn imposes some subtle thread affinity on the clients. We
+            // therefore require a single-thread runner.
+            base::CreateSingleThreadTaskRunnerWithTraits(
+                {base::MayBlock(), base::TaskPriority::BACKGROUND})));
+>>>>>>> .their
     power_save_blocker_.swap(new_blocker);
     current_blocker_type_ = new_blocker_type;
   }
changed in both
  base   100644 c80973f439ac02e7283bdb6a23ba0fe7caff2dbf atom/browser/api/atom_api_session.cc
  our    100644 658f913bb60b66ae1bf3aae97d7d9158e56f7ee0 atom/browser/api/atom_api_session.cc
  their  100644 2ca8ae0e26ddeaa9db681e3bfb9d98582e4c154a atom/browser/api/atom_api_session.cc
changed in both
  base   100644 4a01680dcb3b27e6f24ad19c481105a9bcd973a8 atom/browser/api/atom_api_web_contents.cc
  our    100644 20a1ac2e672f08ffea528b6e094ba530ff8083d1 atom/browser/api/atom_api_web_contents.cc
  their  100644 72082a101018fc8668576a5c9d5a62bd63228d56 atom/browser/api/atom_api_web_contents.cc
@@ -752,6 +752,13 @@
   return dialog_manager_.get();
 }
 
+void WebContents::ResizeDueToAutoResize(content::WebContents* web_contents,
+                                        const gfx::Size& new_size) {
+  if (IsGuest()) {
+    guest_delegate_->ResizeDueToAutoResize(new_size);
+  }
+}
+
 void WebContents::BeforeUnloadFired(const base::TimeTicks& proceed_time) {
   // Do nothing, we override this method just to avoid compilation error since
   // there are two virtual functions named BeforeUnloadFired.
changed in both
  base   100644 af214562f5ac7499fcb3a6d777ea240cbd173a47 atom/browser/api/atom_api_web_contents.h
  our    100644 7939f8268aa8c3371623e0c15f3b6001d7f1efa4 atom/browser/api/atom_api_web_contents.h
  their  100644 2155656ccbdcc34731bcb01b99a89b7c321a96da atom/browser/api/atom_api_web_contents.h
@@ -229,9 +229,12 @@
                       WindowOpenDisposition disposition,
                       const std::vector<std::string>& features,
                       const scoped_refptr<network::ResourceRequestBody>& body);
+<<<<<<< .our
 
   // Returns the preload script path of current WebContents.
   v8::Local<v8::Value> GetPreloadPath(v8::Isolate* isolate) const;
+=======
+>>>>>>> .their
 
   // Returns the web preferences of current WebContents.
   v8::Local<v8::Value> GetWebPreferences(v8::Isolate* isolate) const;
@@ -340,6 +343,8 @@
       const content::BluetoothChooser::EventHandler& handler) override;
   content::JavaScriptDialogManager* GetJavaScriptDialogManager(
       content::WebContents* source) override;
+  void ResizeDueToAutoResize(content::WebContents* web_contents,
+                             const gfx::Size& new_size) override;
 
   // content::WebContentsObserver:
   void BeforeUnloadFired(const base::TimeTicks& proceed_time) override;
changed in both
  base   100644 8c2ce34a8a051fefe6a00ac2df33ebcb769b24b2 atom/browser/api/frame_subscriber.cc
  our    100644 7bcb7ab9370a8b3fe245c9569c93dbbdac0a0697 atom/browser/api/frame_subscriber.cc
  their  100644 b729a1cf6efc5fa974c609c08c60af2f8675f6d1 atom/browser/api/frame_subscriber.cc
@@ -12,8 +12,11 @@
 #include "content/browser/renderer_host/render_widget_host_view_base.h"
 #include "ui/gfx/geometry/rect_conversions.h"
 #include "ui/gfx/skbitmap_operations.h"
+<<<<<<< .our
 
 #include "atom/common/node_includes.h"
+=======
+>>>>>>> .their
 
 namespace atom {
 
@@ -26,8 +29,12 @@
     : content::WebContentsObserver(web_contents),
       isolate_(isolate),
       callback_(callback),
+<<<<<<< .our
       only_dirty_(only_dirty),
       weak_ptr_factory_(this) {}
+=======
+      only_dirty_(only_dirty) {}
+>>>>>>> .their
 
 FrameSubscriber::~FrameSubscriber() = default;
 
@@ -56,6 +63,7 @@
   } else {
     return gfx::Rect();
   }
+<<<<<<< .our
 }
 
 void FrameSubscriber::DidReceiveCompositorFrame() {
@@ -93,6 +101,36 @@
       mate::Converter<gfx::Rect>::ToV8(isolate_, damage);
 
   callback_.Run(local_buffer, damage_rect);
+=======
+}
+
+void FrameSubscriber::DidReceiveCompositorFrame() {
+  auto* view = web_contents()->GetRenderWidgetHostView();
+  if (view == nullptr)
+    return;
+
+  view->CopyFromSurface(
+      gfx::Rect(), view->GetViewBounds().size(),
+      base::BindOnce(&FrameSubscriber::Done, base::Unretained(this),
+                     GetDamageRect()));
+}
+
+void FrameSubscriber::Done(const gfx::Rect& damage, const SkBitmap& frame) {
+  if (frame.drawsNothing())
+    return;
+
+  const_cast<SkBitmap&>(frame).setAlphaType(kPremul_SkAlphaType);
+  v8::Local<v8::Value> damage_rect =
+      mate::Converter<gfx::Rect>::ToV8(isolate_, damage);
+
+  if (only_dirty_) {
+    const SkBitmap& damageFrame = SkBitmapOperations::CreateTiledBitmap(
+        frame, damage.x(), damage.y(), damage.width(), damage.height());
+    callback_.Run(gfx::Image::CreateFrom1xBitmap(damageFrame), damage_rect);
+  } else {
+    callback_.Run(gfx::Image::CreateFrom1xBitmap(frame), damage_rect);
+  }
+>>>>>>> .their
 }
 
 }  // namespace api
changed in both
  base   100644 4dbef58d9f0bd8591222f88f7cbaa43d32b98ca1 atom/browser/api/frame_subscriber.h
  our    100644 d3e82855417cb59c0449f1c1b685970ffaea2af6 atom/browser/api/frame_subscriber.h
  their  100644 1e43bae6035747dffd4a08f952c240c6169a8c21 atom/browser/api/frame_subscriber.h
@@ -8,7 +8,10 @@
 #include "content/public/browser/web_contents.h"
 
 #include "base/callback.h"
+<<<<<<< .our
 #include "base/memory/weak_ptr.h"
+=======
+>>>>>>> .their
 #include "components/viz/common/frame_sinks/copy_output_result.h"
 #include "content/public/browser/web_contents_observer.h"
 #include "ui/gfx/image/image.h"
@@ -23,13 +26,17 @@
 class FrameSubscriber : public content::WebContentsObserver {
  public:
   using FrameCaptureCallback =
-      base::Callback<void(v8::Local<v8::Value>, v8::Local<v8::Value>)>;
+      base::Callback<void(const gfx::Image&, v8::Local<v8::Value>)>;
 
   FrameSubscriber(v8::Isolate* isolate,
                   content::WebContents* web_contents,
                   const FrameCaptureCallback& callback,
                   bool only_dirty);
+<<<<<<< .our
   ~FrameSubscriber() override;
+=======
+  ~FrameSubscriber();
+>>>>>>> .their
 
  private:
   gfx::Rect GetDamageRect();
@@ -40,8 +47,11 @@
   FrameCaptureCallback callback_;
   bool only_dirty_;
 
+<<<<<<< .our
   base::WeakPtrFactory<FrameSubscriber> weak_ptr_factory_;
 
+=======
+>>>>>>> .their
   DISALLOW_COPY_AND_ASSIGN(FrameSubscriber);
 };
 
changed in both
  base   100644 bee1f9c11dc2a42691453d38e0dfa2b59d3191bf atom/browser/atom_browser_client.cc
  our    100644 57c4ee582405e6d501ec23940ccb10689ecd64a1 atom/browser/atom_browser_client.cc
  their  100644 65ca3450f466573ab84a1da057af0520e4d58197 atom/browser/atom_browser_client.cc
@@ -17,6 +17,7 @@
 #include "atom/browser/atom_resource_dispatcher_host_delegate.h"
 #include "atom/browser/atom_speech_recognition_manager_delegate.h"
 #include "atom/browser/child_web_contents_tracker.h"
+#include "atom/browser/login_handler.h"
 #include "atom/browser/native_window.h"
 #include "atom/browser/session_preferences.h"
 #include "atom/browser/web_contents_permission_helper.h"
@@ -31,6 +32,10 @@
 #include "base/strings/string_number_conversions.h"
 #include "base/strings/string_util.h"
 #include "chrome/browser/printing/printing_message_filter.h"
+<<<<<<< .our
+=======
+#include "chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.h"
+>>>>>>> .their
 #include "chrome/browser/speech/tts_message_filter.h"
 #include "content/public/browser/browser_ppapi_host.h"
 #include "content/public/browser/client_certificate_delegate.h"
@@ -60,10 +65,13 @@
 #include "net/ssl/client_cert_store.h"
 #endif
 
+<<<<<<< .our
 #if defined(ENABLE_PEPPER_FLASH)
 #include "chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.h"
 #endif  // defined(ENABLE_PEPPER_FLASH)
 
+=======
+>>>>>>> .their
 using content::BrowserThread;
 
 namespace atom {
@@ -484,17 +492,42 @@
 std::unique_ptr<net::ClientCertStore> AtomBrowserClient::CreateClientCertStore(
     content::ResourceContext* resource_context) {
 #if defined(USE_NSS_CERTS)
+<<<<<<< .our
   return std::make_unique<net::ClientCertStoreNSS>(
       net::ClientCertStoreNSS::PasswordDelegateFactory());
 #elif defined(OS_WIN)
   return std::make_unique<net::ClientCertStoreWin>();
 #elif defined(OS_MACOSX)
   return std::make_unique<net::ClientCertStoreMac>();
+=======
+  return std::unique_ptr<net::ClientCertStore>(new net::ClientCertStoreNSS(
+      net::ClientCertStoreNSS::PasswordDelegateFactory()));
+#elif defined(OS_WIN)
+  return std::unique_ptr<net::ClientCertStore>(new net::ClientCertStoreWin());
+#elif defined(OS_MACOSX)
+  return std::unique_ptr<net::ClientCertStore>(new net::ClientCertStoreMac());
+>>>>>>> .their
 #elif defined(USE_OPENSSL)
   return std::unique_ptr<net::ClientCertStore>();
 #endif
 }
 
+<<<<<<< .our
+=======
+content::ResourceDispatcherHostLoginDelegate*
+AtomBrowserClient::CreateLoginDelegate(
+    net::AuthChallengeInfo* auth_info,
+    content::ResourceRequestInfo::WebContentsGetter web_contents_getter,
+    bool is_main_frame,
+    const GURL& url,
+    bool first_auth_attempt,
+    const base::Callback<void(const base::Optional<net::AuthCredentials>&)>&
+        auth_required_callback) {
+  return new LoginHandler(auth_info, web_contents_getter, url,
+                          auth_required_callback);
+}
+
+>>>>>>> .their
 brightray::BrowserMainParts* AtomBrowserClient::OverrideCreateBrowserMainParts(
     const content::MainFunctionParams&) {
   v8::V8::Initialize();  // Init V8 before creating main parts.
changed in both
  base   100644 c7bbc88375418dda9fe336ef15447fe94a127d08 atom/browser/atom_browser_client.h
  our    100644 a0284cf3f72e9cd4292b636948f92bb09b97f0ae atom/browser/atom_browser_client.h
  their  100644 51cd6ebc6f01b916af0889b7308909a416b92bf0 atom/browser/atom_browser_client.h
@@ -106,6 +106,17 @@
   void SiteInstanceDeleting(content::SiteInstance* site_instance) override;
   std::unique_ptr<net::ClientCertStore> CreateClientCertStore(
       content::ResourceContext* resource_context) override;
+<<<<<<< .our
+=======
+  content::ResourceDispatcherHostLoginDelegate* CreateLoginDelegate(
+      net::AuthChallengeInfo* auth_info,
+      content::ResourceRequestInfo::WebContentsGetter web_contents_getter,
+      bool is_main_frame,
+      const GURL& url,
+      bool first_auth_attempt,
+      const base::Callback<void(const base::Optional<net::AuthCredentials>&)>&
+          auth_required_callback) override;
+>>>>>>> .their
 
   // brightray::BrowserClient:
   brightray::BrowserMainParts* OverrideCreateBrowserMainParts(
changed in both
  base   100644 1cc741e2f406187564c95f286a35a77cf3cf98f8 atom/browser/atom_browser_context.cc
  our    100644 e036cbc8103f19a034ce386940462f8a23ea6807 atom/browser/atom_browser_context.cc
  their  100644 e3dbfedc0c2d70762301b86f3138cc325131e7f5 atom/browser/atom_browser_context.cc
@@ -19,6 +19,10 @@
 #include "base/files/file_path.h"
 #include "base/path_service.h"
 #include "base/strings/stringprintf.h"
+<<<<<<< .our
+=======
+#include "base/task_scheduler/post_task.h"
+>>>>>>> .their
 #include "chrome/common/chrome_paths.h"
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_registry_simple.h"
@@ -100,8 +104,29 @@
   return permission_manager_.get();
 }
 
+<<<<<<< .our
 storage::SpecialStoragePolicy* AtomBrowserContext::GetSpecialStoragePolicy() {
   return storage_policy_.get();
+=======
+std::unique_ptr<net::CertVerifier> AtomBrowserContext::CreateCertVerifier(
+    brightray::RequireCTDelegate* ct_delegate) {
+  return base::WrapUnique(new AtomCertVerifier(ct_delegate));
+}
+
+std::vector<std::string> AtomBrowserContext::GetCookieableSchemes() {
+  auto default_schemes = brightray::BrowserContext::GetCookieableSchemes();
+  const auto& standard_schemes = atom::api::GetStandardSchemes();
+  default_schemes.insert(default_schemes.end(), standard_schemes.begin(),
+                         standard_schemes.end());
+  return default_schemes;
+}
+
+void AtomBrowserContext::NotifyCookieChange(const net::CanonicalCookie& cookie,
+                                            bool removed,
+                                            net::CookieChangeCause cause) {
+  CookieDetails cookie_details(&cookie, removed, cause);
+  cookie_change_sub_list_.Notify(&cookie_details);
+>>>>>>> .their
 }
 
 void AtomBrowserContext::RegisterPrefs(PrefRegistrySimple* pref_registry) {
changed in both
  base   100644 f825413a96c6a98cf3de319ca7474554e5238a77 atom/browser/atom_browser_context.h
  our    100644 9e6a841ceb8d11069a1a094bf7dbbd3a788918b3 atom/browser/atom_browser_context.h
  their  100644 b60a4e682b0a77acf31def4ea2ef0b7dae187b99 atom/browser/atom_browser_context.h
@@ -35,7 +35,28 @@
       const base::DictionaryValue& options = base::DictionaryValue());
 
   void SetUserAgent(const std::string& user_agent);
+<<<<<<< .our
   AtomBlobReader* GetBlobReader();
+=======
+  // Register callbacks that needs to notified on any cookie store changes.
+  std::unique_ptr<base::CallbackList<void(const CookieDetails*)>::Subscription>
+  RegisterCookieChangeCallback(
+      const base::Callback<void(const CookieDetails*)>& cb);
+
+  // brightray::URLRequestContextGetter::Delegate:
+  std::unique_ptr<net::NetworkDelegate> CreateNetworkDelegate() override;
+  std::string GetUserAgent() override;
+  std::unique_ptr<net::URLRequestJobFactory> CreateURLRequestJobFactory(
+      content::ProtocolHandlerMap* protocol_handlers) override;
+  net::HttpCache::BackendFactory* CreateHttpCacheBackendFactory(
+      const base::FilePath& base_path) override;
+  std::unique_ptr<net::CertVerifier> CreateCertVerifier(
+      brightray::RequireCTDelegate* ct_delegate) override;
+  std::vector<std::string> GetCookieableSchemes() override;
+  void NotifyCookieChange(const net::CanonicalCookie& cookie,
+                          bool removed,
+                          net::CookieChangeCause cause) override;
+>>>>>>> .their
 
   // content::BrowserContext:
   content::DownloadManagerDelegate* GetDownloadManagerDelegate() override;
changed in both
  base   100644 6b19e7e0d1504e8030327887f635f91e56159c44 atom/browser/atom_browser_main_parts.cc
  our    100644 5229b19ca9af7845a3f2f13b7e0913f633b68b1d atom/browser/atom_browser_main_parts.cc
  their  100644 c5ba3125b10c1b3fec2368033d30d7f7d6a27a15 atom/browser/atom_browser_main_parts.cc
changed in both
  base   100644 03f11c3a35149b69e459e8b4d5e32aaf7a68dd51 atom/browser/atom_javascript_dialog_manager.cc
  our    100644 25fc326ebac3f2a5beb9199194067dae12c8229b atom/browser/atom_javascript_dialog_manager.cc
  their  100644 c0c7be6302796cf774923757b466084816d897fe atom/browser/atom_javascript_dialog_manager.cc
changed in both
  base   100644 246f8a8645d1787f1a8463c0725791e97b7eaf6f atom/browser/browser.h
  our    100644 aed7d25c37da59c0dd5e09940a064c329353a0b2 atom/browser/browser.h
  their  100644 39cc0f9812ac766ff70f3eabb62882c04a2bfd4f atom/browser/browser.h
changed in both
  base   100644 1c7ff9c4b3abd3d9166c10cdff8f901cde854174 atom/browser/common_web_contents_delegate.cc
  our    100644 b3b1195e044cd2c74b246aa13e9e85953d694477 atom/browser/common_web_contents_delegate.cc
  their  100644 d5ab67eef25b489e46569076d5bd63ab92a6d325 atom/browser/common_web_contents_delegate.cc
changed in both
  base   100644 a977e1667dc3849bd9bce71d72d8da259a9be5f6 atom/browser/common_web_contents_delegate.h
  our    100644 5da5d20975b8e795e34c9d8c7649f6f0eb3d0a50 atom/browser/common_web_contents_delegate.h
  their  100644 1adb6d23ef0c3a69cdf74410c8dae369cf3e1562 atom/browser/common_web_contents_delegate.h
changed in both
  base   100644 d870c58b0921e16201899c7583837b3b493827cf atom/browser/login_handler.cc
  our    100644 2063c6197fce449d1692f1b067c17e043b1d37e4 atom/browser/login_handler.cc
  their  100644 0bba530d6086001a6d4d049c6355487c6e5bf613 atom/browser/login_handler.cc
@@ -5,7 +5,6 @@
 #include "atom/browser/login_handler.h"
 
 #include "atom/browser/browser.h"
-#include "atom/common/native_mate_converters/net_converter.h"
 #include "base/values.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/web_contents.h"
@@ -16,6 +15,7 @@
 namespace atom {
 
 LoginHandler::LoginHandler(
+<<<<<<< .our
     net::URLRequest* request,
     const net::AuthChallengeInfo& auth_info,
     const net::NetworkDelegate::AuthCallback& callback,
@@ -33,6 +33,22 @@
 
   web_contents_getter_ =
       resource_request_info->GetWebContentsGetterForRequest();
+=======
+    net::AuthChallengeInfo* auth_info,
+    content::ResourceRequestInfo::WebContentsGetter web_contents_getter,
+    const GURL& url,
+    const base::Callback<void(const base::Optional<net::AuthCredentials>&)>&
+        auth_required_callback)
+    : auth_info_(auth_info),
+      web_contents_getter_(web_contents_getter),
+      auth_required_callback_(auth_required_callback) {
+  // Fill request details on IO thread.
+  // TODO(deepak1556): Fill in method and referrer details to
+  // avoid breaking the app login event.
+  std::unique_ptr<base::DictionaryValue> request_details(
+      new base::DictionaryValue);
+  request_details->SetKey("url", base::Value(url.spec()));
+>>>>>>> .their
 
   BrowserThread::PostTask(
       BrowserThread::UI, FROM_HERE,
@@ -42,6 +58,14 @@
 
 LoginHandler::~LoginHandler() {}
 
+<<<<<<< .our
+=======
+content::WebContents* LoginHandler::GetWebContents() const {
+  DCHECK_CURRENTLY_ON(BrowserThread::UI);
+  return web_contents_getter_.Run();
+}
+
+>>>>>>> .their
 void LoginHandler::Login(const base::string16& username,
                          const base::string16& password) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
@@ -60,10 +84,16 @@
       base::BindOnce(&LoginHandler::DoCancelAuth, weak_factory_.GetWeakPtr()));
 }
 
+<<<<<<< .our
 void LoginHandler::NotifyRequestDestroyed() {
   auth_callback_.Reset();
   credentials_ = nullptr;
   weak_factory_.InvalidateWeakPtrs();
+=======
+void LoginHandler::OnRequestCancelled() {
+  TestAndSetAuthHandled();
+  auth_required_callback_.Reset();
+>>>>>>> .their
 }
 
 content::WebContents* LoginHandler::GetWebContents() const {
@@ -73,18 +103,29 @@
 
 void LoginHandler::DoCancelAuth() {
   DCHECK_CURRENTLY_ON(BrowserThread::IO);
+<<<<<<< .our
   if (!auth_callback_.is_null())
     std::move(auth_callback_)
         .Run(net::NetworkDelegate::AUTH_REQUIRED_RESPONSE_CANCEL_AUTH);
+=======
+  if (!auth_required_callback_.is_null())
+    std::move(auth_required_callback_).Run(base::nullopt);
+>>>>>>> .their
 }
 
 void LoginHandler::DoLogin(const base::string16& username,
                            const base::string16& password) {
   DCHECK_CURRENTLY_ON(BrowserThread::IO);
+<<<<<<< .our
   if (!auth_callback_.is_null()) {
     credentials_->Set(username, password);
     std::move(auth_callback_)
         .Run(net::NetworkDelegate::AUTH_REQUIRED_RESPONSE_SET_AUTH);
+=======
+  if (!auth_required_callback_.is_null()) {
+    std::move(auth_required_callback_)
+        .Run(net::AuthCredentials(username, password));
+>>>>>>> .their
   }
 }
 
changed in both
  base   100644 16cded48625c9541d8fe4e6034a617853f4a58e7 atom/browser/login_handler.h
  our    100644 e7f1c5be0094506e01d2cccc0073fa864dfefb56 atom/browser/login_handler.h
  their  100644 80ff986e0be400c13388607abfe48fe51ac6d512 atom/browser/login_handler.h
@@ -6,26 +6,55 @@
 #define ATOM_BROWSER_LOGIN_HANDLER_H_
 
 #include "base/callback.h"
+<<<<<<< .our
 #include "base/memory/ref_counted.h"
 #include "base/memory/weak_ptr.h"
 #include "base/strings/string16.h"
 #include "content/public/browser/resource_request_info.h"
 #include "net/base/network_delegate.h"
+=======
+#include "base/optional.h"
+#include "base/strings/string16.h"
+#include "base/synchronization/lock.h"
+#include "content/public/browser/resource_dispatcher_host_login_delegate.h"
+#include "content/public/browser/resource_request_info.h"
+>>>>>>> .their
 
 namespace content {
 class WebContents;
 }
 
+<<<<<<< .our
+=======
+namespace net {
+class AuthChallengeInfo;
+class AuthCredentials;
+}  // namespace net
+
+>>>>>>> .their
 namespace atom {
 
 // Handles the HTTP basic auth, must be created on IO thread.
 class LoginHandler : public base::RefCountedThreadSafe<LoginHandler> {
  public:
+<<<<<<< .our
   LoginHandler(net::URLRequest* request,
                const net::AuthChallengeInfo& auth_info,
                const net::NetworkDelegate::AuthCallback& callback,
                net::AuthCredentials* credentials,
                const content::ResourceRequestInfo* resource_request_info);
+=======
+  LoginHandler(
+      net::AuthChallengeInfo* auth_info,
+      content::ResourceRequestInfo::WebContentsGetter web_contents_getter,
+      const GURL& url,
+      const base::Callback<void(const base::Optional<net::AuthCredentials>&)>&
+          auth_required_callback);
+
+  // Returns the WebContents associated with the request, must be called on UI
+  // thread.
+  content::WebContents* GetWebContents() const;
+>>>>>>> .their
 
   // The auth is cancelled, must be called on UI thread.
   void CancelAuth();
@@ -61,10 +90,18 @@
   // WebContents associated with the login request.
   content::ResourceRequestInfo::WebContentsGetter web_contents_getter_;
 
+<<<<<<< .our
   // Called with preferred value of net::NetworkDelegate::AuthRequiredResponse.
   net::NetworkDelegate::AuthCallback auth_callback_;
 
   base::WeakPtrFactory<LoginHandler> weak_factory_;
+=======
+  // WebContents associated with the login request.
+  content::ResourceRequestInfo::WebContentsGetter web_contents_getter_;
+
+  base::Callback<void(const base::Optional<net::AuthCredentials>&)>
+      auth_required_callback_;
+>>>>>>> .their
 
   DISALLOW_COPY_AND_ASSIGN(LoginHandler);
 };
changed in both
  base   100644 8f8ea28cd20f7895d12aa50b98ae89d3365157e5 atom/browser/mac/atom_application_delegate.mm
  our    100644 683f7a84bcaa2c47bb78cf299314a5afeb15639b atom/browser/mac/atom_application_delegate.mm
  their  100644 66fe539406a52046d114f52feb1c9f1b8403c828 atom/browser/mac/atom_application_delegate.mm
changed in both
  base   100644 86c506d423f8228d2f31ad93950944c5902e9aec atom/browser/native_window_mac.mm
  our    100644 004263ec127709067e903ffbf31003b8844226b4 atom/browser/native_window_mac.mm
  their  100644 ba28d4f501bd0ff3fe7df91a46d2af995708c84d atom/browser/native_window_mac.mm
changed in both
  base   100644 3471622db0b92b4b3a9d181e3b74053667b58060 atom/browser/net/atom_network_delegate.cc
  our    100644 e71ea74317b69f31a5aac8e723902748972fed8f atom/browser/net/atom_network_delegate.cc
  their  100644 21ea34d57739878358d0822f3377cc97fefc4ec0 atom/browser/net/atom_network_delegate.cc
@@ -342,7 +342,12 @@
 
 void AtomNetworkDelegate::OnResponseStarted(net::URLRequest* request,
                                             int net_error) {
+<<<<<<< .our
   if (!base::ContainsKey(simple_listeners_, kOnResponseStarted))
+=======
+  if (!base::ContainsKey(simple_listeners_, kOnResponseStarted)) {
+    brightray::NetworkDelegate::OnResponseStarted(request, net_error);
+>>>>>>> .their
     return;
 
   if (request->status().status() != net::URLRequestStatus::SUCCESS)
changed in both
  base   100644 1ee8d19dc90081a4617f4d27b9efb571d1bf6159 atom/browser/net/atom_network_delegate.h
  our    100644 39a7a8ddfcda17fd7d022331132b54485d07a279 atom/browser/net/atom_network_delegate.h
  their  100644 9288b70cb422caf38485d33212ec4a4be4ceb97e atom/browser/net/atom_network_delegate.h
@@ -103,10 +103,13 @@
   void OnBeforeRedirect(net::URLRequest* request,
                         const GURL& new_location) override;
   void OnResponseStarted(net::URLRequest* request, int net_error) override;
+<<<<<<< .our
   void OnNetworkBytesReceived(net::URLRequest* request,
                               int64_t bytes_read) override {}
   void OnNetworkBytesSent(net::URLRequest* request,
                           int64_t bytes_sent) override {}
+=======
+>>>>>>> .their
   void OnCompleted(net::URLRequest* request, bool started) override;
   void OnURLRequestDestroyed(net::URLRequest* request) override;
   void OnPACScriptError(int line_number, const base::string16& error) override {
changed in both
  base   100644 253b7558aa45d5376d8e45eafdbd00e664ae3bee atom/browser/net/atom_url_request.cc
  our    100644 5ffbfd65a48b4459b2ebca66a5c2259f18ed80a8 atom/browser/net/atom_url_request.cc
  their  100644 1aac780d88213871ab258845f8a0e3baf990cf27 atom/browser/net/atom_url_request.cc
changed in both
  base   100644 19aaef091fee953b36238b13b1451a7af01fb106 atom/browser/net/atom_url_request.h
  our    100644 fde7b161385fb431b2d807012a00679a4bdb507a atom/browser/net/atom_url_request.h
  their  100644 2b03ad7bc37ce6cfec1ff79ce183d37adf90749b atom/browser/net/atom_url_request.h
changed in both
  base   100644 7b5e20631aaf927b714c4a3edf89c3ab820bc800 atom/browser/net/js_asker.cc
  our    100644 59e3ab881c2355c2ed29b806de59ef372c170b62 atom/browser/net/js_asker.cc
  their  100644 daf978082f102937d142dcddbdd860c92c709dbe atom/browser/net/js_asker.cc
@@ -62,8 +62,13 @@
     if (dict->GetInteger("error", error))
       return true;
   } else if (value->is_int()) {
+<<<<<<< .our
     *error = value->GetInt();
     return true;
+=======
+    if (value->GetAsInteger(error))
+      return true;
+>>>>>>> .their
   }
   return false;
 }
changed in both
  base   100644 a51e08e486bffb2cf2f8fb6b26358f299f8b2061 atom/browser/net/url_request_async_asar_job.cc
  our    100644 1c15fd39b9d479b441b0931564f9e2c3f9de37c7 atom/browser/net/url_request_async_asar_job.cc
  their  100644 06959032411d27e69ec441577b7a1987a2117080 atom/browser/net/url_request_async_asar_job.cc
@@ -18,6 +18,7 @@
     : JsAsker<asar::URLRequestAsarJob>(request, network_delegate) {}
 
 void URLRequestAsyncAsarJob::StartAsync(std::unique_ptr<base::Value> options) {
+<<<<<<< .our
   std::string file_path;
   if (options->is_dict()) {
     auto* path_value =
@@ -26,6 +27,14 @@
       file_path = path_value->GetString();
   } else if (options->is_string()) {
     file_path = options->GetString();
+=======
+  base::FilePath::StringType file_path;
+  if (options->is_dict()) {
+    static_cast<base::DictionaryValue*>(options.get())
+        ->GetString("path", &file_path);
+  } else if (options->is_string()) {
+    options->GetAsString(&file_path);
+>>>>>>> .their
   }
 
   if (file_path.empty()) {
changed in both
  base   100644 5d3be1e455c3d59a98e7b2293bca40aae7839376 atom/browser/net/url_request_fetch_job.cc
  our    100644 68539433f4de80a96bc672de3a2834b299d6c04b atom/browser/net/url_request_fetch_job.cc
  their  100644 09f7277ab6595e0e21d99e53a63d84ef6259de6d atom/browser/net/url_request_fetch_job.cc
changed in both
  base   100644 82d76d2854a2f73f2e997a60df01b4acbee1feb3 atom/browser/net/url_request_string_job.cc
  our    100644 31381ff118665f10a53e13fbe0044046738ca230 atom/browser/net/url_request_string_job.cc
  their  100644 453dd0bb6615880d75f73294d22e67ec9975b7c3 atom/browser/net/url_request_string_job.cc
@@ -25,7 +25,11 @@
     dict->GetString("charset", &charset_);
     dict->GetString("data", &data_);
   } else if (options->is_string()) {
+<<<<<<< .our
     data_ = options->GetString();
+=======
+    options->GetAsString(&data_);
+>>>>>>> .their
   }
   net::URLRequestSimpleJob::Start();
 }
changed in both
  base   100644 b2b2cec7468193fc6f2fbe1d54b5c8e29a1c47df atom/browser/osr/osr_render_widget_host_view.cc
  our    100644 4a2a0747fe2e6bf38c8999b80dbfea31e52a17fd atom/browser/osr/osr_render_widget_host_view.cc
  their  100644 669785cbaa7762ebb8220632db229b24e58ebdca atom/browser/osr/osr_render_widget_host_view.cc
@@ -280,6 +280,9 @@
 
   local_surface_id_ = local_surface_id_allocator_.GenerateId();
 
+  // Surface synchronization is not supported with OSR.
+  DCHECK(!features::IsSurfaceSynchronizationEnabled());
+
 #if defined(OS_MACOSX)
   last_frame_root_background_color_ = SK_ColorTRANSPARENT;
   CreatePlatformWidget(is_guest_view_hack);
@@ -755,6 +758,18 @@
   render_widget_host_->DidProcessFrame(frame_token);
 }
 
+<<<<<<< .our
+=======
+void OffScreenRenderWidgetHostView::OnFirstSurfaceActivation(
+    const viz::SurfaceInfo& surface_info) {}
+
+void OffScreenRenderWidgetHostView::OnBeginFrame(base::TimeTicks frame_time) {}
+
+void OffScreenRenderWidgetHostView::OnFrameTokenChanged(uint32_t frame_token) {
+  render_widget_host_->DidProcessFrame(frame_token);
+}
+
+>>>>>>> .their
 void OffScreenRenderWidgetHostView::DidReceiveFirstFrameAfterNavigation() {
   render_widget_host_->DidReceiveFirstFrameAfterNavigation();
 }
@@ -1131,11 +1146,16 @@
                 popup_host_view_->popup_position_.x(),
             mouse_wheel_event.PositionInWidget().y -
                 popup_host_view_->popup_position_.y());
+<<<<<<< .our
         popup_mouse_wheel_event.SetPositionInScreen(
             popup_mouse_wheel_event.PositionInWidget().x,
             popup_mouse_wheel_event.PositionInWidget().y);
 
         popup_host_view_->SendMouseWheelEvent(popup_mouse_wheel_event);
+=======
+        popup_host_view_->ProcessMouseWheelEvent(popup_event,
+                                                 ui::LatencyInfo());
+>>>>>>> .their
         return;
       } else {
         // Scrolling outside of the popup widget so destroy it.
changed in both
  base   100644 bba0c25c2a330cd958bde946b766a9fe95f28efa atom/browser/osr/osr_render_widget_host_view.h
  our    100644 b81f6310f864c00fea50b1aac49dc89173eaa302 atom/browser/osr/osr_render_widget_host_view.h
  their  100644 10cc7530f8b177d667f170fb08b32d6c44dd957d atom/browser/osr/osr_render_widget_host_view.h
@@ -170,6 +170,10 @@
   bool DelegatedFrameCanCreateResizeLock() const override;
   std::unique_ptr<content::CompositorResizeLock>
   DelegatedFrameHostCreateResizeLock() override;
+<<<<<<< .our
+=======
+  viz::LocalSurfaceId GetLocalSurfaceId() const override;
+>>>>>>> .their
   void OnFirstSurfaceActivation(const viz::SurfaceInfo& surface_info) override;
   void OnBeginFrame(base::TimeTicks frame_time) override;
   void OnFrameTokenChanged(uint32_t frame_token) override;
@@ -181,11 +185,14 @@
   bool IsAutoResizeEnabled() const override;
 #endif  // !defined(OS_MACOSX)
 
+<<<<<<< .our
   viz::LocalSurfaceId GetLocalSurfaceId() const override;
   viz::FrameSinkId GetFrameSinkId() override;
 
   void DidNavigate() override;
 
+=======
+>>>>>>> .their
   bool TransformPointToLocalCoordSpace(const gfx::PointF& point,
                                        const viz::SurfaceId& original_surface,
                                        gfx::PointF* transformed_point) override;
changed in both
  base   100644 4c6f88efb6eb3d6db1235079a18fa27cddee988e atom/browser/osr/osr_render_widget_host_view_mac.mm
  our    100644 8af4ce6ec263a6fba9f3c736ff74247c86787dbc atom/browser/osr/osr_render_widget_host_view_mac.mm
  their  100644 81d39897f656613002d24a329eeb92d055d4be20 atom/browser/osr/osr_render_widget_host_view_mac.mm
@@ -22,7 +22,11 @@
   virtual ~MacHelper() {}
 
   // content::BrowserCompositorMacClient:
+<<<<<<< .our
   SkColor BrowserCompositorMacGetGutterColor() const override {
+=======
+  SkColor BrowserCompositorMacGetGutterColor(SkColor color) const override {
+>>>>>>> .their
     // When making an element on the page fullscreen the element's background
     // may not match the page's, so use black as the gutter color to avoid
     // flashes of brighter colors during the transition.
@@ -81,7 +85,11 @@
 
 void OffScreenRenderWidgetHostView::StopSpeaking() {}
 
+<<<<<<< .our
 bool OffScreenRenderWidgetHostView::ShouldContinueToPauseForFrame() {
+=======
+bool CefRenderWidgetHostViewOSR::ShouldContinueToPauseForFrame() {
+>>>>>>> .their
   return browser_compositor_->ShouldContinueToPauseForFrame();
 }
 
changed in both
  base   100644 e73d055de09d58e87a5a1045c17d378548d1b00a atom/browser/resources/mac/Info.plist
  our    100644 9094f0f7335edf833d51f688851e6a105de60433 atom/browser/resources/mac/Info.plist
  their  100644 b8d6a2da8099c4826e7706d4859d9a6f2da0706d atom/browser/resources/mac/Info.plist
@@ -23,7 +23,7 @@
   <key>LSApplicationCategoryType</key>
   <string>public.app-category.developer-tools</string>
   <key>LSMinimumSystemVersion</key>
-  <string>10.9.0</string>
+  <string>10.10.0</string>
   <key>NSMainNibFile</key>
   <string>MainMenu</string>
   <key>NSPrincipalClass</key>
changed in both
  base   100644 89b6213a49ebc406a19fc4aae3b1ca718f09fe40 atom/browser/ui/autofill_popup.cc
  our    100644 f7bd98dacb9812491e80f03a093381f145b03587 atom/browser/ui/autofill_popup.cc
  their  100644 8719421abefdb4bc634c3eef27390d59a4125823 atom/browser/ui/autofill_popup.cc
changed in both
  base   100644 d0fbf08068f849d31de74aac78115382985e3685 atom/browser/ui/autofill_popup.h
  our    100644 fe1b91760d8628566a858e406a896a006aa5d4ca atom/browser/ui/autofill_popup.h
  their  100644 7e4f591f7436ced6bccc0032114239b9e50959bf atom/browser/ui/autofill_popup.h
changed in both
  base   100644 ac68d8313055f1b9f2c0d5242fda6d8c488d3d10 atom/browser/ui/certificate_trust_win.cc
  our    100644 f3dc0e0cc6ae044daf9cc499061db98f387d7dea atom/browser/ui/certificate_trust_win.cc
  their  100644 6179b08607041c38996d7faef8f7f456e42e4ac4 atom/browser/ui/certificate_trust_win.cc
changed in both
  base   100644 9821ccc537b0983257fdef15f2d9db973b926cbe atom/browser/ui/views/menu_bar.cc
  our    100644 e838d3cc217b5ffdb77226beff0d7217539f23f9 atom/browser/ui/views/menu_bar.cc
  their  100644 535af8f2803187d737e1f5e42507d95b9b7272c2 atom/browser/ui/views/menu_bar.cc
@@ -29,8 +29,13 @@
     : background_color_(kDefaultColor), window_(window) {
   RefreshColorCache();
   UpdateViewColors();
+<<<<<<< .our
   SetLayoutManager(
       std::make_unique<views::BoxLayout>(views::BoxLayout::kHorizontal));
+=======
+  SetLayoutManager(std::make_unique<views::BoxLayout>(
+      views::BoxLayout::kHorizontal));
+>>>>>>> .their
   window_->GetFocusManager()->AddFocusChangeListener(this);
 }
 
changed in both
  base   100644 eeed3ca10e78057b1b6b97b62889fe48af7dfb2d atom/browser/ui/win/taskbar_host.h
  our    100644 2182d377a7736f5e135d2f518c2a0a838cd0d1a0 atom/browser/ui/win/taskbar_host.h
  their  100644 31199cf22837b604beca1fe92627b53cf6f71e8f atom/browser/ui/win/taskbar_host.h
changed in both
  base   100644 f1d144bc5a0b141a7da71cbd22005d55f78011ab atom/browser/web_view_guest_delegate.cc
  our    100644 27fbff7e9e3633bd17c54b4c67ba4a1d5993e449 atom/browser/web_view_guest_delegate.cc
  their  100644 ed8e2d87c7609fe2e1b11d20fa5a664107bcfca2 atom/browser/web_view_guest_delegate.cc
@@ -24,6 +24,7 @@
   ResetZoomController();
 }
 
+<<<<<<< .our
 void WebViewGuestDelegate::AttachToIframe(
     content::WebContents* embedder_web_contents,
     int embedder_frame_id) {
@@ -41,6 +42,83 @@
   // frame |embedder_frame| hosts the inner WebContents.
   api_web_contents_->web_contents()->AttachToOuterWebContentsFrame(
       embedder_web_contents_, embedder_frame);
+=======
+void WebViewGuestDelegate::SetSize(const SetSizeParams& params) {
+  bool enable_auto_size =
+      params.enable_auto_size ? *params.enable_auto_size : auto_size_enabled_;
+  gfx::Size min_size = params.min_size ? *params.min_size : min_auto_size_;
+  gfx::Size max_size = params.max_size ? *params.max_size : max_auto_size_;
+
+  if (params.normal_size)
+    normal_size_ = *params.normal_size;
+
+  min_auto_size_ = min_size;
+  min_auto_size_.SetToMin(max_size);
+  max_auto_size_ = max_size;
+  max_auto_size_.SetToMax(min_size);
+
+  enable_auto_size &= !min_auto_size_.IsEmpty() && !max_auto_size_.IsEmpty();
+
+  auto* rvh = web_contents()->GetRenderViewHost();
+  if (enable_auto_size) {
+    // Autosize is being enabled.
+    rvh->EnableAutoResize(min_auto_size_, max_auto_size_);
+    normal_size_.SetSize(0, 0);
+  } else {
+    // Autosize is being disabled.
+    // Use default width/height if missing from partially defined normal size.
+    if (normal_size_.width() && !normal_size_.height())
+      normal_size_.set_height(GetDefaultSize().height());
+    if (!normal_size_.width() && normal_size_.height())
+      normal_size_.set_width(GetDefaultSize().width());
+
+    gfx::Size new_size;
+    if (!normal_size_.IsEmpty()) {
+      new_size = normal_size_;
+    } else if (!guest_size_.IsEmpty()) {
+      new_size = guest_size_;
+    } else {
+      new_size = GetDefaultSize();
+    }
+
+    bool changed_due_to_auto_resize = false;
+    if (auto_size_enabled_) {
+      // Autosize was previously enabled.
+      rvh->DisableAutoResize(new_size);
+      changed_due_to_auto_resize = true;
+    } else {
+      // Autosize was already disabled.
+      guest_host_->SizeContents(new_size);
+    }
+
+    UpdateGuestSize(new_size, changed_due_to_auto_resize);
+  }
+
+  auto_size_enabled_ = enable_auto_size;
+}
+
+void WebViewGuestDelegate::ResizeDueToAutoResize(const gfx::Size& new_size) {
+  UpdateGuestSize(new_size, auto_size_enabled_);
+}
+
+void WebViewGuestDelegate::DidFinishNavigation(
+    content::NavigationHandle* navigation_handle) {
+  if (navigation_handle->HasCommitted() && !navigation_handle->IsErrorPage()) {
+    auto is_main_frame = navigation_handle->IsInMainFrame();
+    auto url = navigation_handle->GetURL();
+    api_web_contents_->Emit("load-commit", url, is_main_frame);
+  }
+}
+
+void WebViewGuestDelegate::DidDetach() {
+  attached_ = false;
+  ResetZoomController();
+}
+
+void WebViewGuestDelegate::DidAttach(int guest_proxy_routing_id) {
+  attached_ = true;
+  api_web_contents_->Emit("did-attach");
+>>>>>>> .their
 
   ResetZoomController();
 
@@ -50,11 +128,20 @@
   auto* zoom_controller = api_web_contents_->GetZoomController();
   zoom_controller->SetEmbedderZoomController(embedder_zoom_controller_);
 
+<<<<<<< .our
   api_web_contents_->Emit("did-attach");
 }
 
 void WebViewGuestDelegate::DidDetach() {
   ResetZoomController();
+=======
+content::WebContents* WebViewGuestDelegate::GetOwnerWebContents() const {
+  return embedder_web_contents_;
+}
+
+void WebViewGuestDelegate::SetGuestHost(content::GuestHost* guest_host) {
+  guest_host_ = guest_host;
+>>>>>>> .their
 }
 
 content::WebContents* WebViewGuestDelegate::GetOwnerWebContents() const {
@@ -77,8 +164,28 @@
   }
 }
 
+<<<<<<< .our
 void WebViewGuestDelegate::OnZoomControllerWebContentsDestroyed() {
   ResetZoomController();
+=======
+void WebViewGuestDelegate::UpdateGuestSize(const gfx::Size& new_size,
+                                           bool due_to_auto_resize) {
+  if (due_to_auto_resize)
+    api_web_contents_->Emit("size-changed", guest_size_.width(),
+                            guest_size_.height(), new_size.width(),
+                            new_size.height());
+  guest_size_ = new_size;
+}
+
+gfx::Size WebViewGuestDelegate::GetDefaultSize() const {
+  if (is_full_page_plugin_) {
+    // Full page plugins default to the size of the owner's viewport.
+    return embedder_web_contents_->GetRenderWidgetHostView()
+        ->GetVisibleViewportSize();
+  } else {
+    return gfx::Size(kDefaultWidth, kDefaultHeight);
+  }
+>>>>>>> .their
 }
 
 void WebViewGuestDelegate::ResetZoomController() {
changed in both
  base   100644 2384b0e6dd4561d8ab6018d3d21d30a3b0590123 atom/browser/web_view_guest_delegate.h
  our    100644 6d9f440588d1d38a869ca6b6a33fd31031091efa atom/browser/web_view_guest_delegate.h
  their  100644 784ca99275dd97e32b22a68d1bc49a804e48b213 atom/browser/web_view_guest_delegate.h
@@ -21,16 +21,44 @@
                        api::WebContents* api_web_contents);
   ~WebViewGuestDelegate() override;
 
+<<<<<<< .our
   // Attach to the iframe.
   void AttachToIframe(content::WebContents* embedder_web_contents,
                       int embedder_frame_id);
+=======
+  void Initialize(api::WebContents* api_web_contents);
+
+  // Called when the WebContents is going to be destroyed.
+  void Destroy();
+
+  // Used to toggle autosize mode for this GuestView, and set both the automatic
+  // and normal sizes.
+  void SetSize(const SetSizeParams& params);
+
+  // Invoked when the contents auto-resized and the container should match it.
+  void ResizeDueToAutoResize(const gfx::Size& new_size);
+
+  // Return true if attached.
+  bool IsAttached() const { return attached_; }
+>>>>>>> .their
 
  protected:
   // content::BrowserPluginGuestDelegate:
   void DidDetach() final;
   content::WebContents* GetOwnerWebContents() const final;
+<<<<<<< .our
   content::RenderWidgetHost* GetOwnerRenderWidgetHost() final;
   content::SiteInstance* GetOwnerSiteInstance() final;
+=======
+  void SetGuestHost(content::GuestHost* guest_host) final;
+  void WillAttach(content::WebContents* embedder_web_contents,
+                  int element_instance_id,
+                  bool is_full_page_plugin,
+                  const base::Closure& completion_callback) final;
+  bool CanBeEmbeddedInsideCrossProcessFrames() override;
+  content::RenderWidgetHost* GetOwnerRenderWidgetHost() override;
+  content::SiteInstance* GetOwnerSiteInstance() override;
+>>>>>>> .their
   content::WebContents* CreateNewGuestWindow(
       const content::WebContents::CreateParams& create_params) final;
 
@@ -41,6 +69,19 @@
   void OnZoomControllerWebContentsDestroyed() override;
 
  private:
+<<<<<<< .our
+=======
+  // This method is invoked when the contents auto-resized to give the container
+  // an opportunity to match it if it wishes.
+  //
+  // This gives the derived class an opportunity to inform its container element
+  // or perform other actions.
+  void UpdateGuestSize(const gfx::Size& new_size, bool due_to_auto_resize);
+
+  // Returns the default size of the guestview.
+  gfx::Size GetDefaultSize() const;
+
+>>>>>>> .their
   void ResetZoomController();
 
   // The WebContents that attaches this guest view.
changed in both
  base   100644 0770f061acf6529ca55207258d70c3a2947e402f atom/common/api/atom_api_v8_util.cc
  our    100644 3d80db0c0a4cdbb4c7a78fa7e4266fc6fc87193f atom/common/api/atom_api_v8_util.cc
  their  100644 a7bf28a8e2cfd62ba198aabcc572fbb31cd0a8a7 atom/common/api/atom_api_v8_util.cc
changed in both
  base   100644 66211723a8feb5c0de9d4782f5ef25f977b133f7 atom/common/api/atom_bindings.cc
  our    100644 3dba3d63673ca8eb02044bd1335a3095f0194971 atom/common/api/atom_bindings.cc
  their  100644 ae243cdfaa15acd91f53f4112140845578d20393 atom/common/api/atom_bindings.cc
@@ -14,7 +14,10 @@
 #include "atom/common/native_mate_converters/string16_converter.h"
 #include "atom/common/node_includes.h"
 #include "base/logging.h"
+<<<<<<< .our
 #include "base/process/process_info.h"
+=======
+>>>>>>> .their
 #include "base/process/process_metrics_iocounters.h"
 #include "base/sys_info.h"
 #include "native_mate/dictionary.h"
changed in both
  base   100644 ef8f0e33adb74a276a3738a1fc735433d2a0f632 atom/common/asar/archive.cc
  our    100644 9b37f94a4dc462c0cc84e0182654ff2571952df9 atom/common/asar/archive.cc
  their  100644 5a08a99701deb5b53b9245ecfd1a9100d0ce607a atom/common/asar/archive.cc
changed in both
  base   100644 a74ae403213bdce8b5b605caaa3c042d08254b28 atom/common/native_mate_converters/content_converter.cc
  our    100644 2684aa7dda07ac79e47823c3cf9bf00d3f5cf3f5 atom/common/native_mate_converters/content_converter.cc
  their  100644 46364e21266a93c7c496d87acbf6cc4ff4965194 atom/common/native_mate_converters/content_converter.cc
changed in both
  base   100644 8e490ca733b4a97ac18f288e0b8c58c812c76a66 atom/common/native_mate_converters/net_converter.cc
  our    100644 db54210e7c095da593c6f5b9f4ed1eafb91b945d atom/common/native_mate_converters/net_converter.cc
  their  100644 b95cfbaeb5e0595dd5f22728a575b571a5d50eb3 atom/common/native_mate_converters/net_converter.cc
added in both
  our    100644 61a6563a617030684081e4934044865fdc3c6540 atom/common/native_mate_converters/network_converter.cc
  their  100644 1037e5f111fbea5c780a168305b2d102e41a58d3 atom/common/native_mate_converters/network_converter.cc
@@ -6,7 +6,10 @@
 
 #include <string>
 #include <utility>
+<<<<<<< .our
 #include <vector>
+=======
+>>>>>>> .their
 
 #include "atom/common/native_mate_converters/value_converter.h"
 #include "native_mate/dictionary.h"
@@ -21,6 +24,7 @@
     const scoped_refptr<network::ResourceRequestBody>& val) {
   if (!val)
     return v8::Null(isolate);
+<<<<<<< .our
   auto list = std::make_unique<base::ListValue>();
   for (const auto& element : *(val->elements())) {
     auto post_data_dict = std::make_unique<base::DictionaryValue>();
@@ -28,6 +32,16 @@
     if (type == network::DataElement::TYPE_BYTES) {
       auto bytes = std::make_unique<base::Value>(std::vector<char>(
           element.bytes(), element.bytes() + (element.length())));
+=======
+  std::unique_ptr<base::ListValue> list(new base::ListValue);
+  for (const auto& element : *(val->elements())) {
+    std::unique_ptr<base::DictionaryValue> post_data_dict(
+        new base::DictionaryValue);
+    auto type = element.type();
+    if (type == network::DataElement::TYPE_BYTES) {
+      std::unique_ptr<base::Value> bytes(base::Value::CreateWithCopiedBuffer(
+          element.bytes(), static_cast<size_t>(element.length())));
+>>>>>>> .their
       post_data_dict->SetString("type", "rawData");
       post_data_dict->Set("bytes", std::move(bytes));
     } else if (type == network::DataElement::TYPE_FILE) {
@@ -52,7 +66,11 @@
     v8::Isolate* isolate,
     v8::Local<v8::Value> val,
     scoped_refptr<network::ResourceRequestBody>* out) {
+<<<<<<< .our
   auto list = std::make_unique<base::ListValue>();
+=======
+  std::unique_ptr<base::ListValue> list(new base::ListValue);
+>>>>>>> .their
   if (!ConvertFromV8(isolate, val, list.get()))
     return false;
   *out = new network::ResourceRequestBody();
changed in both
  base   100644 b97b5fdfd8ee36c11f46dd9891b39976ac83bfc8 atom/common/native_mate_converters/v8_value_converter.cc
  our    100644 3fa070771d6843e9428e560c746965b095961e2a atom/common/native_mate_converters/v8_value_converter.cc
  their  100644 a5448cd192468e10236779540c2cf80a9428bd55 atom/common/native_mate_converters/v8_value_converter.cc
@@ -342,8 +342,13 @@
   if (val->IsRegExp()) {
     if (!reg_exp_allowed_)
       // JSON.stringify converts to an object.
+<<<<<<< .our
       return FromV8Object(val->ToObject(context).ToLocalChecked(), state,
                           isolate);
+=======
+      return FromV8Object(val->ToObject(context).ToLocalChecked(),
+          state, isolate);
+>>>>>>> .their
     return new base::Value(
         *v8::String::Utf8Value(val->ToString(context).ToLocalChecked()));
   }
@@ -356,8 +361,13 @@
     if (!function_allowed_)
       // JSON.stringify refuses to convert function(){}.
       return nullptr;
+<<<<<<< .our
     return FromV8Object(val->ToObject(context).ToLocalChecked(), state,
                         isolate);
+=======
+    return FromV8Object(val->ToObject(context).ToLocalChecked(),
+        state, isolate);
+>>>>>>> .their
   }
 
   if (node::Buffer::HasInstance(val)) {
@@ -365,8 +375,13 @@
   }
 
   if (val->IsObject()) {
+<<<<<<< .our
     return FromV8Object(val->ToObject(context).ToLocalChecked(), state,
                         isolate);
+=======
+    return FromV8Object(val->ToObject(context).ToLocalChecked(),
+        state, isolate);
+>>>>>>> .their
   }
 
   LOG(ERROR) << "Unexpected v8 value type encountered.";
changed in both
  base   100644 552c598b24ca4a38a9a94a893033e03204f44a9f atom/common/native_mate_converters/value_converter.cc
  our    100644 a71cc70f83d2526596a75d8daf036f905ca099be atom/common/native_mate_converters/value_converter.cc
  their  100644 0412a0118f2b5f6e2801f02e6089f9d12214d311 atom/common/native_mate_converters/value_converter.cc
changed in both
  base   100644 947d3bc1a08b5e5bcd1489c2622ae633c4646651 atom/common/platform_util_win.cc
  our    100644 34576be95f2552aaa985dacb3f36406dfc29d54c atom/common/platform_util_win.cc
  their  100644 193e2ece0042367113ee23512b5b3ee6d4785fca atom/common/platform_util_win.cc
@@ -240,6 +240,36 @@
   if (dir.empty())
     return false;
 
+<<<<<<< .our
+=======
+  typedef HRESULT(WINAPI * SHOpenFolderAndSelectItemsFuncPtr)(
+      PCIDLIST_ABSOLUTE pidl_Folder, UINT cidl, PCUITEMID_CHILD_ARRAY pidls,
+      DWORD flags);
+
+  static SHOpenFolderAndSelectItemsFuncPtr open_folder_and_select_itemsPtr =
+      NULL;
+  static bool initialize_open_folder_proc = true;
+  if (initialize_open_folder_proc) {
+    initialize_open_folder_proc = false;
+    // The SHOpenFolderAndSelectItems API is exposed by shell32 version 6
+    // and does not exist in Win2K. We attempt to retrieve this function export
+    // from shell32 and if it does not exist, we just invoke ShellExecute to
+    // open the folder thus losing the functionality to select the item in
+    // the process.
+    HMODULE shell32_base = GetModuleHandle(L"shell32.dll");
+    if (!shell32_base) {
+      NOTREACHED() << " " << __FUNCTION__ << "(): Can't open shell32.dll";
+      return false;
+    }
+    open_folder_and_select_itemsPtr =
+        reinterpret_cast<SHOpenFolderAndSelectItemsFuncPtr>(
+            GetProcAddress(shell32_base, "SHOpenFolderAndSelectItems"));
+  }
+  if (!open_folder_and_select_itemsPtr) {
+    return ui::win::OpenFolderViaShell(dir);
+  }
+
+>>>>>>> .their
   Microsoft::WRL::ComPtr<IShellFolder> desktop;
   HRESULT hr = SHGetDesktopFolder(desktop.GetAddressOf());
   if (FAILED(hr))
changed in both
  base   100644 084f25eba8926e314482077af700923fc760c683 brightray/brightray.gyp
  our    100644 f233257e88bad8f0ff703034bea02e4715a5b5b9 brightray/brightray.gyp
  their  100644 5541952025c562b2e891da7e4f75550b7ad8b2cd brightray/brightray.gyp
changed in both
  base   100644 596b9bd373ed12292dcbb527e8df9c84b7a9bd84 brightray/brightray.gypi
  our    100644 8a945dc0219293d90e30162e4691a4d871071f4f brightray/brightray.gypi
  their  100644 e352533390a63c38d9c204c43d4c696c8285ff87 brightray/brightray.gypi
@@ -32,7 +32,7 @@
       'GCC_ENABLE_CPP_RTTI': 'NO',
       'GCC_TREAT_WARNINGS_AS_ERRORS': 'YES',
       'CLANG_CXX_LANGUAGE_STANDARD': 'c++14',
-      'MACOSX_DEPLOYMENT_TARGET': '10.9',
+      'MACOSX_DEPLOYMENT_TARGET': '10.10',
       'RUN_CLANG_STATIC_ANALYZER': 'YES',
       'USE_HEADER_MAP': 'NO',
     },
changed in both
  base   100644 6951bd8f4eab3a51d3e1295bafd8dac7209579f3 brightray/browser/browser_context.cc
  our    100644 1eff7344e9aef78bb88720c38c0f75fb92e6bc09 brightray/browser/browser_context.cc
  their  100644 6123937cb564831e21373b48405f7ba8d3f5efe1 brightray/browser/browser_context.cc
changed in both
  base   100644 96c3e661d651e0a469b04313ead75d8bf7b03aa9 brightray/browser/browser_context.h
  our    100644 1fb1c59b8043dbb711a364fca3c357c11993bedc brightray/browser/browser_context.h
  their  100644 8f3de784cfe25b64b2dd767f5efd91845a3aecb6 brightray/browser/browser_context.h
@@ -19,6 +19,7 @@
 
 namespace brightray {
 
+<<<<<<< .our
 class BrowserContext;
 
 struct BrowserContextDeleter {
@@ -28,6 +29,11 @@
 class BrowserContext
     : public base::RefCountedThreadSafe<BrowserContext, BrowserContextDeleter>,
       public content::BrowserContext {
+=======
+class BrowserContext : public base::RefCounted<BrowserContext>,
+                       public content::BrowserContext,
+                       public brightray::URLRequestContextGetter::Delegate {
+>>>>>>> .their
  public:
   // Get the BrowserContext according to its |partition| and |in_memory|,
   // empty pointer when be returned when there is no matching BrowserContext.
changed in both
  base   100644 4705abc986661ba3cb6bddfd0e9b70bfd45f19d8 brightray/browser/browser_main_parts.cc
  our    100644 78d0ef15ef1343e7db123f97182bac7f9a98b3eb brightray/browser/browser_main_parts.cc
  their  100644 d44ace2dc3306b0f98737297f59292778468e569 brightray/browser/browser_main_parts.cc
@@ -179,6 +179,7 @@
 }
 #endif
 
+<<<<<<< .our
 void BrowserMainParts::InitializeFeatureList() {
   auto* cmd_line = base::CommandLine::ForCurrentProcess();
   const auto enable_features =
@@ -187,6 +188,15 @@
       cmd_line->GetSwitchValueASCII(switches::kDisableFeatures);
   auto feature_list = std::make_unique<base::FeatureList>();
   feature_list->InitializeFromCommandLine(enable_features, disable_features);
+=======
+int BrowserMainParts::PreEarlyInitialization() {
+  std::unique_ptr<base::FeatureList> feature_list(new base::FeatureList);
+  // TODO(deepak1556): Disable guest webcontents based on OOPIF feature.
+  // Disable surface synchronization and async wheel events to make OSR work.
+  feature_list->InitializeFromCommandLine(
+      "",
+      "GuestViewCrossProcessFrames,SurfaceSynchronization,AsyncWheelEvents");
+>>>>>>> .their
   base::FeatureList::SetInstance(std::move(feature_list));
 }
 
changed in both
  base   100644 2173339853647f6d904e8d4822422adc495c7822 brightray/browser/browser_main_parts.h
  our    100644 cf8e0296585b17f1e7dab1717e0aa80293d902dd brightray/browser/browser_main_parts.h
  their  100644 0f82ce6daa9a7fc82aa70c68d8d5fd9dc0951a99 brightray/browser/browser_main_parts.h
@@ -33,7 +33,10 @@
 
  protected:
   // content::BrowserMainParts:
+<<<<<<< .our
   bool ShouldContentCreateFeatureList() override;
+=======
+>>>>>>> .their
   int PreEarlyInitialization() override;
   void ToolkitInitialized() override;
   void PreMainMessageLoopStart() override;
changed in both
  base   100644 1182073dfac5ffc858a36eded964fe03b44dbe6e brightray/browser/inspectable_web_contents_impl.cc
  our    100644 32b5743b8db53ef2628d062e9942e30ec7c52b2f brightray/browser/inspectable_web_contents_impl.cc
  their  100644 ab609a4a9d19e7688e03d3daa320956e7ef1a541 brightray/browser/inspectable_web_contents_impl.cc
changed in both
  base   100644 32145f281fb350df13e105fd835d74f61f4a428d brightray/browser/inspectable_web_contents_impl.h
  our    100644 3f0fe0093cf724e9f090a036a259e823c12f9294 brightray/browser/inspectable_web_contents_impl.h
  their  100644 9ebcbfdd1ff3e995ac10e8a7ba07c2bdfe20a692 brightray/browser/inspectable_web_contents_impl.h
changed in both
  base   100644 05e7f92b0ae26c7f5588af8bce57914fbbc4e451 brightray/browser/net_log.cc
  our    100644 fb443ea0b72b9659d98d1873fad1a714483bb13f brightray/browser/net_log.cc
  their  100644 e2d549af0ac106978572189c60172975d8105ee8 brightray/browser/net_log.cc
@@ -46,10 +46,14 @@
 
   base::FilePath log_path =
       command_line->GetSwitchValuePath(network::switches::kLogNetLog);
+<<<<<<< .our
   if (log_path.empty())
     return;
 
   std::unique_ptr<base::Value> constants(GetConstants());  // Net constants
+=======
+  std::unique_ptr<base::Value> constants(GetConstants());
+>>>>>>> .their
   net::NetLogCaptureMode capture_mode = net::NetLogCaptureMode::Default();
 
   file_net_log_observer_ =
removed in local
  base   100644 e5c0186a7b3d12ce8880670d81702757d4e898fb brightray/browser/network_delegate.cc
  their  100644 32981cb8b8d53ee2b797c366dd80d5efcc82d2c9 brightray/browser/network_delegate.cc
removed in local
  base   100644 3c12624b27e1801350945a758e20d2d4ab835cad brightray/browser/network_delegate.h
  their  100644 77625e5c86b13bdd3619d82d59f98d6acdcf9e36 brightray/browser/network_delegate.h
changed in both
  base   100644 7c58f4c2f1ff7e1671bbafc827a21dcd1802d30e brightray/browser/platform_notification_service.cc
  our    100644 5913de18e298ab6f2388243b42af20ecba9c2ee0 brightray/browser/platform_notification_service.cc
  their  100644 36b2cfb812f3919d053174bfe4475f4ecb59c319 brightray/browser/platform_notification_service.cc
removed in local
  base   100644 a9b45296f0313704eadb4bba69598db7fce8b8a3 brightray/browser/special_storage_policy.cc
  their  100644 e662441dedbfe3c5cf08e8dcce3413153c1fcf82 brightray/browser/special_storage_policy.cc
removed in local
  base   100644 0c89db2d4c511da16fefcf2cf4ea75541ab30e15 brightray/browser/special_storage_policy.h
  their  100644 2d02cdd293438d4f10863c4cf6a7932dc20a3666 brightray/browser/special_storage_policy.h
changed in both
  base   100644 31219c5fa604cd1e8f48715beea394dccf7cf0bc brightray/browser/url_request_context_getter.cc
  our    100644 c07ba80cbc522030af580adc5d8676ed31d592d1 brightray/browser/url_request_context_getter.cc
  their  100644 68041972af79509c018d6ec045461bf0b2b50a83 brightray/browser/url_request_context_getter.cc
@@ -20,7 +20,10 @@
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/cookie_store_factory.h"
 #include "content/public/browser/devtools_network_transaction_factory.h"
+<<<<<<< .our
 #include "content/public/browser/resource_context.h"
+=======
+>>>>>>> .their
 #include "net/base/host_mapping_rules.h"
 #include "net/cert/cert_verifier.h"
 #include "net/cert/ct_known_logs.h"
@@ -172,7 +175,11 @@
   // the URLRequestContextStorage on the IO thread in GetURLRequestContext().
   proxy_config_service_ =
       net::ProxyResolutionService::CreateSystemProxyConfigService(
+<<<<<<< .our
           BrowserThread::GetTaskRunnerForThread(BrowserThread::IO));
+=======
+          io_task_runner_);
+>>>>>>> .their
 }
 
 URLRequestContextGetter::~URLRequestContextGetter() {}
@@ -191,6 +198,29 @@
   http_auth_preferences_.reset();
   host_mapping_rules_.reset();
   ct_delegate_.reset();
+<<<<<<< .our
+=======
+  net::URLRequestContextGetter::NotifyContextShuttingDown();
+}
+
+void URLRequestContextGetter::OnCookieChanged(
+    const net::CanonicalCookie& cookie,
+    net::CookieChangeCause cause) {
+  DCHECK_CURRENTLY_ON(content::BrowserThread::IO);
+
+  if (!delegate_ || context_shutting_down_)
+    return;
+
+  content::BrowserThread::PostTask(
+      content::BrowserThread::UI, FROM_HERE,
+      base::BindOnce(&Delegate::NotifyCookieChange, base::Unretained(delegate_),
+                     cookie, !(cause == net::CookieChangeCause::INSERTED),
+                     cause));
+}
+
+net::HostResolver* URLRequestContextGetter::host_resolver() {
+  return url_request_context_->host_resolver();
+>>>>>>> .their
 }
 
 net::URLRequestContext* URLRequestContextGetter::GetURLRequestContext() {
@@ -218,8 +248,14 @@
     auto cookie_path = in_memory_
                            ? base::FilePath()
                            : base_path_.Append(FILE_PATH_LITERAL("Cookies"));
+<<<<<<< .our
     std::unique_ptr<net::CookieStore> cookie_store = content::CreateCookieStore(
         content::CookieStoreConfig(cookie_path, false, false, nullptr));
+=======
+    std::unique_ptr<net::CookieStore> cookie_store =
+        content::CreateCookieStore(content::CookieStoreConfig(
+            cookie_path, false, false, nullptr));
+>>>>>>> .their
     storage_->set_cookie_store(std::move(cookie_store));
 
     // Set custom schemes that can accept cookies.
@@ -230,11 +266,19 @@
     cookie_monster->SetCookieableSchemes(cookie_schemes);
     // Cookie store will outlive notifier by order of declaration
     // in the header.
+<<<<<<< .our
     cookie_change_sub_ = url_request_context_->cookie_store()
                              ->GetChangeDispatcher()
                              .AddCallbackForAllChanges(base::Bind(
                                  &URLRequestContextGetter::OnCookieChanged,
                                  base::RetainedRef(this)));
+=======
+    cookie_change_sub_ =
+        url_request_context_->cookie_store()
+            ->GetChangeDispatcher()
+            .AddCallbackForAllChanges(
+                base::Bind(&URLRequestContextGetter::OnCookieChanged, this));
+>>>>>>> .their
 
     storage_->set_channel_id_service(std::make_unique<net::ChannelIDService>(
         new net::DefaultChannelIDStore(nullptr)));
changed in both
  base   100644 0cfd921babe5e8595583ad1beed0fa4a2e3ed89a brightray/browser/url_request_context_getter.h
  our    100644 941a5782b14a941bb25a7a9ef6ca6d73f8bc3ec1 brightray/browser/url_request_context_getter.h
  their  100644 b990d479a06cb7c26f306bf50179eb87c9af4472 brightray/browser/url_request_context_getter.h
@@ -54,11 +54,20 @@
     virtual net::HttpCache::BackendFactory* CreateHttpCacheBackendFactory(
         const base::FilePath& base_path) = 0;
     virtual std::unique_ptr<net::CertVerifier> CreateCertVerifier(
+<<<<<<< .our
         RequireCTDelegate* ct_delegate) = 0;
     virtual void GetCookieableSchemes(
         std::vector<std::string>* cookie_schemes) {}
     virtual void OnCookieChanged(const net::CanonicalCookie& cookie,
                                  net::CookieChangeCause cause) {}
+=======
+        RequireCTDelegate* ct_delegate);
+    virtual net::SSLConfigService* CreateSSLConfigService();
+    virtual std::vector<std::string> GetCookieableSchemes();
+    virtual void NotifyCookieChange(const net::CanonicalCookie& cookie,
+                                    bool removed,
+                                    net::CookieChangeCause cause) {}
+>>>>>>> .their
   };
 
   URLRequestContextGetter(
@@ -70,6 +79,13 @@
       content::ProtocolHandlerMap* protocol_handlers,
       content::URLRequestInterceptorScopedVector protocol_interceptors);
 
+<<<<<<< .our
+=======
+  // net::CookieChangeDispatcher::CookieChangedCallback implementation.
+  void OnCookieChanged(const net::CanonicalCookie& cookie,
+                       net::CookieChangeCause cause);
+
+>>>>>>> .their
   // net::URLRequestContextGetter:
   net::URLRequestContext* GetURLRequestContext() override;
   scoped_refptr<base::SingleThreadTaskRunner> GetNetworkTaskRunner()
@@ -129,11 +145,14 @@
   std::unique_ptr<net::HttpAuthPreferences> http_auth_preferences_;
   std::unique_ptr<net::HttpNetworkSession> http_network_session_;
   std::unique_ptr<net::CookieChangeSubscription> cookie_change_sub_;
+<<<<<<< .our
 
   net::URLRequestJobFactory* job_factory_;
   Delegate* delegate_;
   NetLog* net_log_;
   ResourceContext* resource_context_;
+=======
+>>>>>>> .their
   content::ProtocolHandlerMap protocol_handlers_;
   content::URLRequestInterceptorScopedVector protocol_interceptors_;
   base::FilePath base_path_;
changed in both
  base   100644 c6c7d4e8e66de2da3ded6b03ef82ac0701c5ef6a brightray/filenames.gypi
  our    100644 b9e2d96175f8ee2d407db9c49b2e2b74756327de brightray/filenames.gypi
  their  100644 0d79b5faf74f5e113b69137d6f2ab9986ff79f09 brightray/filenames.gypi
removed in local
  base   100644 5aabe7032f4c3e5cebcd9da892ff732cafafc12a chromium_src/chrome/renderer/pepper/pepper_flash_renderer_host.cc
  their  100644 50015122ccc7e2da02d0e9b2c7014e085c3ffec4 chromium_src/chrome/renderer/pepper/pepper_flash_renderer_host.cc
changed in both
  base   100644 5c6677b333ef1c47710499c97e9fd763eebe2aad common.gypi
  our    100644 676d1e904127066e4a3d313106f15406fcbed8b6 common.gypi
  their  100644 17d1db1bf3faf3b2175e7b4ac9c8262198f39f9c common.gypi
changed in both
  base   100644 2de0e12d9c3a1b76045718a5a955fa01e518e7a0 docs/api/browser-window.md
  our    100644 dff61dd336f047cf2f6f06228b2df2b98ff2304d docs/api/browser-window.md
  their  100644 f7a75fc94659a2c46f67ed0728c5791d69df2083 docs/api/browser-window.md
changed in both
  base   100644 34132af74d7876a447ae1dd685ab4df94caa453c docs/api/web-contents.md
  our    100644 8990fe2e97ab62eafdd3f7a4eb8ee782415124c5 docs/api/web-contents.md
  their  100644 ebdb643d907ce24bac1922d2756cf5b5594790fa docs/api/web-contents.md
changed in both
  base   100644 22fba1f5948e135f1438737c17e17fb0eb72abcc docs/api/webview-tag.md
  our    100644 8dc16b4a4e92ad132c7722ac400e2be851723f9b docs/api/webview-tag.md
  their  100644 4480bc132c3046601266d163040c2f68315e317a docs/api/webview-tag.md
changed in both
  base   100644 b06a3b71238a08b09ec7fda4281f09333383ace9 electron.gyp
  our    100644 944ddab2a3fd879044e31677e4bac2843fffbdee electron.gyp
  their  100644 656aad543eb9a2cae503be10b81511971594369b electron.gyp
changed in both
  base   100644 5fc4af7301ace2aa1ca3f751fd5caa776573099c features.gypi
  our    100644 86543a4db1195223a3556fa71583038f15d79a0a features.gypi
  their  100644 bff8b29fd48da2c92e11d4dfd0603155f20e5ece features.gypi
@@ -2,8 +2,13 @@
   # If it looks stupid but it works it ain't stupid.
   'variables': {
     'variables': {
+<<<<<<< .our
       'enable_desktop_capturer%': 1,
       'enable_osr%': 1,
+=======
+      'enable_desktop_capturer%': 0,  # FIXME(alexeykuzmin)
+      'enable_osr%': 0,  # FIXME(alexeykuzmin)
+>>>>>>> .their
       'enable_pdf_viewer%': 0,  # FIXME(deepak1556)
       'enable_run_as_node%': 1,
       'enable_view_api%': 0,
changed in both
  base   100644 284c82ae6f9356fb8ac4682bc1c7a02703969a6e filenames.gypi
  our    100644 f57860558f06b7e5d8a50f48cfc7e53044df0bc6 filenames.gypi
  their  100644 eb0f63047925940d97f548dcc8064b06f85c163e filenames.gypi
@@ -608,6 +608,23 @@
       'chromium_src/chrome/browser/process_singleton_posix.cc',
       'chromium_src/chrome/browser/process_singleton_win.cc',
       'chromium_src/chrome/browser/process_singleton.h',
+<<<<<<< .our
+=======
+      'chromium_src/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.cc',
+      'chromium_src/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.h',
+      'chromium_src/chrome/browser/renderer_host/pepper/monitor_finder_mac.h',
+      'chromium_src/chrome/browser/renderer_host/pepper/monitor_finder_mac.mm',
+      'chromium_src/chrome/browser/renderer_host/pepper/pepper_broker_message_filter.cc',
+      'chromium_src/chrome/browser/renderer_host/pepper/pepper_broker_message_filter.h',
+      'chromium_src/chrome/browser/renderer_host/pepper/pepper_flash_browser_host.cc',
+      'chromium_src/chrome/browser/renderer_host/pepper/pepper_flash_browser_host.h',
+      'chromium_src/chrome/browser/renderer_host/pepper/pepper_flash_clipboard_message_filter.cc',
+      'chromium_src/chrome/browser/renderer_host/pepper/pepper_flash_clipboard_message_filter.h',
+      'chromium_src/chrome/browser/renderer_host/pepper/pepper_flash_drm_host.cc',
+      'chromium_src/chrome/browser/renderer_host/pepper/pepper_flash_drm_host.h',
+      'chromium_src/chrome/browser/renderer_host/pepper/pepper_isolated_file_system_message_filter.cc',
+      'chromium_src/chrome/browser/renderer_host/pepper/pepper_isolated_file_system_message_filter.h',
+>>>>>>> .their
       'chromium_src/chrome/browser/speech/tts_controller.h',
       'chromium_src/chrome/browser/speech/tts_controller_impl.cc',
       'chromium_src/chrome/browser/speech/tts_controller_impl.h',
changed in both
  base   100644 a9a99fe2ea7d4597d568880b8865535065ab8960 lib/browser/guest-view-manager.js
  our    100644 1e4029e39a981c85fb6ff18c5ccd52f81b3c56f2 lib/browser/guest-view-manager.js
  their  100644 28f1f4894b6ee19709ba7331d8168db2a810252b lib/browser/guest-view-manager.js
changed in both
  base   100644 52ef64cd777769a86dbbac1a16015994b6b81ea1 lib/renderer/web-view/guest-view-internal.js
  our    100644 6e42c769b70e5223fe97397f87144ec342882f8d lib/renderer/web-view/guest-view-internal.js
  their  100644 a868b513eb4221bbf311f8f43ad4f94fff323928 lib/renderer/web-view/guest-view-internal.js
changed in both
  base   100755 3195fa459b918bd14baee8b8766cae8461a1ad62 script/bootstrap.py
  our    100755 e4aaf89e216b0164f15882a3040e8cac70bf1fd9 script/bootstrap.py
  their  100755 099f9a7ab7d4ac5ee6cc8e896e446cb21d640aea script/bootstrap.py
@@ -54,10 +54,10 @@
     libcc_shared_library_path = os.path.join(dist_dir, 'shared_library')
     libcc_static_library_path = os.path.join(dist_dir, 'static_library')
 
-  if PLATFORM != 'win32':
-    if not args.disable_clang and args.clang_dir == '':
-      # Download prebuilt clang binaries.
-      update_clang()
+  if (not args.disable_clang and args.clang_dir == '' 
+      and not (sys.platform=='win32' and not args.use_clang_cl_on_windows)):
+    # Download prebuilt clang binaries.
+    update_clang()
 
   setup_python_libs()
   update_node_modules('.')
@@ -95,6 +95,9 @@
   parser.add_argument('--target_arch', default=get_target_arch(),
                       help='Manually specify the arch to build for')
   parser.add_argument('--clang_dir', default='', help='Path to clang binaries')
+  parser.add_argument('--use_clang_cl_on_windows', action='store_true', 
+                      default=False, help='Download clang-cl on Windows and' \
+                      ' use it as a compiler')
   parser.add_argument('--disable_clang', action='store_true',
                       help='Use compilers other than clang for building')
   build_libcc = parser.add_mutually_exclusive_group()
@@ -129,6 +132,14 @@
     defines += ' clang_use_chrome_plugins=0'
   if args.cc_wrapper is not None:
     defines += ' cc_wrapper=' + args.cc_wrapper
+  if args.use_clang_cl_on_windows:
+    defines += ' clang_cl_windows=1'
+    if not args.clang_dir:
+      thisDir = os.path.abspath(os.path.dirname(__file__))
+      llvmPath = os.path.join(thisDir, '..', 'vendor', 'llvm-build')
+      llvmBuildDir = os.path.realpath(llvmPath)
+      defines += ' make_clang_dir=' + llvmBuildDir
+    
   return defines
 
 
@@ -197,8 +208,11 @@
 
 
 def update_clang():
-  execute_stdout([os.path.join(SOURCE_ROOT, 'script', 'update-clang.sh')])
-
+  if sys.platform == 'win32':
+    updateClangPath = os.path.join(SOURCE_ROOT, 'script', 'update-clang.py')
+    execute_stdout([sys.executable, updateClangPath])
+  else:
+    execute_stdout([os.path.join(SOURCE_ROOT, 'script', 'update-clang.sh')])
 
 def download_sysroot(target_arch):
   if target_arch == 'ia32':
changed in both
  base   100755 e0a373d94fe73113ac2e07c767e4e636e629bd9a script/create-dist.py
  our    100755 4a6c0c7ce8f275175e48c4c380ff33627f7a5961 script/create-dist.py
  their  100755 ae5ce3707c38e61716f96cf5e7627cc909597fb8 script/create-dist.py
added in remote
  their  100755 ad9b65e8ae96752b49888dc053c6a1844b4bc322 script/update-clang.py
@@ -0,0 +1,240 @@
+#!/usr/bin/env python
+# Copyright (c) 2012 The Chromium Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+"""This script is used to download prebuilt clang binaries."""
+
+import os
+import shutil
+import subprocess
+import stat
+import sys
+import tarfile
+import tempfile
+import time
+import urllib2
+
+
+# CLANG_REVISION and CLANG_SUB_REVISION determine the build of clang
+# to use. These should be synced with tools/clang/scripts/update.py in
+# Chromium.
+CLANG_REVISION = '325667'
+CLANG_SUB_REVISION=1
+
+PACKAGE_VERSION = "%s-%s" % (CLANG_REVISION, CLANG_SUB_REVISION)
+
+# Path constants. (All of these should be absolute paths.)
+THIS_DIR = os.path.abspath(os.path.dirname(__file__))
+LLVM_DIR = os.path.join(THIS_DIR, '..', 'vendor', 'llvm-build')
+LLVM_BUILD_DIR = os.path.realpath(LLVM_DIR)
+STAMP_FILE = os.path.join(LLVM_BUILD_DIR, 'cr_build_revision')
+
+# URL for pre-built binaries.
+CDS_URL = os.environ.get('CDS_CLANG_BUCKET_OVERRIDE',
+    'https://commondatastorage.googleapis.com/chromium-browser-clang')
+
+# Bump after VC updates.
+DIA_DLL = {
+  '2013': 'msdia120.dll',
+  '2015': 'msdia140.dll',
+  '2017': 'msdia140.dll',
+}
+
+
+def DownloadUrl(url, output_file):
+  """Download url into output_file."""
+  CHUNK_SIZE = 4096
+  TOTAL_DOTS = 10
+  num_retries = 3
+  retry_wait_s = 5  # Doubled at each retry.
+
+  while True:
+    try:
+      sys.stdout.write('Downloading %s ' % url)
+      sys.stdout.flush()
+      response = urllib2.urlopen(url)
+      total_size = int(response.info().getheader('Content-Length').strip())
+      bytes_done = 0
+      dots_printed = 0
+      while True:
+        chunk = response.read(CHUNK_SIZE)
+        if not chunk:
+          break
+        output_file.write(chunk)
+        bytes_done += len(chunk)
+        num_dots = TOTAL_DOTS * bytes_done / total_size
+        sys.stdout.write('.' * (num_dots - dots_printed))
+        sys.stdout.flush()
+        dots_printed = num_dots
+      if bytes_done != total_size:
+        raise urllib2.URLError("only got %d of %d bytes" %
+                               (bytes_done, total_size))
+      print ' Done.'
+      return
+    except urllib2.URLError as e:
+      sys.stdout.write('\n')
+      print e
+      if num_retries == 0 or isinstance(e, urllib2.HTTPError) and e.code == 404:
+        raise e
+      num_retries -= 1
+      print 'Retrying in %d s ...' % retry_wait_s
+      time.sleep(retry_wait_s)
+      retry_wait_s *= 2
+
+
+def EnsureDirExists(path):
+  if not os.path.exists(path):
+    print "Creating directory %s" % path
+    os.makedirs(path)
+
+
+def DownloadAndUnpack(url, output_dir):
+  with tempfile.TemporaryFile() as f:
+    DownloadUrl(url, f)
+    f.seek(0)
+    EnsureDirExists(output_dir)
+    tarfile.open(mode='r:gz', fileobj=f).extractall(path=output_dir)
+
+
+def ReadStampFile(path=STAMP_FILE):
+  """Return the contents of the stamp file, or '' if it doesn't exist."""
+  try:
+    with open(path, 'r') as f:
+      return f.read().rstrip()
+  except IOError:
+    return ''
+
+
+def WriteStampFile(s, path=STAMP_FILE):
+  """Write s to the stamp file."""
+  EnsureDirExists(os.path.dirname(path))
+  with open(path, 'w') as f:
+    f.write(s)
+    f.write('\n')
+
+
+def RmTree(directoryPath):
+  """Delete dir."""
+  def ChmodAndRetry(func, path, _):
+    # Subversion can leave read-only files around.
+    if not os.access(path, os.W_OK):
+      os.chmod(path, stat.S_IWUSR)
+      return func(path)
+    raise
+
+  shutil.rmtree(directoryPath, onerror=ChmodAndRetry)
+
+
+def CopyFile(src, dst):
+  """Copy a file from src to dst."""
+  print "Copying %s to %s" % (src, dst)
+  shutil.copy(src, dst)
+
+
+vs_version = None
+def GetVSVersion():
+  global vs_version
+  if vs_version:
+    return vs_version
+
+  # Try using the toolchain in depot_tools.
+  # This sets environment variables used by SelectVisualStudioVersion below.
+  sys.path.append(THIS_DIR)
+  import vs_toolchain
+  vs_toolchain.SetEnvironmentAndGetRuntimeDllDirs()
+
+  # Use gyp to find the MSVS installation, either in depot_tools as per above,
+  # or a system-wide installation otherwise.
+  sys.path.append(os.path.join(THIS_DIR, 'gyp', 'pylib'))
+  import gyp.MSVSVersion
+  vs_version = gyp.MSVSVersion.SelectVisualStudioVersion(
+      vs_toolchain.GetVisualStudioVersion())
+  return vs_version
+
+def ValidVS2017Path():
+  vs2017Path = os.path.join(os.environ['ProgramFiles(x86)'], \
+                            'Microsoft Visual Studio', '2017')
+  vs2017Variants = ['Enterprise', 'Professional', 'Community']
+
+  for vs2017Variant in vs2017Variants:
+    possiblePath = os.path.join(vs2017Path, vs2017Variant)
+    if os.path.exists(possiblePath):
+      return possiblePath
+
+  return ''
+
+
+def ValidVS2015Path():
+  vs2015Path = os.path.join(os.environ['ProgramFiles(x86)'], \
+                            'Microsoft Visual Studio 14.0')
+  if os.path.exists(vs2015Path):
+    return vs2015Path
+  return ''
+
+
+def ValidVSPath():
+  result = ValidVS2017Path()
+  if (len(result) == 0):
+    result = ValidVS2015Path()
+  if (len(result) == 0):
+    raise IOError
+  
+  return result
+
+
+def CopyDiaDllTo(target_dir):
+  # This script always wants to use the 64-bit msdia*.dll.
+  vsPath = ValidVSPath()
+  msdia140Path = os.path.join('DIA SDK', 'bin', 'amd64', 'msdia140.dll')
+
+  dia_dll_path = os.path.join(vsPath, msdia140Path)
+  if not os.path.exists(dia_dll_path):
+    raise IOError
+
+  dia_dll =  dia_dll_path
+  CopyFile(dia_dll, target_dir)
+
+
+def UpdateClang():
+  cds_file = "clang-%s.tgz" %  PACKAGE_VERSION
+  if sys.platform == 'win32' or sys.platform == 'cygwin':
+    cds_full_url = CDS_URL + '/Win/' + cds_file
+  elif sys.platform.startswith('linux'):
+    cds_full_url = CDS_URL + '/Linux_x64/' + cds_file
+  else:
+    return 0
+
+  print 'Updating Clang to %s...' % PACKAGE_VERSION
+
+  if ReadStampFile() == PACKAGE_VERSION:
+    print 'Clang is already up to date.'
+    return 0
+
+  # Reset the stamp file in case the build is unsuccessful.
+  WriteStampFile('')
+
+  print 'Downloading prebuilt clang'
+  if os.path.exists(LLVM_BUILD_DIR):
+    RmTree(LLVM_BUILD_DIR)
+  try:
+    DownloadAndUnpack(cds_full_url, LLVM_BUILD_DIR)
+    print 'clang %s unpacked' % PACKAGE_VERSION
+    if sys.platform == 'win32':
+      CopyDiaDllTo(os.path.join(LLVM_BUILD_DIR, 'bin'))
+    WriteStampFile(PACKAGE_VERSION)
+    return 0
+  except urllib2.URLError:
+    print 'Failed to download prebuilt clang %s' % cds_file
+    print 'Exiting.'
+    return 1
+
+
+def main():
+  # Don't buffer stdout, so that print statements are immediately flushed.
+  sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)
+  return UpdateClang()
+
+
+if __name__ == '__main__':
+  sys.exit(main())
changed in both
  base   100644 5165a57b04a3769c3b712c4e98645413e26e1767 spec/api-app-spec.js
  our    100644 d224eda2989332c18d655cef05a8bacc2eb6d4b8 spec/api-app-spec.js
  their  100644 37c5520a1d27d6988eb30267b7a8ca6ae83d2b20 spec/api-app-spec.js
@@ -796,7 +796,8 @@
     })
   })
 
-  describe('getAppMetrics() API', () => {
+  // TODO(marshallofsound): [Ch66] Failed on Windows x64 + ia32 on CI, passes locally
+  xdescribe('getAppMetrics() API', () => {
     it('returns memory and cpu stats of all running electron processes', () => {
       const appMetrics = app.getAppMetrics()
       expect(appMetrics).to.be.an('array').and.have.lengthOf.at.least(1, 'App memory info object is not > 0')
changed in both
  base   100644 711354fd6dff0c7cd231a39ef6cfd1c71d80d035 spec/api-browser-window-spec.js
  our    100644 f4cba12ec19d224bc46fca898db42a99baf4972e spec/api-browser-window-spec.js
  their  100644 54223a54b6a622f6a057ff7098917be86657b0b1 spec/api-browser-window-spec.js
@@ -2142,7 +2142,9 @@
     })
   })
 
-  describe('beginFrameSubscription method', () => {
+  // TODO(alexeykuzmin): [Ch66] Crashes the app.
+  // Fix and enable the test.
+  xdescribe('beginFrameSubscription method', () => {
     before(function () {
       // This test is too slow, only test it on CI.
       if (!isCI) {
@@ -2845,7 +2847,8 @@
         })
       })
 
-      describe('for a valid extension', () => {
+      // TODO(alexeykuzmin): [Ch66] Enable the tests.
+      xdescribe('for a valid extension', () => {
         const extensionName = 'foo'
 
         const removeExtension = () => {
@@ -2932,7 +2935,8 @@
       })
     })
 
-    it('works when used with partitions', (done) => {
+    // TODO(alexeykuzmin): [Ch66] Times out. Fix it and enable.
+    xit('works when used with partitions', (done) => {
       if (w != null) {
         w.destroy()
       }
changed in both
  base   100644 1d98e7993946f8f855670da3b53a60677b7d029b spec/api-debugger-spec.js
  our    100644 0f5cc614c98bfe6c679575bc1a9c76e3b145ac71 spec/api-debugger-spec.js
  their  100644 200a74f70696adad1b823fdcadefb1faac01da8f spec/api-debugger-spec.js
changed in both
  base   100644 6bc0b230bb40329d2c5b89ab69f47b9a24042247 spec/api-desktop-capturer-spec.js
  our    100644 339d9756e40f8a532322800349b36d4371a2c9b0 spec/api-desktop-capturer-spec.js
  their  100644 c351023ba59b82d5ffbdf0d33ea1f2a7253ccc00 spec/api-desktop-capturer-spec.js
@@ -8,7 +8,9 @@
 
 const isCI = remote.getGlobal('isCi')
 
-describe('desktopCapturer', () => {
+// FIXME(alexeykuzmin): [Ch66] Crashes the app.
+// Fix the crash and enable the tests.
+xdescribe('desktopCapturer', () => {
   before(function () {
     if (!features.isDesktopCapturerEnabled()) {
       // It's been disabled during build time.
changed in both
  base   100644 1b864440fe88bd2559ee00601fe19df8f7e743da spec/api-session-spec.js
  our    100644 b9093d1d6335ece5ca713a668a67bf3b40f4fabe spec/api-session-spec.js
  their  100644 7ac14e1f1f88549aa6594e96906cc77906c0accd spec/api-session-spec.js
changed in both
  base   100644 847462e2f48eca7bd5b5fe442fac4a5765542d88 spec/api-web-contents-spec.js
  our    100644 be02cb3f84001a541d64b11fe6eda50fc32e8afd spec/api-web-contents-spec.js
  their  100644 b1b1d206a2934dbc0e6d3b57cffdc9b9345d7b7a spec/api-web-contents-spec.js
changed in both
  base   100644 f053aa4dbadbbc216d98f3a985f29069bb2e4786 spec/node-spec.js
  our    100644 9bb03494a56ffacec075c40bebde39a3b57ac734 spec/node-spec.js
  their  100644 c97b44039c607b494f27c7df6e4871db91c579d6 spec/node-spec.js
@@ -286,7 +286,8 @@
       }
     })
 
-    it('emit error when connect to a socket path without listeners', (done) => {
+    // TODO(alexeykuzmin): [Ch66] Fix the test.
+    xit('emit error when connect to a socket path without listeners', (done) => {
       const socketPath = path.join(os.tmpdir(), 'atom-shell-test.sock')
       const script = path.join(fixtures, 'module', 'create_socket.js')
       const child = ChildProcess.fork(script, [socketPath])
added in both
  our    100644 5bc7ea1f27b7e56669c336a1f6cbae29c662b052 spec/package-lock.json
  their  100644 f286018282ea22f6bf7320271da978722f1839d3 spec/package-lock.json
@@ -11,8 +11,13 @@
       "dev": true,
       "optional": true,
       "requires": {
+<<<<<<< .our
         "bindings": "^1.2.1",
         "nan": "^2.0.9"
+=======
+        "bindings": "1.3.0",
+        "nan": "2.10.0"
+>>>>>>> .their
       }
     },
     "ansi-regex": {
@@ -27,12 +32,15 @@
       "integrity": "sha512-jgsaNduz+ndvGyFt3uSuWqvy4lCnIJiovtouQN5JZHOKCS2QuhEdbcQHFhVksz2N2U9hXJo8odG7ETyWlEeuDw==",
       "dev": true
     },
+<<<<<<< .our
     "async-limiter": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/async-limiter/-/async-limiter-1.0.0.tgz",
       "integrity": "sha512-jp/uFnooOiO+L211eZOoSyzpOITMXx1rBITauYykG3BRYPu8h0UcxsPNB04RR5vo4Tyz3+ay17tR6JVf9qzYWg==",
       "dev": true
     },
+=======
+>>>>>>> .their
     "balanced-match": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.0.tgz",
@@ -40,6 +48,7 @@
       "dev": true
     },
     "basic-auth": {
+<<<<<<< .our
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/basic-auth/-/basic-auth-2.0.0.tgz",
       "integrity": "sha1-AV2z81PgLlY3d1X5YnQuiYHnu7o=",
@@ -55,6 +64,12 @@
           "dev": true
         }
       }
+=======
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/basic-auth/-/basic-auth-1.1.0.tgz",
+      "integrity": "sha1-RSIe5Cn37h5QNb4/UVM/HN/SmIQ=",
+      "dev": true
+>>>>>>> .their
     },
     "bindings": {
       "version": "1.3.0",
@@ -75,11 +90,16 @@
       "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
       "dev": true,
       "requires": {
+<<<<<<< .our
         "balanced-match": "^1.0.0",
+=======
+        "balanced-match": "1.0.0",
+>>>>>>> .their
         "concat-map": "0.0.1"
       }
     },
     "browser-stdout": {
+<<<<<<< .our
       "version": "1.3.1",
       "resolved": "https://registry.npmjs.org/browser-stdout/-/browser-stdout-1.3.1.tgz",
       "integrity": "sha512-qhAVI1+Av2X7qelOfAIYwXONood6XlZE/fXaBSmW/T5SzLAmCgzi+eiWE7fUvbHaeNBQH13UftjpXxsfLkMpgw==",
@@ -89,6 +109,23 @@
       "version": "4.1.0",
       "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-4.1.0.tgz",
       "integrity": "sha1-1UVjW+HjPFQmScaRc+Xeas+uNN0=",
+=======
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/browser-stdout/-/browser-stdout-1.3.0.tgz",
+      "integrity": "sha1-81HTKWnTL6XXpVZxVCY9korjvR8=",
+      "dev": true
+    },
+    "builtin-modules": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/builtin-modules/-/builtin-modules-1.1.1.tgz",
+      "integrity": "sha1-Jw8HbFpywC9bZaR9+Uxf46J4iS8=",
+      "dev": true
+    },
+    "camelcase": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-3.0.0.tgz",
+      "integrity": "sha1-MvxLn82vhF/N9+c7uXysImHwqwo=",
+>>>>>>> .their
       "dev": true
     },
     "chai": {
@@ -97,12 +134,21 @@
       "integrity": "sha1-D2RYS6ZC8PKs4oBiefTwbKI61zw=",
       "dev": true,
       "requires": {
+<<<<<<< .our
         "assertion-error": "^1.0.1",
         "check-error": "^1.0.1",
         "deep-eql": "^3.0.0",
         "get-func-name": "^2.0.0",
         "pathval": "^1.0.0",
         "type-detect": "^4.0.0"
+=======
+        "assertion-error": "1.1.0",
+        "check-error": "1.0.2",
+        "deep-eql": "3.0.1",
+        "get-func-name": "2.0.0",
+        "pathval": "1.1.0",
+        "type-detect": "4.0.8"
+>>>>>>> .their
       }
     },
     "chai-as-promised": {
@@ -111,7 +157,11 @@
       "integrity": "sha512-azL6xMoi+uxu6z4rhWQ1jbdUhOMhis2PvscD/xjLqNMkv3BPPp2JyyuTHOrf9BOosGpNQ11v6BKv/g57RXbiaA==",
       "dev": true,
       "requires": {
+<<<<<<< .our
         "check-error": "^1.0.2"
+=======
+        "check-error": "1.0.2"
+>>>>>>> .their
       }
     },
     "charenc": {
@@ -127,6 +177,7 @@
       "dev": true
     },
     "cliui": {
+<<<<<<< .our
       "version": "4.1.0",
       "resolved": "https://registry.npmjs.org/cliui/-/cliui-4.1.0.tgz",
       "integrity": "sha512-4FG+RSG9DL7uEwRUZXZn3SS34DiDPfzP0VOiEwtUWlE+AR2EIg+hSyvrIgUUfhdgR/UkAeW2QHgeP+hWrXs7jQ==",
@@ -135,6 +186,33 @@
         "string-width": "^2.1.1",
         "strip-ansi": "^4.0.0",
         "wrap-ansi": "^2.0.0"
+=======
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/cliui/-/cliui-3.2.0.tgz",
+      "integrity": "sha1-EgYBU3qRbSmUD5NNo7SNWFo5IT0=",
+      "dev": true,
+      "requires": {
+        "string-width": "1.0.2",
+        "strip-ansi": "3.0.1",
+        "wrap-ansi": "2.1.0"
+      },
+      "dependencies": {
+        "ansi-regex": {
+          "version": "2.1.1",
+          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-2.1.1.tgz",
+          "integrity": "sha1-w7M6te42DYbg5ijwRorn7yfWVN8=",
+          "dev": true
+        },
+        "strip-ansi": {
+          "version": "3.0.1",
+          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.1.tgz",
+          "integrity": "sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8=",
+          "dev": true,
+          "requires": {
+            "ansi-regex": "2.1.1"
+          }
+        }
+>>>>>>> .their
       }
     },
     "code-point-at": {
@@ -150,10 +228,20 @@
       "dev": true
     },
     "commander": {
+<<<<<<< .our
       "version": "2.15.1",
       "resolved": "https://registry.npmjs.org/commander/-/commander-2.15.1.tgz",
       "integrity": "sha512-VlfT9F3V0v+jr4yxPc5gg9s62/fIVWsd2Bk2iD435um1NlGMYdVCq+MjcXnhYq2icNOizHr1kK+5TI6H0Hy0ag==",
       "dev": true
+=======
+      "version": "2.9.0",
+      "resolved": "https://registry.npmjs.org/commander/-/commander-2.9.0.tgz",
+      "integrity": "sha1-nJkJQXbhIkDLItbFFGCYQA/g99Q=",
+      "dev": true,
+      "requires": {
+        "graceful-readlink": "1.0.1"
+      }
+>>>>>>> .their
     },
     "concat-map": {
       "version": "0.0.1",
@@ -161,6 +249,7 @@
       "integrity": "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=",
       "dev": true
     },
+<<<<<<< .our
     "cross-spawn": {
       "version": "5.1.0",
       "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-5.1.0.tgz",
@@ -172,6 +261,8 @@
         "which": "^1.2.9"
       }
     },
+=======
+>>>>>>> .their
     "crypt": {
       "version": "0.0.2",
       "resolved": "https://registry.npmjs.org/crypt/-/crypt-0.0.2.tgz",
@@ -184,6 +275,7 @@
       "integrity": "sha512-ocxMKCV7QdiNhzhFSeEMhj258OGtvpANSb3oWGiotmI5h1ZIse0TMPcSLiXSpqvbYvQz2Y5RsYPMNYLWhg9eBw==",
       "dev": true,
       "requires": {
+<<<<<<< .our
         "abstract-socket": "^2.0.0",
         "event-stream": "^3.1.7",
         "hexy": "^0.2.10",
@@ -191,13 +283,28 @@
         "optimist": "^0.6.1",
         "put": "0.0.6",
         "safe-buffer": "^5.1.1",
+=======
+        "abstract-socket": "2.0.0",
+        "event-stream": "3.3.4",
+        "hexy": "0.2.11",
+        "long": "3.2.0",
+        "optimist": "0.6.1",
+        "put": "0.0.6",
+        "safe-buffer": "5.1.2",
+>>>>>>> .their
         "xml2js": "0.1.14"
       }
     },
     "debug": {
+<<<<<<< .our
       "version": "2.6.9",
       "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
       "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
+=======
+      "version": "2.6.8",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.8.tgz",
+      "integrity": "sha1-5zFTHKLt4n0YgiJCfaF4IdaP9Pw=",
+>>>>>>> .their
       "dev": true,
       "requires": {
         "ms": "2.0.0"
@@ -215,7 +322,11 @@
       "integrity": "sha512-+QeIQyN5ZuO+3Uk5DYh6/1eKO0m0YmJFGNmFHGACpf1ClL1nmlV/p4gNgbl2pJGxgXb4faqo6UE+M5ACEMyVcw==",
       "dev": true,
       "requires": {
+<<<<<<< .our
         "type-detect": "^4.0.0"
+=======
+        "type-detect": "4.0.8"
+>>>>>>> .their
       }
     },
     "depd": {
@@ -231,6 +342,7 @@
       "dev": true
     },
     "diff": {
+<<<<<<< .our
       "version": "3.5.0",
       "resolved": "https://registry.npmjs.org/diff/-/diff-3.5.0.tgz",
       "integrity": "sha512-A46qtFgd+g7pDZinpnwiRJtxbC1hpgf0uzP3iG89scHk0AUC7A1TGxf5OiiOUv/JMZR8GOt8hL900hV0bOy5xA==",
@@ -240,6 +352,11 @@
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/dirty-chai/-/dirty-chai-2.0.1.tgz",
       "integrity": "sha512-ys79pWKvDMowIDEPC6Fig8d5THiC0DJ2gmTeGzVAoEH18J8OzLud0Jh7I9IWg3NSk8x2UocznUuFmfHCXYZx9w==",
+=======
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/diff/-/diff-3.2.0.tgz",
+      "integrity": "sha1-yc45Okt8vQsFinJck98pkCeGj/k=",
+>>>>>>> .their
       "dev": true
     },
     "duplexer": {
@@ -260,6 +377,18 @@
       "integrity": "sha1-rT/0yG7C0CkyL1oCw6mmBslbP1k=",
       "dev": true
     },
+<<<<<<< .our
+=======
+    "error-ex": {
+      "version": "1.3.1",
+      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.1.tgz",
+      "integrity": "sha1-+FWobOYa3E6GIcPNoh56dhLDqNw=",
+      "dev": true,
+      "requires": {
+        "is-arrayish": "0.2.1"
+      }
+    },
+>>>>>>> .their
     "escape-html": {
       "version": "1.0.3",
       "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
@@ -280,6 +409,7 @@
     },
     "event-stream": {
       "version": "3.3.4",
+<<<<<<< .our
       "resolved": "https://registry.npmjs.org/event-stream/-/event-stream-3.3.4.tgz",
       "integrity": "sha1-SrTJoPWlTbkzi0w02Gv86PSzVXE=",
       "dev": true,
@@ -306,6 +436,19 @@
         "p-finally": "^1.0.0",
         "signal-exit": "^3.0.0",
         "strip-eof": "^1.0.0"
+=======
+      "resolved": "http://registry.npmjs.org/event-stream/-/event-stream-3.3.4.tgz",
+      "integrity": "sha1-SrTJoPWlTbkzi0w02Gv86PSzVXE=",
+      "dev": true,
+      "requires": {
+        "duplexer": "0.1.1",
+        "from": "0.1.7",
+        "map-stream": "0.1.0",
+        "pause-stream": "0.0.11",
+        "split": "0.3.3",
+        "stream-combiner": "0.0.4",
+        "through": "2.3.8"
+>>>>>>> .their
       }
     },
     "fd-slicer": {
@@ -314,6 +457,7 @@
       "integrity": "sha1-i1vL2ewyfFBBv5qwI/1nUPEXfmU=",
       "dev": true,
       "requires": {
+<<<<<<< .our
         "pend": "~1.2.0"
       }
     },
@@ -324,6 +468,19 @@
       "dev": true,
       "requires": {
         "locate-path": "^2.0.0"
+=======
+        "pend": "1.2.0"
+      }
+    },
+    "find-up": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/find-up/-/find-up-1.1.2.tgz",
+      "integrity": "sha1-ay6YIrGizgpgq2TWEOzK1TyyTQ8=",
+      "dev": true,
+      "requires": {
+        "path-exists": "2.1.0",
+        "pinkie-promise": "2.0.1"
+>>>>>>> .their
       }
     },
     "fresh": {
@@ -356,6 +513,7 @@
       "integrity": "sha1-6td0q+5y4gQJQzoGY2YCPdaIekE=",
       "dev": true
     },
+<<<<<<< .our
     "get-stream": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-3.0.0.tgz",
@@ -374,6 +532,20 @@
         "minimatch": "^3.0.4",
         "once": "^1.3.0",
         "path-is-absolute": "^1.0.0"
+=======
+    "glob": {
+      "version": "7.1.1",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.1.tgz",
+      "integrity": "sha1-gFIR3wT6rxxjo2ADBs31reULLsg=",
+      "dev": true,
+      "requires": {
+        "fs.realpath": "1.0.0",
+        "inflight": "1.0.6",
+        "inherits": "2.0.3",
+        "minimatch": "3.0.4",
+        "once": "1.4.0",
+        "path-is-absolute": "1.0.1"
+>>>>>>> .their
       }
     },
     "graceful-fs": {
@@ -382,6 +554,7 @@
       "integrity": "sha1-Dovf5NHduIVNZOBOp8AOKgJuVlg=",
       "dev": true
     },
+<<<<<<< .our
     "growl": {
       "version": "1.10.5",
       "resolved": "https://registry.npmjs.org/growl/-/growl-1.10.5.tgz",
@@ -392,6 +565,24 @@
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
       "integrity": "sha1-tdRU3CGZriJWmfNGfloH87lVuv0=",
+=======
+    "graceful-readlink": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/graceful-readlink/-/graceful-readlink-1.0.1.tgz",
+      "integrity": "sha1-TK+tdrxi8C+gObL5Tpo906ORpyU=",
+      "dev": true
+    },
+    "growl": {
+      "version": "1.9.2",
+      "resolved": "https://registry.npmjs.org/growl/-/growl-1.9.2.tgz",
+      "integrity": "sha1-Dqd0NxXbjY3ixe3hd14bRayFwC8=",
+      "dev": true
+    },
+    "has-flag": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-1.0.0.tgz",
+      "integrity": "sha1-nZ55MWXOAXoA8AQYxD+UKnsdEfo=",
+>>>>>>> .their
       "dev": true
     },
     "he": {
@@ -406,16 +597,32 @@
       "integrity": "sha512-ciq6hFsSG/Bpt2DmrZJtv+56zpPdnq+NQ4ijEFrveKN0ZG1mhl/LdT1NQZ9se6ty1fACcI4d4vYqC9v8EYpH2A==",
       "dev": true
     },
+<<<<<<< .our
+=======
+    "hosted-git-info": {
+      "version": "2.6.0",
+      "resolved": "https://registry.npmjs.org/hosted-git-info/-/hosted-git-info-2.6.0.tgz",
+      "integrity": "sha512-lIbgIIQA3lz5XaB6vxakj6sDHADJiZadYEJB+FgA+C4nubM1NwcuvUr9EJPmnH1skZqpqUzWborWo8EIUi0Sdw==",
+      "dev": true
+    },
+>>>>>>> .their
     "http-errors": {
       "version": "1.6.3",
       "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.6.3.tgz",
       "integrity": "sha1-i1VoC7S+KDoLW/TqLjhYC+HZMg0=",
       "dev": true,
       "requires": {
+<<<<<<< .our
         "depd": "~1.1.2",
         "inherits": "2.0.3",
         "setprototypeof": "1.1.0",
         "statuses": ">= 1.4.0 < 2"
+=======
+        "depd": "1.1.2",
+        "inherits": "2.0.3",
+        "setprototypeof": "1.1.0",
+        "statuses": "1.4.0"
+>>>>>>> .their
       }
     },
     "inflight": {
@@ -424,8 +631,13 @@
       "integrity": "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
       "dev": true,
       "requires": {
+<<<<<<< .our
         "once": "^1.3.0",
         "wrappy": "1"
+=======
+        "once": "1.4.0",
+        "wrappy": "1.0.2"
+>>>>>>> .their
       }
     },
     "inherits": {
@@ -440,12 +652,22 @@
       "integrity": "sha1-EEqOSqym09jNFXqO+L+rLXo//bY=",
       "dev": true
     },
+<<<<<<< .our
+=======
+    "is-arrayish": {
+      "version": "0.2.1",
+      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
+      "integrity": "sha1-d8mYQFJ6qOyxqLppe4BkWnqSap0=",
+      "dev": true
+    },
+>>>>>>> .their
     "is-buffer": {
       "version": "1.1.6",
       "resolved": "https://registry.npmjs.org/is-buffer/-/is-buffer-1.1.6.tgz",
       "integrity": "sha512-NcdALwpXkTm5Zvvbk7owOUSvVvBKDgKP5/ewfXEznmQFfs4ZRmanOeKBTjRVjka3QFoN6XJ+9F3USqfHqTaU5w==",
       "dev": true
     },
+<<<<<<< .our
     "is-fullwidth-code-point": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz",
@@ -462,6 +684,36 @@
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
       "integrity": "sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=",
+=======
+    "is-builtin-module": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/is-builtin-module/-/is-builtin-module-1.0.0.tgz",
+      "integrity": "sha1-VAVy0096wxGfj3bDDLwbHgN6/74=",
+      "dev": true,
+      "requires": {
+        "builtin-modules": "1.1.1"
+      }
+    },
+    "is-fullwidth-code-point": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-1.0.0.tgz",
+      "integrity": "sha1-754xOG8DGn8NZDr4L95QxFfvAMs=",
+      "dev": true,
+      "requires": {
+        "number-is-nan": "1.0.1"
+      }
+    },
+    "is-utf8": {
+      "version": "0.2.1",
+      "resolved": "https://registry.npmjs.org/is-utf8/-/is-utf8-0.2.1.tgz",
+      "integrity": "sha1-Sw2hRCEE0bM2NA6AeX6GXPOffXI=",
+      "dev": true
+    },
+    "json3": {
+      "version": "3.3.2",
+      "resolved": "https://registry.npmjs.org/json3/-/json3-3.3.2.tgz",
+      "integrity": "sha1-PAQ0dD35Pi9cQq7nsZvLSDV19OE=",
+>>>>>>> .their
       "dev": true
     },
     "lcid": {
@@ -470,6 +722,7 @@
       "integrity": "sha1-MIrMr6C8SDo4Z7S28rlQYlHRuDU=",
       "dev": true,
       "requires": {
+<<<<<<< .our
         "invert-kv": "^1.0.0"
       }
     },
@@ -499,6 +752,98 @@
         "yallist": "^2.1.2"
       }
     },
+=======
+        "invert-kv": "1.0.0"
+      }
+    },
+    "load-json-file": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/load-json-file/-/load-json-file-1.1.0.tgz",
+      "integrity": "sha1-lWkFcI1YtLq0wiYbBPWfMcmTdMA=",
+      "dev": true,
+      "requires": {
+        "graceful-fs": "4.1.11",
+        "parse-json": "2.2.0",
+        "pify": "2.3.0",
+        "pinkie-promise": "2.0.1",
+        "strip-bom": "2.0.0"
+      }
+    },
+    "lodash._baseassign": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/lodash._baseassign/-/lodash._baseassign-3.2.0.tgz",
+      "integrity": "sha1-jDigmVAPIVrQnlnxci/QxSv+Ck4=",
+      "dev": true,
+      "requires": {
+        "lodash._basecopy": "3.0.1",
+        "lodash.keys": "3.1.2"
+      }
+    },
+    "lodash._basecopy": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/lodash._basecopy/-/lodash._basecopy-3.0.1.tgz",
+      "integrity": "sha1-jaDmqHbPNEwK2KVIghEd08XHyjY=",
+      "dev": true
+    },
+    "lodash._basecreate": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/lodash._basecreate/-/lodash._basecreate-3.0.3.tgz",
+      "integrity": "sha1-G8ZhYU2qf8MRt9A78WgGoCE8+CE=",
+      "dev": true
+    },
+    "lodash._getnative": {
+      "version": "3.9.1",
+      "resolved": "https://registry.npmjs.org/lodash._getnative/-/lodash._getnative-3.9.1.tgz",
+      "integrity": "sha1-VwvH3t5G1hzc3mh9ZdPuy6o6r/U=",
+      "dev": true
+    },
+    "lodash._isiterateecall": {
+      "version": "3.0.9",
+      "resolved": "https://registry.npmjs.org/lodash._isiterateecall/-/lodash._isiterateecall-3.0.9.tgz",
+      "integrity": "sha1-UgOte6Ql+uhCRg5pbbnPPmqsBXw=",
+      "dev": true
+    },
+    "lodash.create": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/lodash.create/-/lodash.create-3.1.1.tgz",
+      "integrity": "sha1-1/KEnw29p+BGgruM1yqwIkYd6+c=",
+      "dev": true,
+      "requires": {
+        "lodash._baseassign": "3.2.0",
+        "lodash._basecreate": "3.0.3",
+        "lodash._isiterateecall": "3.0.9"
+      }
+    },
+    "lodash.isarguments": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/lodash.isarguments/-/lodash.isarguments-3.1.0.tgz",
+      "integrity": "sha1-L1c9hcaiQon/AGY7SRwdM4/zRYo=",
+      "dev": true
+    },
+    "lodash.isarray": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/lodash.isarray/-/lodash.isarray-3.0.4.tgz",
+      "integrity": "sha1-eeTriMNqgSKvhvhEqpvNhRtfu1U=",
+      "dev": true
+    },
+    "lodash.keys": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/lodash.keys/-/lodash.keys-3.1.2.tgz",
+      "integrity": "sha1-TbwEcrFWvlCgsoaFXRvQsMZWCYo=",
+      "dev": true,
+      "requires": {
+        "lodash._getnative": "3.9.1",
+        "lodash.isarguments": "3.1.0",
+        "lodash.isarray": "3.0.4"
+      }
+    },
+    "long": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/long/-/long-3.2.0.tgz",
+      "integrity": "sha1-2CG3E4yhy1gcFymQ7xTbIAtcR0s=",
+      "dev": true
+    },
+>>>>>>> .their
     "map-stream": {
       "version": "0.1.0",
       "resolved": "https://registry.npmjs.org/map-stream/-/map-stream-0.1.0.tgz",
@@ -511,6 +856,7 @@
       "integrity": "sha1-U6s41f48iJG6RlMp6iP6wFQBJvk=",
       "dev": true,
       "requires": {
+<<<<<<< .our
         "charenc": "~0.0.1",
         "crypt": "~0.0.1",
         "is-buffer": "~1.1.1"
@@ -523,6 +869,11 @@
       "dev": true,
       "requires": {
         "mimic-fn": "^1.0.0"
+=======
+        "charenc": "0.0.2",
+        "crypt": "0.0.2",
+        "is-buffer": "1.1.6"
+>>>>>>> .their
       }
     },
     "mime": {
@@ -531,19 +882,26 @@
       "integrity": "sha512-KI1+qOZu5DcW6wayYHSzR/tXKCDC5Om4s1z2QJjDULzLcmf3DvzS7oluY4HCTrc+9FiKmWUgeNLg7W3uIQvxtQ==",
       "dev": true
     },
+<<<<<<< .our
     "mimic-fn": {
       "version": "1.2.0",
       "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-1.2.0.tgz",
       "integrity": "sha512-jf84uxzwiuiIVKiOLpfYk7N46TSy8ubTonmneY9vrpHNAnp0QBt2BxWV9dO3/j+BoVAb+a5G6YDPW3M5HOdMWQ==",
       "dev": true
     },
+=======
+>>>>>>> .their
     "minimatch": {
       "version": "3.0.4",
       "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz",
       "integrity": "sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==",
       "dev": true,
       "requires": {
+<<<<<<< .our
         "brace-expansion": "^1.1.7"
+=======
+        "brace-expansion": "1.1.11"
+>>>>>>> .their
       }
     },
     "minimist": {
@@ -570,6 +928,7 @@
       }
     },
     "mocha": {
+<<<<<<< .our
       "version": "5.2.0",
       "resolved": "https://registry.npmjs.org/mocha/-/mocha-5.2.0.tgz",
       "integrity": "sha512-2IUgKDhc3J7Uug+FxMXuqIyYzH7gJjXECKe/w43IGgQHTSj3InJi+yAA7T24L9bQMRKiUEHxEX37G5JpVUGLcQ==",
@@ -597,6 +956,25 @@
             "ms": "2.0.0"
           }
         }
+=======
+      "version": "3.5.3",
+      "resolved": "https://registry.npmjs.org/mocha/-/mocha-3.5.3.tgz",
+      "integrity": "sha512-/6na001MJWEtYxHOV1WLfsmR4YIynkUEhBwzsb+fk2qmQ3iqsi258l/Q2MWHJMImAcNpZ8DEdYAK72NHoIQ9Eg==",
+      "dev": true,
+      "requires": {
+        "browser-stdout": "1.3.0",
+        "commander": "2.9.0",
+        "debug": "2.6.8",
+        "diff": "3.2.0",
+        "escape-string-regexp": "1.0.5",
+        "glob": "7.1.1",
+        "growl": "1.9.2",
+        "he": "1.1.1",
+        "json3": "3.3.2",
+        "lodash.create": "3.1.1",
+        "mkdirp": "0.5.1",
+        "supports-color": "3.1.2"
+>>>>>>> .their
       }
     },
     "mocha-junit-reporter": {
@@ -605,11 +983,19 @@
       "integrity": "sha1-LlFJ7UD8XS48px5C21qx/snG2Fw=",
       "dev": true,
       "requires": {
+<<<<<<< .our
         "debug": "^2.2.0",
         "md5": "^2.1.0",
         "mkdirp": "~0.5.1",
         "strip-ansi": "^4.0.0",
         "xml": "^1.0.0"
+=======
+        "debug": "2.6.8",
+        "md5": "2.2.1",
+        "mkdirp": "0.5.1",
+        "strip-ansi": "4.0.0",
+        "xml": "1.0.1"
+>>>>>>> .their
       }
     },
     "ms": {
@@ -619,6 +1005,7 @@
       "dev": true
     },
     "multiparty": {
+<<<<<<< .our
       "version": "4.1.4",
       "resolved": "https://registry.npmjs.org/multiparty/-/multiparty-4.1.4.tgz",
       "integrity": "sha1-TJbcvcEeP3kX4WFeZAtLUCK+ZP0=",
@@ -626,6 +1013,14 @@
       "requires": {
         "fd-slicer": "~1.0.1",
         "safe-buffer": "5.1.2"
+=======
+      "version": "4.1.3",
+      "resolved": "https://registry.npmjs.org/multiparty/-/multiparty-4.1.3.tgz",
+      "integrity": "sha1-PEPH/LGJbhdGBDap3Qtu8WaOT5Q=",
+      "dev": true,
+      "requires": {
+        "fd-slicer": "1.0.1"
+>>>>>>> .their
       }
     },
     "nan": {
@@ -634,6 +1029,7 @@
       "integrity": "sha512-bAdJv7fBLhWC+/Bls0Oza+mvTaNQtP+1RyhhhvD95pgUJz6XM5IzgmxOkItJ9tkoCiplvAnXI1tNmmUD/eScyA==",
       "optional": true
     },
+<<<<<<< .our
     "npm-run-path": {
       "version": "2.0.2",
       "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-2.0.2.tgz",
@@ -641,6 +1037,18 @@
       "dev": true,
       "requires": {
         "path-key": "^2.0.0"
+=======
+    "normalize-package-data": {
+      "version": "2.4.0",
+      "resolved": "https://registry.npmjs.org/normalize-package-data/-/normalize-package-data-2.4.0.tgz",
+      "integrity": "sha512-9jjUFbTPfEy3R/ad/2oNbKtW9Hgovl5O1FvFWKkKblNXoN/Oou6+9+KKohPK13Yc3/TyunyWhJp6gvRNR/PPAw==",
+      "dev": true,
+      "requires": {
+        "hosted-git-info": "2.6.0",
+        "is-builtin-module": "1.0.0",
+        "semver": "5.5.0",
+        "validate-npm-package-license": "3.0.3"
+>>>>>>> .their
       }
     },
     "number-is-nan": {
@@ -664,7 +1072,11 @@
       "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
       "dev": true,
       "requires": {
+<<<<<<< .our
         "wrappy": "1"
+=======
+        "wrappy": "1.0.2"
+>>>>>>> .their
       }
     },
     "optimist": {
@@ -673,6 +1085,7 @@
       "integrity": "sha1-2j6nRob6IaGaERwybpDrFaAZZoY=",
       "dev": true,
       "requires": {
+<<<<<<< .our
         "minimist": "~0.0.1",
         "wordwrap": "~0.0.2"
       }
@@ -686,6 +1099,25 @@
         "execa": "^0.7.0",
         "lcid": "^1.0.0",
         "mem": "^1.1.0"
+=======
+        "minimist": "0.0.10",
+        "wordwrap": "0.0.3"
+      }
+    },
+    "options": {
+      "version": "0.0.6",
+      "resolved": "https://registry.npmjs.org/options/-/options-0.0.6.tgz",
+      "integrity": "sha1-7CLTEoBrtT5zF3Pnza788cZDEo8=",
+      "dev": true
+    },
+    "os-locale": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/os-locale/-/os-locale-1.4.0.tgz",
+      "integrity": "sha1-IPnxeuKe00XoveWDsT0gCYA8FNk=",
+      "dev": true,
+      "requires": {
+        "lcid": "1.0.0"
+>>>>>>> .their
       }
     },
     "os-tmpdir": {
@@ -694,6 +1126,7 @@
       "integrity": "sha1-u+Z0BseaqFxc/sdm/lc0VV36EnQ=",
       "dev": true
     },
+<<<<<<< .our
     "p-finally": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/p-finally/-/p-finally-1.0.0.tgz",
@@ -730,17 +1163,50 @@
       "integrity": "sha1-zg6+ql94yxiSXqfYENe1mwEP1RU=",
       "dev": true
     },
+=======
+    "parse-json": {
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-2.2.0.tgz",
+      "integrity": "sha1-9ID0BDTvgHQfhGkJn43qGPVaTck=",
+      "dev": true,
+      "requires": {
+        "error-ex": "1.3.1"
+      }
+    },
+    "path-exists": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-2.1.0.tgz",
+      "integrity": "sha1-D+tsZPD8UY2adU3V77YscCJ2H0s=",
+      "dev": true,
+      "requires": {
+        "pinkie-promise": "2.0.1"
+      }
+    },
+>>>>>>> .their
     "path-is-absolute": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
       "integrity": "sha1-F0uSaHNVNP+8es5r9TpanhtcX18=",
       "dev": true
     },
+<<<<<<< .our
     "path-key": {
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/path-key/-/path-key-2.0.1.tgz",
       "integrity": "sha1-QRyttXTFoUDTpLGRDUDYDMn0C0A=",
       "dev": true
+=======
+    "path-type": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/path-type/-/path-type-1.1.0.tgz",
+      "integrity": "sha1-WcRPfuSR2nBNpBXaWkBwuk+P5EE=",
+      "dev": true,
+      "requires": {
+        "graceful-fs": "4.1.11",
+        "pify": "2.3.0",
+        "pinkie-promise": "2.0.1"
+      }
+>>>>>>> .their
     },
     "pathval": {
       "version": "1.1.0",
@@ -754,7 +1220,11 @@
       "integrity": "sha1-/lo0sMvOErWqaitAPuLnO2AvFEU=",
       "dev": true,
       "requires": {
+<<<<<<< .our
         "through": "~2.3"
+=======
+        "through": "2.3.8"
+>>>>>>> .their
       }
     },
     "pend": {
@@ -763,12 +1233,36 @@
       "integrity": "sha1-elfrVQpng/kRUzH89GY9XI4AelA=",
       "dev": true
     },
+<<<<<<< .our
     "pseudomap": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/pseudomap/-/pseudomap-1.0.2.tgz",
       "integrity": "sha1-8FKijacOYYkX7wqKw0wa5aaChrM=",
       "dev": true
     },
+=======
+    "pify": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
+      "integrity": "sha1-7RQaasBDqEnqWISY59yosVMw6Qw=",
+      "dev": true
+    },
+    "pinkie": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/pinkie/-/pinkie-2.0.4.tgz",
+      "integrity": "sha1-clVrgM+g1IqXToDnckjoDtT3+HA=",
+      "dev": true
+    },
+    "pinkie-promise": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.1.tgz",
+      "integrity": "sha1-ITXW36ejWMBprJsXh3YogihFD/o=",
+      "dev": true,
+      "requires": {
+        "pinkie": "2.0.4"
+      }
+    },
+>>>>>>> .their
     "put": {
       "version": "0.0.6",
       "resolved": "https://registry.npmjs.org/put/-/put-0.0.6.tgz",
@@ -787,6 +1281,30 @@
       "integrity": "sha1-9JvmtIeJTdxA3MlKMi9hEJLgDV4=",
       "dev": true
     },
+<<<<<<< .our
+=======
+    "read-pkg": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/read-pkg/-/read-pkg-1.1.0.tgz",
+      "integrity": "sha1-9f+qXs0pyzHAR0vKfXVra7KePyg=",
+      "dev": true,
+      "requires": {
+        "load-json-file": "1.1.0",
+        "normalize-package-data": "2.4.0",
+        "path-type": "1.1.0"
+      }
+    },
+    "read-pkg-up": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/read-pkg-up/-/read-pkg-up-1.0.1.tgz",
+      "integrity": "sha1-nWPBMnbAZZGNV/ACpX9AobZD+wI=",
+      "dev": true,
+      "requires": {
+        "find-up": "1.1.2",
+        "read-pkg": "1.1.0"
+      }
+    },
+>>>>>>> .their
     "require-directory": {
       "version": "2.1.1",
       "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
@@ -811,7 +1329,11 @@
       "integrity": "sha1-Ut1TjbDkF0U5lTWjRwkbpFzA6rA=",
       "optional": true,
       "requires": {
+<<<<<<< .our
         "nan": "2.x"
+=======
+        "nan": "2.10.0"
+>>>>>>> .their
       }
     },
     "safe-buffer": {
@@ -826,6 +1348,15 @@
       "integrity": "sha512-NqVDv9TpANUjFm0N8uM5GxL36UgKi9/atZw+x7YFnQ8ckwFGKrl4xX4yWtrey3UJm5nP1kUbnYgLopqWNSRhWw==",
       "dev": true
     },
+<<<<<<< .our
+=======
+    "semver": {
+      "version": "5.5.0",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-5.5.0.tgz",
+      "integrity": "sha512-4SJ3dm0WAwWy/NVeioZh5AntkdJoWKxHxcmyP622fOkgHa4z3R0TdBJICINyaSDE6uNwVc8gZr+ZinwZAH4xIA==",
+      "dev": true
+    },
+>>>>>>> .their
     "send": {
       "version": "0.16.2",
       "resolved": "https://registry.npmjs.org/send/-/send-0.16.2.tgz",
@@ -833,6 +1364,7 @@
       "dev": true,
       "requires": {
         "debug": "2.6.9",
+<<<<<<< .our
         "depd": "~1.1.2",
         "destroy": "~1.0.4",
         "encodeurl": "~1.0.2",
@@ -845,6 +1377,20 @@
         "on-finished": "~2.3.0",
         "range-parser": "~1.2.0",
         "statuses": "~1.4.0"
+=======
+        "depd": "1.1.2",
+        "destroy": "1.0.4",
+        "encodeurl": "1.0.2",
+        "escape-html": "1.0.3",
+        "etag": "1.8.1",
+        "fresh": "0.5.2",
+        "http-errors": "1.6.3",
+        "mime": "1.4.1",
+        "ms": "2.0.0",
+        "on-finished": "2.3.0",
+        "range-parser": "1.2.0",
+        "statuses": "1.4.0"
+>>>>>>> .their
       },
       "dependencies": {
         "debug": {
@@ -870,6 +1416,7 @@
       "integrity": "sha512-BvE/TwpZX4FXExxOxZyRGQQv651MSwmWKZGqvmPcRIjDqWub67kTKuIMx43cZZrS/cBBzwBcNDWoFxt2XEFIpQ==",
       "dev": true
     },
+<<<<<<< .our
     "shebang-command": {
       "version": "1.2.0",
       "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-1.2.0.tgz",
@@ -889,6 +1436,38 @@
       "version": "3.0.2",
       "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.2.tgz",
       "integrity": "sha1-tf3AjxKH6hF4Yo5BXiUTK3NkbG0=",
+=======
+    "spdx-correct": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/spdx-correct/-/spdx-correct-3.0.0.tgz",
+      "integrity": "sha512-N19o9z5cEyc8yQQPukRCZ9EUmb4HUpnrmaL/fxS2pBo2jbfcFRVuFZ/oFC+vZz0MNNk0h80iMn5/S6qGZOL5+g==",
+      "dev": true,
+      "requires": {
+        "spdx-expression-parse": "3.0.0",
+        "spdx-license-ids": "3.0.0"
+      }
+    },
+    "spdx-exceptions": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/spdx-exceptions/-/spdx-exceptions-2.1.0.tgz",
+      "integrity": "sha512-4K1NsmrlCU1JJgUrtgEeTVyfx8VaYea9J9LvARxhbHtVtohPs/gFGG5yy49beySjlIMhhXZ4QqujIZEfS4l6Cg==",
+      "dev": true
+    },
+    "spdx-expression-parse": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/spdx-expression-parse/-/spdx-expression-parse-3.0.0.tgz",
+      "integrity": "sha512-Yg6D3XpRD4kkOmTpdgbUiEJFKghJH03fiC1OPll5h/0sO6neh2jqRDVHOQ4o/LMea0tgCkbMgea5ip/e+MkWyg==",
+      "dev": true,
+      "requires": {
+        "spdx-exceptions": "2.1.0",
+        "spdx-license-ids": "3.0.0"
+      }
+    },
+    "spdx-license-ids": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/spdx-license-ids/-/spdx-license-ids-3.0.0.tgz",
+      "integrity": "sha512-2+EPwgbnmOIl8HjGBXXMd9NAu02vLjOO1nWw4kmeRDFyHn+M/ETfHxQUK0oXg8ctgVnl9t3rosNVsZ1jG61nDA==",
+>>>>>>> .their
       "dev": true
     },
     "split": {
@@ -897,7 +1476,11 @@
       "integrity": "sha1-zQ7qXmOiEd//frDwkcQTPi0N0o8=",
       "dev": true,
       "requires": {
+<<<<<<< .our
         "through": "2"
+=======
+        "through": "2.3.8"
+>>>>>>> .their
       }
     },
     "statuses": {
@@ -912,6 +1495,7 @@
       "integrity": "sha1-TV5DPBhSYd3mI8o/RMWGvPXErRQ=",
       "dev": true,
       "requires": {
+<<<<<<< .our
         "duplexer": "~0.1.1"
       }
     },
@@ -923,6 +1507,37 @@
       "requires": {
         "is-fullwidth-code-point": "^2.0.0",
         "strip-ansi": "^4.0.0"
+=======
+        "duplexer": "0.1.1"
+      }
+    },
+    "string-width": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz",
+      "integrity": "sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M=",
+      "dev": true,
+      "requires": {
+        "code-point-at": "1.1.0",
+        "is-fullwidth-code-point": "1.0.0",
+        "strip-ansi": "3.0.1"
+      },
+      "dependencies": {
+        "ansi-regex": {
+          "version": "2.1.1",
+          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-2.1.1.tgz",
+          "integrity": "sha1-w7M6te42DYbg5ijwRorn7yfWVN8=",
+          "dev": true
+        },
+        "strip-ansi": {
+          "version": "3.0.1",
+          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.1.tgz",
+          "integrity": "sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8=",
+          "dev": true,
+          "requires": {
+            "ansi-regex": "2.1.1"
+          }
+        }
+>>>>>>> .their
       }
     },
     "strip-ansi": {
@@ -931,6 +1546,7 @@
       "integrity": "sha1-qEeQIusaw2iocTibY1JixQXuNo8=",
       "dev": true,
       "requires": {
+<<<<<<< .our
         "ansi-regex": "^3.0.0"
       }
     },
@@ -947,6 +1563,27 @@
       "dev": true,
       "requires": {
         "has-flag": "^3.0.0"
+=======
+        "ansi-regex": "3.0.0"
+      }
+    },
+    "strip-bom": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-2.0.0.tgz",
+      "integrity": "sha1-YhmoVhZSBJHzV4i9vxRHqZx+aw4=",
+      "dev": true,
+      "requires": {
+        "is-utf8": "0.2.1"
+      }
+    },
+    "supports-color": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-3.1.2.tgz",
+      "integrity": "sha1-cqJiiU2dQIuVbKBf83su2KbiotU=",
+      "dev": true,
+      "requires": {
+        "has-flag": "1.0.0"
+>>>>>>> .their
       }
     },
     "temp": {
@@ -955,8 +1592,13 @@
       "integrity": "sha1-4Ma8TSa5AxJEEOT+2BEDAU38H1k=",
       "dev": true,
       "requires": {
+<<<<<<< .our
         "os-tmpdir": "^1.0.0",
         "rimraf": "~2.2.6"
+=======
+        "os-tmpdir": "1.0.2",
+        "rimraf": "2.2.8"
+>>>>>>> .their
       }
     },
     "through": {
@@ -971,6 +1613,7 @@
       "integrity": "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==",
       "dev": true
     },
+<<<<<<< .our
     "walkdir": {
       "version": "0.0.12",
       "resolved": "https://registry.npmjs.org/walkdir/-/walkdir-0.0.12.tgz",
@@ -990,6 +1633,34 @@
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/which-module/-/which-module-2.0.0.tgz",
       "integrity": "sha1-2e8H3Od7mQK4o6j6SzHD4/fm6Ho=",
+=======
+    "ultron": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/ultron/-/ultron-1.0.2.tgz",
+      "integrity": "sha1-rOEWq1V80Zc4ak6I9GhTeMiy5Po=",
+      "dev": true
+    },
+    "validate-npm-package-license": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/validate-npm-package-license/-/validate-npm-package-license-3.0.3.tgz",
+      "integrity": "sha512-63ZOUnL4SIXj4L0NixR3L1lcjO38crAbgrTpl28t8jjrfuiOBL5Iygm+60qPs/KsZGzPNg6Smnc/oY16QTjF0g==",
+      "dev": true,
+      "requires": {
+        "spdx-correct": "3.0.0",
+        "spdx-expression-parse": "3.0.0"
+      }
+    },
+    "walkdir": {
+      "version": "0.0.11",
+      "resolved": "https://registry.npmjs.org/walkdir/-/walkdir-0.0.11.tgz",
+      "integrity": "sha1-oW0CXrkxvQO1LzCMrtD0D86+lTI=",
+      "dev": true
+    },
+    "which-module": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/which-module/-/which-module-1.0.0.tgz",
+      "integrity": "sha1-u6Y8qGGUiZT/MHc2CJ47lgJsKk8=",
+>>>>>>> .their
       "dev": true
     },
     "winreg": {
@@ -1010,8 +1681,13 @@
       "integrity": "sha1-2Pw9KE3QV5T+hJc8rs3Rz4JP3YU=",
       "dev": true,
       "requires": {
+<<<<<<< .our
         "string-width": "^1.0.1",
         "strip-ansi": "^3.0.1"
+=======
+        "string-width": "1.0.2",
+        "strip-ansi": "3.0.1"
+>>>>>>> .their
       },
       "dependencies": {
         "ansi-regex": {
@@ -1020,6 +1696,7 @@
           "integrity": "sha1-w7M6te42DYbg5ijwRorn7yfWVN8=",
           "dev": true
         },
+<<<<<<< .our
         "is-fullwidth-code-point": {
           "version": "1.0.0",
           "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-1.0.0.tgz",
@@ -1040,13 +1717,19 @@
             "strip-ansi": "^3.0.0"
           }
         },
+=======
+>>>>>>> .their
         "strip-ansi": {
           "version": "3.0.1",
           "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.1.tgz",
           "integrity": "sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8=",
           "dev": true,
           "requires": {
+<<<<<<< .our
             "ansi-regex": "^2.0.0"
+=======
+            "ansi-regex": "2.1.1"
+>>>>>>> .their
           }
         }
       }
@@ -1058,12 +1741,22 @@
       "dev": true
     },
     "ws": {
+<<<<<<< .our
       "version": "5.2.0",
       "resolved": "https://registry.npmjs.org/ws/-/ws-5.2.0.tgz",
       "integrity": "sha512-c18dMeW+PEQdDFzkhDsnBAlS4Z8KGStBQQUcQ5mf7Nf689jyGk0594L+i9RaQuf4gog6SvWLJorz2NfSaqxZ7w==",
       "dev": true,
       "requires": {
         "async-limiter": "~1.0.0"
+=======
+      "version": "1.1.5",
+      "resolved": "https://registry.npmjs.org/ws/-/ws-1.1.5.tgz",
+      "integrity": "sha512-o3KqipXNUdS7wpQzBHSe180lBGO60SoK0yVo3CYJgb2MkobuWuBX6dhkYP5ORCLd55y+SaflMOV5fqAB53ux4w==",
+      "dev": true,
+      "requires": {
+        "options": "0.0.6",
+        "ultron": "1.0.2"
+>>>>>>> .their
       }
     },
     "xml": {
@@ -1078,7 +1771,11 @@
       "integrity": "sha1-UnTmf1pkxfkpdM2FE54DMq3GuQw=",
       "dev": true,
       "requires": {
+<<<<<<< .our
         "sax": ">=0.1.1"
+=======
+        "sax": "1.2.4"
+>>>>>>> .their
       }
     },
     "y18n": {
@@ -1087,6 +1784,7 @@
       "integrity": "sha1-bRX7qITAhnnA136I53WegR4H+kE=",
       "dev": true
     },
+<<<<<<< .our
     "yallist": {
       "version": "2.1.2",
       "resolved": "https://registry.npmjs.org/yallist/-/yallist-2.1.2.tgz",
@@ -1120,6 +1818,36 @@
       "dev": true,
       "requires": {
         "camelcase": "^4.1.0"
+=======
+    "yargs": {
+      "version": "6.6.0",
+      "resolved": "https://registry.npmjs.org/yargs/-/yargs-6.6.0.tgz",
+      "integrity": "sha1-eC7CHvQDNF+DCoCMo9UTr1YGUgg=",
+      "dev": true,
+      "requires": {
+        "camelcase": "3.0.0",
+        "cliui": "3.2.0",
+        "decamelize": "1.2.0",
+        "get-caller-file": "1.0.2",
+        "os-locale": "1.4.0",
+        "read-pkg-up": "1.0.1",
+        "require-directory": "2.1.1",
+        "require-main-filename": "1.0.1",
+        "set-blocking": "2.0.0",
+        "string-width": "1.0.2",
+        "which-module": "1.0.0",
+        "y18n": "3.2.1",
+        "yargs-parser": "4.2.1"
+      }
+    },
+    "yargs-parser": {
+      "version": "4.2.1",
+      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-4.2.1.tgz",
+      "integrity": "sha1-KczqwNxPA8bIe0qfIX3RjJ90hxw=",
+      "dev": true,
+      "requires": {
+        "camelcase": "3.0.0"
+>>>>>>> .their
       }
     }
   }
changed in both
  base   100644 5ee932e8747e9371ee4ac98f1d3bcacb87bf1423 spec/webview-spec.js
  our    100644 db75a4e3754e24a5e6740be61be4f4098c58006e spec/webview-spec.js
  their  100644 d3204bf0830e1db7df4eecbee9725cb300a61800 spec/webview-spec.js
@@ -1256,6 +1256,235 @@
     expect(tabId).to.be.not.equal(w.webContents.id)
   })
 
+<<<<<<< .our
+=======
+  // TODO(alexeykuzmin): Some tests rashe a renderer process.
+  // Fix them and enable the tests.
+  xdescribe('guestinstance attribute', () => {
+    it('before loading there is no attribute', () => {
+      loadWebView(webview)  // Don't wait for loading to finish.
+      assert(!webview.hasAttribute('guestinstance'))
+    })
+
+    it('loading a page sets the guest view', async () => {
+      await loadWebView(webview, {
+        src: `file://${fixtures}/api/blank.html`
+      })
+
+      const instance = webview.getAttribute('guestinstance')
+      assert.equal(instance, parseInt(instance))
+
+      const guest = getGuestWebContents(parseInt(instance))
+      assert.equal(guest, webview.getWebContents())
+    })
+
+    it('deleting the attribute destroys the webview', async () => {
+      await loadWebView(webview, {
+        src: `file://${fixtures}/api/blank.html`
+      })
+
+      const instance = parseInt(webview.getAttribute('guestinstance'))
+      const waitForDestroy = waitForEvent(webview, 'destroyed')
+      webview.removeAttribute('guestinstance')
+
+      await waitForDestroy
+      expect(getGuestWebContents(instance)).to.equal(undefined)
+    })
+
+    it('setting the attribute on a new webview moves the contents', (done) => {
+      const loadListener = () => {
+        const webContents = webview.getWebContents()
+        const instance = webview.getAttribute('guestinstance')
+
+        const destroyListener = () => {
+          assert.equal(webContents, webview2.getWebContents())
+
+          // Make sure that events are hooked up to the right webview now
+          webview2.addEventListener('console-message', (e) => {
+            assert.equal(e.message, 'a')
+            document.body.removeChild(webview2)
+            done()
+          })
+
+          webview2.src = `file://${fixtures}/pages/a.html`
+        }
+        webview.addEventListener('destroyed', destroyListener, {once: true})
+
+        const webview2 = new WebView()
+        loadWebView(webview2, {
+          guestinstance: instance
+        })
+      }
+      webview.addEventListener('did-finish-load', loadListener, {once: true})
+      loadWebView(webview, {
+        src: `file://${fixtures}/api/blank.html`
+      })
+    })
+
+    it('setting the attribute to an invalid guestinstance does nothing', async () => {
+      await loadWebView(webview, {
+        src: `file://${fixtures}/api/blank.html`
+      })
+      webview.setAttribute('guestinstance', 55)
+
+      // Make sure that events are still hooked up to the webview
+      const waitForMessage = waitForEvent(webview, 'console-message')
+      webview.src = `file://${fixtures}/pages/a.html`
+      const {message} = await waitForMessage
+      assert.equal(message, 'a')
+    })
+
+    it('setting the attribute on an existing webview moves the contents', (done) => {
+      const load1Listener = () => {
+        const webContents = webview.getWebContents()
+        const instance = webview.getAttribute('guestinstance')
+        let destroyedInstance
+
+        const destroyListener = () => {
+          assert.equal(webContents, webview2.getWebContents())
+          assert.equal(null, getGuestWebContents(parseInt(destroyedInstance)))
+
+          // Make sure that events are hooked up to the right webview now
+          webview2.addEventListener('console-message', (e) => {
+            assert.equal(e.message, 'a')
+            document.body.removeChild(webview2)
+            done()
+          })
+
+          webview2.src = 'file://' + fixtures + '/pages/a.html'
+        }
+        webview.addEventListener('destroyed', destroyListener, {once: true})
+
+        const webview2 = new WebView()
+        const load2Listener = () => {
+          destroyedInstance = webview2.getAttribute('guestinstance')
+          assert.notEqual(instance, destroyedInstance)
+
+          webview2.setAttribute('guestinstance', instance)
+        }
+        webview2.addEventListener('did-finish-load', load2Listener, {once: true})
+        loadWebView(webview2, {
+          src: `file://${fixtures}/api/blank.html`
+        })
+      }
+
+      webview.addEventListener('did-finish-load', load1Listener, {once: true})
+      loadWebView(webview, {
+        src: `file://${fixtures}/api/blank.html`
+      })
+    })
+
+    it('moving a guest back to its original webview should work', (done) => {
+      loadWebView(webview, {
+        src: `file://${fixtures}/api/blank.html`
+      }).then(() => {
+        const webContents = webview.getWebContents()
+        const instance = webview.getAttribute('guestinstance')
+
+        const destroy1Listener = () => {
+          assert.equal(webContents, webview2.getWebContents())
+          assert.equal(null, webview.getWebContents())
+
+          const destroy2Listener = () => {
+            assert.equal(webContents, webview.getWebContents())
+            assert.equal(null, webview2.getWebContents())
+
+            // Make sure that events are hooked up to the right webview now
+            webview.addEventListener('console-message', (e) => {
+              document.body.removeChild(webview2)
+              assert.equal(e.message, 'a')
+              done()
+            })
+
+            webview.src = `file://${fixtures}/pages/a.html`
+          }
+          webview2.addEventListener('destroyed', destroy2Listener, {once: true})
+          webview.setAttribute('guestinstance', instance)
+        }
+        webview.addEventListener('destroyed', destroy1Listener, {once: true})
+
+        const webview2 = new WebView()
+        loadWebView(webview2, {guestinstance: instance})
+      })
+    })
+
+    // FIXME(alexeykuzmin): This test only passes if the previous test ^
+    // is run alongside.
+    it('setting the attribute on a webview in a different window moves the contents', (done) => {
+      loadWebView(webview, {
+        src: `file://${fixtures}/api/blank.html`
+      }).then(() => {
+        const instance = webview.getAttribute('guestinstance')
+
+        w = new BrowserWindow({ show: false })
+        w.webContents.once('did-finish-load', () => {
+          ipcMain.once('pong', () => {
+            assert(!webview.hasAttribute('guestinstance'))
+            done()
+          })
+
+          w.webContents.send('guestinstance', instance)
+        })
+        w.loadURL(`file://${fixtures}/pages/webview-move-to-window.html`)
+      })
+    })
+
+    it('does not delete the guestinstance attribute when moving the webview to another parent node', (done) => {
+      webview.addEventListener('dom-ready', function domReadyListener () {
+        webview.addEventListener('did-attach', () => {
+          assert(webview.guestinstance != null)
+          assert(webview.getWebContents() != null)
+          done()
+        })
+
+        document.body.replaceChild(webview, div)
+      })
+      webview.src = `file://${fixtures}/pages/a.html`
+
+      const div = document.createElement('div')
+      div.appendChild(webview)
+      document.body.appendChild(div)
+    })
+
+    it('does not destroy the webContents when hiding/showing the webview (regression)', (done) => {
+      webview.addEventListener('dom-ready', function () {
+        const instance = webview.getAttribute('guestinstance')
+        assert(instance != null)
+
+        // Wait for event directly since attach happens asynchronously over IPC
+        ipcMain.once('ELECTRON_GUEST_VIEW_MANAGER_ATTACH_GUEST', () => {
+          assert(webview.getWebContents() != null)
+          assert.equal(instance, webview.getAttribute('guestinstance'))
+          done()
+        })
+
+        webview.style.display = 'none'
+        webview.offsetHeight // eslint-disable-line
+        webview.style.display = 'block'
+      }, {once: true})
+      loadWebView(webview, {src: `file://${fixtures}/pages/a.html`})
+    })
+
+    it('does not reload the webContents when hiding/showing the webview (regression)', (done) => {
+      webview.addEventListener('dom-ready', function () {
+        webview.addEventListener('did-start-loading', () => {
+          done(new Error('webview started loading unexpectedly'))
+        })
+
+        // Wait for event directly since attach happens asynchronously over IPC
+        webview.addEventListener('did-attach', () => {
+          done()
+        })
+
+        webview.style.display = 'none'
+        webview.offsetHeight  // eslint-disable-line
+        webview.style.display = 'block'
+      }, {once: true})
+      loadWebView(webview, {src: `file://${fixtures}/pages/a.html`})
+    })
+  })
+
+>>>>>>> .their
   describe('DOM events', () => {
     let div
 
@@ -1272,9 +1501,33 @@
       if (div != null) div.remove()
     })
 
+<<<<<<< .our
     it('emits resize events', async () => {
       const firstResizeSignal = waitForEvent(webview, 'resize')
       const domReadySignal = waitForEvent(webview, 'dom-ready')
+=======
+    // TODO(alexeykuzmin): [Ch66] Enable the test.
+    xit('emits resize events', (done) => {
+      webview.addEventListener('dom-ready', () => {
+        div.style.width = '1234px'
+        div.style.height = '789px'
+      })
+
+      webview.addEventListener('resize', function onResize (event) {
+        webview.removeEventListener('resize', onResize)
+        assert.equal(event.newWidth, 100)
+        assert.equal(event.newHeight, 10)
+        assert.equal(event.target, webview)
+        webview.addEventListener('resize', function onResizeAgain (event) {
+          // This will be triggered after setting the new div width and height.
+          webview.removeEventListener('resize', onResizeAgain)
+          assert.equal(event.newWidth, 1234)
+          assert.equal(event.newHeight, 789)
+          assert.equal(event.target, webview)
+          done()
+        })
+      })
+>>>>>>> .their
 
       webview.src = `file://${fixtures}/pages/a.html`
       div.appendChild(webview)
@@ -1287,12 +1540,89 @@
 
       await domReadySignal
 
+<<<<<<< .our
       const secondResizeSignal = waitForEvent(webview, 'resize')
 
       const newWidth = 1234
       const newHeight = 789
       div.style.width = `${newWidth}px`
       div.style.height = `${newHeight}px`
+=======
+    // TODO(alexeykuzmin): [Ch66] Enable the test.
+    xit('does not resize guest when attribute is present', async () => {
+      const INITIAL_SIZE = 200
+      const w = await openTheWindow(
+          {show: false, width: INITIAL_SIZE, height: INITIAL_SIZE})
+      w.loadURL(`file://${fixtures}/pages/webview-no-guest-resize.html`)
+      await waitForOnce(ipcMain, 'webview-loaded')
+
+      const noGuestResizePromise = Promise.race([
+        waitForOnce(ipcMain, 'webview-guest-resize'),
+        new Promise(resolve => setTimeout(() => resolve(), 500))
+      ]).then((eventData = null) => {
+        if (eventData !== null) {
+          // Means we got the 'webview-guest-resize' event before the time out.
+          return Promise.reject(new Error('Unexpected guest resize message'))
+        }
+      })
+
+      const CONTENT_SIZE = 300
+      assert(CONTENT_SIZE !== INITIAL_SIZE)
+      w.setContentSize(CONTENT_SIZE, CONTENT_SIZE)
+
+      return noGuestResizePromise
+    })
+
+    // TODO(alexeykuzmin): [Ch66] Enable the test.
+    xit('dispatches element resize event even when attribute is present', async () => {
+      const INITIAL_SIZE = 200
+      const w = await openTheWindow(
+          {show: false, width: INITIAL_SIZE, height: INITIAL_SIZE})
+      w.loadURL(`file://${fixtures}/pages/webview-no-guest-resize.html`)
+      await waitForOnce(ipcMain, 'webview-loaded')
+
+      const elementResizePromise = waitForOnce(ipcMain, 'webview-element-resize')
+          .then(([, width, height]) => {
+            expect(width).to.equal(CONTENT_SIZE)
+            expect(height).to.equal(CONTENT_SIZE)
+          })
+
+      const CONTENT_SIZE = 300
+      assert(CONTENT_SIZE !== INITIAL_SIZE)
+      w.setContentSize(CONTENT_SIZE, CONTENT_SIZE)
+
+      return elementResizePromise
+    })
+
+    // TODO(alexeykuzmin): [Ch66] Enable the test.
+    xit('can be manually resized with setSize even when attribute is present', async () => {
+      const INITIAL_SIZE = 200
+      const w = await openTheWindow(
+          {show: false, width: INITIAL_SIZE, height: INITIAL_SIZE})
+      w.loadURL(`file://${fixtures}/pages/webview-no-guest-resize.html`)
+      await waitForOnce(ipcMain, 'webview-loaded')
+
+      const GUEST_WIDTH = 10
+      const GUEST_HEIGHT = 20
+
+      const guestResizePromise = waitForOnce(ipcMain, 'webview-guest-resize')
+          .then(([, width, height]) => {
+            expect(width).to.be.equal(GUEST_WIDTH)
+            expect(height).to.be.equal(GUEST_HEIGHT)
+          })
+
+      const wc = webContents.getAllWebContents().find((wc) => {
+        return wc.hostWebContents &&
+            wc.hostWebContents.id === w.webContents.id
+      })
+      assert(wc)
+      wc.setSize({
+        normal: {
+          width: GUEST_WIDTH,
+          height: GUEST_HEIGHT
+        }
+      })
+>>>>>>> .their
 
       const secondResizeEvent = await secondResizeSignal
       expect(secondResizeEvent.target).to.equal(webview)
changed in both
  base   100644 f4cc9df68d54b62358834054f4a4cf129cce59ba toolchain.gypi
  our    100644 697add78e42191741cee1b015cdcf4f801c570e7 toolchain.gypi
  their  100644 b18a00afde8a62fbe1900fdccd3d2923c4820e58 toolchain.gypi
@@ -2,6 +2,7 @@
   'variables': {
     # Clang stuff.
     'make_clang_dir%': 'vendor/llvm-build/Release+Asserts',
+    
     # Set this to true when building with Clang.
     'clang%': 1,
 
@@ -23,6 +24,9 @@
 
       # Abosulte path to source root.
       'source_root%': '<!(node <(DEPTH)/tools/atom_source_root.js)',
+
+      # Set this to 1 when you want to use clang-cl on Windows.
+      'clang_cl_windows%': 0,
     },
 
     # Copy conditionally-set variables out one scope.
@@ -30,6 +34,7 @@
     'arm_version%': '<(arm_version)',
     'arm_neon%': '<(arm_neon)',
     'source_root%': '<(source_root)',
+    'clang_cl_windows%': '<(clang_cl_windows)',
 
     # Variables to control Link-Time Optimization (LTO).
     'use_lto%': 0,
@@ -101,6 +106,16 @@
         'arm_float_abi%': 'hard',
         'arm_thumb%': 1,
       }],  # arm_version==7
+
+      ['clang_cl_windows==1', {
+        # Clang-cl binaries useful on Windows
+        'clang_cc_binary%' : 'clang-cl',
+        'clang_cxx_binary%' : 'clang-cl'
+      },{
+        # Default clang binaries
+        'clang_cc_binary%' : 'clang',
+        'clang_cxx_binary%' : 'clang++',
+      }]
     ],
   },
   'conditions': [
@@ -116,8 +131,8 @@
     # Setup building with clang.
     ['clang==1', {
       'make_global_settings': [
-        ['CC', '<(make_clang_dir)/bin/clang'],
-        ['CXX', '<(make_clang_dir)/bin/clang++'],
+        ['CC', '<(make_clang_dir)/bin/<(clang_cc_binary)'],
+        ['CXX', '<(make_clang_dir)/bin/<(clang_cxx_binary)'],
         ['CC.host', '$(CC)'],
         ['CXX.host', '$(CXX)'],
       ],
changed in both
  base   160000 03bdc78da46b87ad6acf74b2fe5b7c09e352ec24 vendor/libchromiumcontent
  our    160000 c85470a1c379b1c4bedb372c146521bc4be9b75d vendor/libchromiumcontent
  their  160000 b9a68acb7e1f93193540cdf94f73ad6ba22c7900 vendor/libchromiumcontent
removed in local
  base   160000 ddec87224c7619ebd751b78e3214bf70a7a04a99 vendor/native_mate
  their  160000 875706f66008e03a0c7a699de16d7e2bde0efb90 vendor/native_mate
changed in both
  base   160000 538a5023af0a92ba19de2420a0eada6ad4cd18f6 vendor/node
  our    160000 ece0a06ac8147efb5b5af431c21f312f1884616e vendor/node
  their  160000 ce2efb3516b064df284c258e9a30825eb6f924b1 vendor/node
