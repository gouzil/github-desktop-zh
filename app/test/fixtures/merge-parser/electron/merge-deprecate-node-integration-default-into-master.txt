changed in both
  base   100644 548ea394436b4d8184ff402b772c94c8ecf9a16d atom/browser/api/atom_api_web_contents.cc
  our    100644 20a1ac2e672f08ffea528b6e094ba530ff8083d1 atom/browser/api/atom_api_web_contents.cc
  their  100644 7c265be94d853d25368ca5723a6eb97adc6d4448 atom/browser/api/atom_api_web_contents.cc
@@ -312,9 +312,9 @@
 
 WebContents::WebContents(v8::Isolate* isolate,
                          content::WebContents* web_contents,
-                         Type type)
+                         Type type,
+                         const mate::Dictionary& options)
     : content::WebContentsObserver(web_contents), type_(type) {
-  const mate::Dictionary options = mate::Dictionary::CreateEmpty(isolate);
   if (type == REMOTE) {
     web_contents->SetUserAgentOverride(GetBrowserContext()->GetUserAgent());
     Init(isolate);
@@ -533,7 +533,13 @@
                                      content::WebContents* new_contents) {
   v8::Locker locker(isolate());
   v8::HandleScope handle_scope(isolate());
-  auto api_web_contents = CreateFrom(isolate(), new_contents, BROWSER_WINDOW);
+  mate::Dictionary options = mate::Dictionary::CreateEmpty(isolate());
+  // Merge in parent webcontents options BEFORE we constuct an API web contents
+  // and therefore before we construct a WebPreferences object.  This solves
+  // both a security and deprecation race condition
+  mate::ConvertFromV8(isolate(), GetLastWebPreferences(isolate()), &options);
+  auto api_web_contents = CreateFrom(isolate(), new_contents, BROWSER_WINDOW,
+                                     options);
   Emit("-web-contents-created", api_web_contents, target_url, frame_name);
 }
 
@@ -2081,23 +2087,32 @@
 mate::Handle<WebContents> WebContents::CreateFrom(
     v8::Isolate* isolate,
     content::WebContents* web_contents) {
-  // We have an existing WebContents object in JS.
-  auto* existing = TrackableObject::FromWrappedClass(isolate, web_contents);
-  if (existing)
-    return mate::CreateHandle(isolate, static_cast<WebContents*>(existing));
-
-  // Otherwise create a new WebContents wrapper object.
-  return mate::CreateHandle(isolate,
-                            new WebContents(isolate, web_contents, REMOTE));
+  return CreateFrom(isolate, web_contents, REMOTE);
 }
 
 mate::Handle<WebContents> WebContents::CreateFrom(
     v8::Isolate* isolate,
     content::WebContents* web_contents,
     Type type) {
+  const mate::Dictionary options = mate::Dictionary::CreateEmpty(isolate);
+
+  return CreateFrom(isolate, web_contents, type, options);
+}
+
+mate::Handle<WebContents> WebContents::CreateFrom(
+    v8::Isolate* isolate,
+    content::WebContents* web_contents,
+    Type type,
+    const mate::Dictionary& options) {
+  // We have an existing WebContents object in JS.
+  auto* existing = TrackableObject::FromWrappedClass(isolate, web_contents);
+  if (existing)
+    return mate::CreateHandle(isolate, static_cast<WebContents*>(existing));
+
   // Otherwise create a new WebContents wrapper object.
   return mate::CreateHandle(isolate,
-                            new WebContents(isolate, web_contents, type));
+                            new WebContents(isolate, web_contents, type,
+                                            options));
 }
 
 // static
changed in both
  base   100644 2155656ccbdcc34731bcb01b99a89b7c321a96da atom/browser/api/atom_api_web_contents.h
  our    100644 7939f8268aa8c3371623e0c15f3b6001d7f1efa4 atom/browser/api/atom_api_web_contents.h
  their  100644 d7332ff87e83111b358220a06678c4ef89abf242 atom/browser/api/atom_api_web_contents.h
@@ -89,6 +89,11 @@
       v8::Isolate* isolate,
       content::WebContents* web_contents,
       Type type);
+  static mate::Handle<WebContents> CreateFrom(
+      v8::Isolate* isolate,
+      content::WebContents* web_contents,
+      Type type,
+      const mate::Dictionary& options);
 
   // Create a new WebContents.
   static mate::Handle<WebContents> Create(v8::Isolate* isolate,
@@ -263,7 +268,8 @@
  protected:
   WebContents(v8::Isolate* isolate,
               content::WebContents* web_contents,
-              Type type);
+              Type type,
+              const mate::Dictionary& options);
   WebContents(v8::Isolate* isolate, const mate::Dictionary& options);
   ~WebContents() override;
 
changed in both
  base   100644 1046a55b05791d48316afee7052e8fa2e23d131c atom/browser/web_contents_preferences.cc
  our    100644 c21c93383155091a7481cdd4e741cefad90a4a55 atom/browser/web_contents_preferences.cc
  their  100644 63e2257de01f8f5e8cb2c58c7089689693270f72 atom/browser/web_contents_preferences.cc
@@ -8,6 +8,7 @@
 #include <string>
 #include <vector>
 
+#include "atom/browser/api/atom_api_web_contents.h"
 #include "atom/browser/native_window.h"
 #include "atom/browser/web_view_manager.h"
 #include "atom/common/native_mate_converters/value_converter.h"
@@ -99,7 +100,13 @@
   // Set WebPreferences defaults onto the JS object
   SetDefaultBoolIfUndefined(options::kPlugins, false);
   SetDefaultBoolIfUndefined(options::kExperimentalFeatures, false);
+<<<<<<< .our
   bool node = SetDefaultBoolIfUndefined(options::kNodeIntegration, true);
+=======
+  SetDefaultBoolIfUndefined(options::kExperimentalCanvasFeatures, false);
+  bool node = SetDefaultBoolIfUndefined(options::kNodeIntegration, true,
+                                        Status::Deprecated);
+>>>>>>> .their
   SetDefaultBoolIfUndefined(options::kNodeIntegrationInWorker, false);
   SetDefaultBoolIfUndefined(options::kWebviewTag, node);
   SetDefaultBoolIfUndefined(options::kSandbox, false);
@@ -134,6 +141,7 @@
 
 bool WebContentsPreferences::SetDefaultBoolIfUndefined(
     const base::StringPiece& key,
+<<<<<<< .our
     bool val) {
   auto* current_value =
       preference_.FindKeyOfType(key, base::Value::Type::BOOLEAN);
@@ -141,6 +149,20 @@
     return current_value->GetBool();
   } else {
     preference_.SetKey(key, base::Value(val));
+=======
+    bool val,
+    Status status) {
+  bool existing;
+  if (!dict_.GetBoolean(key, &existing)) {
+    dict_.SetBoolean(key, val);
+    if (status == Status::Deprecated && web_contents_) {
+      auto internal_contents = atom::api::WebContents::CreateFrom(
+          v8::Isolate::GetCurrent(), web_contents_);
+      internal_contents->Emit("-deprecated-default",
+                              std::string("webPreferences.") + key.data(), val,
+                              !val);
+    }
+>>>>>>> .their
     return val;
   }
 }
changed in both
  base   100644 f08a614bf8c1a4df9a0df6acf28c882f79beabf0 atom/browser/web_contents_preferences.h
  our    100644 d835347afcd259f473f95271a2c19e42afcc6f2b atom/browser/web_contents_preferences.h
  their  100644 fd51f0a0b82f98fdd57b9f51cc159cb41cbba4b2 atom/browser/web_contents_preferences.h
@@ -29,6 +29,11 @@
 class WebContentsPreferences
     : public content::WebContentsUserData<WebContentsPreferences> {
  public:
+  enum class Status {
+    Deprecated,
+    Stable
+  };
+
   // Get self from WebContents.
   static WebContentsPreferences* From(content::WebContents* web_contents);
 
@@ -70,7 +75,10 @@
   static content::WebContents* GetWebContentsFromProcessID(int process_id);
 
   // Set preference value to given bool if user did not provide value
-  bool SetDefaultBoolIfUndefined(const base::StringPiece& key, bool val);
+  bool SetDefaultBoolIfUndefined(
+      const base::StringPiece& key,
+      bool val,
+      Status status = Status::Stable);
 
   static std::vector<WebContentsPreferences*> instances_;
 
changed in both
  base   100644 e6ba9eea2cb5938fe71ab7c18a47921d3959061e default_app/default_app.js
  our    100644 1b9da74e503ab4afa8d2c530cd45332f0868a463 default_app/default_app.js
  their  100644 c4a18daf32ecad93c3f6fc62ed23fd6a5361a0f7 default_app/default_app.js
@@ -16,6 +16,7 @@
       autoHideMenuBar: true,
       backgroundColor: '#FFFFFF',
       webPreferences: {
+        nodeIntegration: true,
         nodeIntegrationInWorker: true
       },
       useContentSize: true,
changed in both
  base   100644 f5f53f44a312935eaf4db5112923b947dab0876d lib/browser/api/web-contents.js
  our    100644 8f5bd037b14d05db7396bb8b5de1a29fdef167ae lib/browser/api/web-contents.js
  their  100644 001dbc4e7e32183bb0c93e3fa4308df0e2bf541e lib/browser/api/web-contents.js
@@ -293,6 +293,10 @@
     ipcMain.emit(channel, event, ...args)
   })
 
+  this.on('-deprecated-default', function (event, key, oldDefault, newDefault) {
+    deprecate.warnDefault(key, oldDefault, newDefault)
+  })
+
   // Handle context menu action request from pepper plugin.
   this.on('pepper-context-menu', function (event, params, callback) {
     // Access Menu via electron.Menu to prevent circular require.
merged
  result 100644 6c34d5219b1275de2f2ae823521de733096b4269 lib/browser/chrome-extension.js
  our    100644 4132aedadd759f56db7eceabd6327d1b29aa09eb lib/browser/chrome-extension.js
@@ -86,7 +86,8 @@
   const contents = webContents.create({
     partition: 'persist:__chrome_extension',
     isBackgroundPage: true,
-    commandLineSwitches: ['--background-page']
+    commandLineSwitches: ['--background-page'],
+    nodeIntegration: true
   })
   backgroundPages[manifest.extensionId] = { html: html, webContents: contents, name: name }
   contents.loadURL(url.format({
changed in both
  base   100644 da2663e6060a71f400c26ed59f1d6c27a59f1e9f lib/browser/guest-view-manager.js
  our    100644 1e4029e39a981c85fb6ff18c5ccd52f81b3c56f2 lib/browser/guest-view-manager.js
  their  100644 77ad77f5fc1113f8e3be0c5f4f7a247a7655d36b lib/browser/guest-view-manager.js
@@ -61,7 +61,8 @@
   const guest = webContents.create({
     isGuest: true,
     partition: params.partition,
-    embedder: embedder
+    embedder: embedder,
+    nodeIntegration: true
   })
   guestInstances[guestInstanceId] = {
     guest: guest,
changed in both
  base   100644 8e2aa3bb988208ec4f266d3169020daca4068de3 lib/browser/guest-window-manager.js
  our    100644 7253c1942b0956ae6b9b0c80a23470fc26669b8a lib/browser/guest-window-manager.js
  their  100644 7985dec4b9ef1ddfc7b88ea4885d7f7136060369 lib/browser/guest-window-manager.js
merged
  result 100644 e5e851365a10b0a43194d5d943307659a84eb081 lib/common/api/deprecate.js
  our    100644 4a42b2a693acea99ee2581c31a0f15fa9873f1b9 lib/common/api/deprecate.js
@@ -31,6 +31,12 @@
   return deprecate.log(`'${oldName}' is deprecated. Use '${newName}' instead.`)
 }
 
+deprecate.warnDefault = (propName, oldDefault, newDefault) => {
+  return deprecate.log(`The default value of '${propName}' is changing from \
+'${oldDefault}' to '${newDefault}' in a future release. If you want to keep \
+the current value, please explicitly declare the property.`)
+}
+
 let deprecationHandler = null
 
 // Print deprecation message.
changed in both
  base   100644 37c5520a1d27d6988eb30267b7a8ca6ae83d2b20 spec/api-app-spec.js
  our    100644 d224eda2989332c18d655cef05a8bacc2eb6d4b8 spec/api-app-spec.js
  their  100644 a1dcb7097576e5b41ac002d8166073dc93ad0bac spec/api-app-spec.js
@@ -31,7 +31,8 @@
       window = new BrowserWindow({
         show: false,
         width: 400,
-        height: 400
+        height: 400,
+        webPreferences: { nodeIntegration: true }
       })
     })
 
@@ -311,7 +312,10 @@
         password: 'electron'
       }
 
-      w = new BrowserWindow({ show: false })
+      w = new BrowserWindow({
+        show: false,
+        webPreferences: { nodeIntegration: true }
+      })
 
       w.webContents.on('did-finish-load', () => {
         expect(w.webContents.getTitle()).to.equal('authorized')
@@ -350,7 +354,10 @@
         expect(w.id).to.equal(window.id)
         done()
       })
-      w = new BrowserWindow({ show: false })
+      w = new BrowserWindow({
+        show: false,
+        webPreferences: { nodeIntegration: true }
+      })
       w.emit('focus')
     })
 
@@ -359,7 +366,10 @@
         expect(w.id).to.equal(window.id)
         done()
       })
-      w = new BrowserWindow({ show: false })
+      w = new BrowserWindow({
+        show: false,
+        webPreferences: { nodeIntegration: true }
+      })
       w.emit('blur')
     })
 
@@ -370,7 +380,10 @@
           done()
         })
       })
-      w = new BrowserWindow({ show: false })
+      w = new BrowserWindow({
+        show: false,
+        webPreferences: { nodeIntegration: true }
+      })
     })
 
     it('should emit web-contents-created event when a webContents is created', (done) => {
@@ -380,7 +393,10 @@
           done()
         })
       })
-      w = new BrowserWindow({ show: false })
+      w = new BrowserWindow({
+        show: false,
+        webPreferences: { nodeIntegration: true }
+      })
     })
   })
 
@@ -548,6 +564,7 @@
       w = new BrowserWindow({
         show: false,
         webPreferences: {
+          nodeIntegration: true,
           partition: 'empty-certificate'
         }
       })
merged
  result 100644 d0b075376181ca9937dbc8a0bcfeb5bac9edfc8b spec/api-browser-view-spec.js
  our    100644 968912a4abf3d759a1363e2420d2c21b7923dbd6 spec/api-browser-view-spec.js
@@ -10,6 +10,13 @@
 const {expect} = chai
 chai.use(dirtyChai)
 
+const createBrowserView = () =>
+  new BrowserView({
+    webPreferences: {
+      nodeIntegration: true
+    }
+  })
+
 describe('BrowserView module', () => {
   let w = null
   let view = null
@@ -20,7 +27,8 @@
       width: 400,
       height: 400,
       webPreferences: {
-        backgroundThrottling: false
+        backgroundThrottling: false,
+        nodeIntegration: true
       }
     })
   })
@@ -36,14 +44,14 @@
 
   describe('BrowserView.destroy()', () => {
     it('does not throw', () => {
-      view = new BrowserView()
+      view = createBrowserView()
       view.destroy()
     })
   })
 
   describe('BrowserView.isDestroyed()', () => {
     it('returns correct value', () => {
-      view = new BrowserView()
+      view = createBrowserView()
       expect(view.isDestroyed()).to.be.false()
       view.destroy()
       expect(view.isDestroyed()).to.be.true()
@@ -52,12 +60,12 @@
 
   describe('BrowserView.setBackgroundColor()', () => {
     it('does not throw for valid args', () => {
-      view = new BrowserView()
+      view = createBrowserView()
       view.setBackgroundColor('#000')
     })
 
     it('throws for invalid args', () => {
-      view = new BrowserView()
+      view = createBrowserView()
       expect(() => {
         view.setBackgroundColor(null)
       }).to.throw(/conversion failure/)
@@ -66,13 +74,13 @@
 
   describe('BrowserView.setAutoResize()', () => {
     it('does not throw for valid args', () => {
-      view = new BrowserView()
+      view = createBrowserView()
       view.setAutoResize({})
       view.setAutoResize({ width: true, height: false })
     })
 
     it('throws for invalid args', () => {
-      view = new BrowserView()
+      view = createBrowserView()
       expect(() => {
         view.setAutoResize(null)
       }).to.throw(/conversion failure/)
@@ -81,12 +89,12 @@
 
   describe('BrowserView.setBounds()', () => {
     it('does not throw for valid args', () => {
-      view = new BrowserView()
+      view = createBrowserView()
       view.setBounds({ x: 0, y: 0, width: 1, height: 1 })
     })
 
     it('throws for invalid args', () => {
-      view = new BrowserView()
+      view = createBrowserView()
       expect(() => {
         view.setBounds(null)
       }).to.throw(/conversion failure/)
@@ -98,12 +106,12 @@
 
   describe('BrowserWindow.setBrowserView()', () => {
     it('does not throw for valid args', () => {
-      view = new BrowserView()
+      view = createBrowserView()
       w.setBrowserView(view)
     })
 
     it('does not throw if called multiple times with same view', () => {
-      view = new BrowserView()
+      view = createBrowserView()
       w.setBrowserView(view)
       w.setBrowserView(view)
       w.setBrowserView(view)
@@ -112,7 +120,7 @@
 
   describe('BrowserWindow.getBrowserView()', () => {
     it('returns the set view', () => {
-      view = new BrowserView()
+      view = createBrowserView()
       w.setBrowserView(view)
       expect(view.id).to.not.be.null()
 
@@ -128,7 +136,7 @@
 
   describe('BrowserView.webContents.getOwnerBrowserWindow()', () => {
     it('points to owning window', () => {
-      view = new BrowserView()
+      view = createBrowserView()
       expect(view.webContents.getOwnerBrowserWindow()).to.be.null()
 
       w.setBrowserView(view)
@@ -141,7 +149,7 @@
 
   describe('BrowserView.fromId()', () => {
     it('returns the view with given id', () => {
-      view = new BrowserView()
+      view = createBrowserView()
       w.setBrowserView(view)
       expect(view.id).to.not.be.null()
 
@@ -152,7 +160,7 @@
 
   describe('BrowserView.fromWebContents()', () => {
     it('returns the view with given id', () => {
-      view = new BrowserView()
+      view = createBrowserView()
       w.setBrowserView(view)
       expect(view.id).to.not.be.null()
 
@@ -163,7 +171,7 @@
 
   describe('BrowserView.getAllViews()', () => {
     it('returns all views', () => {
-      view = new BrowserView()
+      view = createBrowserView()
       w.setBrowserView(view)
       expect(view.id).to.not.be.null()
 
merged
  result 100644 9076697016660ed26e65c95f407052abd1417702 spec/api-browser-window-affinity-spec.js
  our    100644 f90e784bed5115013032d52be3eaae0ae14c9e8b spec/api-browser-window-affinity-spec.js
@@ -19,7 +19,9 @@
         show: false,
         width: 400,
         height: 400,
-        webPreferences: webPrefs || {}
+        webPreferences: Object.assign({
+          nodeIntegration: true
+        }, webPrefs || {})
       })
       w.webContents.on('did-finish-load', () => { resolve(w) })
       w.loadURL(`file://${path.join(fixtures, 'api', 'blank.html')}`)
changed in both
  base   100644 6ab2b56938b014d02178be2bb2c0467193e32365 spec/api-browser-window-spec.js
  our    100644 f4cba12ec19d224bc46fca898db42a99baf4972e spec/api-browser-window-spec.js
  their  100644 ffffbf41fc8f21b378e387bace245ac92637bd55 spec/api-browser-window-spec.js
@@ -18,7 +18,18 @@
 const isCI = remote.getGlobal('isCi')
 const nativeModulesEnabled = remote.getGlobal('nativeModulesEnabled')
 
+<<<<<<< .our
 chai.use(dirtyChai)
+=======
+const createNodeWindow = (opts = {}) =>
+  new BrowserWindow({
+    ...opts,
+    webPreferences: {
+      nodeIntegration: true,
+      ...(opts.webPreferences || {})
+    }
+  })
+>>>>>>> .their
 
 describe('BrowserWindow module', () => {
   const fixtures = path.resolve(__dirname, 'fixtures')
@@ -99,13 +110,32 @@
     server = null
   })
 
+<<<<<<< .our
   beforeEach(openTheWindow)
+=======
+  beforeEach(() => {
+    w = createNodeWindow({
+      show: false,
+      width: 400,
+      height: 400,
+      webPreferences: {
+        backgroundThrottling: false
+      }
+    })
+  })
+>>>>>>> .their
 
   afterEach(closeTheWindow)
 
   describe('BrowserWindow constructor', () => {
     it('allows passing void 0 as the webContents', () => {
+<<<<<<< .our
       openTheWindow({
+=======
+      w.close()
+      w = null
+      w = createNodeWindow({
+>>>>>>> .their
         webContents: void 0
       })
     })
@@ -179,7 +209,7 @@
       function * genNavigationEvent () {
         let eventOptions = null
         while ((eventOptions = events.shift()) && events.length) {
-          let w = new BrowserWindow({show: false})
+          let w = createNodeWindow({show: false})
           eventOptions.id = w.id
           eventOptions.responseEvent = responseEvent
           ipcRenderer.send('test-webcontents-navigation-observer', eventOptions)
@@ -275,6 +305,14 @@
     })
 
     describe('POST navigations', () => {
+      beforeEach(() => {
+        // FIXME: App::CanCreateWindow does not inherit webPreferences
+        //        so it uses deprecated defaults
+        remote.getGlobal('process').throwDeprecation = false
+      })
+      afterEach(() => {
+        remote.getGlobal('process').throwDeprecation = true
+      })
       afterEach(() => { w.webContents.session.webRequest.onBeforeSendHeaders(null) })
 
       it('supports specifying POST data', (done) => {
@@ -435,8 +473,16 @@
       expect(image.isEmpty()).to.be.true()
     })
 
+<<<<<<< .our
     it('preserves transparency', async () => {
       const w = await openTheWindow({
+=======
+    it('preserves transparency', (done) => {
+      w.close()
+      const width = 400
+      const height = 400
+      w = createNodeWindow({
+>>>>>>> .their
         show: false,
         width: 400,
         height: 400,
@@ -518,7 +564,7 @@
     })
     it('works for a frameless window', () => {
       w.destroy()
-      w = new BrowserWindow({
+      w = createNodeWindow({
         show: false,
         frame: false,
         width: 400,
@@ -543,7 +589,7 @@
     })
     it('works for a frameless window', (done) => {
       w.destroy()
-      w = new BrowserWindow({
+      w = createNodeWindow({
         show: false,
         frame: false,
         width: 300,
@@ -745,7 +791,7 @@
     })
 
     it('does not throw', (done) => {
-      const tabbedWindow = new BrowserWindow({})
+      const tabbedWindow = createNodeWindow({})
       assert.doesNotThrow(() => {
         w.addTabbedWindow(tabbedWindow)
       })
@@ -846,7 +892,11 @@
   describe('BrowserWindow.fromWebContents(webContents)', () => {
     let contents = null
 
-    beforeEach(() => { contents = webContents.create({}) })
+    beforeEach(() => {
+      contents = webContents.create({
+        nodeIntegration: true
+      })
+    })
 
     afterEach(() => { contents.destroy() })
 
@@ -859,7 +909,11 @@
   describe('BrowserWindow.fromDevToolsWebContents(webContents)', () => {
     let contents = null
 
-    beforeEach(() => { contents = webContents.create({}) })
+    beforeEach(() => {
+      contents = webContents.create({
+        nodeIntegration: true
+      })
+    })
 
     afterEach(() => { contents.destroy() })
 
@@ -886,7 +940,11 @@
     let bv = null
 
     beforeEach(() => {
-      bv = new BrowserView()
+      bv = new BrowserView({
+        webPreferences: {
+          nodeIntegration: true
+        }
+      })
       w.setBrowserView(bv)
     })
 
@@ -908,7 +966,7 @@
   describe('BrowserWindow.setOpacity(opacity)', () => {
     it('make window with initial opacity', () => {
       w.destroy()
-      w = new BrowserWindow({
+      w = createNodeWindow({
         show: false,
         width: 400,
         height: 400,
@@ -942,7 +1000,7 @@
   describe('"useContentSize" option', () => {
     it('make window created with content size when used', () => {
       w.destroy()
-      w = new BrowserWindow({
+      w = createNodeWindow({
         show: false,
         width: 400,
         height: 400,
@@ -959,7 +1017,7 @@
     })
     it('works for a frameless window', () => {
       w.destroy()
-      w = new BrowserWindow({
+      w = createNodeWindow({
         show: false,
         frame: false,
         width: 400,
@@ -988,7 +1046,7 @@
 
     it('creates browser window with hidden title bar', () => {
       w.destroy()
-      w = new BrowserWindow({
+      w = createNodeWindow({
         show: false,
         width: 400,
         height: 400,
@@ -999,7 +1057,7 @@
     })
     it('creates browser window with hidden inset title bar', () => {
       w.destroy()
-      w = new BrowserWindow({
+      w = createNodeWindow({
         show: false,
         width: 400,
         height: 400,
@@ -1019,7 +1077,7 @@
 
     beforeEach(() => {
       w.destroy()
-      w = new BrowserWindow({
+      w = createNodeWindow({
         show: true,
         width: 400,
         height: 400,
@@ -1051,7 +1109,7 @@
 
     it('sets the window width to the page width when used', () => {
       w.destroy()
-      w = new BrowserWindow({
+      w = createNodeWindow({
         show: false,
         width: 500,
         height: 400,
@@ -1065,11 +1123,11 @@
   describe('"tabbingIdentifier" option', () => {
     it('can be set on a window', () => {
       w.destroy()
-      w = new BrowserWindow({
+      w = createNodeWindow({
         tabbingIdentifier: 'group1'
       })
       w.destroy()
-      w = new BrowserWindow({
+      w = createNodeWindow({
         tabbingIdentifier: 'group2',
         frame: false
       })
@@ -1087,7 +1145,7 @@
           done()
         })
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             preload: preload
@@ -1102,7 +1160,7 @@
           done()
         })
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             preload: preload
@@ -1139,7 +1197,7 @@
           done()
         })
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             preload: path.join(fixtures, 'module', 'set-global-preload-3.js')
@@ -1157,7 +1215,7 @@
           done()
         })
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             preload: preload,
@@ -1174,7 +1232,7 @@
           done()
         })
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             preload: preload,
@@ -1194,7 +1252,7 @@
           done()
         })
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             preload: preload,
@@ -1246,7 +1304,7 @@
           done()
         })
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             sandbox: true,
@@ -1263,7 +1321,7 @@
           done()
         })
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             sandbox: true,
@@ -1275,7 +1333,7 @@
 
       it('exposes "exit" event to preload script', function (done) {
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             sandbox: true,
@@ -1297,9 +1355,10 @@
 
       it('should open windows in same domain with cross-scripting enabled', (done) => {
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
+            nodeIntegration: false,
             sandbox: true,
             preload: preload
           }
@@ -1326,7 +1385,7 @@
 
       it('should open windows in another domain with cross-scripting disabled', (done) => {
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             sandbox: true,
@@ -1365,7 +1424,7 @@
 
       it('should inherit the sandbox setting in opened windows', (done) => {
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             sandbox: true
@@ -1383,7 +1442,7 @@
 
       it('should open windows with the options configured via new-window event listeners', (done) => {
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             sandbox: true
@@ -1402,7 +1461,7 @@
 
       it('should set ipc event sender correctly', (done) => {
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             sandbox: true,
@@ -1468,7 +1527,7 @@
 
       it('can get printer list', (done) => {
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             sandbox: true,
@@ -1485,7 +1544,7 @@
 
       it('can print to PDF', (done) => {
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             sandbox: true,
@@ -1505,7 +1564,7 @@
 
       it('supports calling preventDefault on new-window events', (done) => {
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             sandbox: true
@@ -1526,7 +1585,7 @@
 
       it('releases memory after popup is closed', (done) => {
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             preload: preload,
@@ -1549,7 +1608,7 @@
       // see #9387
       it('properly manages remote object references after page reload', (done) => {
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             preload: preload,
@@ -1582,7 +1641,7 @@
 
       it('properly manages remote object references after page reload in child window', (done) => {
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             preload: preload,
@@ -1631,7 +1690,7 @@
         })
         remote.process.env.sandboxmain = 'foo'
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             sandbox: true,
@@ -1643,7 +1702,7 @@
 
       it('webview in sandbox renderer', async () => {
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             sandbox: true,
@@ -1662,7 +1721,7 @@
     describe('nativeWindowOpen option', () => {
       beforeEach(() => {
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             nativeWindowOpen: true
@@ -1713,7 +1772,7 @@
       })
       it('should inherit the nativeWindowOpen setting in opened windows', (done) => {
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             nativeWindowOpen: true
@@ -1730,7 +1789,7 @@
       })
       it('should open windows with the options configured via new-window event listeners', (done) => {
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: false,
           webPreferences: {
             nativeWindowOpen: true
@@ -1751,7 +1810,7 @@
         await serveFileFromProtocol('bar', path.join(fixtures, 'api', 'window-open-location-final.html'))
 
         w.destroy()
-        w = new BrowserWindow({
+        w = createNodeWindow({
           show: true,
           webPreferences: {
             nodeIntegration: false,
@@ -1776,7 +1835,7 @@
   describe('nativeWindowOpen + contextIsolation options', () => {
     beforeEach(() => {
       w.destroy()
-      w = new BrowserWindow({
+      w = createNodeWindow({
         show: false,
         webPreferences: {
           nativeWindowOpen: true,
@@ -1882,7 +1941,7 @@
     afterEach(() => { ipcMain.removeAllListeners('pong') })
 
     it('visibilityState is initially visible despite window being hidden', (done) => {
-      w = new BrowserWindow({ show: false, width: 100, height: 100 })
+      w = createNodeWindow({ show: false, width: 100, height: 100 })
 
       let readyToShow = false
       w.once('ready-to-show', () => {
@@ -1900,7 +1959,7 @@
       w.loadURL(`file://${path.join(fixtures, 'pages', 'visibilitychange.html')}`)
     })
     it('visibilityState changes when window is hidden', (done) => {
-      w = new BrowserWindow({width: 100, height: 100})
+      w = createNodeWindow({width: 100, height: 100})
 
       onNextVisibilityChange((visibilityState, hidden) => {
         assert.equal(visibilityState, 'visible')
@@ -1918,7 +1977,7 @@
       w.loadURL(`file://${path.join(fixtures, 'pages', 'visibilitychange.html')}`)
     })
     it('visibilityState changes when window is shown', (done) => {
-      w = new BrowserWindow({width: 100, height: 100})
+      w = createNodeWindow({width: 100, height: 100})
 
       onNextVisibilityChange((visibilityState, hidden) => {
         onVisibilityChange((visibilityState, hidden) => {
@@ -1944,7 +2003,7 @@
         return done()
       }
 
-      w = new BrowserWindow({width: 100, height: 100})
+      w = createNodeWindow({width: 100, height: 100})
 
       onNextVisibilityChange((visibilityState, hidden) => {
         onVisibilityChange((visibilityState, hidden) => {
@@ -1970,7 +2029,7 @@
         return done()
       }
 
-      w = new BrowserWindow({width: 100, height: 100})
+      w = createNodeWindow({width: 100, height: 100})
 
       onNextVisibilityChange((visibilityState, hidden) => {
         assert.equal(visibilityState, 'visible')
@@ -1988,7 +2047,7 @@
       w.loadURL(`file://${path.join(fixtures, 'pages', 'visibilitychange.html')}`)
     })
     it('visibilityState remains visible if backgroundThrottling is disabled', (done) => {
-      w = new BrowserWindow({
+      w = createNodeWindow({
         show: false,
         width: 100,
         height: 100,
@@ -2040,7 +2099,7 @@
     })
     it('emits when window.open is called with no webPreferences', (done) => {
       w.destroy()
-      w = new BrowserWindow({ show: false })
+      w = createNodeWindow({ show: false })
       w.webContents.once('new-window', function (e, url, frameName, disposition, options, additionalFeatures) {
         e.preventDefault()
         assert.equal(url, 'http://host/')
@@ -2111,7 +2170,7 @@
         sheet.close()
         done()
       })
-      sheet = new BrowserWindow({
+      sheet = createNodeWindow({
         modal: true,
         parent: w
       })
@@ -2133,7 +2192,7 @@
 
     it('emits when window has closed a sheet', (done) => {
       w.show()
-      sheet = new BrowserWindow({
+      sheet = createNodeWindow({
         modal: true,
         parent: w
       })
@@ -2230,7 +2289,7 @@
   describe('BrowserWindow options argument is optional', () => {
     it('should create a window with default size (800x600)', () => {
       w.destroy()
-      w = new BrowserWindow()
+      w = createNodeWindow()
       const size = w.getSize()
       assert.equal(size[0], 800)
       assert.equal(size[1], 600)
@@ -2240,7 +2299,7 @@
   describe('window states', () => {
     it('does not resize frameless windows when states change', () => {
       w.destroy()
-      w = new BrowserWindow({
+      w = createNodeWindow({
         frame: false,
         width: 300,
         height: 200,
@@ -2271,7 +2330,7 @@
     describe('resizable state', () => {
       it('can be changed with resizable option', () => {
         w.destroy()
-        w = new BrowserWindow({show: false, resizable: false})
+        w = createNodeWindow({show: false, resizable: false})
         assert.equal(w.isResizable(), false)
 
         if (process.platform === 'darwin') {
@@ -2289,12 +2348,12 @@
 
       it('works for a frameless window', () => {
         w.destroy()
-        w = new BrowserWindow({show: false, frame: false})
+        w = createNodeWindow({show: false, frame: false})
         assert.equal(w.isResizable(), true)
 
         if (process.platform === 'win32') {
           w.destroy()
-          w = new BrowserWindow({show: false, thickFrame: false})
+          w = createNodeWindow({show: false, thickFrame: false})
           assert.equal(w.isResizable(), false)
         }
       })
@@ -2302,7 +2361,7 @@
       if (process.platform === 'win32') {
         it('works for a window smaller than 64x64', () => {
           w.destroy()
-          w = new BrowserWindow({
+          w = createNodeWindow({
             show: false,
             frame: false,
             resizable: false,
@@ -2370,7 +2429,7 @@
     describe('movable state', () => {
       it('can be changed with movable option', () => {
         w.destroy()
-        w = new BrowserWindow({show: false, movable: false})
+        w = createNodeWindow({show: false, movable: false})
         assert.equal(w.isMovable(), false)
       })
       it('can be changed with setMovable method', () => {
@@ -2385,7 +2444,7 @@
     describe('minimizable state', () => {
       it('can be changed with minimizable option', () => {
         w.destroy()
-        w = new BrowserWindow({show: false, minimizable: false})
+        w = createNodeWindow({show: false, minimizable: false})
         assert.equal(w.isMinimizable(), false)
       })
 
@@ -2401,7 +2460,7 @@
     describe('maximizable state', () => {
       it('can be changed with maximizable option', () => {
         w.destroy()
-        w = new BrowserWindow({show: false, maximizable: false})
+        w = createNodeWindow({show: false, maximizable: false})
         assert.equal(w.isMaximizable(), false)
       })
 
@@ -2450,7 +2509,7 @@
 
       it('can be changed with fullscreenable option', () => {
         w.destroy()
-        w = new BrowserWindow({show: false, fullscreenable: false})
+        w = createNodeWindow({show: false, fullscreenable: false})
         assert.equal(w.isFullScreenable(), false)
       })
 
@@ -2474,7 +2533,7 @@
 
       it('can be changed with setKiosk method', (done) => {
         w.destroy()
-        w = new BrowserWindow()
+        w = createNodeWindow()
         w.setKiosk(true)
         assert.equal(w.isKiosk(), true)
 
@@ -2498,7 +2557,7 @@
 
       it('resizable flag should be set to true and restored', (done) => {
         w.destroy()
-        w = new BrowserWindow({ resizable: false })
+        w = createNodeWindow({ resizable: false })
         w.once('enter-full-screen', () => {
           assert.equal(w.isResizable(), true)
           w.setFullScreen(false)
@@ -2522,7 +2581,7 @@
 
       it('can be changed with setFullScreen method', (done) => {
         w.destroy()
-        w = new BrowserWindow()
+        w = createNodeWindow()
         w.once('enter-full-screen', () => {
           assert.equal(w.isFullScreen(), true)
           w.setFullScreen(false)
@@ -2536,7 +2595,7 @@
 
       it('should not be changed by setKiosk method', (done) => {
         w.destroy()
-        w = new BrowserWindow()
+        w = createNodeWindow()
         w.once('enter-full-screen', () => {
           assert.equal(w.isFullScreen(), true)
           w.setKiosk(true)
@@ -2555,7 +2614,7 @@
     describe('closable state', () => {
       it('can be changed with closable option', () => {
         w.destroy()
-        w = new BrowserWindow({show: false, closable: false})
+        w = createNodeWindow({show: false, closable: false})
         assert.equal(w.isClosable(), false)
       })
 
@@ -2574,7 +2633,7 @@
       it('can be changed with hasShadow option', () => {
         w.destroy()
         let hasShadow = process.platform !== 'darwin'
-        w = new BrowserWindow({show: false, hasShadow: hasShadow})
+        w = createNodeWindow({show: false, hasShadow: hasShadow})
         assert.equal(w.hasShadow(), hasShadow)
       })
 
@@ -2594,7 +2653,7 @@
     it('should restore the previous window size', () => {
       if (w != null) w.destroy()
 
-      w = new BrowserWindow({
+      w = createNodeWindow({
         minWidth: 800,
         width: 800
       })
@@ -2609,7 +2668,7 @@
   describe('BrowserWindow.unmaximize()', () => {
     it('should restore the previous window position', () => {
       if (w != null) w.destroy()
-      w = new BrowserWindow()
+      w = createNodeWindow()
 
       const initialPosition = w.getPosition()
       w.maximize()
@@ -2663,7 +2722,7 @@
     // TODO(alexeykuzmin): [Ch66] Enable the test. Fails on CI bots, passes locally.
     xit('exits HTML fullscreen when window leaves fullscreen', (done) => {
       w.destroy()
-      w = new BrowserWindow()
+      w = createNodeWindow()
       w.webContents.once('did-finish-load', () => {
         w.once('enter-full-screen', () => {
           w.once('leave-html-full-screen', () => {
@@ -2682,7 +2741,7 @@
 
     beforeEach(() => {
       if (c != null) c.destroy()
-      c = new BrowserWindow({show: false, parent: w})
+      c = createNodeWindow({show: false, parent: w})
     })
 
     afterEach(() => {
@@ -2720,7 +2779,7 @@
 
       beforeEach(() => {
         if (c != null) c.destroy()
-        c = new BrowserWindow({show: false})
+        c = createNodeWindow({show: false})
       })
 
       it('sets parent window', () => {
@@ -2758,7 +2817,7 @@
 
       beforeEach(() => {
         if (c != null) c.destroy()
-        c = new BrowserWindow({show: false, parent: w, modal: true})
+        c = createNodeWindow({show: false, parent: w, modal: true})
       })
 
       it('disables parent window', () => {
@@ -2775,7 +2834,7 @@
         c.close()
       })
       it('disables parent window recursively', () => {
-        let c2 = new BrowserWindow({show: false, parent: w, modal: true})
+        let c2 = createNodeWindow({show: false, parent: w, modal: true})
         c.show()
         assert.equal(w.isEnabled(), false)
         c2.show()
@@ -2936,7 +2995,7 @@
       if (w != null) {
         w.destroy()
       }
-      w = new BrowserWindow({
+      w = createNodeWindow({
         show: false,
         webPreferences: {
           partition: 'temp'
@@ -3145,7 +3204,7 @@
 
     beforeEach(() => {
       if (w != null) w.destroy()
-      w = new BrowserWindow({
+      w = createNodeWindow({
         show: false,
         webPreferences: {
           contextIsolation: true,
@@ -3153,7 +3212,7 @@
         }
       })
       if (ws != null) ws.destroy()
-      ws = new BrowserWindow({
+      ws = createNodeWindow({
         show: false,
         webPreferences: {
           sandbox: true,
@@ -3219,7 +3278,7 @@
       }
 
       if (w != null) w.destroy()
-      w = new BrowserWindow({
+      w = createNodeWindow({
         width: 100,
         height: 100,
         show: false,
@@ -3248,7 +3307,7 @@
       })
 
       it('is false for regular window', () => {
-        let c = new BrowserWindow({show: false})
+        let c = createNodeWindow({show: false})
         assert.equal(c.webContents.isOffscreen(), false)
         c.destroy()
       })
merged
  result 100644 9118f2249d486c2472c7e309ba633284f193d727 spec/api-crash-reporter-spec.js
  our    100644 dd31b91e1244785412b87db96bb141599e5ccb0f spec/api-crash-reporter-spec.js
@@ -39,7 +39,14 @@
 
       beforeEach(() => {
         stopServer = null
-        w = new BrowserWindow(Object.assign({ show: false }, browserWindowOpts))
+        w = new BrowserWindow({
+          show: false,
+          ...browserWindowOpts,
+          webPreferences: {
+            nodeIntegration: true,
+            ...(browserWindowOpts.webPreferences || {})
+          }
+        })
       })
 
       afterEach(() => closeWindow(w).then(() => { w = null }))
merged
  result 100644 78fccc0d7870407e8da73257ffbdbf2de488058e spec/api-debugger-spec.js
  our    100644 0f5cc614c98bfe6c679575bc1a9c76e3b145ac71 spec/api-debugger-spec.js
@@ -16,7 +16,8 @@
     w = new BrowserWindow({
       show: false,
       width: 400,
-      height: 400
+      height: 400,
+      webPreferences: { nodeIntegration: true }
     })
   })
 
merged
  result 100644 2bb1f5eb628b7e04d94ead49a2e7ed0b831620a6 spec/api-ipc-main-spec.js
  our    100644 e31369faca4d4ee7ff24fdae4aa9a404ed8d28f4 spec/api-ipc-main-spec.js
@@ -11,6 +11,13 @@
 const {remote} = require('electron')
 const {ipcMain, BrowserWindow} = remote
 
+const createWindow = () => new BrowserWindow({
+  show: false,
+  webPreferences: {
+    nodeIntegration: true
+  }
+})
+
 describe('ipc main module', () => {
   const fixtures = path.join(__dirname, 'fixtures')
 
@@ -22,7 +29,7 @@
     afterEach(() => { ipcMain.removeAllListeners('send-sync-message') })
 
     it('does not crash when reply is not sent and browser is destroyed', (done) => {
-      w = new BrowserWindow({ show: false })
+      w = createWindow()
       ipcMain.once('send-sync-message', (event) => {
         event.returnValue = null
         done()
@@ -31,7 +38,7 @@
     })
 
     it('does not crash when reply is sent by multiple listeners', (done) => {
-      w = new BrowserWindow({ show: false })
+      w = createWindow()
       ipcMain.on('send-sync-message', (event) => {
         event.returnValue = null
       })
@@ -45,7 +52,7 @@
 
   describe('remote listeners', () => {
     it('can be added and removed correctly', () => {
-      w = new BrowserWindow({ show: false })
+      w = createWindow()
       const listener = () => {}
 
       w.on('test', listener)
@@ -69,7 +76,7 @@
 
   describe('remote objects registry', () => {
     it('does not dereference until the render view is deleted (regression)', (done) => {
-      w = new BrowserWindow({ show: false })
+      w = createWindow()
 
       ipcMain.once('error-message', (event, message) => {
         const correctMsgStart = message.startsWith('Cannot call function \'getURL\' on missing remote object')
merged
  result 100644 207347df22e59935ea9602d118a76fa2b2bb2b5a spec/api-ipc-renderer-spec.js
  our    100644 748851ec1c0a7e499bdfd9d0ae4cd1be1d02d705 spec/api-ipc-renderer-spec.js
@@ -132,7 +132,11 @@
   describe('ipcRenderer.sendTo', () => {
     let contents = null
 
-    beforeEach(() => { contents = webContents.create({}) })
+    beforeEach(() => {
+      contents = webContents.create({
+        nodeIntegration: true
+      })
+    })
 
     afterEach(() => {
       ipcRenderer.removeAllListeners('pong')
@@ -158,7 +162,12 @@
 
   describe('remote listeners', () => {
     it('detaches listeners subscribed to destroyed renderers, and shows a warning', (done) => {
-      w = new BrowserWindow({ show: false })
+      w = new BrowserWindow({
+        show: false,
+        webPreferences: {
+          nodeIntegration: true
+        }
+      })
 
       w.webContents.once('did-finish-load', () => {
         w.webContents.once('did-finish-load', () => {
merged
  result 100644 29d2f5ef1516c30caad9e442d40c8e0901e9ff54 spec/api-menu-item-spec.js
  our    100644 fb3ee998eace4401d6f129930d802677ce5feb85 spec/api-menu-item-spec.js
@@ -9,6 +9,16 @@
 const {expect} = chai
 chai.use(dirtyChai)
 
+const createWindow = () =>
+  new BrowserWindow({
+    show: false,
+    width: 200,
+    height: 200,
+    webPreferences: {
+      nodeIntegration: false
+    }
+  })
+
 describe('MenuItems', () => {
   describe('MenuItem.click', () => {
     it('should be called with the item object passed', done => {
@@ -142,7 +152,7 @@
 
   describe('MenuItem role execution', () => {
     it('does not try to execute roles without a valid role property', () => {
-      let win = new BrowserWindow({show: false, width: 200, height: 200})
+      let win = createWindow()
       let item = new MenuItem({role: 'asdfghjkl'})
 
       const canExecute = roles.execute(item.role, win, win.webContents)
@@ -152,7 +162,7 @@
     })
 
     it('executes roles with native role functions', () => {
-      let win = new BrowserWindow({show: false, width: 200, height: 200})
+      let win = createWindow()
       let item = new MenuItem({role: 'reload'})
 
       const canExecute = roles.execute(item.role, win, win.webContents)
@@ -162,7 +172,7 @@
     })
 
     it('execute roles with non-native role functions', () => {
-      let win = new BrowserWindow({show: false, width: 200, height: 200})
+      let win = createWindow()
       let item = new MenuItem({role: 'resetzoom'})
 
       const canExecute = roles.execute(item.role, win, win.webContents)
changed in both
  base   100644 99b0f3cf34c5d043ae98bc9da3b001001389c88c spec/api-menu-spec.js
  our    100644 ed2749700c6c8bf299f507d52606c1ae3f597e5c spec/api-menu-spec.js
  their  100644 9e57b5a82467c84fe4231b895e76f70b8c5fd74a spec/api-menu-spec.js
@@ -634,7 +634,14 @@
     let menu
 
     beforeEach(() => {
-      w = new BrowserWindow({show: false, width: 200, height: 200})
+      w = new BrowserWindow({
+        show: false,
+        width: 200,
+        height: 200,
+        webPreferences: {
+          nodeIntegration: true
+        }
+      })
       menu = Menu.buildFromTemplate([
         {label: '1'},
         {label: '2'},
merged
  result 100644 5d54d60f690bcf0e0aa0b0e23a0d6d0f05ffa0ef spec/api-protocol-spec.js
  our    100644 cd2e451989836c1a8bf14666088f8364d31081b8 spec/api-protocol-spec.js
@@ -464,7 +464,9 @@
         const handler = (request, callback) => callback({url: redirectURL})
         protocol.registerHttpProtocol(protocolName, handler, (error) => {
           if (error) return done(error)
-          contents = webContents.create({})
+          contents = webContents.create({
+            nodeIntegration: true
+          })
           contents.on('did-finish-load', () => {
             assert.equal(contents.getURL(), url)
             server.close()
@@ -970,7 +972,12 @@
     let success = null
 
     beforeEach(() => {
-      w = new BrowserWindow({show: false})
+      w = new BrowserWindow({
+        show: false,
+        webPreferences: {
+          nodeIntegration: true
+        }
+      })
       success = false
     })
 
changed in both
  base   100644 7ac14e1f1f88549aa6594e96906cc77906c0accd spec/api-session-spec.js
  our    100644 b9093d1d6335ece5ca713a668a67bf3b40f4fabe spec/api-session-spec.js
  their  100644 c62a58edd1c4084e0721c3d219d8eead7d50cfa8 spec/api-session-spec.js
@@ -23,7 +23,10 @@
     w = new BrowserWindow({
       show: false,
       width: 400,
-      height: 400
+      height: 400,
+      webPreferences: {
+        nodeIntegration: true
+      }
     })
   })
 
@@ -241,7 +244,10 @@
       w = new BrowserWindow({
         show: false,
         width: 400,
-        height: 400
+        height: 400,
+        webPreferences: {
+          nodeIntegration: true
+        }
       })
     })
 
@@ -447,6 +453,7 @@
       w = new BrowserWindow({
         show: false,
         webPreferences: {
+          nodeIntegration: true,
           partition: partitionName
         }
       })
@@ -507,7 +514,12 @@
       const url = `${scheme}://host`
       before(() => {
         if (w != null) w.destroy()
-        w = new BrowserWindow({show: false})
+        w = new BrowserWindow({
+          show: false,
+          webPreferences: {
+            nodeIntegration: true
+          }
+        })
       })
 
       after((done) => {
merged
  result 100644 b38363cb5959304cf44e7f7822a44307d3449074 spec/api-touch-bar-spec.js
  our    100644 18dd414f688e099179f8e8d6b558e8f87ac21465 spec/api-touch-bar-spec.js
@@ -37,7 +37,11 @@
     let window
 
     beforeEach(() => {
-      window = new BrowserWindow()
+      window = new BrowserWindow({
+        webPreferences: {
+          nodeIntegration: true
+        }
+      })
     })
 
     afterEach(() => {
changed in both
  base   100644 b1b1d206a2934dbc0e6d3b57cffdc9b9345d7b7a spec/api-web-contents-spec.js
  our    100644 be02cb3f84001a541d64b11fe6eda50fc32e8afd spec/api-web-contents-spec.js
  their  100644 b092a9024b666df77cde194480910c15c38c5005 spec/api-web-contents-spec.js
@@ -29,7 +29,8 @@
       width: 400,
       height: 400,
       webPreferences: {
-        backgroundThrottling: false
+        backgroundThrottling: false,
+        nodeIntegration: true
       }
     })
   })
@@ -100,7 +101,12 @@
 
   describe('setDevToolsWebContents() API', () => {
     it('sets arbitry webContents as devtools', (done) => {
-      let devtools = new BrowserWindow({show: false})
+      let devtools = new BrowserWindow({
+        show: false,
+        webPreferences: {
+          nodeIntegration: true
+        }
+      })
       devtools.webContents.once('dom-ready', () => {
         assert.ok(devtools.getURL().startsWith('chrome-devtools://devtools'))
         devtools.webContents.executeJavaScript('InspectorFrontendHost.constructor.name', (name) => {
@@ -457,7 +463,10 @@
 
     it('can propagate zoom level across same session', (done) => {
       const w2 = new BrowserWindow({
-        show: false
+        show: false,
+        webPreferences: {
+          nodeIntegration: true
+        }
       })
       w2.webContents.on('did-finish-load', () => {
         w.webContents.getZoomLevel((zoomLevel1) => {
@@ -481,6 +490,7 @@
       const w2 = new BrowserWindow({
         show: false,
         webPreferences: {
+          nodeIntegration: true,
           partition: 'temp'
         }
       })
@@ -541,7 +551,10 @@
     it('cannot propagate when used with webframe', (done) => {
       let finalZoomLevel = 0
       const w2 = new BrowserWindow({
-        show: false
+        show: false,
+        webPreferences: {
+          nodeIntegration: true
+        }
       })
       w2.webContents.on('did-finish-load', () => {
         w.webContents.getZoomLevel((zoomLevel1) => {
@@ -782,6 +795,7 @@
       w = new BrowserWindow({
         show: false,
         webPreferences: {
+          nodeIntegration: false,
           sandbox: true
         }
       })
merged
  result 100644 542ed3047ecb703168c3fd87459da037ace52899 spec/api-web-contents-view-spec.js
  our    100644 b61ddb6163868dbae155670436ad02f7bd7dfa65 spec/api-web-contents-view-spec.js
@@ -9,13 +9,17 @@
   afterEach(() => closeWindow(w).then(() => { w = null }))
 
   it('can be used as content view', () => {
-    const web = webContents.create({})
+    const web = webContents.create({
+      nodeIntegration: true
+    })
     w = new TopLevelWindow({show: false})
     w.setContentView(new WebContentsView(web))
   })
 
   it('prevents adding same WebContents', () => {
-    const web = webContents.create({})
+    const web = webContents.create({
+      nodeIntegration: true
+    })
     w = new TopLevelWindow({show: false})
     w.setContentView(new WebContentsView(web))
     assert.throws(() => {
changed in both
  base   100644 5a03ca22685eb3e5c54b2feb1efb9b2d51d07ed6 spec/api-web-frame-spec.js
  our    100644 b8fd10b5d3f1319640fb209c707c758d0a0403d2 spec/api-web-frame-spec.js
  their  100644 5c4a79a49651312067d0c0900ee46d4279815c7f spec/api-web-frame-spec.js
@@ -109,7 +109,12 @@
       runNumber++
 
       const url = standardScheme + '://fake-host'
-      w = new BrowserWindow({show: false})
+      w = new BrowserWindow({
+        show: false,
+        webPreferences: {
+          nodeIntegration: true
+        }
+      })
       after(function (done) {
         protocol.unregisterProtocol(corsScheme, function () {
           protocol.unregisterProtocol(standardScheme, function () {
changed in both
  base   100644 131619d5f21985ae1b904f53a37af8959a9ff11e spec/asar-spec.js
  our    100644 489f68c96d41e80c308560a98486a07756a03be7 spec/asar-spec.js
  their  100644 7c6cb14dcee9c660daaf98040aa7154ba29346bd spec/asar-spec.js
@@ -11,6 +11,16 @@
 const ipcMain = remote.require('electron').ipcMain
 const BrowserWindow = remote.require('electron').BrowserWindow
 
+const createWindow = () =>
+  new BrowserWindow({
+    show: false,
+    width: 400,
+    height: 400,
+    webPreferences: {
+      nodeIntegration: true
+    }
+  })
+
 describe('asar package', function () {
   var fixtures = path.join(__dirname, 'fixtures')
 
@@ -1058,11 +1068,7 @@
         ipcMain.removeAllListeners('dirname')
       })
 
-      w = new BrowserWindow({
-        show: false,
-        width: 400,
-        height: 400
-      })
+      w = createWindow()
       var p = path.resolve(fixtures, 'asar', 'web.asar', 'index.html')
       var u = url.format({
         protocol: 'file',
@@ -1081,11 +1087,7 @@
         ipcMain.removeAllListeners('ping')
       })
 
-      w = new BrowserWindow({
-        show: false,
-        width: 400,
-        height: 400
-      })
+      w = createWindow()
       var p = path.resolve(fixtures, 'asar', 'script.asar', 'index.html')
       var u = url.format({
         protocol: 'file',
@@ -1106,11 +1108,7 @@
         ipcMain.removeAllListeners('asar-video')
       })
 
-      w = new BrowserWindow({
-        show: false,
-        width: 400,
-        height: 400
-      })
+      w = createWindow()
       var p = path.resolve(fixtures, 'asar', 'video.asar', 'index.html')
       var u = url.format({
         protocol: 'file',
changed in both
  base   100644 98975eccc24b9e433d6da8f7dd95590f7e7eaa7d spec/chromium-spec.js
  our    100644 d90269769d269e4054d25cba4b6c4ac8a1929aa6 spec/chromium-spec.js
  their  100644 3d46a9a6886b210014c254e79ec87e85493cf4a6 spec/chromium-spec.js
@@ -72,7 +72,12 @@
 
   describe('accessing key names also used as Node.js module names', () => {
     it('does not crash', (done) => {
-      w = new BrowserWindow({show: false})
+      w = new BrowserWindow({
+        show: false,
+        webPreferences: {
+          nodeIntegration: true
+        }
+      })
       w.webContents.once('did-finish-load', () => { done() })
       w.webContents.once('crashed', () => done(new Error('WebContents crashed.')))
       w.loadURL(`file://${fixtures}/pages/external-string.html`)
@@ -128,6 +133,7 @@
       w = new BrowserWindow({
         show: false,
         webPreferences: {
+          nodeIntegration: true,
           session: ses
         }
       })
@@ -168,6 +174,7 @@
       w = new BrowserWindow({
         show: false,
         webPreferences: {
+          nodeIntegration: true,
           partition: 'sw-file-scheme-spec'
         }
       })
@@ -205,7 +212,10 @@
 
       w = new BrowserWindow({
         show: false,
-        webPreferences: { session: customSession }
+        webPreferences: {
+          nodeIntegration: true,
+          session: customSession
+        }
       })
       w.webContents.on('ipc-message', (event, args) => {
         if (args[0] === 'reload') {
@@ -261,7 +271,12 @@
 
     for (const show of [true, false]) {
       it(`inherits parent visibility over parent {show=${show}} option`, (done) => {
-        const w = new BrowserWindow({show})
+        const w = new BrowserWindow({
+          show,
+          webPreferences: {
+            nodeIntegration: true
+          }
+        })
 
         // toggle visibility
         if (show) {
@@ -516,7 +531,12 @@
     let url = `file://${fixtures}/pages/window-opener.html`
 
     it('is null for main window', (done) => {
-      w = new BrowserWindow({ show: false })
+      w = new BrowserWindow({
+        show: false,
+        webPreferences: {
+          nodeIntegration: true
+        }
+      })
       w.webContents.once('ipc-message', (event, args) => {
         assert.deepEqual(args, ['opener', null])
         done()
@@ -906,7 +926,9 @@
       })
 
       beforeEach(() => {
-        contents = webContents.create({})
+        contents = webContents.create({
+          nodeIntegration: true
+        })
       })
 
       afterEach(() => {
@@ -1076,6 +1098,7 @@
         w = new BrowserWindow({
           show: false,
           webPreferences: {
+            nodeIntegration: true,
             preload: path.join(fixtures, 'module', preload),
             plugins: plugins
           }
@@ -1196,7 +1219,12 @@
 
     describe('window.history.pushState', () => {
       it('should push state after calling history.pushState() from the same url', (done) => {
-        w = new BrowserWindow({ show: false })
+        w = new BrowserWindow({
+          show: false,
+          webPreferences: {
+            nodeIntegration: true
+          }
+        })
         w.webContents.once('did-finish-load', () => {
           // History should have current page by now.
           assert.equal(w.webContents.length(), 1)
merged
  result 100644 ec3f35d66516aedb1e21a7de227c3a6fb7f9260f spec/fixtures/api/exit-closes-all-windows-app/main.js
  our    100644 c97d8d1f195ba4cb44abeddbe70872507ed538b8 spec/fixtures/api/exit-closes-all-windows-app/main.js
@@ -3,7 +3,12 @@
 const windows = []
 
 function createWindow (id) {
-  const window = new BrowserWindow({show: false})
+  const window = new BrowserWindow({
+    show: false,
+    webPreferences: {
+      nodeIntegration: true
+    }
+  })
   window.loadURL(`data:,window${id}`)
   windows.push(window)
 }
changed in both
  base   100644 19b69e0189b16aa76e6d1f75ee5b2aabaaab031d spec/fixtures/api/mixed-sandbox-app/main.js
  our    100644 3a6945b0f2a1cb645a6ca7b0a97356c0164cc3b8 spec/fixtures/api/mixed-sandbox-app/main.js
  their  100644 2a3d7fdd0d012127ebb0aa45e8f9279ea1cccfbf spec/fixtures/api/mixed-sandbox-app/main.js
@@ -13,6 +13,7 @@
 let currentWindowSandboxed = false
 
 app.once('ready', () => {
+<<<<<<< .our
   function testWindow (isSandboxed, callback) {
     currentWindowSandboxed = isSandboxed
     let currentWindow = new BrowserWindow({
@@ -36,6 +37,27 @@
     })
     currentWindow.webContents.openDevTools()
   }
+=======
+  sandboxWindow = new BrowserWindow({
+    show: false,
+    webPreferences: {
+      nodeIntegration: true,
+      preload: path.join(__dirname, 'electron-app-mixed-sandbox-preload.js'),
+      sandbox: true
+    }
+  })
+  sandboxWindow.loadURL('about:blank')
+
+  noSandboxWindow = new BrowserWindow({
+    show: false,
+    webPreferences: {
+      nodeIntegration: true,
+      preload: path.join(__dirname, 'electron-app-mixed-sandbox-preload.js'),
+      sandbox: false
+    }
+  })
+  noSandboxWindow.loadURL('about:blank')
+>>>>>>> .their
 
   const argv = {
     sandbox: null,
merged
  result 100644 c64b4c603ade1450cef57479f3d493217660177b spec/fixtures/no-proprietary-codecs.js
  our    100644 23a7d815a9249d4191d7d5045a83fa683b14824b spec/fixtures/no-proprietary-codecs.js
@@ -15,7 +15,10 @@
 
 app.once('ready', () => {
   window = new BrowserWindow({
-    show: false
+    show: false,
+    webPreferences: {
+      nodeIntegration: true
+    }
   })
 
   window.loadURL(url.format({
merged
  result 100644 19821b33b2c09ae2a3e5be70ad8ba2fc8b07cacc spec/modules-spec.js
  our    100644 b996b8f4839bff2160bffb69e55263b16a4178d7 spec/modules-spec.js
@@ -147,7 +147,12 @@
       let w
 
       beforeEach(() => {
-        w = new BrowserWindow({show: false})
+        w = new BrowserWindow({
+          show: false,
+          webPreferences: {
+            nodeIntegration: true
+          }
+        })
       })
 
       afterEach(async () => {
merged
  result 100644 982cbd6140ea8bce00c310981841b2556ee0ac4f spec/security-warnings-spec.js
  our    100644 6315a9420e01b5db19596f0dd5731d47ce02acf6 spec/security-warnings-spec.js
@@ -59,7 +59,10 @@
   })
 
   it('should warn about Node.js integration with remote content', (done) => {
-    w = new BrowserWindow({ show: false })
+    w = new BrowserWindow({
+      show: false,
+      webPreferences: { nodeIntegration: true }
+    })
     w.webContents.once('console-message', (e, level, message) => {
       assert(message.includes('Node.js Integration with Remote Content'), message)
       done()
changed in both
  base   100644 d920426df3d9595b9366cb7f3e93a7c5471640f9 spec/static/main.js
  our    100644 5659c44c8de4456a25e0026e29199b827c89cb08 spec/static/main.js
  their  100644 274a4b79e0065bc153e363c18f11cc48f61032b0 spec/static/main.js
@@ -131,7 +131,8 @@
     width: 800,
     height: 600,
     webPreferences: {
-      backgroundThrottling: false
+      backgroundThrottling: false,
+      nodeIntegration: true
     }
   })
   window.loadURL(url.format({
@@ -274,7 +275,13 @@
     }
   }
   foo.baz2 = foo.baz
-  const window = new BrowserWindow({show: false, foo: foo})
+  const window = new BrowserWindow({
+    show: false,
+    foo: foo,
+    webPreferences: {
+      nodeIntegration: true
+    }
+  })
   event.returnValue = window.id
 })
 
@@ -366,7 +373,9 @@
     contents = w.webContents
     destroy = () => w.close()
   } else {
-    contents = webContents.create()
+    contents = webContents.create({
+      nodeIntegration: true
+    })
     destroy = () => contents.destroy()
   }
 
changed in both
  base   100644 1025cf74457837d221f90d27640e97354572036c spec/webview-spec.js
  our    100644 db75a4e3754e24a5e6740be61be4f4098c58006e spec/webview-spec.js
  their  100644 43e913769c1fdd6ad5797a8537c4a62c5d10eade spec/webview-spec.js
@@ -25,9 +25,15 @@
   let webview = null
   let w = null
 
-  const openTheWindow = async (...args) => {
+  const openTheWindow = async (opts, ...args) => {
     await closeTheWindow()
-    w = new BrowserWindow(...args)
+    w = new BrowserWindow({
+      ...opts,
+      webPreferences: {
+        nodeIntegration: true,
+        ...(opts.webPreferences || {})
+      }
+    }, ...args)
     return w
   }
 
@@ -1256,6 +1262,240 @@
     expect(tabId).to.be.not.equal(w.webContents.id)
   })
 
+<<<<<<< .our
+=======
+  // TODO(alexeykuzmin): Some tests rashe a renderer process.
+  // Fix them and enable the tests.
+  xdescribe('guestinstance attribute', () => {
+    it('before loading there is no attribute', () => {
+      loadWebView(webview)  // Don't wait for loading to finish.
+      assert(!webview.hasAttribute('guestinstance'))
+    })
+
+    it('loading a page sets the guest view', async () => {
+      await loadWebView(webview, {
+        src: `file://${fixtures}/api/blank.html`
+      })
+
+      const instance = webview.getAttribute('guestinstance')
+      assert.equal(instance, parseInt(instance))
+
+      const guest = getGuestWebContents(parseInt(instance))
+      assert.equal(guest, webview.getWebContents())
+    })
+
+    it('deleting the attribute destroys the webview', async () => {
+      await loadWebView(webview, {
+        src: `file://${fixtures}/api/blank.html`
+      })
+
+      const instance = parseInt(webview.getAttribute('guestinstance'))
+      const waitForDestroy = waitForEvent(webview, 'destroyed')
+      webview.removeAttribute('guestinstance')
+
+      await waitForDestroy
+      expect(getGuestWebContents(instance)).to.equal(undefined)
+    })
+
+    it('setting the attribute on a new webview moves the contents', (done) => {
+      const loadListener = () => {
+        const webContents = webview.getWebContents()
+        const instance = webview.getAttribute('guestinstance')
+
+        const destroyListener = () => {
+          assert.equal(webContents, webview2.getWebContents())
+
+          // Make sure that events are hooked up to the right webview now
+          webview2.addEventListener('console-message', (e) => {
+            assert.equal(e.message, 'a')
+            document.body.removeChild(webview2)
+            done()
+          })
+
+          webview2.src = `file://${fixtures}/pages/a.html`
+        }
+        webview.addEventListener('destroyed', destroyListener, {once: true})
+
+        const webview2 = new WebView()
+        loadWebView(webview2, {
+          guestinstance: instance
+        })
+      }
+      webview.addEventListener('did-finish-load', loadListener, {once: true})
+      loadWebView(webview, {
+        src: `file://${fixtures}/api/blank.html`
+      })
+    })
+
+    it('setting the attribute to an invalid guestinstance does nothing', async () => {
+      await loadWebView(webview, {
+        src: `file://${fixtures}/api/blank.html`
+      })
+      webview.setAttribute('guestinstance', 55)
+
+      // Make sure that events are still hooked up to the webview
+      const waitForMessage = waitForEvent(webview, 'console-message')
+      webview.src = `file://${fixtures}/pages/a.html`
+      const {message} = await waitForMessage
+      assert.equal(message, 'a')
+    })
+
+    it('setting the attribute on an existing webview moves the contents', (done) => {
+      const load1Listener = () => {
+        const webContents = webview.getWebContents()
+        const instance = webview.getAttribute('guestinstance')
+        let destroyedInstance
+
+        const destroyListener = () => {
+          assert.equal(webContents, webview2.getWebContents())
+          assert.equal(null, getGuestWebContents(parseInt(destroyedInstance)))
+
+          // Make sure that events are hooked up to the right webview now
+          webview2.addEventListener('console-message', (e) => {
+            assert.equal(e.message, 'a')
+            document.body.removeChild(webview2)
+            done()
+          })
+
+          webview2.src = 'file://' + fixtures + '/pages/a.html'
+        }
+        webview.addEventListener('destroyed', destroyListener, {once: true})
+
+        const webview2 = new WebView()
+        const load2Listener = () => {
+          destroyedInstance = webview2.getAttribute('guestinstance')
+          assert.notEqual(instance, destroyedInstance)
+
+          webview2.setAttribute('guestinstance', instance)
+        }
+        webview2.addEventListener('did-finish-load', load2Listener, {once: true})
+        loadWebView(webview2, {
+          src: `file://${fixtures}/api/blank.html`
+        })
+      }
+
+      webview.addEventListener('did-finish-load', load1Listener, {once: true})
+      loadWebView(webview, {
+        src: `file://${fixtures}/api/blank.html`
+      })
+    })
+
+    it('moving a guest back to its original webview should work', (done) => {
+      loadWebView(webview, {
+        src: `file://${fixtures}/api/blank.html`
+      }).then(() => {
+        const webContents = webview.getWebContents()
+        const instance = webview.getAttribute('guestinstance')
+
+        const destroy1Listener = () => {
+          assert.equal(webContents, webview2.getWebContents())
+          assert.equal(null, webview.getWebContents())
+
+          const destroy2Listener = () => {
+            assert.equal(webContents, webview.getWebContents())
+            assert.equal(null, webview2.getWebContents())
+
+            // Make sure that events are hooked up to the right webview now
+            webview.addEventListener('console-message', (e) => {
+              document.body.removeChild(webview2)
+              assert.equal(e.message, 'a')
+              done()
+            })
+
+            webview.src = `file://${fixtures}/pages/a.html`
+          }
+          webview2.addEventListener('destroyed', destroy2Listener, {once: true})
+          webview.setAttribute('guestinstance', instance)
+        }
+        webview.addEventListener('destroyed', destroy1Listener, {once: true})
+
+        const webview2 = new WebView()
+        loadWebView(webview2, {guestinstance: instance})
+      })
+    })
+
+    // FIXME(alexeykuzmin): This test only passes if the previous test ^
+    // is run alongside.
+    it('setting the attribute on a webview in a different window moves the contents', (done) => {
+      loadWebView(webview, {
+        src: `file://${fixtures}/api/blank.html`
+      }).then(() => {
+        const instance = webview.getAttribute('guestinstance')
+
+        w = new BrowserWindow({
+          show: false,
+          webPreferences: {
+            nodeIntegration: true
+          }
+        })
+        w.webContents.once('did-finish-load', () => {
+          ipcMain.once('pong', () => {
+            assert(!webview.hasAttribute('guestinstance'))
+            done()
+          })
+
+          w.webContents.send('guestinstance', instance)
+        })
+        w.loadURL(`file://${fixtures}/pages/webview-move-to-window.html`)
+      })
+    })
+
+    it('does not delete the guestinstance attribute when moving the webview to another parent node', (done) => {
+      webview.addEventListener('dom-ready', function domReadyListener () {
+        webview.addEventListener('did-attach', () => {
+          assert(webview.guestinstance != null)
+          assert(webview.getWebContents() != null)
+          done()
+        })
+
+        document.body.replaceChild(webview, div)
+      })
+      webview.src = `file://${fixtures}/pages/a.html`
+
+      const div = document.createElement('div')
+      div.appendChild(webview)
+      document.body.appendChild(div)
+    })
+
+    it('does not destroy the webContents when hiding/showing the webview (regression)', (done) => {
+      webview.addEventListener('dom-ready', function () {
+        const instance = webview.getAttribute('guestinstance')
+        assert(instance != null)
+
+        // Wait for event directly since attach happens asynchronously over IPC
+        ipcMain.once('ELECTRON_GUEST_VIEW_MANAGER_ATTACH_GUEST', () => {
+          assert(webview.getWebContents() != null)
+          assert.equal(instance, webview.getAttribute('guestinstance'))
+          done()
+        })
+
+        webview.style.display = 'none'
+        webview.offsetHeight // eslint-disable-line
+        webview.style.display = 'block'
+      }, {once: true})
+      loadWebView(webview, {src: `file://${fixtures}/pages/a.html`})
+    })
+
+    it('does not reload the webContents when hiding/showing the webview (regression)', (done) => {
+      webview.addEventListener('dom-ready', function () {
+        webview.addEventListener('did-start-loading', () => {
+          done(new Error('webview started loading unexpectedly'))
+        })
+
+        // Wait for event directly since attach happens asynchronously over IPC
+        webview.addEventListener('did-attach', () => {
+          done()
+        })
+
+        webview.style.display = 'none'
+        webview.offsetHeight  // eslint-disable-line
+        webview.style.display = 'block'
+      }, {once: true})
+      loadWebView(webview, {src: `file://${fixtures}/pages/a.html`})
+    })
+  })
+
+>>>>>>> .their
   describe('DOM events', () => {
     let div
 
