merged
  result 100644 5c6d871429c592480e1b82c3573a85227304fe91 lib/browser/api/ipc-main.js
  our    100644 2c2978e9734402d4dcfb37d098ccfeaa768f53c0 lib/browser/api/ipc-main.js
@@ -1,16 +1,34 @@
 const EventEmitter = require('events').EventEmitter
 
-const emitter = new EventEmitter()
+let ipcFilters = [];
 
-const removeAllListeners = emitter.removeAllListeners.bind(emitter)
-emitter.removeAllListeners = function (...args) {
-  if (args.length === 0) {
-    throw new Error('Removing all listeners from ipcMain will make Electron internals stop working.  Please specify a event name')
+class IPCMain extends EventEmitter {
+  constructor() {
+    super()
+    // Do not throw exception when channel name is "error".
+    this.on('error', () => {})
+  }
+
+  removeAllListeners(...args) {
+    if (args.length === 0) {
+      throw new Error('Removing all listeners from ipcMain will make Electron internals stop working.  Please specify a event name')
+    }
+    super.removeAllListeners(...args)
+  }
+
+  addFilter(fn) {
+    if (!ipcFilters.some(testFunction => testFunction === fn)) {
+      ipcFilters.push(fn)
+    }
   }
-  removeAllListeners(...args)
-}
 
-// Do not throw exception when channel name is "error".
-emitter.on('error', () => {})
+  removeFilter(fn) {
+    ipcFilters = ipcFilters.filter(testFunction => testFunction === fn)
+  }
+
+  getFilters() {
+    return Object.freeze([].concat(ipcFilters))
+  }
+}
 
-module.exports = emitter
+module.exports = new IPCMain()
changed in both
  base   100644 f5f53f44a312935eaf4db5112923b947dab0876d lib/browser/api/web-contents.js
  our    100644 8f5bd037b14d05db7396bb8b5de1a29fdef167ae lib/browser/api/web-contents.js
  their  100644 aab4fa05cab90a775ee8ba91d53a4bc4fe8aa6f9 lib/browser/api/web-contents.js
@@ -264,10 +264,17 @@
   })
 }
 
+<<<<<<< .our
 // TODO(zcbenz): Remove the stub in 4.0.
 WebContents.prototype.setSize = function () {
   console.error('The WebContents.setSize method has been removed, see',
                 'https://github.com/electron/electron/issues/14120 for more.')
+=======
+// If any one of the filter functions _allows_ the ipc event
+// it is considered allowed.
+const allowIpcEvent = (event, channel, args) => {
+  return ipcMain.getFilters().some(filterFn => filterFn(event, channel, args))
+>>>>>>> .their
 }
 
 // Add JavaScript wrappers for WebContents class.
@@ -281,7 +288,9 @@
 
   // Dispatch IPC messages to the ipc module.
   this.on('ipc-message', function (event, [channel, ...args]) {
-    ipcMain.emit(channel, event, ...args)
+    if (allowIpcEvent(event, channel, args)) {
+      ipcMain.emit(channel, event, ...args)
+    }
   })
   this.on('ipc-message-sync', function (event, [channel, ...args]) {
     Object.defineProperty(event, 'returnValue', {
@@ -290,7 +299,11 @@
       },
       get: function () {}
     })
-    ipcMain.emit(channel, event, ...args)
+    if (allowIpcEvent(event, channel, args)) {
+      ipcMain.emit(channel, event, ...args)
+    } else {
+      event.sendReply([undefined])
+    }
   })
 
   // Handle context menu action request from pepper plugin.
