changed in both
  base   100644 8344df40b44680c4943976f0e19517d8e6cf434c BUILD.gn
  our    100644 d00c4b1e3d3523641210ff20fda41d76c9eb546c BUILD.gn
  their  100644 67ea611f665634200873304c6cd9977a805933ed BUILD.gn
@@ -32,6 +32,12 @@
   enable_desktop_capturer = true
   enable_run_as_node = true
   enable_osr = false
+
+  is_mas_build = false
+}
+
+if (is_mas_build) {
+  assert(is_mac, "It doesn't make sense to build a MAS build on a non-mac platform")
 }
 
 if (is_mas_build) {
@@ -227,7 +233,53 @@
     "//ui/views",
     "//v8",
   ]
+<<<<<<< .our
 
+=======
+  if (enable_desktop_capturer) {
+    deps += [ "//third_party/webrtc/modules/desktop_capture" ]
+  }
+  if (enable_pdf) {
+    deps += [ "//pdf" ]
+  }
+  if (is_mac) {
+    deps += [
+      "//ui/accelerated_widget_mac",
+      "//third_party/crashpad/crashpad/client",
+    ]
+    include_dirs += [
+      # NOTE(nornagon): other chromium files use the full path to include
+      # crashpad; this is just here for compatibility between GN and GYP, so that
+      # the #includes can be agnostic about where crashpad is vendored.
+      "//third_party/crashpad",
+    ]
+  }
+  if (is_linux) {
+    deps += [
+      "//build/config/linux/gtk",
+      "//chrome/browser/ui/libgtkui",
+      "//device/bluetooth",
+      "//ui/events/devices/x11",
+      "//ui/events/platform/x11",
+      "//ui/native_theme",
+      "//ui/views/controls/webview",
+      "//ui/wm",
+    ]
+    configs += [ ":gio_unix" ]
+  }
+  defines = [
+    # Disable warnings for g_settings_list_schemas.
+    "GLIB_DISABLE_DEPRECATION_WARNINGS",
+  ]
+  if (is_component_build) {
+    defines += [
+      # Import V8 symbols from shared library (node.dll / libnode.so)
+      "USING_V8_SHARED",
+      "USING_V8_PLATFORM_SHARED",
+      "USING_V8_BASE_SHARED",
+    ]
+  }
+>>>>>>> .their
   include_dirs = [
     "chromium_src",
     ".",
@@ -385,12 +437,47 @@
   }
 }
 
+<<<<<<< .our
 electron_paks("packed_resources") {
   if (is_mac) {
     output_dir = "$root_gen_dir/electron_repack"
     copy_data_to_bundle = true
   } else {
     output_dir = root_out_dir
+=======
+
+  if (is_mas_build) {
+    deps -= [ "//third_party/crashpad/crashpad/client" ]
+  }
+
+  if (is_mac && !is_mas_build) {
+    libs = [
+      "Squirrel.framework",
+      "ReactiveCocoa.framework",
+      "Mantle.framework",
+    ]
+    cflags_objcc = [
+      "-F", rebase_path("external_binaries", root_build_dir)
+    ]
+    # ReactiveCocoa which is used by Squirrel requires using __weak.
+    cflags_objcc += [ "-fobjc-weak" ]
+  }
+  if (is_linux) {
+    sources += filenames_gypi.lib_sources_linux
+    sources += filenames_gypi.lib_sources_nss
+  }
+  if (is_win) {
+    sources += filenames_gypi.lib_sources_win
+>>>>>>> .their
+  }
+  if (is_mas_build) {
+    sources += [ "atom/browser/api/atom_api_app_mas.mm" ]
+    sources -= [
+      "atom/browser/auto_updater_mac.mm",
+      "atom/common/crash_reporter/crash_reporter_mac.h",
+      "atom/common/crash_reporter/crash_reporter_mac.mm",
+    ]
+    defines += [ "MAS_BUILD" ]
   }
 }
 
@@ -474,6 +561,12 @@
       ":electron_lib",
     ]
     deps = [
+<<<<<<< .our
+=======
+      "//base",
+      "//base:i18n",
+      ":electron_framework_libraries",
+>>>>>>> .their
       ":electron_framework_resources",
       ":electron_framework_libraries",
       ":electron_xibs",
@@ -533,9 +626,15 @@
     ]
     if (!is_mas_build) {
       sources += [
+<<<<<<< .our
         "external_binaries/Mantle.framework",
         "external_binaries/ReactiveCocoa.framework",
         "external_binaries/Squirrel.framework",
+=======
+        "external_binaries/Squirrel.framework",
+        "external_binaries/ReactiveCocoa.framework",
+        "external_binaries/Mantle.framework",
+>>>>>>> .their
       ]
     }
     outputs = [
@@ -553,11 +652,26 @@
     include_dirs = [ "." ]
     libs = [ "AppKit.framework" ]
     info_plist = "atom/app/resources/mac/loginhelper-Info.plist"
+<<<<<<< .our
     extra_substitutions =
         [ "ATOM_BUNDLE_ID=$electron_mac_bundle_id.loginhelper" ]
   }
 
   bundle_data("electron_login_helper_app") {
+=======
+    extra_substitutions = [
+      "ATOM_BUNDLE_ID=$electron_mac_bundle_id.loginhelper"
+    ]
+  }
+
+  bundle_data("electron_login_helper_app") {
+    public_deps = [ ":electron_login_helper" ]
+    sources = [ "$root_out_dir/$electron_login_helper_name.app" ]
+    outputs = [ "{{bundle_contents_dir}}/Library/LoginItems" ]
+  }
+
+  bundle_data("electron_app_resources") {
+>>>>>>> .their
     public_deps = [
       ":electron_login_helper",
     ]
@@ -661,6 +775,8 @@
         "//ui/views/controls/webview",
         "//ui/wm",
         "//ui/wm/public",
+        "//content/public/app:both",
+        "//content",
       ]
 
       libs = [
removed in local
  base   100644 e231e98c5f75f021af9b71d6c5587b7c5349f922 build/node/BUILD.gn
  their  100644 63e090f210db9f62755ae1e086eaa6d44de764ba build/node/BUILD.gn
removed in local
  base   100644 d1e68131dee7972b3dee5be8868ef82a4de8734d build/node/node_override.gypi
  their  100644 b2480a91ed37eed763903f8dfaa368204ed78285 build/node/node_override.gypi
