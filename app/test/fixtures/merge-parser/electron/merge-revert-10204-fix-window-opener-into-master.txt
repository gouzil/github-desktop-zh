changed in both
  base   100644 26193a0afd4cd1299e47b8c7c0ffd04bd66ee316 atom/browser/atom_browser_client.cc
  our    100644 57c4ee582405e6d501ec23940ccb10689ecd64a1 atom/browser/atom_browser_client.cc
  their  100644 f976f83c8762b279ad4fa697f6923c422e4902c2 atom/browser/atom_browser_client.cc
@@ -127,13 +127,19 @@
 
   int process_id = current_instance->GetProcess()->GetID();
   if (!IsRendererSandboxed(process_id)) {
-    if (!RendererUsesNativeWindowOpen(process_id)) {
+    auto web_contents =
+        content::WebContents::FromRenderFrameHost(render_frame_host);
+    if (!WebContentsPreferences::UsesNativeWindowOpen(web_contents)) {
       // non-sandboxed renderers without native window.open should always create
       // a new SiteInstance
       return true;
     }
+<<<<<<< .our
     auto* web_contents =
         content::WebContents::FromRenderFrameHost(render_frame_host);
+=======
+
+>>>>>>> .their
     if (!ChildWebContentsTracker::IsChildWebContents(web_contents)) {
       // Root WebContents should always create new process to make sure
       // native addons are loaded correctly after reload / navigation.
@@ -141,6 +147,17 @@
       //  reuse process to allow synchronous cross-window scripting.)
       return true;
     }
+
+    // In a non-sandboxed renderer with native window open we should
+    // reuse the same site to allow cross-window scripting.  We do
+    // not need to check urls / domains as native window open logic
+    // handles cross site scripting protection.
+    //
+    // NOTE: We know that nativeWindowOpen is enabled at this point
+    // because we check if it is NOT enabled above this point.  We
+    // will only reach this return if sandbox is disabled but
+    // nativeWindowOpen is enabled.
+    return false;
   }
 
   // Create new a SiteInstance if navigating to a different site.
