merged
  result 100644 7eda0e667c90cdd23a50e05aaf0527fe39a0bc4e atom/common/api/atom_api_v8_util.cc
  our    100644 3d80db0c0a4cdbb4c7a78fa7e4266fc6fc87193f atom/common/api/atom_api_v8_util.cc
@@ -12,10 +12,20 @@
 #include "atom/common/native_mate_converters/gurl_converter.h"
 #include "atom/common/node_includes.h"
 #include "base/hash.h"
+#include "base/process/process_handle.h"
+#include "base/strings/stringprintf.h"
 #include "native_mate/dictionary.h"
 #include "url/origin.h"
 #include "v8/include/v8-profiler.h"
 
+// This is defined in later versions of Chromium, remove this if you see
+// compiler complaining duplicate defines.
+#if defined(OS_WIN) || defined(OS_FUCHSIA)
+#define CrPRIdPid "ld"
+#else
+#define CrPRIdPid "d"
+#endif
+
 namespace std {
 
 // The hash function used by DoubleIDWeakMap.
@@ -90,6 +100,16 @@
   return object->GetIdentityHash();
 }
 
+std::string GetContextID(v8::Isolate* isolate) {
+  // When a page is reloaded, V8 and blink may have optimizations that do not
+  // free blink::WebLocalFrame and v8::Context and reuse them for the new page,
+  // while we always recreate node::Environment when a page is loaded.
+  // So the only reliable way to return an identity for a page, is to return the
+  // address of the node::Environment instance.
+  node::Environment* env = node::Environment::GetCurrent(isolate);
+  return base::StringPrintf("%" CrPRIdPid "-%p", base::GetCurrentProcId(), env);
+}
+
 void TakeHeapSnapshot(v8::Isolate* isolate) {
   isolate->GetHeapProfiler()->TakeHeapSnapshot();
 }
@@ -112,6 +132,7 @@
   dict.SetMethod("setHiddenValue", &SetHiddenValue);
   dict.SetMethod("deleteHiddenValue", &DeleteHiddenValue);
   dict.SetMethod("getObjectHash", &GetObjectHash);
+  dict.SetMethod("getContextId", &GetContextID);
   dict.SetMethod("takeHeapSnapshot", &TakeHeapSnapshot);
   dict.SetMethod("setRemoteCallbackFreer", &atom::RemoteCallbackFreer::BindTo);
   dict.SetMethod("setRemoteObjectFreer", &atom::RemoteObjectFreer::BindTo);
merged
  result 100644 2794ce0ad92e082a1bfd97b77bfbf3b49ebe2dca atom/renderer/atom_renderer_client.cc
  our    100644 204f17c2cf0d2d4ec4a71bdbecfcd1cbdc5fc8be atom/renderer/atom_renderer_client.cc
@@ -79,8 +79,6 @@
 void AtomRendererClient::DidCreateScriptContext(
     v8::Handle<v8::Context> context,
     content::RenderFrame* render_frame) {
-  RendererClientBase::DidCreateScriptContext(context, render_frame);
-
   // Only allow node integration for the main frame, unless it is a devtools
   // extension page.
   if (!render_frame->IsMainFrame() && !IsDevToolsExtension(render_frame))
changed in both
  base   100644 461d4e9f8166b86a4dd1202eb4eb5a59b41336a9 atom/renderer/atom_sandboxed_renderer_client.cc
  our    100644 6e29fe45a69f44856d7fca449ec1be4eaf6970a2 atom/renderer/atom_sandboxed_renderer_client.cc
  their  100644 b28d89236c00d8ad0b0da2ffaa6a9080a575bca7 atom/renderer/atom_sandboxed_renderer_client.cc
@@ -178,8 +178,6 @@
 void AtomSandboxedRendererClient::DidCreateScriptContext(
     v8::Handle<v8::Context> context,
     content::RenderFrame* render_frame) {
-  RendererClientBase::DidCreateScriptContext(context, render_frame);
-
   // Only allow preload for the main frame or
   // For devtools we still want to run the preload_bundle script
   if (!render_frame->IsMainFrame() && !IsDevTools(render_frame))
changed in both
  base   100644 6d444778bc1fc9c6445a98fa5a3f1cf155bab359 atom/renderer/renderer_client_base.cc
  our    100644 69490420ef5b8f87e7cb8fd97ebd5ec4509fa1ae atom/renderer/renderer_client_base.cc
  their  100644 eeac3ff276256d0b99e146e0699636638f959464 atom/renderer/renderer_client_base.cc
@@ -16,9 +16,7 @@
 #include "atom/renderer/content_settings_observer.h"
 #include "atom/renderer/preferences_manager.h"
 #include "base/command_line.h"
-#include "base/process/process_handle.h"
 #include "base/strings/string_split.h"
-#include "base/strings/stringprintf.h"
 #include "chrome/renderer/media/chrome_key_systems.h"
 #include "chrome/renderer/printing/print_web_view_helper.h"
 #include "chrome/renderer/tts_dispatcher.h"
@@ -50,14 +48,6 @@
 #include "chrome/renderer/pepper/pepper_helper.h"
 #endif  // defined(ENABLE_PEPPER_FLASH)
 
-// This is defined in later versions of Chromium, remove this if you see
-// compiler complaining duplicate defines.
-#if defined(OS_WIN) || defined(OS_FUCHSIA)
-#define CrPRIdPid "ld"
-#else
-#define CrPRIdPid "d"
-#endif
-
 namespace atom {
 
 namespace {
@@ -92,6 +82,7 @@
 
 RendererClientBase::~RendererClientBase() {}
 
+<<<<<<< .our
 void RendererClientBase::DidCreateScriptContext(
     v8::Handle<v8::Context> context,
     content::RenderFrame* render_frame) {
@@ -105,6 +96,8 @@
   context->Global()->SetPrivate(context, private_key, value);
 }
 
+=======
+>>>>>>> .their
 void RendererClientBase::AddRenderBindings(
     v8::Isolate* isolate,
     v8::Local<v8::Object> binding_object) {
changed in both
  base   100644 c6f766ff939b2862b902bc9cbf34beb42f3677f0 atom/renderer/renderer_client_base.h
  our    100644 f04be0a0fb555fce88aa006c6c6623cc8730d4ed atom/renderer/renderer_client_base.h
  their  100644 3dea78cee775296dea358d9439421884387ff35d atom/renderer/renderer_client_base.h
@@ -21,7 +21,7 @@
   ~RendererClientBase() override;
 
   virtual void DidCreateScriptContext(v8::Handle<v8::Context> context,
-                                      content::RenderFrame* render_frame);
+                                      content::RenderFrame* render_frame) = 0;
   virtual void WillReleaseScriptContext(v8::Handle<v8::Context> context,
                                         content::RenderFrame* render_frame) = 0;
   virtual void DidClearWindowObject(content::RenderFrame* render_frame);
merged
  result 100644 19037b66f42db2ec66f74196a8cd11ba66ed46ee brightray/brightray.gypi
  our    100644 8a945dc0219293d90e30162e4691a4d871071f4f brightray/brightray.gypi
@@ -205,7 +205,6 @@
           'SKIA_DLL',
           'USING_V8_SHARED',
           'WEBKIT_DLL',
-          'V8_ENABLE_CHECKS',
         ],
         'msvs_settings': {
           'VCCLCompilerTool': {
changed in both
  base   100644 80bb4b7cac845516cb16ce2147ff2a252b61f8f6 filenames.gypi
  our    100644 f57860558f06b7e5d8a50f48cfc7e53044df0bc6 filenames.gypi
  their  100644 2215cb4f6d891962c20306d20fa2e0c646ceea80 filenames.gypi
merged
  result 100644 55359bad5c44e1e6ba51cf73c1b4cd6d41b03baf lib/renderer/api/remote.js
  our    100644 59117f8f2dd977fc1817a6b1d540b616ddcb0dae lib/renderer/api/remote.js
@@ -10,7 +10,7 @@
 const remoteObjectCache = v8Util.createIDWeakMap()
 
 // An unique ID that can represent current context.
-const contextId = v8Util.getHiddenValue(global, 'contextId')
+const contextId = v8Util.getContextId()
 
 // Notify the main process when current context is going to be released.
 // Note that when the renderer process is destroyed, the message may not be
changed in both
  base   100644 9081eab5e283658c32b65b66f162e039634b45a3 lib/renderer/web-view/web-view.js
  our    100644 574a2b545597f9d1c05ec9b7147585063e90ae89 lib/renderer/web-view/web-view.js
  their  100644 8cebdf156d92e1e2efd56555a650cea8ca9185ca lib/renderer/web-view/web-view.js
@@ -7,7 +7,7 @@
 const webViewConstants = require('./web-view-constants')
 
 // An unique ID that can represent current context.
-const contextId = v8Util.getHiddenValue(global, 'contextId')
+const contextId = v8Util.getContextId()
 
 // ID generator.
 let nextId = 0
