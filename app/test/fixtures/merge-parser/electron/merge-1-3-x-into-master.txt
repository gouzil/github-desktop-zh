changed in both
  base   100644 ef5ae30a840566e1f66ffb4e6e95b043275f95b3 atom/browser/native_window_views.cc
  our    100644 0dba39942f92d54ba34db7709b73012055680d94 atom/browser/native_window_views.cc
  their  100644 8e9e434d5a90dd446ec6615aaddc0ce2847a66ff atom/browser/native_window_views.cc
@@ -99,11 +99,36 @@
 
 }  // namespace
 
+<<<<<<< .our
 NativeWindowViews::NativeWindowViews(const mate::Dictionary& options,
                                      NativeWindow* parent)
     : NativeWindow(options, parent),
       root_view_(new RootView(this)),
       keyboard_event_handler_(new views::UnhandledKeyboardEventHandler) {
+=======
+NativeWindowViews::NativeWindowViews(
+    brightray::InspectableWebContents* web_contents,
+    const mate::Dictionary& options,
+    NativeWindow* parent)
+    : NativeWindow(web_contents, options, parent),
+      window_(new views::Widget),
+      web_view_(inspectable_web_contents()->GetView()->GetView()),
+      menu_bar_autohide_(false),
+      menu_bar_visible_(false),
+      menu_bar_alt_pressed_(false),
+#if defined(OS_WIN)
+      checked_for_a11y_support_(false),
+      thick_frame_(true),
+#endif
+      keyboard_event_handler_(new views::UnhandledKeyboardEventHandler),
+      disable_count_(0),
+      use_content_size_(false),
+      movable_(true),
+      resizable_(true),
+      maximizable_(true),
+      minimizable_(true),
+      fullscreenable_(true) {
+>>>>>>> .their
   options.Get(options::kTitle, &title_);
 
   bool menu_bar_autohide;
changed in both
  base   100644 d0d45fc53594e07521c2cd1f89cfc17e618707d7 atom/browser/native_window_views.h
  our    100644 ef1e4413ca879980e46f301bccd6c8fe2b1a4611 atom/browser/native_window_views.h
  their  100644 6118e2f9e3732cdb255554aa14a1de73950384e4 atom/browser/native_window_views.h
@@ -16,6 +16,8 @@
 #include "atom/browser/ui/win/message_handler_delegate.h"
 #include "atom/browser/ui/win/taskbar_host.h"
 #include "base/win/scoped_gdi_object.h"
+#include "ui/base/win/accessibility_misc_utils.h"
+#include <UIAutomationCoreApi.h>
 #endif
 
 namespace views {
@@ -241,7 +243,11 @@
   TaskbarHost taskbar_host_;
 
   // Memoized version of a11y check
+<<<<<<< .our
   bool checked_for_a11y_support_ = false;
+=======
+  bool checked_for_a11y_support_;
+>>>>>>> .their
 
   // Whether to show the WS_THICKFRAME style.
   bool thick_frame_ = true;
changed in both
  base   100644 bb6d9858f04555598df6a4001ecae26b52dbee1f atom/browser/native_window_views_win.cc
  our    100644 0e61d18b915924eb3d3d14e40d1cbbd199631bed atom/browser/native_window_views_win.cc
  their  100644 85230addb0c1d50f8223fa994ea0fe37268e856c atom/browser/native_window_views_win.cc
@@ -159,12 +159,20 @@
     // because we still want Chromium to handle returning the actual
     // accessibility object.
     case WM_GETOBJECT: {
+<<<<<<< .our
       if (checked_for_a11y_support_)
         return false;
 
       const DWORD obj_id = static_cast<DWORD>(l_param);
 
       if (obj_id != static_cast<DWORD>(OBJID_CLIENT)) {
+=======
+      if (checked_for_a11y_support_) return false;
+
+      const DWORD obj_id = static_cast<DWORD>(l_param);
+
+      if (obj_id != OBJID_CLIENT) {
+>>>>>>> .their
         return false;
       }
 
@@ -174,7 +182,11 @@
 
       checked_for_a11y_support_ = true;
 
+<<<<<<< .our
       auto* const axState = content::BrowserAccessibilityState::GetInstance();
+=======
+      const auto axState = content::BrowserAccessibilityState::GetInstance();
+>>>>>>> .their
       if (axState && !axState->IsAccessibleBrowser()) {
         axState->OnScreenReaderDetected();
         Browser::Get()->OnAccessibilitySupportChanged();
changed in both
  base   100644 bb9a9b5a6375fd5afd8df6df5be777437b43b59c atom/browser/resources/mac/Info.plist
  our    100644 9094f0f7335edf833d51f688851e6a105de60433 atom/browser/resources/mac/Info.plist
  their  100644 6c1509e3c0482ec44f943d7e2adea3826b1ad05b atom/browser/resources/mac/Info.plist
@@ -17,9 +17,15 @@
   <key>CFBundleIconFile</key>
   <string>electron.icns</string>
   <key>CFBundleVersion</key>
+<<<<<<< .our
   <string>4.0.0</string>
   <key>CFBundleShortVersionString</key>
   <string>4.0.0</string>
+=======
+  <string>1.3.15</string>
+  <key>CFBundleShortVersionString</key>
+  <string>1.3.15</string>
+>>>>>>> .their
   <key>LSApplicationCategoryType</key>
   <string>public.app-category.developer-tools</string>
   <key>LSMinimumSystemVersion</key>
changed in both
  base   100644 599d8b694994ea399e991e7aa85150c84c079785 atom/browser/resources/win/atom.rc
  our    100644 c0bd831e8bddf10180f75cd40694831e2e98622d atom/browser/resources/win/atom.rc
  their  100644 8b925d8fe7bf1d0a746432bd240b0b447ab2c5be atom/browser/resources/win/atom.rc
@@ -56,8 +56,13 @@
 //
 
 VS_VERSION_INFO VERSIONINFO
+<<<<<<< .our
  FILEVERSION 4,0,0,20180821
  PRODUCTVERSION 4,0,0,20180821
+=======
+ FILEVERSION 1,3,15,0
+ PRODUCTVERSION 1,3,15,0
+>>>>>>> .their
  FILEFLAGSMASK 0x3fL
 #ifdef _DEBUG
  FILEFLAGS 0x1L
@@ -74,12 +79,20 @@
         BEGIN
             VALUE "CompanyName", "GitHub, Inc."
             VALUE "FileDescription", "Electron"
+<<<<<<< .our
             VALUE "FileVersion", "4.0.0"
+=======
+            VALUE "FileVersion", "1.3.15"
+>>>>>>> .their
             VALUE "InternalName", "electron.exe"
             VALUE "LegalCopyright", "Copyright (C) 2015 GitHub, Inc. All rights reserved."
             VALUE "OriginalFilename", "electron.exe"
             VALUE "ProductName", "Electron"
+<<<<<<< .our
             VALUE "ProductVersion", "4.0.0"
+=======
+            VALUE "ProductVersion", "1.3.15"
+>>>>>>> .their
             VALUE "SquirrelAwareVersion", "1"
         END
     END
changed in both
  base   100644 7b7655c6cd2e0661a45968636737f5ab3b70467f atom/common/api/atom_api_v8_util.cc
  our    100644 3d80db0c0a4cdbb4c7a78fa7e4266fc6fc87193f atom/common/api/atom_api_v8_util.cc
  their  100644 ddb1075586c1eefaad73789b42e124f00548d939 atom/common/api/atom_api_v8_util.cc
@@ -94,6 +94,7 @@
   isolate->GetHeapProfiler()->TakeHeapSnapshot();
 }
 
+<<<<<<< .our
 void RequestGarbageCollectionForTesting(v8::Isolate* isolate) {
   isolate->RequestGarbageCollectionForTesting(
       v8::Isolate::GarbageCollectionType::kFullGarbageCollection);
@@ -107,6 +108,14 @@
                 v8::Local<v8::Value> unused,
                 v8::Local<v8::Context> context,
                 void* priv) {
+=======
+bool IsSameOrigin(const GURL& l, const GURL& r) {
+  return url::Origin(l).IsSameOriginWith(url::Origin(r));
+}
+
+void Initialize(v8::Local<v8::Object> exports, v8::Local<v8::Value> unused,
+                v8::Local<v8::Context> context, void* priv) {
+>>>>>>> .their
   mate::Dictionary dict(context->GetIsolate(), exports);
   dict.SetMethod("getHiddenValue", &GetHiddenValue);
   dict.SetMethod("setHiddenValue", &SetHiddenValue);
@@ -116,11 +125,16 @@
   dict.SetMethod("setRemoteCallbackFreer", &atom::RemoteCallbackFreer::BindTo);
   dict.SetMethod("setRemoteObjectFreer", &atom::RemoteObjectFreer::BindTo);
   dict.SetMethod("createIDWeakMap", &atom::api::KeyWeakMap<int32_t>::Create);
+<<<<<<< .our
   dict.SetMethod(
       "createDoubleIDWeakMap",
       &atom::api::KeyWeakMap<std::pair<std::string, int32_t>>::Create);
   dict.SetMethod("requestGarbageCollectionForTesting",
                  &RequestGarbageCollectionForTesting);
+=======
+  dict.SetMethod("createDoubleIDWeakMap",
+                 &atom::api::KeyWeakMap<std::pair<int32_t, int32_t>>::Create);
+>>>>>>> .their
   dict.SetMethod("isSameOrigin", &IsSameOrigin);
 }
 
changed in both
  base   100644 a27cb04a4b137f053065b935eab3e1fa6f537d70 atom/common/atom_version.h
  our    100644 65e7d19911559a40b1b258319df5fe0fa180354f atom/common/atom_version.h
  their  100644 94554df10c372f62787e459f3cd451eff54cf561 atom/common/atom_version.h
@@ -5,10 +5,22 @@
 #ifndef ATOM_COMMON_ATOM_VERSION_H_
 #define ATOM_COMMON_ATOM_VERSION_H_
 
+<<<<<<< .our
 #define ATOM_MAJOR_VERSION 4
 #define ATOM_MINOR_VERSION 0
 #define ATOM_PATCH_VERSION 0
 #define ATOM_PRE_RELEASE_VERSION -nightly.20180821
+=======
+#define ATOM_MAJOR_VERSION 1
+#define ATOM_MINOR_VERSION 3
+#define ATOM_PATCH_VERSION 15
+
+#define ATOM_VERSION_IS_RELEASE 1
+
+#ifndef ATOM_TAG
+# define ATOM_TAG ""
+#endif
+>>>>>>> .their
 
 #ifndef ATOM_STRINGIFY
 #define ATOM_STRINGIFY(n) ATOM_STRINGIFY_HELPER(n)
changed in both
  base   100644 dd28ad7a97b3fc9d45428ca28b8c363d5d7b1339 atom/renderer/api/atom_api_web_frame.cc
  our    100644 f0f7ef249d73876f7107d3d3865e8fc71ee33945 atom/renderer/api/atom_api_web_frame.cc
  their  100644 8e6d1c15e1f35902963f0558d126077b15d272bf atom/renderer/api/atom_api_web_frame.cc
@@ -179,12 +179,26 @@
 }
 
 void WebFrame::SetVisualZoomLevelLimits(double min_level, double max_level) {
+<<<<<<< .our
   web_frame_->View()->SetDefaultPageScaleLimits(min_level, max_level);
   web_frame_->View()->SetIgnoreViewportTagScaleLimits(true);
 }
 
 void WebFrame::SetLayoutZoomLevelLimits(double min_level, double max_level) {
   web_frame_->View()->ZoomLimitsChanged(min_level, max_level);
+=======
+  web_frame_->view()->setDefaultPageScaleLimits(min_level, max_level);
+}
+
+void WebFrame::SetLayoutZoomLevelLimits(double min_level, double max_level) {
+  web_frame_->view()->zoomLimitsChanged(min_level, max_level);
+}
+
+v8::Local<v8::Value> WebFrame::RegisterEmbedderCustomElement(
+    const base::string16& name, v8::Local<v8::Object> options) {
+  blink::WebExceptionCode c = 0;
+  return web_frame_->document().registerEmbedderCustomElement(name, options, c);
+>>>>>>> .their
 }
 
 v8::Local<v8::Value> WebFrame::RegisterEmbedderCustomElement(
@@ -510,6 +524,7 @@
                  &WebFrame::SetIsolatedWorldHumanReadableName)
       .SetMethod("getResourceUsage", &WebFrame::GetResourceUsage)
       .SetMethod("clearCache", &WebFrame::ClearCache)
+<<<<<<< .our
       .SetMethod("getFrameForSelector", &WebFrame::GetFrameForSelector)
       .SetMethod("findFrameByName", &WebFrame::FindFrameByName)
       .SetProperty("opener", &WebFrame::Opener)
@@ -519,6 +534,10 @@
       .SetProperty("nextSibling", &WebFrame::NextSibling)
       .SetProperty("routingId", &WebFrame::RoutingId)
       .SetMethod("findFrameByRoutingId", &WebFrame::FindFrameByRoutingId);
+=======
+      // TODO(kevinsawicki): Remove in 2.0, deprecate before then with warnings
+      .SetMethod("setZoomLevelLimits", &WebFrame::SetVisualZoomLevelLimits);
+>>>>>>> .their
 }
 
 }  // namespace api
changed in both
  base   100644 7b2401dd4077b5e7a067b54dd2a4bead9f1d9ca3 atom/renderer/api/atom_api_web_frame.h
  our    100644 4cc6386abcb41cfa29fdc002f6fb267329bb112d atom/renderer/api/atom_api_web_frame.h
  their  100644 c2706708beab5bdc1fa5f98cfa11a306611100ad atom/renderer/api/atom_api_web_frame.h
changed in both
  base   100644 52eba31d0aee456320d7e64bb1d0671fb97d02a1 common.gypi
  our    100644 676d1e904127066e4a3d313106f15406fcbed8b6 common.gypi
  their  100644 61946656dd8432f337fff7af308e672aaf815ae2 common.gypi
changed in both
  base   100644 235c044c81e52314468ba1775f9fcaae7541962d docs/api/web-contents.md
  our    100644 8990fe2e97ab62eafdd3f7a4eb8ee782415124c5 docs/api/web-contents.md
  their  100644 016daa345fc636144eb830111ff499635d024c96 docs/api/web-contents.md
@@ -873,6 +873,17 @@
 * `minimumLevel` Number
 * `maximumLevel` Number
 
+<<<<<<< .our
+=======
+**Deprecated:** Call `setVisualZoomLevelLimits` instead to set the visual zoom
+level limits. This method will be removed in Electron 2.0.
+
+#### `contents.setVisualZoomLevelLimits(minimumLevel, maximumLevel)`
+
+* `minimumLevel` Number
+* `maximumLevel` Number
+
+>>>>>>> .their
 Sets the maximum and minimum pinch-to-zoom level.
 
 #### `contents.setLayoutZoomLevelLimits(minimumLevel, maximumLevel)`
changed in both
  base   100644 8a0e1dd6a9b1b4f83b30701d3b8e05e049d6a56b docs/api/web-frame.md
  our    100644 989060ef3e50c5d93db1a914997f1d190edf3cf5 docs/api/web-frame.md
  their  100644 062c3310d5d1f879ee5ace8b0e672f8fb7910df5 docs/api/web-frame.md
@@ -55,6 +55,24 @@
 * `minimumLevel` Number
 * `maximumLevel` Number
 
+<<<<<<< .our
+=======
+**Deprecated:** Call `setVisualZoomLevelLimits` instead to set the visual zoom
+level limits. This method will be removed in Electron 2.0.
+
+### `webFrame.setVisualZoomLevelLimits(minimumLevel, maximumLevel)`
+
+* `minimumLevel` Number
+* `maximumLevel` Number
+
+Sets the maximum and minimum pinch-to-zoom level.
+
+### `webFrame.setLayoutZoomLevelLimits(minimumLevel, maximumLevel)`
+
+* `minimumLevel` Number
+* `maximumLevel` Number
+
+>>>>>>> .their
 Sets the maximum and minimum layout-based (i.e. non-visual) zoom level.
 
 ### `webFrame.setSpellCheckProvider(language, autoCorrectWord, provider)`
removed in local
  base   100644 896fd07000b38da3e7df62464670a8a65ac53868 docs/tutorial/planned-breaking-changes.md
  their  100644 525ffecb81702a2fbd9d6152ba247decf85b39fe docs/tutorial/planned-breaking-changes.md
changed in both
  base   100644 6cf495afbc1fde1ef313db9834170084c131b31d electron.gyp
  our    100644 944ddab2a3fd879044e31677e4bac2843fffbdee electron.gyp
  their  100644 26793815ace126ff4f0bef84af4c1c786b3cd8b3 electron.gyp
@@ -4,8 +4,12 @@
     'product_name%': 'Electron',
     'company_name%': 'GitHub, Inc',
     'company_abbr%': 'github',
+<<<<<<< .our
     'version%': '4.0.0-nightly.20180821',
     'js2c_input_dir': '<(SHARED_INTERMEDIATE_DIR)/js2c',
+=======
+    'version%': '1.3.15',
+>>>>>>> .their
   },
   'includes': [
     'features.gypi',
@@ -371,9 +375,13 @@
               '-lcomdlg32.lib',
               '-lwininet.lib',
               '-lwinmm.lib',
+<<<<<<< .our
               '-lcrypt32.lib',
               '-luiautomationcore.lib',
               '-lPropsys.lib'
+=======
+              '-luiautomationcore.lib',
+>>>>>>> .their
             ],
           },
           'dependencies': [
changed in both
  base   100644 c6ad57321baacf5277cfef75e7f1e5683dacbcc4 lib/browser/api/app.js
  our    100644 66f6ae651acf10fb19b8ec068fc5280850dd3d91 lib/browser/api/app.js
  their  100644 8e7760593bde28502b681a1f71703979098e2790 lib/browser/api/app.js
changed in both
  base   100644 ecfdda05f8db327ffc7c846136126d072848a6eb lib/browser/api/browser-window.js
  our    100644 cb523496d65c7018c30054621cfdeb1281f9db6a lib/browser/api/browser-window.js
  their  100644 703fdcbfb450ce850e5ad8f7319eed355312e065 lib/browser/api/browser-window.js
@@ -217,9 +217,12 @@
   },
   capturePage (...args) {
     return this.webContents.capturePage(...args)
+<<<<<<< .our
   },
   setTouchBar (touchBar) {
     electron.TouchBar._setOnWindow(touchBar, this)
+=======
+>>>>>>> .their
   }
 })
 
changed in both
  base   100644 d24a1f98a7d8c27a9cec0c00d9fdb4553dd3d90f lib/browser/api/dialog.js
  our    100644 d7545a7687a6c168a79c09c9e7866af05d336d12 lib/browser/api/dialog.js
  their  100644 5002c18b150e0574d03215f331172e6d6609109b lib/browser/api/dialog.js
@@ -73,9 +73,13 @@
 module.exports = {
   showOpenDialog: function (...args) {
     checkAppInitialized()
+<<<<<<< .our
 
     let [window, options, callback] = parseArgs(...args)
 
+=======
+    let [window, options, callback] = parseArgs(...args)
+>>>>>>> .their
     if (options == null) {
       options = {
         title: 'Open',
@@ -136,9 +140,13 @@
 
   showSaveDialog: function (...args) {
     checkAppInitialized()
+<<<<<<< .our
 
     let [window, options, callback] = parseArgs(...args)
 
+=======
+    let [window, options, callback] = parseArgs(...args)
+>>>>>>> .their
     if (options == null) {
       options = {
         title: 'Save'
@@ -194,9 +202,13 @@
 
   showMessageBox: function (...args) {
     checkAppInitialized()
+<<<<<<< .our
 
     let [window, options, callback] = parseArgs(...args)
 
+=======
+    let [window, options, callback] = parseArgs(...args)
+>>>>>>> .their
     if (options == null) {
       options = {
         type: 'none'
@@ -281,6 +293,7 @@
 
   showErrorBox: function (...args) {
     return binding.showErrorBox(...args)
+<<<<<<< .our
   },
 
   showCertificateTrustDialog: function (...args) {
@@ -302,6 +315,8 @@
     }
 
     return binding.showCertificateTrustDialog(window, certificate, message, callback)
+=======
+>>>>>>> .their
   }
 }
 
changed in both
  base   100644 33ce779521fa4dd869872733405529662e1818c0 lib/browser/api/navigation-controller.js
  our    100644 7eb21ddb3ea9c8bcec994e2fc8bcbcf6be4b82f0 lib/browser/api/navigation-controller.js
  their  100644 0bccf0c6dcc5b70048566bf008fcfa41969f2610 lib/browser/api/navigation-controller.js
changed in both
  base   100644 560b323d619bcdc9a8b842b4cd771125f0640d3a lib/browser/api/web-contents.js
  our    100644 8f5bd037b14d05db7396bb8b5de1a29fdef167ae lib/browser/api/web-contents.js
  their  100644 53c6c0f15ff9fad632dbe4bcbaa38b7ec52772c6 lib/browser/api/web-contents.js
@@ -109,7 +109,19 @@
   'insertCSS',
   'insertText',
   'setLayoutZoomLevelLimits',
+<<<<<<< .our
   'setVisualZoomLevelLimits'
+=======
+  'setVisualZoomLevelLimits',
+  'setZoomFactor',
+  'setZoomLevel',
+  // TODO(kevinsawicki): Remove in 2.0, deprecate before then with warnings
+  'setZoomLevelLimits'
+]
+const webFrameMethodsWithResult = [
+  'getZoomFactor',
+  'getZoomLevel'
+>>>>>>> .their
 ]
 const webFrameMethodsWithResult = []
 
@@ -313,6 +325,16 @@
     this.reload()
   })
 
+<<<<<<< .our
+=======
+  // Delays the page-title-updated event to next tick.
+  this.on('-page-title-updated', function (...args) {
+    setImmediate(() => {
+      this.emit('page-title-updated', ...args)
+    })
+  })
+
+>>>>>>> .their
   app.emit('web-contents-created', {}, this)
 }
 
changed in both
  base   100644 776ab91fec96619f04fbd4cff2d27a6dde736096 lib/browser/guest-window-manager.js
  our    100644 7253c1942b0956ae6b9b0c80a23470fc26669b8a lib/browser/guest-window-manager.js
  their  100644 7e8bf2e5652cf6c88e8d3d7e8b248f791b91009c lib/browser/guest-window-manager.js
@@ -2,7 +2,10 @@
 
 const {BrowserWindow, ipcMain, webContents} = require('electron')
 const {isSameOrigin} = process.atomBinding('v8_util')
+<<<<<<< .our
 const parseFeaturesString = require('../common/parse-features-string')
+=======
+>>>>>>> .their
 
 const hasProp = {}.hasOwnProperty
 const frameToGuest = new Map()
@@ -102,6 +105,7 @@
   return guestId
 }
 
+<<<<<<< .our
 // Create a new guest created by |embedder| with |options|.
 const createGuest = function (embedder, url, referrer, frameName, options, postData) {
   let guest = frameToGuest.get(frameName)
@@ -158,6 +162,8 @@
   return setupGuest(embedder, frameName, guest, options)
 }
 
+=======
+>>>>>>> .their
 const getGuestWindow = function (guestContents) {
   let guestWindow = BrowserWindow.fromWebContents(guestContents)
   if (guestWindow == null) {
@@ -180,6 +186,7 @@
 // The W3C does not have anything on this, but from my understanding of the
 // security model of |window.opener|, this should be fine.
 const canAccessWindow = function (sender, target) {
+<<<<<<< .our
   return (target.getLastWebPreferences().openerId === sender.id) ||
          (sender.getLastWebPreferences().nodeIntegration === true) ||
          isSameOrigin(sender.getURL(), target.getURL())
@@ -254,6 +261,15 @@
 ipcMain.on('ELECTRON_GUEST_WINDOW_MANAGER_INTERNAL_WINDOW_OPEN', function (event, url, referrer,
                                                                   frameName, disposition, options,
                                                                   additionalFeatures, postData) {
+=======
+  return (target.getWebPreferences().openerId === sender.id) ||
+         (sender.getWebPreferences().nodeIntegration === true) ||
+         isSameOrigin(sender.getURL(), target.getURL())
+}
+
+// Routed window.open messages.
+ipcMain.on('ELECTRON_GUEST_WINDOW_MANAGER_WINDOW_OPEN', function (event, url, frameName, disposition, options) {
+>>>>>>> .their
   options = mergeBrowserWindowOptions(event.sender, options)
   event.sender.emit('new-window', event, url, frameName, disposition, options, additionalFeatures, referrer)
   const {newGuest} = event
@@ -318,7 +334,11 @@
   // The W3C does not seem to have word on how postMessage should work when the
   // origins do not match, so we do not do |canAccessWindow| check here since
   // postMessage across origins is useful and not harmful.
+<<<<<<< .our
   if (targetOrigin === '*' || isSameOrigin(guestContents.getURL(), targetOrigin)) {
+=======
+  if (guestContents.getURL().indexOf(targetOrigin) === 0 || targetOrigin === '*') {
+>>>>>>> .their
     const sourceId = event.sender.id
     guestContents.send('ELECTRON_GUEST_WINDOW_POSTMESSAGE', sourceId, message, sourceOrigin)
   }
changed in both
  base   100644 fb1688d0cc74a75b3299768d79df625893591a24 lib/browser/init.js
  our    100644 bed3d912ab8be3ca4f21de04e801bb42dc12a528 lib/browser/init.js
  their  100644 56d4f0f7ae7599339ae979c5ad9231a5948b8e4d lib/browser/init.js
changed in both
  base   100644 1917c65e655836872e72cf1588bbaeedf4b2a099 lib/browser/objects-registry.js
  our    100644 f03a23d2f6910d6555bb9469180d1b60b94bc313 lib/browser/objects-registry.js
  their  100644 b26374219f4530ad8d50ecc326b9d2ca5257900c lib/browser/objects-registry.js
@@ -26,11 +26,19 @@
     const id = this.saveToStorage(obj)
 
     // Add object to the set of referenced objects.
+<<<<<<< .our
     const ownerKey = getOwnerKey(webContents, contextId)
     let owner = this.owners[ownerKey]
     if (!owner) {
       owner = this.owners[ownerKey] = new Set()
       this.registerDeleteListener(webContents, contextId)
+=======
+    const webContentsId = webContents.getId()
+    let owner = this.owners[webContentsId]
+    if (!owner) {
+      owner = this.owners[webContentsId] = new Set()
+      this.registerDeleteListener(webContents, webContentsId)
+>>>>>>> .their
     }
     if (!owner.has(id)) {
       owner.add(id)
@@ -101,6 +109,7 @@
     }
   }
 
+<<<<<<< .our
   // Private: Clear the storage when renderer process is destroyed.
   registerDeleteListener (webContents, contextId) {
     const processId = webContents.getProcessId()
@@ -108,6 +117,14 @@
       if (deletedProcessId === processId) {
         webContents.removeListener('render-view-deleted', listener)
         this.clear(webContents, contextId)
+=======
+  // Private: Clear the storage when webContents is reloaded/navigated.
+  registerDeleteListener (webContents, webContentsId) {
+    const listener = (event, deletedProcessId) => {
+      if (deletedProcessId === webContentsId) {
+        webContents.removeListener('render-view-deleted', listener)
+        this.clear(webContentsId)
+>>>>>>> .their
       }
     }
     webContents.on('render-view-deleted', listener)
changed in both
  base   100644 31e5a37732c709cf7843756b0f96d1d558a6babf lib/browser/rpc-server.js
  our    100644 ff9f77321de3a4145946b67f3fe2a597f98e2510 lib/browser/rpc-server.js
  their  100644 06e6f3be87c2b23bfd56d25022bd5814fa9e4b2c lib/browser/rpc-server.js
@@ -431,6 +431,7 @@
   }
 })
 
+<<<<<<< .our
 // Implements window.close()
 ipcMain.on('ELECTRON_BROWSER_WINDOW_CLOSE', function (event) {
   const window = event.sender.getOwnerBrowserWindow()
@@ -463,3 +464,35 @@
     }
   }
 })
+=======
+// Implements window.alert(message, title)
+ipcMain.on('ELECTRON_BROWSER_WINDOW_ALERT', function (event, message, title) {
+  if (message == null) message = ''
+  if (title == null) title = ''
+
+  event.returnValue = electron.dialog.showMessageBox(event.sender.getOwnerBrowserWindow(), {
+    message: `${message}`,
+    title: `${title}`,
+    buttons: ['OK']
+  })
+})
+
+// Implements window.confirm(message, title)
+ipcMain.on('ELECTRON_BROWSER_WINDOW_CONFIRM', function (event, message, title) {
+  if (message == null) message = ''
+  if (title == null) title = ''
+
+  event.returnValue = !electron.dialog.showMessageBox(event.sender.getOwnerBrowserWindow(), {
+    message: `${message}`,
+    title: `${title}`,
+    buttons: ['OK', 'Cancel'],
+    cancelId: 1
+  })
+})
+
+// Implements window.close()
+ipcMain.on('ELECTRON_BROWSER_WINDOW_CLOSE', function (event) {
+  event.sender.getOwnerBrowserWindow().close()
+  event.returnValue = null
+})
+>>>>>>> .their
changed in both
  base   100644 459c392bc1888bda82a666eec21d0bb56162374a lib/common/api/callbacks-registry.js
  our    100644 6a1c63b20413753eeb9c5f8d190a9f5d2f303d22 lib/common/api/callbacks-registry.js
  their  100644 126694d154e47e848cb0783975272c912ea81537 lib/common/api/callbacks-registry.js
@@ -40,7 +40,12 @@
   }
 
   get (id) {
+<<<<<<< .our
     return this.callbacks[id] || function () {}
+=======
+    var ref
+    return (ref = this.callbacks[id]) != null ? ref : function () {}
+>>>>>>> .their
   }
 
   apply (id, ...args) {
changed in both
  base   100644 0ffd97a7c53967ac8e2f547228b72a6a05f81d75 lib/common/init.js
  our    100644 b424768414b857b485bd5e29bfce504de6f1d749 lib/common/init.js
  their  100644 127e5e337eb0b41993df960346014fe9222cc894 lib/common/init.js
@@ -1,7 +1,21 @@
 const timers = require('timers')
 const util = require('util')
 
+<<<<<<< .our
 process.atomBinding = require('./atom-binding-setup')(process.binding, process.type)
+=======
+const {binding} = process
+
+process.atomBinding = function (name) {
+  try {
+    return binding('atom_' + process.type + '_' + name)
+  } catch (error) {
+    if (/No such module/.test(error.message)) {
+      return binding('atom_common_' + name)
+    }
+  }
+}
+>>>>>>> .their
 
 // setImmediate and process.nextTick makes use of uv_check and uv_prepare to
 // run the callbacks, however since we only run uv loop on requests, the
changed in both
  base   100644 a3a4443413d32d46a57f4a9667f7b5c0b86abcdb lib/renderer/api/remote.js
  our    100644 59117f8f2dd977fc1817a6b1d540b616ddcb0dae lib/renderer/api/remote.js
  their  100644 c3c8e3b89cd1458c6cfae6940bd9ff8ea54e3605 lib/renderer/api/remote.js
@@ -104,7 +104,11 @@
 // Populate object's members from descriptors.
 // The |ref| will be kept referenced by |members|.
 // This matches |getObjectMemebers| in rpc-server.
+<<<<<<< .our
 function setObjectMembers (ref, object, metaId, members) {
+=======
+const setObjectMembers = function (ref, object, metaId, members) {
+>>>>>>> .their
   if (!Array.isArray(members)) return
 
   for (let member of members) {
@@ -113,11 +117,22 @@
     let descriptor = { enumerable: member.enumerable }
     if (member.type === 'method') {
       const remoteMemberFunction = function (...args) {
+<<<<<<< .our
         let command
         if (this && this.constructor === remoteMemberFunction) {
           command = 'ELECTRON_BROWSER_MEMBER_CONSTRUCTOR'
         } else {
           command = 'ELECTRON_BROWSER_MEMBER_CALL'
+=======
+        if (this && this.constructor === remoteMemberFunction) {
+          // Constructor call.
+          let ret = ipcRenderer.sendSync('ELECTRON_BROWSER_MEMBER_CONSTRUCTOR', metaId, member.name, wrapArgs(args))
+          return metaToValue(ret)
+        } else {
+          // Call member function.
+          let ret = ipcRenderer.sendSync('ELECTRON_BROWSER_MEMBER_CALL', metaId, member.name, wrapArgs(args))
+          return metaToValue(ret)
+>>>>>>> .their
         }
         const ret = ipcRenderer.sendSync(command, contextId, metaId, member.name, wrapArgs(args))
         return metaToValue(ret)
@@ -208,6 +223,7 @@
 }
 
 // Convert meta data from browser into real value.
+<<<<<<< .our
 function metaToValue (meta) {
   const types = {
     value: () => meta.value,
@@ -218,6 +234,56 @@
     date: () => new Date(meta.value),
     exception: () => { throw metaToException(meta) }
   }
+=======
+const metaToValue = function (meta) {
+  var el, i, len, ref1, results, ret
+  switch (meta.type) {
+    case 'value':
+      return meta.value
+    case 'array':
+      ref1 = meta.members
+      results = []
+      for (i = 0, len = ref1.length; i < len; i++) {
+        el = ref1[i]
+        results.push(metaToValue(el))
+      }
+      return results
+    case 'buffer':
+      return Buffer.from(meta.value)
+    case 'promise':
+      return Promise.resolve({
+        then: metaToValue(meta.then)
+      })
+    case 'error':
+      return metaToPlainObject(meta)
+    case 'date':
+      return new Date(meta.value)
+    case 'exception':
+      throw new Error(meta.message + '\n' + meta.stack)
+    default:
+      if (remoteObjectCache.has(meta.id)) return remoteObjectCache.get(meta.id)
+
+      if (meta.type === 'function') {
+        // A shadow class to represent the remote function object.
+        let remoteFunction = function (...args) {
+          if (this && this.constructor === remoteFunction) {
+            // Constructor call.
+            let obj = ipcRenderer.sendSync('ELECTRON_BROWSER_CONSTRUCTOR', meta.id, wrapArgs(args))
+            // Returning object in constructor will replace constructed object
+            // with the returned object.
+            // http://stackoverflow.com/questions/1978049/what-values-can-a-constructor-return-to-avoid-returning-this
+            return metaToValue(obj)
+          } else {
+            // Function call.
+            let obj = ipcRenderer.sendSync('ELECTRON_BROWSER_FUNCTION_CALL', meta.id, wrapArgs(args))
+            return metaToValue(obj)
+          }
+        }
+        ret = remoteFunction
+      } else {
+        ret = {}
+      }
+>>>>>>> .their
 
   if (meta.type in types) {
     return types[meta.type]()
changed in both
  base   100644 2356a81dda2ef366a22837825eb847aa8bcfdc3b lib/renderer/init.js
  our    100644 2470a5e8be80e770b0c03f6a439a71e72ae12a1b lib/renderer/init.js
  their  100644 5cee59059a2c1c9c736b77c55ecf0ebe772ff80b lib/renderer/init.js
@@ -26,6 +26,7 @@
 
 // Use electron module after everything is ready.
 
+<<<<<<< .our
 const {
   warnAboutNodeWithRemoteContent,
   warnAboutDisabledWebSecurity,
@@ -39,6 +40,23 @@
 } = require('./security-warnings')
 
 require('./web-frame-init')()
+=======
+// Call webFrame method.
+electron.ipcRenderer.on('ELECTRON_INTERNAL_RENDERER_WEB_FRAME_METHOD', (event, method, args) => {
+  electron.webFrame[method](...args)
+})
+
+electron.ipcRenderer.on('ELECTRON_INTERNAL_RENDERER_SYNC_WEB_FRAME_METHOD', (event, requestId, method, args) => {
+  const result = electron.webFrame[method](...args)
+  event.sender.send(`ELECTRON_INTERNAL_BROWSER_SYNC_WEB_FRAME_RESPONSE_${requestId}`, result)
+})
+
+electron.ipcRenderer.on('ELECTRON_INTERNAL_RENDERER_ASYNC_WEB_FRAME_METHOD', (event, requestId, method, args) => {
+  electron.webFrame[method](...args, function (result) {
+    event.sender.send(`ELECTRON_INTERNAL_BROWSER_ASYNC_WEB_FRAME_RESPONSE_${requestId}`, result)
+  })
+})
+>>>>>>> .their
 
 // Process command line arguments.
 let nodeIntegration = 'false'
changed in both
  base   100644 29cf9f5acaec7093d4cdfb3987c0a892aa348ec6 lib/renderer/override.js
  our    100644 fdeb6605a5cc5cae194ef9d31265b73b893822eb lib/renderer/override.js
  their  100644 db35904f95236f7ece5bdafd8858eefd46a81ba1 lib/renderer/override.js
@@ -1,9 +1,251 @@
 'use strict'
 
 const {ipcRenderer} = require('electron')
+<<<<<<< .our
 
 const {guestInstanceId, openerId} = process
 const hiddenPage = process.argv.includes('--hidden-page')
 const usesNativeWindowOpen = process.argv.includes('--native-window-open')
 
 require('./window-setup')(ipcRenderer, guestInstanceId, openerId, hiddenPage, usesNativeWindowOpen)
+=======
+
+const {defineProperty} = Object
+
+// Helper function to resolve relative url.
+const a = window.top.document.createElement('a')
+const resolveURL = function (url) {
+  a.href = url
+  return a.href
+}
+
+// Window object returned by "window.open".
+const BrowserWindowProxy = (function () {
+  BrowserWindowProxy.proxies = {}
+
+  BrowserWindowProxy.getOrCreate = function (guestId) {
+    let proxy = this.proxies[guestId]
+    if (proxy == null) {
+      proxy = new BrowserWindowProxy(guestId)
+      this.proxies[guestId] = proxy
+    }
+    return proxy
+  }
+
+  BrowserWindowProxy.remove = function (guestId) {
+    delete this.proxies[guestId]
+  }
+
+  function BrowserWindowProxy (guestId1) {
+    defineProperty(this, 'guestId', {
+      configurable: false,
+      enumerable: true,
+      writeable: false,
+      value: guestId1
+    })
+
+    this.closed = false
+    ipcRenderer.once('ELECTRON_GUEST_WINDOW_MANAGER_WINDOW_CLOSED_' + this.guestId, () => {
+      BrowserWindowProxy.remove(this.guestId)
+      this.closed = true
+    })
+  }
+
+  BrowserWindowProxy.prototype.close = function () {
+    ipcRenderer.send('ELECTRON_GUEST_WINDOW_MANAGER_WINDOW_CLOSE', this.guestId)
+  }
+
+  BrowserWindowProxy.prototype.focus = function () {
+    ipcRenderer.send('ELECTRON_GUEST_WINDOW_MANAGER_WINDOW_METHOD', this.guestId, 'focus')
+  }
+
+  BrowserWindowProxy.prototype.blur = function () {
+    ipcRenderer.send('ELECTRON_GUEST_WINDOW_MANAGER_WINDOW_METHOD', this.guestId, 'blur')
+  }
+
+  BrowserWindowProxy.prototype.print = function () {
+    ipcRenderer.send('ELECTRON_GUEST_WINDOW_MANAGER_WEB_CONTENTS_METHOD', this.guestId, 'print')
+  }
+
+  defineProperty(BrowserWindowProxy.prototype, 'location', {
+    get: function () {
+      return ipcRenderer.sendSync('ELECTRON_GUEST_WINDOW_MANAGER_WEB_CONTENTS_METHOD_SYNC', this.guestId, 'getURL')
+    },
+    set: function (url) {
+      url = resolveURL(url)
+      return ipcRenderer.sendSync('ELECTRON_GUEST_WINDOW_MANAGER_WEB_CONTENTS_METHOD_SYNC', this.guestId, 'loadURL', url)
+    }
+  })
+
+  BrowserWindowProxy.prototype.postMessage = function (message, targetOrigin) {
+    if (targetOrigin == null) {
+      targetOrigin = '*'
+    }
+    ipcRenderer.send('ELECTRON_GUEST_WINDOW_MANAGER_WINDOW_POSTMESSAGE', this.guestId, message, targetOrigin, window.location.origin)
+  }
+
+  BrowserWindowProxy.prototype['eval'] = function (...args) {
+    ipcRenderer.send('ELECTRON_GUEST_WINDOW_MANAGER_WEB_CONTENTS_METHOD', this.guestId, 'executeJavaScript', ...args)
+  }
+
+  return BrowserWindowProxy
+})()
+
+if (process.guestInstanceId == null) {
+  // Override default window.close.
+  window.close = function () {
+    ipcRenderer.sendSync('ELECTRON_BROWSER_WINDOW_CLOSE')
+  }
+}
+
+// Make the browser window or guest view emit "new-window" event.
+window.open = function (url, frameName, features) {
+  var feature, guestId, i, j, len, len1, name, options, ref1, ref2, value
+  if (frameName == null) {
+    frameName = ''
+  }
+  if (features == null) {
+    features = ''
+  }
+  options = {}
+
+  const ints = ['x', 'y', 'width', 'height', 'minWidth', 'maxWidth', 'minHeight', 'maxHeight', 'zoomFactor']
+  const webPreferences = ['zoomFactor', 'nodeIntegration', 'preload']
+  const disposition = 'new-window'
+
+  // Make sure to get rid of excessive whitespace in the property name
+  ref1 = features.split(/,\s*/)
+  for (i = 0, len = ref1.length; i < len; i++) {
+    feature = ref1[i]
+    ref2 = feature.split(/\s*=/)
+    name = ref2[0]
+    value = ref2[1]
+    value = value === 'yes' || value === '1' ? true : value === 'no' || value === '0' ? false : value
+    if (webPreferences.includes(name)) {
+      if (options.webPreferences == null) {
+        options.webPreferences = {}
+      }
+      options.webPreferences[name] = value
+    } else {
+      options[name] = value
+    }
+  }
+  if (options.left) {
+    if (options.x == null) {
+      options.x = options.left
+    }
+  }
+  if (options.top) {
+    if (options.y == null) {
+      options.y = options.top
+    }
+  }
+  if (options.title == null) {
+    options.title = frameName
+  }
+  if (options.width == null) {
+    options.width = 800
+  }
+  if (options.height == null) {
+    options.height = 600
+  }
+
+  // Resolve relative urls.
+  if (url == null || url === '') {
+    url = 'about:blank'
+  } else {
+    url = resolveURL(url)
+  }
+  for (j = 0, len1 = ints.length; j < len1; j++) {
+    name = ints[j]
+    if (options[name] != null) {
+      options[name] = parseInt(options[name], 10)
+    }
+  }
+  guestId = ipcRenderer.sendSync('ELECTRON_GUEST_WINDOW_MANAGER_WINDOW_OPEN', url, frameName, disposition, options)
+  if (guestId) {
+    return BrowserWindowProxy.getOrCreate(guestId)
+  } else {
+    return null
+  }
+}
+
+window.alert = function (message, title) {
+  ipcRenderer.sendSync('ELECTRON_BROWSER_WINDOW_ALERT', message, title)
+}
+
+window.confirm = function (message, title) {
+  return ipcRenderer.sendSync('ELECTRON_BROWSER_WINDOW_CONFIRM', message, title)
+}
+
+// But we do not support prompt().
+window.prompt = function () {
+  throw new Error('prompt() is and will not be supported.')
+}
+
+if (process.openerId != null) {
+  window.opener = BrowserWindowProxy.getOrCreate(process.openerId)
+}
+
+ipcRenderer.on('ELECTRON_GUEST_WINDOW_POSTMESSAGE', function (event, sourceId, message, sourceOrigin) {
+  // Manually dispatch event instead of using postMessage because we also need to
+  // set event.source.
+  event = document.createEvent('Event')
+  event.initEvent('message', false, false)
+  event.data = message
+  event.origin = sourceOrigin
+  event.source = BrowserWindowProxy.getOrCreate(sourceId)
+  window.dispatchEvent(event)
+})
+
+// Forward history operations to browser.
+var sendHistoryOperation = function (...args) {
+  ipcRenderer.send('ELECTRON_NAVIGATION_CONTROLLER', ...args)
+}
+
+var getHistoryOperation = function (...args) {
+  return ipcRenderer.sendSync('ELECTRON_SYNC_NAVIGATION_CONTROLLER', ...args)
+}
+
+window.history.back = function () {
+  sendHistoryOperation('goBack')
+}
+
+window.history.forward = function () {
+  sendHistoryOperation('goForward')
+}
+
+window.history.go = function (offset) {
+  sendHistoryOperation('goToOffset', offset)
+}
+
+defineProperty(window.history, 'length', {
+  get: function () {
+    return getHistoryOperation('length')
+  }
+})
+
+// The initial visibilityState.
+let cachedVisibilityState = process.argv.includes('--hidden-page') ? 'hidden' : 'visible'
+
+// Subscribe to visibilityState changes.
+ipcRenderer.on('ELECTRON_RENDERER_WINDOW_VISIBILITY_CHANGE', function (event, visibilityState) {
+  if (cachedVisibilityState !== visibilityState) {
+    cachedVisibilityState = visibilityState
+    document.dispatchEvent(new Event('visibilitychange'))
+  }
+})
+
+// Make document.hidden and document.visibilityState return the correct value.
+defineProperty(document, 'hidden', {
+  get: function () {
+    return cachedVisibilityState !== 'visible'
+  }
+})
+
+defineProperty(document, 'visibilityState', {
+  get: function () {
+    return cachedVisibilityState
+  }
+})
+>>>>>>> .their
changed in both
  base   100644 fed0275b90760d4bcdd58bee880f949e0f409528 lib/renderer/web-view/guest-view-internal.js
  our    100644 6e42c769b70e5223fe97397f87144ec342882f8d lib/renderer/web-view/guest-view-internal.js
  their  100644 f6eb244a6848825eed05100e62ca2477a178d222 lib/renderer/web-view/guest-view-internal.js
@@ -47,6 +47,15 @@
 const dispatchEvent = function (webView, eventName, eventKey, ...args) {
   if (DEPRECATED_EVENTS[eventName] != null) {
     dispatchEvent(webView, DEPRECATED_EVENTS[eventName], eventKey, ...args)
+<<<<<<< .our
+=======
+  }
+  domEvent = new Event(eventName)
+  ref1 = WEB_VIEW_EVENTS[eventKey]
+  for (i = j = 0, len = ref1.length; j < len; i = ++j) {
+    f = ref1[i]
+    domEvent[f] = args[i]
+>>>>>>> .their
   }
   const domEvent = new Event(eventName)
   WEB_VIEW_EVENTS[eventKey].forEach((prop, index) => {
@@ -60,6 +69,7 @@
 
 module.exports = {
   registerEvents: function (webView, viewInstanceId) {
+<<<<<<< .our
     ipcRenderer.on(`ELECTRON_GUEST_VIEW_INTERNAL_DESTROY_GUEST-${viewInstanceId}`, function () {
       webView.guestInstanceId = undefined
       webView.reset()
@@ -68,6 +78,9 @@
     })
 
     ipcRenderer.on(`ELECTRON_GUEST_VIEW_INTERNAL_DISPATCH_EVENT-${viewInstanceId}`, function (event, eventName, ...args) {
+=======
+    ipcRenderer.on('ELECTRON_GUEST_VIEW_INTERNAL_DISPATCH_EVENT-' + viewInstanceId, function (event, eventName, ...args) {
+>>>>>>> .their
       dispatchEvent(webView, eventName, eventName, ...args)
     })
 
changed in both
  base   100644 6e5e81798544104d9f46cd1e9d95e7bbff2da92c lib/renderer/web-view/web-view.js
  our    100644 574a2b545597f9d1c05ec9b7147585063e90ae89 lib/renderer/web-view/web-view.js
  their  100644 ab8d6996c8961aefec86c37387d635ccd3b8653b lib/renderer/web-view/web-view.js
@@ -319,7 +319,15 @@
     'send',
     'sendInputEvent',
     'setLayoutZoomLevelLimits',
+<<<<<<< .our
     'setVisualZoomLevelLimits'
+=======
+    'setVisualZoomLevelLimits',
+    'setZoomFactor',
+    'setZoomLevel',
+    // TODO(kevinsawicki): Remove in 2.0, deprecate before then with warnings
+    'setZoomLevelLimits'
+>>>>>>> .their
   ]
 
   // Forward proto.foo* method calls to WebViewImpl.foo*.
@@ -340,7 +348,11 @@
   const createNonBlockHandler = function (m) {
     return function (...args) {
       const internal = v8Util.getHiddenValue(this, 'internal')
+<<<<<<< .our
       ipcRenderer.send('ELECTRON_BROWSER_ASYNC_CALL_TO_GUEST_VIEW', contextId, null, internal.guestInstanceId, m, ...args)
+=======
+      return ipcRenderer.send('ELECTRON_BROWSER_ASYNC_CALL_TO_GUEST_VIEW', null, internal.guestInstanceId, m, ...args)
+>>>>>>> .their
     }
   }
   for (const method of nonblockMethods) {
changed in both
  base   100644 bd7087e76707e1d1460a39917feba7bd0db74a4e package.json
  our    100644 c081cd89450cd50efba1ec280ff1349a96ea3ce0 package.json
  their  100644 a9e59235971454035fff313ee6a8cca91355966c package.json
@@ -1,8 +1,12 @@
 {
   "name": "electron",
+<<<<<<< .our
   "version": "4.0.0-nightly.20180821",
   "repository": "https://github.com/electron/electron",
   "description": "Build cross platform desktop apps with JavaScript, HTML, and CSS",
+=======
+  "version": "1.3.15",
+>>>>>>> .their
   "devDependencies": {
     "asar": "^0.11.0",
     "browserify": "^13.1.0",
added in both
  our    100755 0704b703fe1243fb4c8246cd09dcd209083a6fbf script/cibuild-linux
  their  100755 22f15936ae34a5793754c071f9fe25b3d3ac5c5b script/cibuild-linux
@@ -5,12 +5,23 @@
   Bump* ) export ELECTRON_RELEASE=1 ;;
 esac
 
+<<<<<<< .our
+=======
+set +x
+
+export ELECTRON_GITHUB_TOKEN="$BUILD_ELECTRON_ELECTRON_GITHUB_TOKEN"
+export ELECTRON_S3_BUCKET="$BUILD_ELECTRON_ELECTRON_S3_BUCKET"
+export ELECTRON_S3_ACCESS_KEY="$BUILD_ELECTRON_ELECTRON_S3_ACCESS_KEY"
+export ELECTRON_S3_SECRET_KEY="$BUILD_ELECTRON_ELECTRON_S3_SECRET_KEY"
+
+>>>>>>> .their
 if [[ -z "${ELECTRON_RELEASE}" ]]; then
   echo "Generating Linux $TARGET_ARCH debug build"
 else
   echo "Generating Linux $TARGET_ARCH release build"
 fi
 
+<<<<<<< .our
 set +x
 set -e
 set -o pipefail
@@ -35,3 +46,8 @@
   --volume "$PWD":/workspace/electron \
   --workdir /workspace/electron \
   electron-linux script/cibuild
+=======
+set -x
+
+script/cibuild
+>>>>>>> .their
changed in both
  base   100644 5ea60fcf539a6e0bcc534b1eee9efbe424bca5d3 script/lib/config.py
  our    100644 9ad0fbc680e5ecdeb8c13d0f0d6678bbba7d9031 script/lib/config.py
  their  100644 d2be141a0c0037cf3bde77a57cc3ceb5525b3448 script/lib/config.py
@@ -13,6 +13,11 @@
 
 BASE_URL = os.getenv('LIBCHROMIUMCONTENT_MIRROR') or \
     'https://s3.amazonaws.com/github-janky-artifacts/libchromiumcontent'
+<<<<<<< .our
+=======
+LIBCHROMIUMCONTENT_COMMIT = os.getenv('LIBCHROMIUMCONTENT_COMMIT') or \
+    'e93c6a82d7ab1e3b97a294200186d7254ad3f868'
+>>>>>>> .their
 
 PLATFORM = {
   'cygwin': 'win32',
removed in local
  base   100644 ac5d06ad787a168824152c2a43b81cc447c1416d spec/api-ipc-spec.js
  their  100644 22148c665732c074a8a435cf9edd81c196d2bf15 spec/api-ipc-spec.js
changed in both
  base   100644 a41bc477018fbc4aa1c5b23ba9cdaf21e3837412 spec/api-web-frame-spec.js
  our    100644 b8fd10b5d3f1319640fb209c707c758d0a0403d2 spec/api-web-frame-spec.js
  their  100644 3d7a7d316f8bd4b8bfa53d84df2b77f6335c6991 spec/api-web-frame-spec.js
@@ -15,11 +15,14 @@
 
 describe('webFrame module', function () {
   var fixtures = path.resolve(__dirname, 'fixtures')
+<<<<<<< .our
   var w = null
 
   afterEach(function () {
     return closeWindow(w).then(function () { w = null })
   })
+=======
+>>>>>>> .their
 
   describe('webFrame.registerURLSchemeAsPrivileged', function () {
     it('supports fetch api by default', function (done) {
@@ -145,6 +148,7 @@
     })
   })
 
+<<<<<<< .our
   it('calls a spellcheck provider', async () => {
     w = new BrowserWindow({show: false})
     w.loadURL(`file://${fixtures}/pages/webframe-spell-check.html`)
@@ -157,5 +161,13 @@
     }
     const [, text] = await spellCheckerFeedback
     expect(text).to.equal(misspelledWord)
+=======
+  it('supports setting the visual and layout zoom level limits', function () {
+    assert.doesNotThrow(function () {
+      webFrame.setZoomLevelLimits(1, 100)
+      webFrame.setVisualZoomLevelLimits(1, 50)
+      webFrame.setLayoutZoomLevelLimits(0, 25)
+    })
+>>>>>>> .their
   })
 })
changed in both
  base   100644 e26cba87c38bf456925cb019452a5c43937b1c05 spec/chromium-spec.js
  our    100644 d90269769d269e4054d25cba4b6c4ac8a1929aa6 spec/chromium-spec.js
  their  100644 f4d8f4068b13aa8748e4fb640509889ce3ad1dc7 spec/chromium-spec.js
@@ -4,10 +4,17 @@
 const path = require('path')
 const ws = require('ws')
 const url = require('url')
+<<<<<<< .our
 const ChildProcess = require('child_process')
 const {ipcRenderer, remote} = require('electron')
 const {closeWindow} = require('./window-helpers')
 const {app, BrowserWindow, ipcMain, protocol, session, webContents} = remote
+=======
+const remote = require('electron').remote
+
+const {BrowserWindow, protocol, session, webContents} = remote
+
+>>>>>>> .their
 const isCI = remote.getGlobal('isCi')
 const features = process.atomBinding('features')
 
@@ -103,8 +110,15 @@
     })
   })
 
+<<<<<<< .our
   describe('navigator.mediaDevices', () => {
     if (isCI) return
+=======
+  describe('navigator.mediaDevices', function () {
+    if (isCI) {
+      return
+    }
+>>>>>>> .their
 
     it('can return labels of enumerated devices', (done) => {
       navigator.mediaDevices.enumerateDevices().then((devices) => {
@@ -478,6 +492,7 @@
         window.open('', {toString: null})
       }, /Cannot convert object to primitive value/)
 
+<<<<<<< .our
       assert.throws(() => {
         window.open('', '', {toString: 3})
       }, /Cannot convert object to primitive value/)
@@ -491,6 +506,13 @@
         done()
       })
       b = window.open('', 'hello')
+=======
+    let url = 'file://' + fixtures + '/pages/window-opener.html'
+    let w = null
+
+    afterEach(function () {
+      if (w) w.destroy()
+>>>>>>> .their
     })
 
     it('does not throw an exception when the frameName is a built-in object property', (done) => {
@@ -524,9 +546,15 @@
       w.loadURL(url)
     })
 
+<<<<<<< .our
     it('is not null for window opened by window.open', (done) => {
       let b
       listener = (event) => {
+=======
+    it('is not null for window opened by window.open', function (done) {
+      let b
+      listener = function (event) {
+>>>>>>> .their
         assert.equal(event.data, 'object')
         b.close()
         done()
@@ -536,11 +564,18 @@
     })
   })
 
+<<<<<<< .our
   describe('window.opener access from BrowserWindow', () => {
+=======
+  describe('window.opener access from BrowserWindow', function () {
+    this.timeout(10000)
+
+>>>>>>> .their
     const scheme = 'other'
     let url = `${scheme}://${fixtures}/pages/window-opener-location.html`
     let w = null
 
+<<<<<<< .our
     before((done) => {
       protocol.registerFileProtocol(scheme, (request, callback) => {
         callback(`${fixtures}/pages/window-opener-location.html`)
@@ -557,24 +592,60 @@
 
     it('does nothing when origin of current window does not match opener', (done) => {
       listener = (event) => {
+=======
+    before(function (done) {
+      protocol.registerFileProtocol(scheme, function (request, callback) {
+        callback(`${fixtures}/pages/window-opener-location.html`)
+      }, function (error) {
+        done(error)
+      })
+    })
+
+    after(function () {
+      protocol.unregisterProtocol(scheme)
+    })
+
+    afterEach(function () {
+      w.close()
+    })
+
+    it('does nothing when origin of current window does not match opener', function (done) {
+      listener = function (event) {
+>>>>>>> .their
         assert.equal(event.data, undefined)
         done()
       }
       window.addEventListener('message', listener)
+<<<<<<< .our
       w = window.open(url, '', 'show=no,nodeIntegration=no')
     })
 
     it('works when origin matches', (done) => {
       listener = (event) => {
+=======
+      w = window.open(url, '', 'show=no')
+    })
+
+    it('works when origin matches', function (done) {
+      listener = function (event) {
+>>>>>>> .their
         assert.equal(event.data, location.href)
         done()
       }
       window.addEventListener('message', listener)
+<<<<<<< .our
       w = window.open(`file://${fixtures}/pages/window-opener-location.html`, '', 'show=no,nodeIntegration=no')
     })
 
     it('works when origin does not match opener but has node integration', (done) => {
       listener = (event) => {
+=======
+      w = window.open(`file://${fixtures}/pages/window-opener-location.html`, '', 'show=no')
+    })
+
+    it('works when origin does not match opener but has node integration', function (done) {
+      listener = function (event) {
+>>>>>>> .their
         assert.equal(event.data, location.href)
         done()
       }
@@ -583,12 +654,19 @@
     })
   })
 
+<<<<<<< .our
   describe('window.opener access from <webview>', () => {
+=======
+  describe('window.opener access from <webview>', function () {
+    this.timeout(10000)
+
+>>>>>>> .their
     const scheme = 'other'
     const srcPath = `${fixtures}/pages/webview-opener-postMessage.html`
     const pageURL = `file://${fixtures}/pages/window-opener-location.html`
     let webview = null
 
+<<<<<<< .our
     before((done) => {
       protocol.registerFileProtocol(scheme, (request, callback) => {
         callback(srcPath)
@@ -606,6 +684,27 @@
     it('does nothing when origin of webview src URL does not match opener', (done) => {
       webview = new WebView()
       webview.addEventListener('console-message', (e) => {
+=======
+    before(function (done) {
+      protocol.registerFileProtocol(scheme, function (request, callback) {
+        callback(srcPath)
+      }, function (error) {
+        done(error)
+      })
+    })
+
+    after(function () {
+      protocol.unregisterProtocol(scheme)
+    })
+
+    afterEach(function () {
+      if (webview != null) webview.remove()
+    })
+
+    it('does nothing when origin of webview src URL does not match opener', function (done) {
+      webview = new WebView()
+      webview.addEventListener('console-message', function (e) {
+>>>>>>> .their
         assert.equal(e.message, 'null')
         done()
       })
@@ -621,9 +720,15 @@
       document.body.appendChild(webview)
     })
 
+<<<<<<< .our
     it('works when origin matches', (done) => {
       webview = new WebView()
       webview.addEventListener('console-message', (e) => {
+=======
+    it('works when origin matches', function (done) {
+      webview = new WebView()
+      webview.addEventListener('console-message', function (e) {
+>>>>>>> .their
         assert.equal(e.message, webview.src)
         done()
       })
@@ -639,9 +744,15 @@
       document.body.appendChild(webview)
     })
 
+<<<<<<< .our
     it('works when origin does not match opener but has node integration', (done) => {
       webview = new WebView()
       webview.addEventListener('console-message', (e) => {
+=======
+    it('works when origin does not match opener but has node integration', function (done) {
+      webview = new WebView()
+      webview.addEventListener('console-message', function (e) {
+>>>>>>> .their
         webview.remove()
         assert.equal(e.message, webview.src)
         done()
@@ -660,10 +771,18 @@
     })
   })
 
+<<<<<<< .our
   describe('window.postMessage', () => {
     it('sets the source and origin correctly', (done) => {
       let b
       listener = (event) => {
+=======
+  describe('window.postMessage', function () {
+    it('sets the source and origin correctly', function (done) {
+      var b, sourceId
+      sourceId = remote.getCurrentWindow().id
+      listener = function (event) {
+>>>>>>> .their
         window.removeEventListener('message', listener)
         b.close()
         const message = JSON.parse(event.data)
added in both
  our    100644 bfc281eb4298c7df89b1dd379b9ac958efd20edd spec/fixtures/api/render-view-deleted.html
  their  100644 5c996c1988ef60215784bab216801f7ecdff1393 spec/fixtures/api/render-view-deleted.html
@@ -17,7 +17,11 @@
       }
 
       // This should trigger a dereference and a remote getURL call should fail
+<<<<<<< .our
       contents.emit('render-view-deleted', {}, contents.getProcessId())
+=======
+      contents.emit('render-view-deleted', {}, contents.getId())
+>>>>>>> .their
       try {
         contents.getURL()
         ipcRenderer.send('error-message', 'No error thrown')
changed in both
  base   100644 f2c45b0a71b4620d0665d956fd2311ebcba5ae5d spec/modules-spec.js
  our    100644 b996b8f4839bff2160bffb69e55263b16a4178d7 spec/modules-spec.js
  their  100644 601e40d050b8cd196be6c1c8f8936c67d518cad3 spec/modules-spec.js
@@ -90,6 +90,7 @@
     })
   })
 
+<<<<<<< .our
   describe('Module._nodeModulePaths', () => {
     describe('when the path is inside the resources path', () => {
       it('does not include paths outside of the resources path', () => {
@@ -160,6 +161,15 @@
         const result = await w.webContents.executeJavaScript('typeof require("q").when')
         assert.equal(result, 'function')
       })
+=======
+  describe('when the path is outside the resources path', function () {
+    it('includes paths outside of the resources path', function () {
+      let modulePath = path.resolve('/foo')
+      assert.deepEqual(Module._nodeModulePaths(modulePath), [
+        path.join(modulePath, 'node_modules'),
+        path.resolve('/node_modules')
+      ])
+>>>>>>> .their
     })
   })
 })
removed in local
  base   160000 554946c7873bbc6930779c871fe230856575049a vendor/brightray
  their  160000 ee26c5218eeec199c54c92a7517a72d2dbd0adbf vendor/brightray
changed in both
  base   160000 ee8c429deaee0adeeef069c3ad34c0defe53a567 vendor/node
  our    160000 ece0a06ac8147efb5b5af431c21f312f1884616e vendor/node
  their  160000 c47e9bf9011de682d07c82f7f610a467f30cca60 vendor/node
