changed in both
  base   100755 28424aaa8ee614b0dfffc7468adb2266f05440cb script/bump-version.py
  our    100755 564adb2116312b0f6d0351096bd89cb373cd3bab script/bump-version.py
  their  100755 403bb88a80edf2d9b4e792e43862e841aa69a1a6 script/bump-version.py
@@ -84,12 +84,41 @@
     parser.print_help()
     return 1
 
+<<<<<<< .our
   versions = clean_parse_version(version)
   suffix = ''
   if '-' in version:
     suffix = '-' + version.split('-')[1]
     versions[3] = parse_version(version)[3]
   version = version.split('-')[0]
+=======
+  increments = ['major', 'minor', 'patch', 'beta']
+
+  curr_version = get_electron_version()
+  versions = parse_version(re.sub('-beta', '', curr_version))
+
+  if args.bump in increments:
+    versions = increase_version(versions, increments.index(args.bump))
+    if versions[3] == '0':
+      # beta starts at 1
+      versions = increase_version(versions, increments.index('beta'))
+
+  if args.stable == True:
+    versions[3] = '0'
+
+  if args.new_version != None:
+    clean_version = re.sub('-beta', '', args.new_version)
+    clean_version = re.sub('-nightly', '', clean_version)
+    versions = parse_version(clean_version)
+
+  version = '.'.join(versions[:3])
+  suffix = ''
+
+  if args.new_version != None and '-nightly' in args.new_version:
+    suffix = '-nightly.' + versions[3]
+  elif versions[3] != '0':
+    suffix = '-beta.' + versions[3]
+>>>>>>> .their
 
   if args.dry_run:
     print 'new version number would be: {0}\n'.format(version + suffix)
changed in both
  base   100755 34e500e46b341ea8f93729001bf6bff28a80d9c6 script/prepare-release.js
  our    100755 72a28b719bf1ff7770692caef86c76746c4d8edf script/prepare-release.js
  their  100755 e2cab7703581c34b6d942aa62e88d691fe2d4ee3 script/prepare-release.js
@@ -14,6 +14,7 @@
 const path = require('path')
 const pkg = require('../package.json')
 const readline = require('readline')
+const semver = require('semver')
 const versionType = args._[0]
 const targetRepo = versionType === 'nightly' ? 'nightlies' : 'electron'
 
@@ -21,7 +22,11 @@
 // via conventional-recommended-bump
 
 if (!versionType && !args.notesOnly) {
+<<<<<<< .our
   console.log(`Usage: prepare-release versionType [stable | beta | nightly]` +
+=======
+  console.log(`Usage: prepare-release versionType [major | minor | patch | beta | nightly]` +
+>>>>>>> .their
      ` (--stable) (--notesOnly) (--automaticRelease) (--branch)`)
   process.exit(1)
 }
@@ -31,11 +36,22 @@
 github.authenticate({type: 'token', token: process.env.ELECTRON_GITHUB_TOKEN})
 
 async function getNewVersion (dryRun) {
+<<<<<<< .our
   if (!dryRun) {
     console.log(`Bumping for new "${versionType}" version.`)
   }
   let bumpScript = path.join(__dirname, 'bump-version.py')
   let scriptArgs = [bumpScript, '--bump', versionType]
+=======
+  console.log(`Bumping for new "${versionType}" version.`)
+  let bumpScript = path.join(__dirname, 'bump-version.py')
+  let scriptArgs = [bumpScript]
+  if (versionType === 'nightly') {
+    scriptArgs.push(`--version ${await determineNextNightly(await getCurrentBranch())}`)
+  } else {
+    scriptArgs.push(`--bump ${versionType}`)
+  }
+>>>>>>> .their
   if (args.stable) {
     scriptArgs.push('--stable')
   }
@@ -53,9 +69,49 @@
   } catch (err) {
     console.log(`${fail} Could not bump version, error was:`, err)
     throw err
+<<<<<<< .our
+=======
+  }
+}
+
+async function determineNextNightly (currentBranch) {
+  const twoPad = (n) => n < 10 ? `0${n}` : `${n}`
+  const d = new Date()
+  const date = `${d.getFullYear()}${twoPad(d.getMonth() + 1)}${twoPad(d.getDate())}`
+
+  let version
+
+  if (currentBranch === 'master') {
+    version = await determineNextNightlyForMaster()
+  }
+  if (!version) {
+    throw new Error(`not yet implemented for release branch: ${currentBranch}`)
+  }
+
+  return `${version}-nightly.${date}`
+}
+
+async function determineNextNightlyForMaster () {
+  let branchNames
+  let result = await GitProcess.exec(['branch', '-a', '--remote', '--list', 'origin/[0-9]-[0-9]-x'], gitDir)
+  if (result.exitCode === 0) {
+    branchNames = result.stdout.trim().split('\n')
+    const filtered = branchNames.map(b => b.replace('origin/', ''))
+    return getNextReleaseBranch(filtered)
+  } else {
+    throw new Error('Release branches could not be fetched.')
+>>>>>>> .their
   }
 }
 
+function getNextReleaseBranch (branches) {
+  const converted = branches.map(b => b.replace(/-/g, '.').replace('x', '0'))
+  const next = converted.reduce((v1, v2) => {
+    return semver.gt(v1, v2) ? v1 : v2
+  })
+  return `${parseInt(next.split('.')[0], 10) + 1}.0.0`
+}
+
 async function getCurrentBranch (gitDir) {
   console.log(`Determining current git branch`)
   let gitArgs = ['rev-parse', '--abbrev-ref', 'HEAD']
@@ -164,6 +220,7 @@
   githubOpts.draft = true
   githubOpts.name = `electron ${newVersion}`
   if (isBeta) {
+<<<<<<< .our
     if (newVersion.indexOf('nightly') > 0) {
       githubOpts.body = `Note: This is a nightly release.  Please file new issues ` +
         `for any bugs you find in it.\n \n This release is published to npm ` +
@@ -173,6 +230,17 @@
       githubOpts.body = `Note: This is a beta release.  Please file new issues ` +
         `for any bugs you find in it.\n \n This release is published to npm ` +
         `under the beta tag and can be installed via npm install electron@beta, ` +
+=======
+    if (versionType === 'nightly') {
+      githubOpts.body = `Note: This is a beta release.  Please file new issues ` +
+        `for any bugs you find in it.\n \n This release is published to npm ` +
+        `under the beta tag and can be installed via npm install electron@beta, ` +
+        `or npm i electron@${newVersion.substr(1)}.\n \n ${releaseNotes}`
+    } else {
+      githubOpts.body = `Note: This is a nightly release.  Please file new issues ` +
+        `for any bugs you find in it.\n \n This release is published to npm ` +
+        `under the nightly tag and can be installed via npm install electron@nightly, ` +
+>>>>>>> .their
         `or npm i electron@${newVersion.substr(1)}.\n \n ${releaseNotes}`
     }
     githubOpts.name = `${githubOpts.name}`
@@ -258,9 +326,26 @@
 }
 
 async function prepareRelease (isBeta, notesOnly) {
+<<<<<<< .our
   if (args.dryRun) {
     let newVersion = await getNewVersion(true)
     console.log(newVersion)
+=======
+  if (args.automaticRelease && (pkg.version.indexOf('beta') === -1 ||
+      versionType !== 'beta') && versionType !== 'nightly') {
+    console.log(`${fail} Automatic release is only supported for beta and nightly releases`)
+    process.exit(1)
+  }
+  let currentBranch
+  if (args.branch) {
+    currentBranch = args.branch
+  } else {
+    currentBranch = await getCurrentBranch(gitDir)
+  }
+  if (notesOnly) {
+    let releaseNotes = await getReleaseNotes(currentBranch)
+    console.log(`Draft release notes are: \n${releaseNotes}`)
+>>>>>>> .their
   } else {
     const currentBranch = (args.branch) ? args.branch : await getCurrentBranch(gitDir)
     if (notesOnly) {
changed in both
  base   100644 eb0702ff5ef265b545824ba21ffb4c5d760d5476 script/publish-to-npm.js
  our    100644 27290c513bb28d9bd394575d833f1e6786e3b479 script/publish-to-npm.js
  their  100644 3139e29a5f246ce5c7eb58e5a083f6fe9966c511 script/publish-to-npm.js
changed in both
  base   100755 9048d759d94735feeed17a4a57a9a4b6152e8305 script/release.js
  our    100755 84e00ad4f309201f151c3f8fcbaf9ee536c9b6cb script/release.js
  their  100755 af9723eb1788a900e37f9ffcf4b37f29264d414a script/release.js
