changed in both
  base   100644 a6ae681e48a0928c11f718950b804ac31f8147ad .circleci/config.yml
  our    100644 6d44d618aabcce04c60344f2274dec5b0c2a1f68 .circleci/config.yml
  their  100644 716cf849e9fe5e889117e3784299124264a07b81 .circleci/config.yml
@@ -169,6 +169,7 @@
           gclient config \
             --name "src/electron" \
             --unmanaged \
+            --cache-dir "${GIT_CACHE_PATH}" \
             $GCLIENT_EXTRA_ARGS \
             "$CIRCLE_REPOSITORY_URL"
 
@@ -181,9 +182,9 @@
         name: GN gen
         command: |
           cd src
-          SCCACHE_PATH="$PWD/electron/external_binaries/sccache"
+          SCCACHE_PATH="$PWD/libchromiumcontent/tools/sccache/aad2120/linux/sccache"
+          echo 'export SCCACHE_WRAPPER="'"$SCCACHE_PATH"'"' >> $BASH_ENV
           echo 'export CHROMIUM_BUILDTOOLS_PATH="'"$PWD"'/buildtools"' >> $BASH_ENV
-          echo 'export SCCACHE_WRAPPER="'"$SCCACHE_PATH"'"'            >> $BASH_ENV
           source $BASH_ENV
           gn gen out/Default --args='import("'$GN_CONFIG'") cc_wrapper="'"$SCCACHE_PATH"'"'" $GN_EXTRA_ARGS"
     - run:
merged
  result 100644 331eab5b86f915903a957d0d2b016e91d4d5a068 BUILD.gn
  our    100644 d00c4b1e3d3523641210ff20fda41d76c9eb546c BUILD.gn
@@ -216,7 +216,7 @@
     "//printing",
     "//services/device/wake_lock/power_save_blocker",  # TODO: this requires a visibility patch to chromium src
     "//skia",
-    "//third_party/WebKit/public:blink",
+    "//third_party/blink/public:blink",
     "//third_party/boringssl",
     "//third_party/electron_node:node_lib",
     "//third_party/leveldatabase",
@@ -235,7 +235,7 @@
 
     # TODO(nornagon): replace usage of SchemeRegistry by an actually exported
     # API of blink, then delete this include dir.
-    "//third_party/WebKit/Source",
+    "//third_party/blink/renderer",
   ]
 
   defines = []
@@ -699,8 +699,8 @@
   testonly = true
 
   deps = [
-    "//third_party/WebKit/public:all_blink",
-    "//third_party/WebKit/public:test_support",
+    "//third_party/blink/public:all_blink",
+    "//third_party/blink/public:test_support",
   ]
 }
 
@@ -716,7 +716,6 @@
     "//device:device_unittests",
     "//gin:gin_unittests",
     "//gpu:gpu_unittests",
-    "//gpu/ipc/service:gpu_ipc_service_unittests",
     "//ipc:ipc_tests",
     "//media:media_unittests",
     "//media/capture:capture_unittests",
changed in both
  base   100644 23d1ca3453c855fe80d9a6be87a23b5657ffe73c DEPS
  our    100644 b3b9d650b27274f4f98f7408319b1e6b35f63abf DEPS
  their  100644 3e524daeccfd72207c92d75eaf9ce6e3e0384c58 DEPS
@@ -1,8 +1,12 @@
 vars = {
   'chromium_version':
-    '66.0.3359.181',
+    '67.0.3396.99',
   'libchromiumcontent_revision':
+<<<<<<< .our
     'c85470a1c379b1c4bedb372c146521bc4be9b75d',
+=======
+    'e349f85568753947039fc912cf84d76a17a82f2e',
+>>>>>>> .their
   'node_version':
     'ece0a06ac8147efb5b5af431c21f312f1884616e',
 
changed in both
  base   100644 f4ed88660e5a8bf508a84a335403c9b3db56dcef appveyor-gn.yml
  our    100644 282c4952dfcbdc90df13c3935cc4a8ddd82d91e7 appveyor-gn.yml
  their  100644 bd7f39db7db74312677a748083248265a44c88b8 appveyor-gn.yml
@@ -21,11 +21,16 @@
   - md src
   - ps: Move-Item $env:APPVEYOR_BUILD_FOLDER -Destination src\electron
   - ps: $env:CHROMIUM_BUILDTOOLS_PATH="$pwd\src\buildtools"
+<<<<<<< .our
   - ps: $env:SCCACHE_PATH="$pwd\src\electron\external_binaries\sccache.exe"
+=======
+  - ps: $env:SCCACHE_PATH="$pwd\src\libchromiumcontent\tools\sccache\aad2120\windows\sccache.exe"
+>>>>>>> .their
   - >-
       gclient config
       --name "src\electron"
       --unmanaged
+      --cache-dir "${GIT_CACHE_PATH}"
       "https://github.com/electron/electron"
   - gclient sync --with_branch_heads --with_tags
   - cd src
@@ -47,7 +52,11 @@
   - npm install
   - ps: Pop-Location
   - .\out\Default\electron.exe electron\spec --ci
+<<<<<<< .our
   - python electron\verify-ffmpeg.py -c Default --source-root "%pwd%" --ffmpeg-path "%pwd%\out\ffmpeg"
+=======
+  # TODO(nornagon): verify-ffmpeg step
+>>>>>>> .their
 artifacts:
 - path: test-results.xml
   name: test-results.xml
merged
  result 100644 5ce233161ca406f6d54de0dbed091775308a2bfd atom/app/atom_content_client.cc
  our    100644 f17ae3137032f0b0e26eb735d37cfb3daaeebcfc atom/app/atom_content_client.cc
@@ -18,7 +18,7 @@
 #include "content/public/common/content_constants.h"
 #include "content/public/common/pepper_plugin_info.h"
 #include "content/public/common/user_agent.h"
-#include "media/media_features.h"
+#include "media/media_buildflags.h"
 #include "ppapi/shared_impl/ppapi_permissions.h"
 #include "ui/base/l10n/l10n_util.h"
 #include "url/url_constants.h"
merged
  result 100644 0bb19fe5bb4025e0c8cc56a18fed68d1414a2fce atom/app/atom_main_delegate.cc
  our    100644 b3b5b8f2a8f24b8928f69a286c80e8a3b8464366 atom/app/atom_main_delegate.cc
@@ -21,7 +21,7 @@
 #include "base/logging.h"
 #include "chrome/common/chrome_paths.h"
 #include "content/public/common/content_switches.h"
-#include "ipc/ipc_features.h"
+#include "ipc/ipc_buildflags.h"
 #include "services/service_manager/sandbox/switches.h"
 #include "ui/base/l10n/l10n_util.h"
 #include "ui/base/resource/resource_bundle.h"
changed in both
  base   100644 37f3a05ddee9034c5056f88978b0da474dd3debf atom/browser/api/atom_api_app.cc
  our    100644 089a2b63d1bae3afebea925582a3aac81ddeaa4f atom/browser/api/atom_api_app.cc
  their  100644 81c685aaa20354517efbf5da3d57d63b68096b54 atom/browser/api/atom_api_app.cc
@@ -1112,30 +1112,11 @@
 
   for (const auto& process_metric : app_metrics_) {
     mate::Dictionary pid_dict = mate::Dictionary::CreateEmpty(isolate);
-    mate::Dictionary memory_dict = mate::Dictionary::CreateEmpty(isolate);
     mate::Dictionary cpu_dict = mate::Dictionary::CreateEmpty(isolate);
 
     pid_dict.SetHidden("simple", true);
-    memory_dict.SetHidden("simple", true);
     cpu_dict.SetHidden("simple", true);
 
-    memory_dict.Set(
-        "workingSetSize",
-        static_cast<double>(
-            process_metric.second->metrics->GetWorkingSetSize() >> 10));
-    memory_dict.Set(
-        "peakWorkingSetSize",
-        static_cast<double>(
-            process_metric.second->metrics->GetPeakWorkingSetSize() >> 10));
-
-    size_t private_bytes, shared_bytes;
-    if (process_metric.second->metrics->GetMemoryBytes(&private_bytes,
-                                                       &shared_bytes)) {
-      memory_dict.Set("privateBytes", static_cast<double>(private_bytes >> 10));
-      memory_dict.Set("sharedBytes", static_cast<double>(shared_bytes >> 10));
-    }
-
-    pid_dict.Set("memory", memory_dict);
     cpu_dict.Set(
         "percentCPUUsage",
         process_metric.second->metrics->GetPlatformIndependentCPUUsage() /
merged
  result 100644 9c171abd54e0e770c2f35581f91000fba57b0c8f atom/browser/api/atom_api_protocol.cc
  our    100644 5e1f991ad8dcd611467b691fff48656e3cc299ff atom/browser/api/atom_api_protocol.cc
@@ -50,7 +50,7 @@
   // Dynamically register the schemes.
   auto* policy = content::ChildProcessSecurityPolicy::GetInstance();
   for (const std::string& scheme : schemes) {
-    url::AddStandardScheme(scheme.c_str(), url::SCHEME_WITHOUT_PORT);
+    url::AddStandardScheme(scheme.c_str(), url::SCHEME_WITH_HOST);
     if (secure) {
       url::AddSecureScheme(scheme.c_str());
     }
merged
  result 100644 24cf19b9cda901566492f8db999f40af8788432b atom/browser/api/atom_api_session.cc
  our    100644 658f913bb60b66ae1bf3aae97d7d9158e56f7ee0 atom/browser/api/atom_api_session.cc
@@ -47,7 +47,9 @@
 #include "net/http/http_auth_handler_factory.h"
 #include "net/http/http_auth_preferences.h"
 #include "net/proxy_resolution/proxy_config_service_fixed.h"
-#include "net/proxy_resolution/proxy_service.h"
+#include "net/proxy_resolution/proxy_config_with_annotation.h"
+#include "net/proxy_resolution/proxy_resolution_service.h"
+#include "net/traffic_annotation/network_traffic_annotation.h"
 #include "net/url_request/static_http_user_agent_settings.h"
 #include "net/url_request/url_request_context.h"
 #include "net/url_request/url_request_context_getter.h"
@@ -349,7 +351,8 @@
   auto* proxy_service =
       getter->GetURLRequestContext()->proxy_resolution_service();
   proxy_service->ResetConfigService(
-      base::WrapUnique(new net::ProxyConfigServiceFixed(config)));
+      base::WrapUnique(new net::ProxyConfigServiceFixed(
+          net::ProxyConfigWithAnnotation(config, NO_TRAFFIC_ANNOTATION_YET))));
   // Refetches and applies the new pac script if provided.
   proxy_service->ForceReloadProxyConfig();
   RunCallbackInUI(callback);
changed in both
  base   100644 667aa3f08f8edba1b8ad4579f444421471cdd95a atom/browser/api/atom_api_web_contents.cc
  our    100644 20a1ac2e672f08ffea528b6e094ba530ff8083d1 atom/browser/api/atom_api_web_contents.cc
  their  100644 b336c4177378d873ca35c353005f337b58bfc519 atom/browser/api/atom_api_web_contents.cc
@@ -93,8 +93,8 @@
 #include "native_mate/dictionary.h"
 #include "native_mate/object_template_builder.h"
 #include "net/url_request/url_request_context.h"
-#include "third_party/WebKit/public/platform/WebInputEvent.h"
-#include "third_party/WebKit/public/web/WebFindOptions.h"
+#include "third_party/blink/public/platform/web_input_event.h"
+#include "third_party/blink/public/web/web_find_options.h"
 #include "ui/display/screen.h"
 #include "ui/events/base_event_utils.h"
 
@@ -316,7 +316,8 @@
     : content::WebContentsObserver(web_contents), type_(type) {
   const mate::Dictionary options = mate::Dictionary::CreateEmpty(isolate);
   if (type == REMOTE) {
-    web_contents->SetUserAgentOverride(GetBrowserContext()->GetUserAgent());
+    web_contents->SetUserAgentOverride(GetBrowserContext()->GetUserAgent(),
+                                       false);
     Init(isolate);
     AttachAsUserData(web_contents);
     InitZoomController(web_contents, options);
@@ -457,7 +458,8 @@
   // Initialize zoom controller.
   InitZoomController(web_contents, options);
 
-  web_contents->SetUserAgentOverride(GetBrowserContext()->GetUserAgent());
+  web_contents->SetUserAgentOverride(GetBrowserContext()->GetUserAgent(),
+                                     false);
 
   if (IsGuest()) {
     NativeWindow* owner_window = nullptr;
@@ -715,9 +717,10 @@
   Emit("found-in-page", result);
 }
 
-bool WebContents::CheckMediaAccessPermission(content::WebContents* web_contents,
-                                             const GURL& security_origin,
-                                             content::MediaStreamType type) {
+bool WebContents::CheckMediaAccessPermission(
+    content::RenderFrameHost* render_frame_host,
+    const GURL& security_origin,
+    content::MediaStreamType type) {
   return true;
 }
 
@@ -1112,7 +1115,7 @@
 
   std::string user_agent;
   if (options.Get("userAgent", &user_agent))
-    web_contents()->SetUserAgentOverride(user_agent);
+    web_contents()->SetUserAgentOverride(user_agent, false);
 
   std::string extra_headers;
   if (options.Get("extraHeaders", &extra_headers))
@@ -1222,7 +1225,7 @@
 
 void WebContents::SetUserAgent(const std::string& user_agent,
                                mate::Arguments* args) {
-  web_contents()->SetUserAgentOverride(user_agent);
+  web_contents()->SetUserAgentOverride(user_agent, false);
 }
 
 std::string WebContents::GetUserAgent() {
changed in both
  base   100644 e907ef9f3e456485e4842aef275ea22aedfc9531 atom/browser/api/atom_api_web_contents.h
  our    100644 7939f8268aa8c3371623e0c15f3b6001d7f1efa4 atom/browser/api/atom_api_web_contents.h
  their  100644 7329bb9c5989d61bfc30b70f73cde226edc81f4b atom/browser/api/atom_api_web_contents.h
@@ -325,7 +325,7 @@
                  const gfx::Rect& selection_rect,
                  int active_match_ordinal,
                  bool final_update) override;
-  bool CheckMediaAccessPermission(content::WebContents* web_contents,
+  bool CheckMediaAccessPermission(content::RenderFrameHost* render_frame_host,
                                   const GURL& security_origin,
                                   content::MediaStreamType type) override;
   void RequestMediaAccessPermission(
changed in both
  base   100644 5b751af7e9170e9a49e394129bb5d3da016717cc atom/browser/atom_browser_client.cc
  our    100644 57c4ee582405e6d501ec23940ccb10689ecd64a1 atom/browser/atom_browser_client.cc
  their  100644 a311a90603d796baa2de4fdca33f2a0316ecfeca atom/browser/atom_browser_client.cc
@@ -24,12 +24,15 @@
 #include "atom/browser/window_list.h"
 #include "atom/common/google_api_key.h"
 #include "atom/common/options_switches.h"
+#include "atom/common/platform_util.h"
 #include "base/command_line.h"
 #include "base/environment.h"
 #include "base/files/file_util.h"
+#include "base/memory/scoped_refptr.h"
 #include "base/stl_util.h"
 #include "base/strings/string_number_conversions.h"
 #include "base/strings/string_util.h"
+#include "base/strings/utf_string_conversions.h"
 #include "chrome/browser/printing/printing_message_filter.h"
 #include "chrome/browser/speech/tts_message_filter.h"
 #include "content/public/browser/browser_ppapi_host.h"
@@ -44,6 +47,7 @@
 #include "content/public/common/content_switches.h"
 #include "content/public/common/url_constants.h"
 #include "content/public/common/web_preferences.h"
+#include "net/base/escape.h"
 #include "net/ssl/ssl_cert_request_info.h"
 #include "ppapi/host/ppapi_host.h"
 #include "services/network/public/cpp/resource_request_body.h"
@@ -495,6 +499,21 @@
 #endif
 }
 
+<<<<<<< .our
+=======
+scoped_refptr<content::LoginDelegate> AtomBrowserClient::CreateLoginDelegate(
+    net::AuthChallengeInfo* auth_info,
+    content::ResourceRequestInfo::WebContentsGetter web_contents_getter,
+    bool is_main_frame,
+    const GURL& url,
+    bool first_auth_attempt,
+    const base::Callback<void(const base::Optional<net::AuthCredentials>&)>&
+        auth_required_callback) {
+  return base::MakeRefCounted<LoginHandler>(auth_info, web_contents_getter, url,
+                                            auth_required_callback);
+}
+
+>>>>>>> .their
 brightray::BrowserMainParts* AtomBrowserClient::OverrideCreateBrowserMainParts(
     const content::MainFunctionParams&) {
   v8::V8::Initialize();  // Init V8 before creating main parts.
@@ -547,4 +566,49 @@
   }
 }
 
+void OnOpenExternal(const GURL& escaped_url, bool allowed) {
+  if (allowed)
+    platform_util::OpenExternal(
+#if defined(OS_WIN)
+        base::UTF8ToUTF16(escaped_url.spec()),
+#else
+        escaped_url,
+#endif
+        true);
+}
+
+void HandleExternalProtocolInUI(
+    const GURL& url,
+    const content::ResourceRequestInfo::WebContentsGetter& web_contents_getter,
+    bool has_user_gesture) {
+  content::WebContents* web_contents = web_contents_getter.Run();
+  if (!web_contents)
+    return;
+
+  auto* permission_helper =
+      WebContentsPermissionHelper::FromWebContents(web_contents);
+  if (!permission_helper)
+    return;
+
+  GURL escaped_url(net::EscapeExternalHandlerValue(url.spec()));
+  auto callback = base::Bind(&OnOpenExternal, escaped_url);
+  permission_helper->RequestOpenExternalPermission(callback, has_user_gesture,
+                                                   url);
+}
+
+bool AtomBrowserClient::HandleExternalProtocol(
+    const GURL& url,
+    content::ResourceRequestInfo::WebContentsGetter web_contents_getter,
+    int child_id,
+    content::NavigationUIData* navigation_data,
+    bool is_main_frame,
+    ui::PageTransition page_transition,
+    bool has_user_gesture) {
+  BrowserThread::PostTask(
+      BrowserThread::UI, FROM_HERE,
+      base::BindOnce(&HandleExternalProtocolInUI, url, web_contents_getter,
+                     has_user_gesture));
+  return true;
+}
+
 }  // namespace atom
changed in both
  base   100644 51cd6ebc6f01b916af0889b7308909a416b92bf0 atom/browser/atom_browser_client.h
  our    100644 a0284cf3f72e9cd4292b636948f92bb09b97f0ae atom/browser/atom_browser_client.h
  their  100644 c8d3c549daa73273a49d06207254e12cb794e26b atom/browser/atom_browser_client.h
@@ -106,6 +106,17 @@
   void SiteInstanceDeleting(content::SiteInstance* site_instance) override;
   std::unique_ptr<net::ClientCertStore> CreateClientCertStore(
       content::ResourceContext* resource_context) override;
+<<<<<<< .our
+=======
+  scoped_refptr<content::LoginDelegate> CreateLoginDelegate(
+      net::AuthChallengeInfo* auth_info,
+      content::ResourceRequestInfo::WebContentsGetter web_contents_getter,
+      bool is_main_frame,
+      const GURL& url,
+      bool first_auth_attempt,
+      const base::Callback<void(const base::Optional<net::AuthCredentials>&)>&
+          auth_required_callback) override;
+>>>>>>> .their
 
   // brightray::BrowserClient:
   brightray::BrowserMainParts* OverrideCreateBrowserMainParts(
@@ -120,6 +131,14 @@
   void RenderProcessExited(content::RenderProcessHost* host,
                            base::TerminationStatus status,
                            int exit_code) override;
+  bool HandleExternalProtocol(
+      const GURL& url,
+      content::ResourceRequestInfo::WebContentsGetter web_contents_getter,
+      int child_id,
+      content::NavigationUIData* navigation_data,
+      bool is_main_frame,
+      ui::PageTransition page_transition,
+      bool has_user_gesture) override;
 
  private:
   struct ProcessPreferences {
merged
  result 100644 ac8a0c6f9fd28598bedb46279366ddc5da33fc3f atom/browser/atom_permission_manager.cc
  our    100644 218404434142cf1b0ab29610e873782712e3a876 atom/browser/atom_permission_manager.cc
@@ -186,7 +186,6 @@
   }
 }
 
-
 void AtomPermissionManager::ResetPermission(content::PermissionType permission,
                                             const GURL& requesting_origin,
                                             const GURL& embedding_origin) {}
@@ -209,4 +208,12 @@
 void AtomPermissionManager::UnsubscribePermissionStatusChange(
     int subscription_id) {}
 
+blink::mojom::PermissionStatus
+AtomPermissionManager::GetPermissionStatusForFrame(
+    content::PermissionType permission,
+    content::RenderFrameHost* render_frame_host,
+    const GURL& requesting_origin) {
+  return blink::mojom::PermissionStatus::GRANTED;
+}
+
 }  // namespace atom
merged
  result 100644 1c5973e528dc22af47fa22eeb3cb50da900b8e18 atom/browser/atom_permission_manager.h
  our    100644 de23837330535539c2ab93a2bba4796be3f36e1e atom/browser/atom_permission_manager.h
@@ -66,6 +66,10 @@
       const base::DictionaryValue* details,
       const base::Callback<
           void(const std::vector<blink::mojom::PermissionStatus>&)>& callback);
+  blink::mojom::PermissionStatus GetPermissionStatusForFrame(
+      content::PermissionType permission,
+      content::RenderFrameHost* render_frame_host,
+      const GURL& requesting_origin) override;
 
  protected:
   void OnPermissionResponse(int request_id,
merged
  result 100644 0a59a0dc8f4b6c6ac66b00ad16cab8df53df6964 atom/browser/atom_resource_dispatcher_host_delegate.cc
  our    100644 934b0ebaa49b711490c58fc73b91985633cba439 atom/browser/atom_resource_dispatcher_host_delegate.cc
@@ -5,9 +5,7 @@
 #include "atom/browser/atom_resource_dispatcher_host_delegate.h"
 
 #include "atom/browser/atom_browser_context.h"
-#include "atom/browser/web_contents_permission_helper.h"
 #include "atom/browser/web_contents_preferences.h"
-#include "atom/common/platform_util.h"
 #include "base/strings/utf_string_conversions.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/download_manager.h"
@@ -28,36 +26,6 @@
 
 namespace {
 
-void OnOpenExternal(const GURL& escaped_url, bool allowed) {
-  if (allowed)
-    platform_util::OpenExternal(
-#if defined(OS_WIN)
-        base::UTF8ToUTF16(escaped_url.spec()),
-#else
-        escaped_url,
-#endif
-        true);
-}
-
-void HandleExternalProtocolInUI(
-    const GURL& url,
-    const content::ResourceRequestInfo::WebContentsGetter& web_contents_getter,
-    bool has_user_gesture) {
-  content::WebContents* web_contents = web_contents_getter.Run();
-  if (!web_contents)
-    return;
-
-  auto* permission_helper =
-      WebContentsPermissionHelper::FromWebContents(web_contents);
-  if (!permission_helper)
-    return;
-
-  GURL escaped_url(net::EscapeExternalHandlerValue(url.spec()));
-  auto callback = base::Bind(&OnOpenExternal, escaped_url);
-  permission_helper->RequestOpenExternalPermission(callback, has_user_gesture,
-                                                   url);
-}
-
 #if defined(ENABLE_PDF_VIEWER)
 void OnPdfResourceIntercepted(
     const GURL& original_url,
@@ -103,16 +71,6 @@
 
 AtomResourceDispatcherHostDelegate::AtomResourceDispatcherHostDelegate() {}
 
-bool AtomResourceDispatcherHostDelegate::HandleExternalProtocol(
-    const GURL& url,
-    content::ResourceRequestInfo* info) {
-  BrowserThread::PostTask(BrowserThread::UI, FROM_HERE,
-                          base::BindOnce(&HandleExternalProtocolInUI, url,
-                                         info->GetWebContentsGetterForRequest(),
-                                         info->HasUserGesture()));
-  return true;
-}
-
 bool AtomResourceDispatcherHostDelegate::ShouldInterceptResourceAsStream(
     net::URLRequest* request,
     const std::string& mime_type,
merged
  result 100644 252cfa39e9df928f57defee24510a3d26048945d atom/browser/atom_resource_dispatcher_host_delegate.h
  our    100644 eb91b27921e2bcc9761a6f20c949abfa49fcfd77 atom/browser/atom_resource_dispatcher_host_delegate.h
@@ -17,8 +17,6 @@
   AtomResourceDispatcherHostDelegate();
 
   // content::ResourceDispatcherHostDelegate:
-  bool HandleExternalProtocol(const GURL& url,
-                              content::ResourceRequestInfo* info) override;
   bool ShouldInterceptResourceAsStream(net::URLRequest* request,
                                        const std::string& mime_type,
                                        GURL* origin,
changed in both
  base   100644 80ff986e0be400c13388607abfe48fe51ac6d512 atom/browser/login_handler.h
  our    100644 e7f1c5be0094506e01d2cccc0073fa864dfefb56 atom/browser/login_handler.h
  their  100644 4f886ccbfb1984ee63ba97a1b68dd55a4de9af01 atom/browser/login_handler.h
@@ -9,6 +9,11 @@
 #include "base/memory/ref_counted.h"
 #include "base/memory/weak_ptr.h"
 #include "base/strings/string16.h"
+<<<<<<< .our
+=======
+#include "base/synchronization/lock.h"
+#include "content/public/browser/login_delegate.h"
+>>>>>>> .their
 #include "content/public/browser/resource_request_info.h"
 #include "net/base/network_delegate.h"
 
@@ -19,7 +24,11 @@
 namespace atom {
 
 // Handles the HTTP basic auth, must be created on IO thread.
+<<<<<<< .our
 class LoginHandler : public base::RefCountedThreadSafe<LoginHandler> {
+=======
+class LoginHandler : public content::LoginDelegate {
+>>>>>>> .their
  public:
   LoginHandler(net::URLRequest* request,
                const net::AuthChallengeInfo& auth_info,
@@ -40,7 +49,12 @@
   // thread.
   content::WebContents* GetWebContents() const;
 
+<<<<<<< .our
   const net::AuthChallengeInfo* auth_info() const { return &auth_info_; }
+=======
+  // content::LoginDelegate:
+  void OnRequestCancelled() override;
+>>>>>>> .their
 
  private:
   friend class base::RefCountedThreadSafe<LoginHandler>;
merged
  result 100644 995af450799549915249dd3d95d0c2289414496a atom/browser/native_window.cc
  our    100644 4ff2bcfcabfd34d8563f9ed213c03655a99dd9c6 atom/browser/native_window.cc
@@ -60,7 +60,10 @@
 
 NativeWindow::~NativeWindow() {
   // It's possible that the windows gets destroyed before it's closed, in that
-  // case we need to ensure the OnWindowClosed message is still notified.
+  // case we need to ensure the Widget delegate gets destroyed and
+  // OnWindowClosed message is still notified.
+  if (widget_->widget_delegate())
+    widget_->OnNativeWidgetDestroyed();
   NotifyWindowClosed();
 }
 
merged
  result 100644 45482039a3fdac9a681ac93f5dde17d54e207a85 atom/browser/osr/osr_render_widget_host_view.cc
  our    100644 4a2a0747fe2e6bf38c8999b80dbfea31e52a17fd atom/browser/osr/osr_render_widget_host_view.cc
@@ -27,7 +27,7 @@
 #include "content/public/browser/context_factory.h"
 #include "content/public/browser/render_process_host.h"
 #include "media/base/video_frame.h"
-#include "third_party/WebKit/public/platform/WebInputEvent.h"
+#include "third_party/blink/public/platform/web_input_event.h"
 #include "ui/compositor/compositor.h"
 #include "ui/compositor/layer.h"
 #include "ui/compositor/layer_type.h"
merged
  result 100644 f901a86b12dd43182132f60ffc2704167a443709 atom/browser/osr/osr_render_widget_host_view.h
  our    100644 b81f6310f864c00fea50b1aac49dc89173eaa302 atom/browser/osr/osr_render_widget_host_view.h
@@ -31,7 +31,7 @@
 #include "content/browser/renderer_host/render_widget_host_impl.h"
 #include "content/browser/renderer_host/render_widget_host_view_base.h"
 #include "content/browser/web_contents/web_contents_view.h"
-#include "third_party/WebKit/public/platform/WebVector.h"
+#include "third_party/blink/public/platform/web_vector.h"
 #include "third_party/skia/include/core/SkBitmap.h"
 #include "ui/base/ime/text_input_client.h"
 #include "ui/compositor/compositor.h"
merged
  result 100644 e621d99aaf5467ddbe65373f613f51f53f8d2a1b atom/browser/osr/osr_web_contents_view.cc
  our    100644 c8223df0d8c6f3436d323059686e42684ff98462 atom/browser/osr/osr_web_contents_view.cc
@@ -7,7 +7,7 @@
 #include "atom/common/api/api_messages.h"
 #include "content/browser/web_contents/web_contents_impl.h"
 #include "content/public/browser/render_view_host.h"
-#include "third_party/WebKit/public/platform/WebScreenInfo.h"
+#include "third_party/blink/public/platform/web_screen_info.h"
 #include "ui/display/screen.h"
 
 namespace atom {
merged
  result 100644 b32c14356d4dc104e1e779696ca07c1f6c574e59 atom/browser/special_storage_policy.cc
  our    100644 7f94bcd298bc36fb89aadc16a124a239979edb53 atom/browser/special_storage_policy.cc
@@ -4,6 +4,9 @@
 
 #include "atom/browser/special_storage_policy.h"
 
+#include "base/bind.h"
+#include "base/callback.h"
+
 namespace atom {
 
 SpecialStoragePolicy::SpecialStoragePolicy() {}
@@ -34,8 +37,9 @@
   return false;
 }
 
-bool SpecialStoragePolicy::ShouldDeleteCookieOnExit(const GURL& origin) {
-  return false;
+storage::SpecialStoragePolicy::DeleteCookiePredicate
+SpecialStoragePolicy::CreateDeleteCookieOnExitPredicate() {
+  return storage::SpecialStoragePolicy::DeleteCookiePredicate();
 }
 
 }  // namespace atom
merged
  result 100644 ce00ebbc31f6384dbeb9c60208aa51ba410bbc01 atom/browser/special_storage_policy.h
  our    100644 7182bc38de9ccfd630ecae7d776035deba532235 atom/browser/special_storage_policy.h
@@ -20,7 +20,8 @@
   bool HasIsolatedStorage(const GURL& origin) override;
   bool IsStorageSessionOnly(const GURL& origin) override;
   bool HasSessionOnlyOrigins() override;
-  bool ShouldDeleteCookieOnExit(const GURL& origin) override;
+  storage::SpecialStoragePolicy::DeleteCookiePredicate
+  CreateDeleteCookieOnExitPredicate() override;
 
  protected:
   ~SpecialStoragePolicy() override;
merged
  result 100644 32f05baabbb9085383521101bb55ea432c4ea542 atom/common/api/atom_bindings.cc
  our    100644 3dba3d63673ca8eb02044bd1335a3095f0194971 atom/common/api/atom_bindings.cc
@@ -55,7 +55,6 @@
   dict.SetMethod("hang", &Hang);
   dict.SetMethod("log", &Log);
   dict.SetMethod("getHeapStatistics", &GetHeapStatistics);
-  dict.SetMethod("getProcessMemoryInfo", &GetProcessMemoryInfo);
   dict.SetMethod("getCreationTime", &GetCreationTime);
   dict.SetMethod("getSystemMemoryInfo", &GetSystemMemoryInfo);
   dict.SetMethod("getCPUUsage", base::Bind(&AtomBindings::GetCPUUsage,
@@ -160,26 +159,6 @@
 }
 
 // static
-v8::Local<v8::Value> AtomBindings::GetProcessMemoryInfo(v8::Isolate* isolate) {
-  auto metrics = base::ProcessMetrics::CreateCurrentProcessMetrics();
-
-  mate::Dictionary dict = mate::Dictionary::CreateEmpty(isolate);
-  dict.SetHidden("simple", true);
-  dict.Set("workingSetSize",
-           static_cast<double>(metrics->GetWorkingSetSize() >> 10));
-  dict.Set("peakWorkingSetSize",
-           static_cast<double>(metrics->GetPeakWorkingSetSize() >> 10));
-
-  size_t private_bytes, shared_bytes;
-  if (metrics->GetMemoryBytes(&private_bytes, &shared_bytes)) {
-    dict.Set("privateBytes", static_cast<double>(private_bytes >> 10));
-    dict.Set("sharedBytes", static_cast<double>(shared_bytes >> 10));
-  }
-
-  return dict.GetHandle();
-}
-
-// static
 v8::Local<v8::Value> AtomBindings::GetCreationTime(v8::Isolate* isolate) {
   auto timeValue = base::CurrentProcessInfo::CreationTime();
   if (timeValue.is_null()) {
merged
  result 100644 592ca08ba38338c975a5298feed0fd663441f452 atom/common/api/atom_bindings.h
  our    100644 ba8385c979b15286fd7647582e7d0aee93e1974e atom/common/api/atom_bindings.h
@@ -36,7 +36,6 @@
   static void Crash();
   static void Hang();
   static v8::Local<v8::Value> GetHeapStatistics(v8::Isolate* isolate);
-  static v8::Local<v8::Value> GetProcessMemoryInfo(v8::Isolate* isolate);
   static v8::Local<v8::Value> GetCreationTime(v8::Isolate* isolate);
   static v8::Local<v8::Value> GetSystemMemoryInfo(v8::Isolate* isolate,
                                                   mate::Arguments* args);
merged
  result 100644 e5272aeb4e7b8cd6a8d335454e23c40448400401 atom/common/api/features.cc
  our    100644 72ddba0479f952b9d0d8ce80d83951ec9864669b atom/common/api/features.cc
@@ -2,8 +2,10 @@
 // Use of this source code is governed by the MIT license that can be
 // found in the LICENSE file.
 
-#include "atom/common/node_includes.h"
 #include "native_mate/dictionary.h"
+// clang-format off
+#include "atom/common/node_includes.h"  // NOLINT(build/include_alpha)
+// clang-format on
 
 namespace {
 
merged
  result 100644 7b9d7b847fd15d28e4052242da25db8e97106137 atom/common/api/remote_object_freer.cc
  our    100644 8afe8b9a32bc4ba4d5cdfc66ecf7036b8553cb48 atom/common/api/remote_object_freer.cc
@@ -8,7 +8,7 @@
 #include "base/strings/utf_string_conversions.h"
 #include "base/values.h"
 #include "content/public/renderer/render_frame.h"
-#include "third_party/WebKit/public/web/WebLocalFrame.h"
+#include "third_party/blink/public/web/web_local_frame.h"
 
 using blink::WebLocalFrame;
 
merged
  result 100644 300870818b9fdafd6faade02f307674aabf63f23 atom/common/chrome_version.h
  our    100644 35666ab599410942900abd2a7d9ad4b3e5c138af atom/common/chrome_version.h
@@ -8,7 +8,7 @@
 #ifndef ATOM_COMMON_CHROME_VERSION_H_
 #define ATOM_COMMON_CHROME_VERSION_H_
 
-#define CHROME_VERSION_STRING "66.0.3359.181"
+#define CHROME_VERSION_STRING "67.0.3396.99"
 #define CHROME_VERSION "v" CHROME_VERSION_STRING
 
 #endif  // ATOM_COMMON_CHROME_VERSION_H_
merged
  result 100644 318e4ab5968a97ec27c57fce8f023fe86f8a846c atom/common/crash_reporter/crash_reporter_win.cc
  our    100644 c574da71c9de9bd8c7b7cad57d3a0f84708fb97c atom/common/crash_reporter/crash_reporter_win.cc
@@ -112,7 +112,8 @@
   // mov imm64, rax
   record->thunk[0] = 0x48;
   record->thunk[1] = 0xb8;
-  void* handler = &CrashForExceptionInNonABICompliantCodeRange;
+  void* handler =
+      reinterpret_cast<void*>(&CrashForExceptionInNonABICompliantCodeRange);
   memcpy(&record->thunk[2], &handler, 8);
 
   // jmp rax
merged
  result 100644 1f42ad735a01d550f1bca36010b2fbc2d00bdb3d atom/common/keyboard_util.cc
  our    100644 d0a12cb6d91b9688c1bed496e64d6bbaccaf244a atom/common/keyboard_util.cc
@@ -7,7 +7,7 @@
 #include "atom/common/keyboard_util.h"
 #include "base/strings/string_number_conversions.h"
 #include "base/strings/string_util.h"
-#include "third_party/WebKit/public/platform/WebInputEvent.h"
+#include "third_party/blink/public/platform/web_input_event.h"
 #include "ui/events/event_constants.h"
 
 namespace atom {
merged
  result 100644 6ea5a6e49fe89b11d6afac096a340caf69741a65 atom/common/native_mate_converters/blink_converter.cc
  our    100644 f52ec9af2e405f3969453ac22cb402436610c317 atom/common/native_mate_converters/blink_converter.cc
@@ -13,11 +13,11 @@
 #include "base/strings/utf_string_conversions.h"
 #include "content/public/browser/native_web_keyboard_event.h"
 #include "native_mate/dictionary.h"
-#include "third_party/WebKit/public/platform/WebInputEvent.h"
-#include "third_party/WebKit/public/platform/WebMouseEvent.h"
-#include "third_party/WebKit/public/platform/WebMouseWheelEvent.h"
-#include "third_party/WebKit/public/web/WebDeviceEmulationParams.h"
-#include "third_party/WebKit/public/web/WebFindOptions.h"
+#include "third_party/blink/public/platform/web_input_event.h"
+#include "third_party/blink/public/platform/web_mouse_event.h"
+#include "third_party/blink/public/platform/web_mouse_wheel_event.h"
+#include "third_party/blink/public/web/web_device_emulation_params.h"
+#include "third_party/blink/public/web/web_find_options.h"
 #include "ui/base/clipboard/clipboard.h"
 #include "ui/events/keycodes/dom/keycode_converter.h"
 #include "ui/events/keycodes/keyboard_code_conversion.h"
merged
  result 100644 ecec11f44549d4872dbfe00ec88a91cc858513fa atom/common/native_mate_converters/blink_converter.h
  our    100644 5e6315d9b2499fd1e0853b8bd4258b887d222b21 atom/common/native_mate_converters/blink_converter.h
@@ -6,9 +6,9 @@
 #define ATOM_COMMON_NATIVE_MATE_CONVERTERS_BLINK_CONVERTER_H_
 
 #include "native_mate/converter.h"
-#include "third_party/WebKit/public/platform/WebCache.h"
-#include "third_party/WebKit/public/platform/WebInputEvent.h"
-#include "third_party/WebKit/public/web/WebContextMenuData.h"
+#include "third_party/blink/public/platform/web_cache.h"
+#include "third_party/blink/public/platform/web_input_event.h"
+#include "third_party/blink/public/web/web_context_menu_data.h"
 
 namespace blink {
 class WebMouseEvent;
merged
  result 100644 f02c0a976b91e51c16ce7703e38798eb406b23a0 atom/common/native_mate_converters/content_converter.h
  our    100644 18a2d5f1a7c8d0f33cb35e575bae7a4b2740d7cd atom/common/native_mate_converters/content_converter.h
@@ -12,7 +12,7 @@
 #include "content/public/common/referrer.h"
 #include "content/public/common/stop_find_action.h"
 #include "native_mate/converter.h"
-#include "third_party/WebKit/public/platform/modules/permissions/permission_status.mojom.h"
+#include "third_party/blink/public/platform/modules/permissions/permission_status.mojom.h"
 
 namespace content {
 struct ContextMenuParams;
merged
  result 100644 63ee0bdcefbb153152045279b078b2181e2e29fe atom/common/platform_util_linux.cc
  our    100644 8fad8609342a81f46ea2608b3923f85af2d4308b atom/common/platform_util_linux.cc
@@ -32,16 +32,15 @@
   if (!process.IsValid())
     return false;
 
-  if (!wait_for_exit) {
-    base::EnsureProcessGetsReaped(process.Pid());
-    return true;
+  if (wait_for_exit) {
+    int exit_code = -1;
+    if (!process.WaitForExit(&exit_code))
+      return false;
+    return (exit_code == 0);
   }
 
-  int exit_code = -1;
-  if (!process.WaitForExit(&exit_code))
-    return false;
-
-  return (exit_code == 0);
+  base::EnsureProcessGetsReaped(std::move(process));
+  return true;
 }
 
 bool XDGUtil(const std::string& util,
merged
  result 100644 1cc8fc5dfc7b1ef90cbce44ed3c53c3f92e70053 atom/renderer/api/atom_api_renderer_ipc.cc
  our    100644 3e48a4f7d0c11f40e6360b0acc2c83c38e671319 atom/renderer/api/atom_api_renderer_ipc.cc
@@ -10,7 +10,7 @@
 #include "atom/common/node_includes.h"
 #include "content/public/renderer/render_frame.h"
 #include "native_mate/dictionary.h"
-#include "third_party/WebKit/public/web/WebLocalFrame.h"
+#include "third_party/blink/public/web/web_local_frame.h"
 
 using blink::WebLocalFrame;
 using content::RenderFrame;
merged
  result 100644 059f7f7017b4412cd19cd6cba248dac3d4ba3103 atom/renderer/api/atom_api_spell_check_client.cc
  our    100644 5f7985be2f820fdb0a9b7a26032e7fc83ed34952 atom/renderer/api/atom_api_spell_check_client.cc
@@ -13,8 +13,8 @@
 #include "chrome/renderer/spellchecker/spellcheck_worditerator.h"
 #include "native_mate/converter.h"
 #include "native_mate/dictionary.h"
-#include "third_party/WebKit/public/web/WebTextCheckingCompletion.h"
-#include "third_party/WebKit/public/web/WebTextCheckingResult.h"
+#include "third_party/blink/public/web/web_text_checking_completion.h"
+#include "third_party/blink/public/web/web_text_checking_result.h"
 #include "third_party/icu/source/common/unicode/uscript.h"
 
 namespace atom {
merged
  result 100644 b908571429ab8e69c113860ee8b3ae02a49fb340 atom/renderer/api/atom_api_spell_check_client.h
  our    100644 c8b5f7f4ab164307f735cc0bc0651435a42c3034 atom/renderer/api/atom_api_spell_check_client.h
@@ -12,9 +12,9 @@
 #include "base/memory/weak_ptr.h"
 #include "chrome/renderer/spellchecker/spellcheck_worditerator.h"
 #include "native_mate/scoped_persistent.h"
-#include "third_party/WebKit/public/platform/WebSpellCheckPanelHostClient.h"
-#include "third_party/WebKit/public/platform/WebVector.h"
-#include "third_party/WebKit/public/web/WebTextCheckClient.h"
+#include "third_party/blink/public/platform/web_spell_check_panel_host_client.h"
+#include "third_party/blink/public/platform/web_vector.h"
+#include "third_party/blink/public/web/web_text_check_client.h"
 
 namespace blink {
 struct WebTextCheckingResult;
merged
  result 100644 0e96bc135053a3d9293dde49428c9ab0eb346157 atom/renderer/api/atom_api_web_frame.cc
  our    100644 f0f7ef249d73876f7107d3d3865e8fc71ee33945 atom/renderer/api/atom_api_web_frame.cc
@@ -18,17 +18,17 @@
 #include "content/public/renderer/render_view.h"
 #include "native_mate/dictionary.h"
 #include "native_mate/object_template_builder.h"
-#include "third_party/WebKit/Source/platform/weborigin/SchemeRegistry.h"
-#include "third_party/WebKit/public/platform/WebCache.h"
-#include "third_party/WebKit/public/web/WebDocument.h"
-#include "third_party/WebKit/public/web/WebElement.h"
-#include "third_party/WebKit/public/web/WebFrameWidget.h"
-#include "third_party/WebKit/public/web/WebImeTextSpan.h"
-#include "third_party/WebKit/public/web/WebInputMethodController.h"
-#include "third_party/WebKit/public/web/WebLocalFrame.h"
-#include "third_party/WebKit/public/web/WebScriptExecutionCallback.h"
-#include "third_party/WebKit/public/web/WebScriptSource.h"
-#include "third_party/WebKit/public/web/WebView.h"
+#include "third_party/blink/public/platform/web_cache.h"
+#include "third_party/blink/public/web/web_document.h"
+#include "third_party/blink/public/web/web_element.h"
+#include "third_party/blink/public/web/web_frame_widget.h"
+#include "third_party/blink/public/web/web_ime_text_span.h"
+#include "third_party/blink/public/web/web_input_method_controller.h"
+#include "third_party/blink/public/web/web_local_frame.h"
+#include "third_party/blink/public/web/web_script_execution_callback.h"
+#include "third_party/blink/public/web/web_script_source.h"
+#include "third_party/blink/public/web/web_view.h"
+#include "third_party/blink/renderer/platform/weborigin/scheme_registry.h"
 
 #include "atom/common/node_includes.h"
 
merged
  result 100644 9fbdb165e69728dd7d8301eaa79abfd85bf5860f atom/renderer/api/atom_api_web_frame.h
  our    100644 4cc6386abcb41cfa29fdc002f6fb267329bb112d atom/renderer/api/atom_api_web_frame.h
@@ -11,7 +11,7 @@
 
 #include "native_mate/handle.h"
 #include "native_mate/wrappable.h"
-#include "third_party/WebKit/public/platform/WebCache.h"
+#include "third_party/blink/public/platform/web_cache.h"
 
 namespace blink {
 class WebLocalFrame;
merged
  result 100644 7316fdf0bd651cd5f563584095aaf97da6c4d6ae atom/renderer/atom_autofill_agent.cc
  our    100644 5a8d712a82aaafc37880efea3fb4bae23b7d0c4b atom/renderer/atom_autofill_agent.cc
@@ -9,12 +9,12 @@
 #include "atom/common/api/api_messages.h"
 #include "content/public/renderer/render_frame.h"
 #include "content/public/renderer/render_view.h"
-#include "third_party/WebKit/public/platform/WebKeyboardEvent.h"
-#include "third_party/WebKit/public/platform/WebString.h"
-#include "third_party/WebKit/public/web/WebDocument.h"
-#include "third_party/WebKit/public/web/WebLocalFrame.h"
-#include "third_party/WebKit/public/web/WebOptionElement.h"
-#include "third_party/WebKit/public/web/WebUserGestureIndicator.h"
+#include "third_party/blink/public/platform/web_keyboard_event.h"
+#include "third_party/blink/public/platform/web_string.h"
+#include "third_party/blink/public/web/web_document.h"
+#include "third_party/blink/public/web/web_local_frame.h"
+#include "third_party/blink/public/web/web_option_element.h"
+#include "third_party/blink/public/web/web_user_gesture_indicator.h"
 #include "ui/events/keycodes/keyboard_codes.h"
 #include "ui/gfx/geometry/rect_f.h"
 
merged
  result 100644 d16d64e57c1712da5c5b4e9200cd1ee5fccb6772 atom/renderer/atom_autofill_agent.h
  our    100644 3dbacb21d3c1ba0665e0e86edc8ad7f19e2e19c9 atom/renderer/atom_autofill_agent.h
@@ -10,10 +10,10 @@
 #include "base/memory/weak_ptr.h"
 #include "content/public/renderer/render_frame_observer.h"
 #include "content/public/renderer/render_view_observer.h"
-#include "third_party/WebKit/public/web/WebAutofillClient.h"
-#include "third_party/WebKit/public/web/WebFormControlElement.h"
-#include "third_party/WebKit/public/web/WebInputElement.h"
-#include "third_party/WebKit/public/web/WebNode.h"
+#include "third_party/blink/public/web/web_autofill_client.h"
+#include "third_party/blink/public/web/web_form_control_element.h"
+#include "third_party/blink/public/web/web_input_element.h"
+#include "third_party/blink/public/web/web_node.h"
 
 namespace atom {
 
merged
  result 100644 5f5292bf310f1665fe7a471f1b0b1d50465f3fbc atom/renderer/atom_render_frame_observer.cc
  our    100644 ea2355fd968339600ae8093524f1c3dcfd2f4ff3 atom/renderer/atom_render_frame_observer.cc
@@ -19,12 +19,12 @@
 #include "native_mate/dictionary.h"
 #include "net/base/net_module.h"
 #include "net/grit/net_resources.h"
-#include "third_party/WebKit/public/web/WebDocument.h"
-#include "third_party/WebKit/public/web/WebDraggableRegion.h"
-#include "third_party/WebKit/public/web/WebElement.h"
-#include "third_party/WebKit/public/web/WebKit.h"
-#include "third_party/WebKit/public/web/WebLocalFrame.h"
-#include "third_party/WebKit/public/web/WebScriptSource.h"
+#include "third_party/blink/public/web/web_document.h"
+#include "third_party/blink/public/web/web_draggable_region.h"
+#include "third_party/blink/public/web/web_element.h"
+#include "third_party/blink/public/web/blink.h"
+#include "third_party/blink/public/web/web_local_frame.h"
+#include "third_party/blink/public/web/web_script_source.h"
 #include "ui/base/resource/resource_bundle.h"
 
 namespace atom {
merged
  result 100644 b45a7a381ebeceb3e0160eb24478f4c9d232fb76 atom/renderer/atom_render_frame_observer.h
  our    100644 e774741c019956a3bff00db2f6d2b133bf1be6de atom/renderer/atom_render_frame_observer.h
@@ -8,7 +8,7 @@
 #include "atom/renderer/renderer_client_base.h"
 #include "base/strings/string16.h"
 #include "content/public/renderer/render_frame_observer.h"
-#include "third_party/WebKit/public/web/WebLocalFrame.h"
+#include "third_party/blink/public/web/web_local_frame.h"
 
 namespace base {
 class ListValue;
merged
  result 100644 89abe602a431a0284d837d26fb2de1440d36db9a atom/renderer/atom_render_view_observer.cc
  our    100644 1a425dfa1d40953efb192c3405baff61e96cb734 atom/renderer/atom_render_view_observer.cc
@@ -7,7 +7,7 @@
 #include "atom/common/api/api_messages.h"
 #include "content/public/renderer/render_view.h"
 #include "ipc/ipc_message_macros.h"
-#include "third_party/WebKit/public/web/WebView.h"
+#include "third_party/blink/public/web/web_view.h"
 
 namespace atom {
 
merged
  result 100644 e2ddfbde244a20e1d0ed747933f0a9b325b59ac3 atom/renderer/atom_renderer_client.cc
  our    100644 204f17c2cf0d2d4ec4a71bdbecfcd1cbdc5fc8be atom/renderer/atom_renderer_client.cc
@@ -18,8 +18,8 @@
 #include "base/command_line.h"
 #include "content/public/renderer/render_frame.h"
 #include "native_mate/dictionary.h"
-#include "third_party/WebKit/public/web/WebDocument.h"
-#include "third_party/WebKit/public/web/WebLocalFrame.h"
+#include "third_party/blink/public/web/web_document.h"
+#include "third_party/blink/public/web/web_local_frame.h"
 
 #include "atom/common/node_includes.h"
 #include "atom_natives.h"  // NOLINT: This file is generated with js2c
merged
  result 100644 9c153c02fd29b23c3de4a0009a8155f1ced21a4f atom/renderer/atom_sandboxed_renderer_client.cc
  our    100644 6e29fe45a69f44856d7fca449ec1be4eaf6970a2 atom/renderer/atom_sandboxed_renderer_client.cc
@@ -20,8 +20,8 @@
 #include "chrome/renderer/printing/print_web_view_helper.h"
 #include "content/public/renderer/render_frame.h"
 #include "native_mate/dictionary.h"
-#include "third_party/WebKit/public/web/WebDocument.h"
-#include "third_party/WebKit/public/web/WebKit.h"
+#include "third_party/blink/public/web/web_document.h"
+#include "third_party/blink/public/web/blink.h"
 
 #include "atom/common/node_includes.h"
 #include "atom_natives.h"  // NOLINT: This file is generated with js2c
@@ -151,7 +151,6 @@
   b.SetMethod("getPid", &base::GetCurrentProcId);
   b.SetMethod("getResourcesPath", &NodeBindings::GetHelperResourcesPath);
   b.SetMethod("getHeapStatistics", &AtomBindings::GetHeapStatistics);
-  b.SetMethod("getProcessMemoryInfo", &AtomBindings::GetProcessMemoryInfo);
   b.SetMethod("getSystemMemoryInfo", &AtomBindings::GetSystemMemoryInfo);
   b.SetMethod("getCPUUsage", base::Bind(&AtomBindings::GetCPUUsage,
                                         base::Unretained(metrics_.get())));
merged
  result 100644 ecf76347b29d7ddfe20d0a5b03746535859eca01 atom/renderer/content_settings_observer.cc
  our    100644 e5a50fa5e20d7e1929673f1ee8a389429672c7e1 atom/renderer/content_settings_observer.cc
@@ -5,9 +5,9 @@
 #include "atom/renderer/content_settings_observer.h"
 
 #include "content/public/renderer/render_frame.h"
-#include "third_party/WebKit/public/platform/URLConversion.h"
-#include "third_party/WebKit/public/platform/WebSecurityOrigin.h"
-#include "third_party/WebKit/public/web/WebLocalFrame.h"
+#include "third_party/blink/public/platform/url_conversion.h"
+#include "third_party/blink/public/platform/web_security_origin.h"
+#include "third_party/blink/public/web/web_local_frame.h"
 
 namespace atom {
 
merged
  result 100644 2267550e8a5a3d95293d6639c5403667dfdc8475 atom/renderer/content_settings_observer.h
  our    100644 c540226d19476c6b292be02c5c84db26aaf11c92 atom/renderer/content_settings_observer.h
@@ -7,7 +7,7 @@
 
 #include "base/compiler_specific.h"
 #include "content/public/renderer/render_frame_observer.h"
-#include "third_party/WebKit/public/platform/WebContentSettingsClient.h"
+#include "third_party/blink/public/platform/web_content_settings_client.h"
 
 namespace atom {
 
merged
  result 100644 e188951d14a4483c57fd281b11bb2e90ae5eefd7 atom/renderer/renderer_client_base.cc
  our    100644 69490420ef5b8f87e7cb8fd97ebd5ec4509fa1ae atom/renderer/renderer_client_base.cc
@@ -26,13 +26,13 @@
 #include "content/public/renderer/render_frame.h"
 #include "content/public/renderer/render_view.h"
 #include "native_mate/dictionary.h"
-#include "third_party/WebKit/Source/platform/weborigin/SchemeRegistry.h"
-#include "third_party/WebKit/public/web/WebCustomElement.h"  // NOLINT(build/include_alpha)
-#include "third_party/WebKit/public/web/WebFrameWidget.h"
-#include "third_party/WebKit/public/web/WebKit.h"
-#include "third_party/WebKit/public/web/WebPluginParams.h"
-#include "third_party/WebKit/public/web/WebScriptSource.h"
-#include "third_party/WebKit/public/web/WebSecurityPolicy.h"
+#include "third_party/blink/renderer/platform/weborigin/scheme_registry.h"
+#include "third_party/blink/public/web/blink.h"
+#include "third_party/blink/public/web/web_custom_element.h"  // NOLINT(build/include_alpha)
+#include "third_party/blink/public/web/web_frame_widget.h"
+#include "third_party/blink/public/web/web_plugin_params.h"
+#include "third_party/blink/public/web/web_script_source.h"
+#include "third_party/blink/public/web/web_security_policy.h"
 
 #if defined(OS_MACOSX)
 #include "base/strings/sys_string_conversions.h"
@@ -85,7 +85,7 @@
   std::vector<std::string> standard_schemes_list =
       ParseSchemesCLISwitch(switches::kStandardSchemes);
   for (const std::string& scheme : standard_schemes_list)
-    url::AddStandardScheme(scheme.c_str(), url::SCHEME_WITHOUT_PORT);
+    url::AddStandardScheme(scheme.c_str(), url::SCHEME_WITH_HOST);
   isolated_world_ = base::CommandLine::ForCurrentProcess()->HasSwitch(
       switches::kContextIsolation);
 }
merged
  result 100644 3c346fa4b1db1f176c05e4769f92b2f444bb6e18 atom/renderer/renderer_client_base.h
  our    100644 f04be0a0fb555fce88aa006c6c6623cc8730d4ed atom/renderer/renderer_client_base.h
@@ -9,7 +9,7 @@
 #include <vector>
 
 #include "content/public/renderer/content_renderer_client.h"
-#include "third_party/WebKit/public/web/WebLocalFrame.h"
+#include "third_party/blink/public/web/web_local_frame.h"
 
 namespace atom {
 
merged
  result 100644 80de85ed7c74290716d53dbeb6621d61a118c795 brightray/brightray.gyp
  our    100644 f233257e88bad8f0ff703034bea02e4715a5b5b9 brightray/brightray.gyp
@@ -23,7 +23,7 @@
         '<(libchromiumcontent_src_dir)/third_party/skia/include/core',
         '<(libchromiumcontent_src_dir)/third_party/skia/include/gpu',
         '<(libchromiumcontent_src_dir)/third_party/mojo/src',
-        '<(libchromiumcontent_src_dir)/third_party/WebKit',
+        '<(libchromiumcontent_src_dir)/third_party/blink',
         '<(libchromiumcontent_src_dir)/third_party/khronos',
         '<(libchromiumcontent_src_dir)/third_party/protobuf/src',
         '<(libchromiumcontent_dir)/gen',
@@ -41,9 +41,9 @@
           '<(libchromiumcontent_src_dir)/third_party/icu/source/common',
           '<(libchromiumcontent_src_dir)/third_party/mojo/src',
           '<(libchromiumcontent_src_dir)/third_party/khronos',
-          '<(libchromiumcontent_src_dir)/third_party/WebKit',
+          '<(libchromiumcontent_src_dir)/third_party/blink',
           '<(libchromiumcontent_dir)/gen',
-          '<(libchromiumcontent_dir)/gen/third_party/WebKit',
+          '<(libchromiumcontent_dir)/gen/third_party/blink',
         ],
       },
       'defines': [
merged
  result 100644 93b8cef96d4fd2848e66f9b96e93223186785060 brightray/browser/browser_client.cc
  our    100644 b2b7d36301f40fbb3c2154ae83d475027a3bb15b brightray/browser/browser_client.cc
@@ -39,7 +39,8 @@
 void BrowserClient::SetApplicationLocale(const std::string& locale) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
 
-  if (!BrowserThread::PostTask(
+  if (!BrowserThread::IsThreadInitialized(BrowserThread::IO) ||
+      !BrowserThread::PostTask(
           BrowserThread::IO, FROM_HERE,
           base::BindOnce(&SetApplicationLocaleOnIOThread, locale))) {
     g_io_thread_application_locale.Get() = locale;
merged
  result 100644 10741b78392030d6d353c8f5f7c1f86bdd4a6077 brightray/browser/io_thread.cc
  our    100644 4528cf7bfa57623ccddff71b346628a706e1a2e6 brightray/browser/io_thread.cc
@@ -5,7 +5,7 @@
 #include "brightray/browser/io_thread.h"
 
 #include "content/public/browser/browser_thread.h"
-#include "net/proxy_resolution/proxy_service.h"
+#include "net/proxy_resolution/proxy_resolution_service.h"
 #include "net/url_request/url_request_context.h"
 #include "net/url_request/url_request_context_builder.h"
 #include "net/url_request/url_request_context_getter.h"
@@ -36,14 +36,12 @@
   url_request_context_getter_->AddRef();
 
 #if defined(USE_NSS_CERTS)
-  net::SetMessageLoopForNSSHttpIO();
   net::SetURLRequestContextForNSSHttpIO(url_request_context_.get());
 #endif
 }
 
 void IOThread::CleanUp() {
 #if defined(USE_NSS_CERTS)
-  net::ShutdownNSSHttpIO();
   net::SetURLRequestContextForNSSHttpIO(nullptr);
 #endif
   // Explicitly release before the IO thread gets destroyed.
merged
  result 100644 cc1d0f082012fafe74f5c28b85cd1f7441e2ae6c brightray/browser/net/require_ct_delegate.cc
  our    100644 b3c57650bf00dd33adec13bd59adce7ea194fe23 brightray/browser/net/require_ct_delegate.cc
@@ -23,7 +23,9 @@
 }
 
 RequireCTDelegate::CTRequirementLevel RequireCTDelegate::IsCTRequiredForHost(
-    const std::string& host) {
+    const std::string& host,
+    const net::X509Certificate* chain,
+    const net::HashValueVector& hashes) {
   DCHECK_CURRENTLY_ON(content::BrowserThread::IO);
   if (!ct_excluded_hosts_.empty() &&
       (ct_excluded_hosts_.find(host) != ct_excluded_hosts_.end()))
merged
  result 100644 f1fb2c144ad1d708c9565423b1b5f77b2a126099 brightray/browser/net/require_ct_delegate.h
  our    100644 6fcb1c63f106b367a31946f1888171455a63d31b brightray/browser/net/require_ct_delegate.h
@@ -22,7 +22,10 @@
   void ClearCTExcludedHostsList();
 
   // net::TransportSecurityState::RequireCTDelegate:
-  CTRequirementLevel IsCTRequiredForHost(const std::string& host) override;
+  CTRequirementLevel IsCTRequiredForHost(
+      const std::string& host,
+      const net::X509Certificate* chain,
+      const net::HashValueVector& hashes) override;
 
  private:
   std::set<std::string> ct_excluded_hosts_;
changed in both
  base   100644 6bad48ee517b659745e8ba41e1379c5ec9a0a37c brightray/browser/url_request_context_getter.cc
  our    100644 c07ba80cbc522030af580adc5d8676ed31d592d1 brightray/browser/url_request_context_getter.cc
  their  100644 2fa3e628d1d13392b821a8d3a46fc9f4c4108e1d brightray/browser/url_request_context_getter.cc
@@ -39,10 +39,12 @@
 #include "net/proxy_resolution/pac_file_fetcher_impl.h"
 #include "net/proxy_resolution/proxy_config.h"
 #include "net/proxy_resolution/proxy_config_service.h"
-#include "net/proxy_resolution/proxy_service.h"
+#include "net/proxy_resolution/proxy_config_with_annotation.h"
+#include "net/proxy_resolution/proxy_resolution_service.h"
 #include "net/ssl/channel_id_service.h"
 #include "net/ssl/default_channel_id_store.h"
 #include "net/ssl/ssl_config_service_defaults.h"
+#include "net/traffic_annotation/network_traffic_annotation.h"
 #include "net/url_request/data_protocol_handler.h"
 #include "net/url_request/file_protocol_handler.h"
 #include "net/url_request/static_http_user_agent_settings.h"
@@ -268,13 +270,17 @@
       proxy_config.proxy_rules().bypass_rules.ParseFromString(
           command_line.GetSwitchValueASCII(switches::kProxyBypassList));
       storage_->set_proxy_resolution_service(
-          net::ProxyResolutionService::CreateFixed(proxy_config));
+          net::ProxyResolutionService::CreateFixed(
+              net::ProxyConfigWithAnnotation(proxy_config,
+                                             NO_TRAFFIC_ANNOTATION_YET)));
     } else if (command_line.HasSwitch(switches::kProxyPacUrl)) {
       auto proxy_config = net::ProxyConfig::CreateFromCustomPacURL(
           GURL(command_line.GetSwitchValueASCII(switches::kProxyPacUrl)));
       proxy_config.set_pac_mandatory(true);
       storage_->set_proxy_resolution_service(
-          net::ProxyResolutionService::CreateFixed(proxy_config));
+          net::ProxyResolutionService::CreateFixed(
+              net::ProxyConfigWithAnnotation(proxy_config,
+                                             NO_TRAFFIC_ANNOTATION_YET)));
     } else {
       storage_->set_proxy_resolution_service(
           net::ProxyResolutionService::CreateUsingSystemProxyResolver(
merged
  result 100644 a392661a63c0f8f92a2c6f2b98870ec5848e66c2 build/args/all.gn
  our    100644 8f27ad1130e0cd28e43542a867b289e1bdf63f10 build/args/all.gn
@@ -6,6 +6,5 @@
 v8_promise_internal_field_count = 1
 v8_typed_array_max_size_in_heap = 0
 
-enable_widevine = true
 proprietary_codecs = true
 ffmpeg_branding = "Chrome"
merged
  result 100644 f91bc94a12fd4578663d82c6fdea26ed7399246f chromium_src/chrome/browser/printing/pdf_to_emf_converter.cc
  our    100644 cd5fef18c1fd91d0cf97daed0ca97a8050836c6e chromium_src/chrome/browser/printing/pdf_to_emf_converter.cc
@@ -26,8 +26,8 @@
 #include "chrome/common/chrome_utility_printing_messages.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/child_process_data.h"
-#include "content/public/browser/utility_process_host.h"
-#include "content/public/browser/utility_process_host_client.h"
+#include "content/browser/utility_process_host.h"
+#include "content/browser/utility_process_host_client.h"
 #include "printing/emf_win.h"
 #include "printing/pdf_render_settings.h"
 #include "ui/base/l10n/l10n_util.h"
@@ -421,6 +421,7 @@
 void PdfConverterUtilityProcessHostClient::Start(
     const scoped_refptr<base::RefCountedMemory>& data,
     const PdfConverter::StartCallback& start_callback) {
+  CHECK(false) << "Printing doesn't work yet.";
   if (!BrowserThread::CurrentlyOn(BrowserThread::IO)) {
     BrowserThread::PostTask(
         BrowserThread::IO, FROM_HERE,
@@ -435,9 +436,12 @@
   // NOTE: This process _must_ be sandboxed, otherwise the pdf dll will load
   // gdiplus.dll, change how rendering happens, and not be able to correctly
   // generate when sent to a metafile DC.
+  /*
   utility_process_host_ = content::UtilityProcessHost::Create(
                               this, base::ThreadTaskRunnerHandle::Get())
                               ->AsWeakPtr();
+  */
+  utility_process_host_ = nullptr;
   utility_process_host_->SetName(GetName());
 
   base::PostTaskAndReplyWithResult(
@@ -546,7 +550,11 @@
 
 bool PdfConverterUtilityProcessHostClient::Send(IPC::Message* msg) {
   if (utility_process_host_)
+#if 1
+    CHECK(false) << "Printing is broken.";
+#else
     return utility_process_host_->Send(msg);
+#endif
   delete msg;
   return false;
 }
merged
  result 100644 54010e6a9d51419811a0eb812a08f5eeeb4c83ab chromium_src/chrome/browser/printing/print_job.cc
  our    100644 80d9cc3c21a12b8256618405050f80bb6c2f08e4 chromium_src/chrome/browser/printing/print_job.cc
@@ -265,6 +265,7 @@
   const int kPrinterDpi = settings().dpi();
   PdfRenderSettings settings(
       content_area, gfx::Point(0, 0), gfx::Size(kPrinterDpi, kPrinterDpi), /*autorotate=*/true,
+      settings_.color() == COLOR,
       print_text_with_gdi ? PdfRenderSettings::Mode::GDI_TEXT
                           : PdfRenderSettings::Mode::NORMAL);
   pdf_conversion_state_->Start(
@@ -313,6 +314,7 @@
   const int kPrinterDpi = settings().dpi();
   PdfRenderSettings settings(
       content_area, physical_offsets, gfx::Size(kPrinterDpi, kPrinterDpi), true /* autorotate? */,
+      settings_.color() == COLOR,
       ps_level2 ? PdfRenderSettings::Mode::POSTSCRIPT_LEVEL2
                 : PdfRenderSettings::Mode::POSTSCRIPT_LEVEL3);
   pdf_conversion_state_->Start(
merged
  result 100644 9c23a80c221976b369a605db7ea68a55b12af472 chromium_src/chrome/browser/printing/printing_message_filter.cc
  our    100644 52c6ecee81168a39d48e9c9a5f3a1cb71996172a chromium_src/chrome/browser/printing/printing_message_filter.cc
@@ -17,7 +17,7 @@
 #include "content/public/browser/render_frame_host.h"
 #include "content/public/browser/web_contents.h"
 #include "content/public/common/child_process_host.h"
-#include "printing/features/features.h"
+#include "printing/buildflags/buildflags.h"
 
 #if defined(OS_ANDROID)
 #include "base/strings/string_number_conversions.h"
merged
  result 100644 f207c56b09be7b01e0bdc950b52b59aed46b44f8 chromium_src/chrome/browser/process_singleton_posix.cc
  our    100644 4891743710d16673c6a72d76a303f6ac56a5ad32 chromium_src/chrome/browser/process_singleton_posix.cc
@@ -1045,7 +1045,7 @@
 
   sock_ = sock;
 
-  if (BrowserThread::IsMessageLoopValid(BrowserThread::IO)) {
+  if (BrowserThread::IsThreadInitialized(BrowserThread::IO)) {
     StartListeningOnSocket();
   } else {
     listen_on_ready_ = true;
merged
  result 100644 6a890d22e1153c220a588dd501226b86d53824b2 chromium_src/chrome/browser/ssl/security_state_tab_helper.h
  our    100644 2fcb9ffbd1c2f22db198019b67f4a6f5b26b7ec6 chromium_src/chrome/browser/ssl/security_state_tab_helper.h
@@ -11,7 +11,7 @@
 #include "components/security_state/core/security_state.h"
 #include "content/public/browser/web_contents_observer.h"
 #include "content/public/browser/web_contents_user_data.h"
-#include "third_party/WebKit/public/platform/WebSecurityStyle.h"
+#include "third_party/blink/public/platform/web_security_style.h"
 
 namespace content {
 class NavigationHandle;
merged
  result 100644 07d05c397f4b8c380dbff68b07aea7a1ada4db3a chromium_src/chrome/common/chrome_paths.cc
  our    100644 30fe1fd7ba9624b1630d99f5c00049fb17b69795 chromium_src/chrome/common/chrome_paths.cc
@@ -8,6 +8,7 @@
 #include "base/lazy_instance.h"
 #include "base/logging.h"
 #include "base/mac/bundle_locations.h"
+#include "base/native_library.h"
 #include "base/path_service.h"
 #include "base/strings/string_util.h"
 #include "base/sys_info.h"
@@ -16,7 +17,8 @@
 #include "chrome/common/chrome_constants.h"
 #include "chrome/common/chrome_paths_internal.h"
 #include "chrome/common/widevine_cdm_constants.h"
-#include "media/media_features.h"
+#include "media/cdm/cdm_paths.h"
+#include "media/media_buildflags.h"
 #include "third_party/widevine/cdm/stub/widevine_cdm_version.h"
 #include "third_party/widevine/cdm/widevine_cdm_common.h"
 
@@ -37,6 +39,45 @@
 
 namespace {
 
+// Taken from src/media/cdm/cdm_paths.cc
+const char kPlatformSpecific[] = "_platform_specific";
+
+// Name of the component platform in the manifest.
+const char kComponentPlatform[] =
+#if defined(OS_MACOSX)
+    "mac";
+#elif defined(OS_WIN)
+    "win";
+#elif defined(OS_CHROMEOS)
+    "cros";
+#elif defined(OS_LINUX)
+    "linux";
+#else
+    "unsupported_platform";
+#endif
+
+// Name of the component architecture in the manifest.
+const char kComponentArch[] =
+#if defined(ARCH_CPU_X86)
+    "x86";
+#elif defined(ARCH_CPU_X86_64)
+    "x64";
+#elif defined(ARCH_CPU_ARMEL)
+    "arm";
+#else
+    "unsupported_arch";
+#endif
+// End src/media/cdm/cdm_paths.cc
+
+base::FilePath GetWidevinePath() {
+  base::FilePath path;
+  const std::string kPlatformArch =
+      std::string(kComponentPlatform) + "_" + kComponentArch;
+  return path.AppendASCII(kWidevineCdmBaseDirectory)
+      .AppendASCII(kPlatformSpecific)
+      .AppendASCII(kPlatformArch);
+}
+
 // The Pepper Flash plugins are in a directory with this name.
 const base::FilePath::CharType kPepperFlashBaseDirectory[] =
     FILE_PATH_LITERAL("PepperFlash");
@@ -369,13 +410,14 @@
       cur = cur.AppendASCII(kWidevineCdmBaseDirectory);
       break;
 #endif  // defined(WIDEVINE_CDM_IS_COMPONENT)
-    // TODO(xhwang): FILE_WIDEVINE_CDM_ADAPTER has different meanings.
-    // In the component case, this is the source adapter. Otherwise, it is the
-    // actual Pepper module that gets loaded.
-    case chrome::FILE_WIDEVINE_CDM_ADAPTER:
+    // TODO(crbug.com/663554): Remove this after component updated CDM is
+    // supported on Linux and ChromeOS.
+    case chrome::FILE_WIDEVINE_CDM:
       if (!GetInternalPluginsDirectory(&cur))
         return false;
-      cur = cur.AppendASCII(kWidevineCdmAdapterFileName);
+      cur =
+          cur.Append(GetWidevinePath())
+             .AppendASCII(base::GetNativeLibraryName(kWidevineCdmLibraryName));
       break;
 #endif  // defined(WIDEVINE_CDM_AVAILABLE) && BUILDFLAG(ENABLE_LIBRARY_CDMS)
     case chrome::FILE_RESOURCES_PACK:
merged
  result 100644 53197be0760586d5d6ef1ccd0ba570ef1d2d3525 chromium_src/chrome/common/chrome_paths.h
  our    100644 61a5012475c339c02a2ec3f3a7bcd537aaab608e chromium_src/chrome/common/chrome_paths.h
@@ -98,7 +98,7 @@
                                // (subdir of DIR_PNACL_BASE).
   DIR_COMPONENT_WIDEVINE_CDM,  // Directory that contains component-updated
                                // Widevine CDM files.
-  FILE_WIDEVINE_CDM_ADAPTER,   // Full path to the Widevine CDM adapter file.
+  FILE_WIDEVINE_CDM,           // Full path to the Widevine CDM.
   FILE_RESOURCES_PACK,         // Full path to the .pak file containing
                                // binary data (e.g., html files and images
                                // used by internal pages).
merged
  result 100644 0f4fa21ede75b1083857c5d76a20b7e73ebfde17 chromium_src/chrome/common/chrome_utility_printing_messages.h
  our    100644 fc71f0bd05f37de8e4c2a64fbc3356b322bf1f77 chromium_src/chrome/common/chrome_utility_printing_messages.h
@@ -13,7 +13,7 @@
 #include "ipc/ipc_param_traits.h"
 #include "ipc/ipc_platform_file.h"
 #include "printing/backend/print_backend.h"
-#include "printing/features/features.h"
+#include "printing/buildflags/buildflags.h"
 #include "printing/page_range.h"
 #include "printing/pdf_render_settings.h"
 #include "printing/pwg_raster_settings.h"
merged
  result 100644 ae42b58c4564e6141273232ca2f25bd93aa8081a chromium_src/chrome/common/print_messages.h
  our    100644 1ca21544c252aedfdd26ffabd33bb8c4501ef276 chromium_src/chrome/common/print_messages.h
@@ -13,7 +13,7 @@
 #include "ipc/ipc_message_macros.h"
 #include "printing/page_size_margins.h"
 #include "printing/print_job_constants.h"
-#include "third_party/WebKit/public/web/WebPrintScalingOption.h"
+#include "third_party/blink/public/web/web_print_scaling_option.h"
 #include "ui/gfx/geometry/rect.h"
 #include "ui/gfx/native_widget_types.h"
 
merged
  result 100644 91540b8cb6e2d587b15a18cea35047c8e2ba4e21 chromium_src/chrome/renderer/media/chrome_key_systems.cc
  our    100644 c4ab859f06ba0758e857a222d7caf87230adb1fe chromium_src/chrome/renderer/media/chrome_key_systems.cc
@@ -17,7 +17,7 @@
 #include "content/public/renderer/render_thread.h"
 #include "media/base/eme_constants.h"
 #include "media/base/key_system_properties.h"
-#include "media/media_features.h"
+#include "media/media_buildflags.h"
 
 #if BUILDFLAG(ENABLE_LIBRARY_CDMS)
 #include "content/public/renderer/key_system_support.h"
@@ -37,8 +37,8 @@
 using media::SupportedCodecs;
 
 #if BUILDFLAG(ENABLE_LIBRARY_CDMS)
-static const char kExternalClearKeyPepperType[] =
-    "application/x-ppapi-clearkey-cdm";
+// static const char kExternalClearKeyPepperType[] =
+//     "application/x-ppapi-clearkey-cdm";
 
 // KeySystemProperties implementation for external Clear Key systems.
 class ExternalClearKeyProperties : public KeySystemProperties {
@@ -102,10 +102,6 @@
     return media::EmeFeatureSupport::NOT_SUPPORTED;
   }
 
-  std::string GetPepperType() const override {
-    return kExternalClearKeyPepperType;
-  }
-
  private:
   const std::string key_system_name_;
 };
merged
  result 100644 87933807a7111d1e722b5d86594218e95b43a400 chromium_src/chrome/renderer/printing/print_web_view_helper.cc
  our    100644 506223fc82e63ee682a2e608cc6957c55d958115 chromium_src/chrome/renderer/printing/print_web_view_helper.cc
@@ -25,24 +25,24 @@
 #include "net/base/escape.h"
 #include "printing/pdf_metafile_skia.h"
 #include "printing/units.h"
-#include "third_party/WebKit/public/mojom/page/page_visibility_state.mojom.h"
-#include "third_party/WebKit/public/platform/WebDoubleSize.h"
-#include "third_party/WebKit/public/platform/WebSize.h"
-#include "third_party/WebKit/public/platform/WebURLRequest.h"
-#include "third_party/WebKit/public/web/WebConsoleMessage.h"
-#include "third_party/WebKit/public/web/WebDocument.h"
-#include "third_party/WebKit/public/web/WebElement.h"
-#include "third_party/WebKit/public/web/WebFrameClient.h"
-#include "third_party/WebKit/public/web/WebFrameWidget.h"
-#include "third_party/WebKit/public/web/WebLocalFrame.h"
-#include "third_party/WebKit/public/web/WebPlugin.h"
-#include "third_party/WebKit/public/web/WebPluginDocument.h"
-#include "third_party/WebKit/public/web/WebPrintParams.h"
-#include "third_party/WebKit/public/web/WebPrintScalingOption.h"
-#include "third_party/WebKit/public/web/WebScriptSource.h"
-#include "third_party/WebKit/public/web/WebSettings.h"
-#include "third_party/WebKit/public/web/WebView.h"
-#include "third_party/WebKit/public/web/WebViewClient.h"
+#include "third_party/blink/public/mojom/page/page_visibility_state.mojom.h"
+#include "third_party/blink/public/platform/web_double_size.h"
+#include "third_party/blink/public/platform/web_size.h"
+#include "third_party/blink/public/platform/web_url_request.h"
+#include "third_party/blink/public/web/web_console_message.h"
+#include "third_party/blink/public/web/web_document.h"
+#include "third_party/blink/public/web/web_element.h"
+#include "third_party/blink/public/web/web_frame_client.h"
+#include "third_party/blink/public/web/web_frame_widget.h"
+#include "third_party/blink/public/web/web_local_frame.h"
+#include "third_party/blink/public/web/web_plugin.h"
+#include "third_party/blink/public/web/web_plugin_document.h"
+#include "third_party/blink/public/web/web_print_params.h"
+#include "third_party/blink/public/web/web_print_scaling_option.h"
+#include "third_party/blink/public/web/web_script_source.h"
+#include "third_party/blink/public/web/web_settings.h"
+#include "third_party/blink/public/web/web_view.h"
+#include "third_party/blink/public/web/web_view_client.h"
 #include "third_party/skia/include/core/SkCanvas.h"
 #include "ui/base/resource/resource_bundle.h"
 
merged
  result 100644 b6bc0f4a9336c7c8394bdbf73960e6fafb8d9739 chromium_src/chrome/renderer/printing/print_web_view_helper.h
  our    100644 f69ab823751bee88329e6d88c12fed12e01ac6b2 chromium_src/chrome/renderer/printing/print_web_view_helper.h
@@ -16,10 +16,10 @@
 #include "content/public/renderer/render_frame_observer.h"
 #include "content/public/renderer/render_frame_observer_tracker.h"
 #include "printing/pdf_metafile_skia.h"
-#include "third_party/WebKit/public/platform/WebCanvas.h"
-#include "third_party/WebKit/public/web/WebLocalFrame.h"
-#include "third_party/WebKit/public/web/WebNode.h"
-#include "third_party/WebKit/public/web/WebPrintParams.h"
+#include "third_party/blink/public/platform/web_canvas.h"
+#include "third_party/blink/public/web/web_local_frame.h"
+#include "third_party/blink/public/web/web_node.h"
+#include "third_party/blink/public/web/web_print_params.h"
 #include "ui/gfx/geometry/size.h"
 
 struct PrintMsg_Print_Params;
merged
  result 100644 018e72839b411a85eaafadb6df5a9aa17f301f05 chromium_src/chrome/renderer/printing/print_web_view_helper_linux.cc
  our    100644 aedc042e6d6181b6c48082fb1f82e32f1ea405ea chromium_src/chrome/renderer/printing/print_web_view_helper_linux.cc
@@ -12,7 +12,7 @@
 #include "printing/metafile_skia_wrapper.h"
 #include "printing/page_size_margins.h"
 #include "printing/pdf_metafile_skia.h"
-#include "third_party/WebKit/public/web/WebLocalFrame.h"
+#include "third_party/blink/public/web/web_local_frame.h"
 
 #if !defined(OS_CHROMEOS) && !defined(OS_ANDROID)
 #include "base/process/process_handle.h"
merged
  result 100644 022da12bd7a292ac9e65e0e09e89514cf9a94962 chromium_src/chrome/renderer/printing/print_web_view_helper_mac.mm
  our    100644 31dea2ea33cf55727331c03ed15895ef68fa9ce2 chromium_src/chrome/renderer/printing/print_web_view_helper_mac.mm
@@ -12,8 +12,8 @@
 #include "chrome/common/print_messages.h"
 #include "printing/metafile_skia_wrapper.h"
 #include "printing/page_size_margins.h"
-#include "third_party/WebKit/public/platform/WebCanvas.h"
-#include "third_party/WebKit/public/web/WebLocalFrame.h"
+#include "third_party/blink/public/platform/web_canvas.h"
+#include "third_party/blink/public/web/web_local_frame.h"
 
 namespace printing {
 
merged
  result 100644 073923d6b0b8f080826e0c74e044512a22d2ff45 chromium_src/chrome/renderer/printing/print_web_view_helper_pdf_win.cc
  our    100644 bbd65ebb15b12f3c35cb7b258535f0e0a5804724 chromium_src/chrome/renderer/printing/print_web_view_helper_pdf_win.cc
@@ -14,7 +14,7 @@
 #include "printing/page_size_margins.h"
 #include "printing/pdf_metafile_skia.h"
 #include "printing/units.h"
-#include "third_party/WebKit/public/web/WebLocalFrame.h"
+#include "third_party/blink/public/web/web_local_frame.h"
 
 namespace printing {
 
merged
  result 100644 caaa1dd3093dbb5282ef75d9e563fea31e594a66 chromium_src/chrome/renderer/tts_dispatcher.cc
  our    100644 4aa82b5552389d67066d63239139030768e7f33a chromium_src/chrome/renderer/tts_dispatcher.cc
@@ -8,10 +8,10 @@
 #include "chrome/common/tts_messages.h"
 #include "chrome/common/tts_utterance_request.h"
 #include "content/public/renderer/render_thread.h"
-#include "third_party/WebKit/public/platform/WebSpeechSynthesisUtterance.h"
-#include "third_party/WebKit/public/platform/WebSpeechSynthesisVoice.h"
-#include "third_party/WebKit/public/platform/WebString.h"
-#include "third_party/WebKit/public/platform/WebVector.h"
+#include "third_party/blink/public/platform/web_speech_synthesis_utterance.h"
+#include "third_party/blink/public/platform/web_speech_synthesis_voice.h"
+#include "third_party/blink/public/platform/web_string.h"
+#include "third_party/blink/public/platform/web_vector.h"
 
 using blink::WebSpeechSynthesisUtterance;
 using blink::WebSpeechSynthesisVoice;
merged
  result 100644 f77a32045e6f4c283a6beb12fdfb0ab223650048 chromium_src/chrome/renderer/tts_dispatcher.h
  our    100644 57928a3d2316000f251a160cea61d8eaf2e5f739 chromium_src/chrome/renderer/tts_dispatcher.h
@@ -9,8 +9,8 @@
 
 #include "base/containers/hash_tables.h"
 #include "content/public/renderer/render_thread_observer.h"
-#include "third_party/WebKit/public/platform/WebSpeechSynthesizer.h"
-#include "third_party/WebKit/public/platform/WebSpeechSynthesizerClient.h"
+#include "third_party/blink/public/platform/web_speech_synthesizer.h"
+#include "third_party/blink/public/platform/web_speech_synthesizer_client.h"
 
 namespace IPC {
 class Message;
merged
  result 100644 796dccc5d3ab956cff9a2237a3d2f34ede6dcd36 chromium_src/chrome/utility/printing_handler_win.cc
  our    100644 585259919fbb87956d4a763f04edc9a4cf1a6726 chromium_src/chrome/utility/printing_handler_win.cc
@@ -161,6 +161,7 @@
           pdf_rendering_settings_.area.y() - offset_y,
           pdf_rendering_settings_.area.width(),
           pdf_rendering_settings_.area.height(), true, false, true, true,
+          pdf_rendering_settings_.use_color,
           pdf_rendering_settings_.autorotate)) {
     return false;
   }
changed in both
  base   100644 1e38f4a8823c0c164efdaf361a306fd2d4a85f24 docs/api/breaking-changes.md
  our    100644 7e3557fbb399d4691628f059f419a2b5027f4333 docs/api/breaking-changes.md
  their  100644 2a417ef771c057326cd0a5d456b8420967a156a9 docs/api/breaking-changes.md
@@ -49,9 +49,7 @@
 
 // Deprecated
 const metrics = app.getAppMetrics()
-const {memory} = metrics[0]
-memory.privateBytes  // Deprecated property
-memory.sharedBytes  // Deprecated property
+const {memory} = metrics[0] // Deprecated property
 ```
 
 ## `BrowserWindow`
@@ -135,8 +133,6 @@
 ```js
 // Deprecated
 const info = process.getProcessMemoryInfo()
-const privateBytes = info.privateBytes // deprecated property
-const sharedBytes = info.sharedBytes // deprecated property
 ```
 
 ## `screen`
merged
  result 100644 691238a737a42be5f656b4d2da298a2779425da1 docs/api/process.md
  our    100644 1f6b20d2f25c31b48fbb2bfedc6a064ae283424f docs/api/process.md
@@ -14,7 +14,6 @@
 - `crash()`
 - `hang()`
 - `getHeapStatistics()`
-- `getProcessMemoryInfo()`
 - `getSystemMemoryInfo()`
 - `getCPUUsage()`
 - `getIOCounters()`
@@ -156,22 +155,6 @@
 
 Returns an object with V8 heap statistics. Note that all statistics are reported in Kilobytes.
 
-### `process.getProcessMemoryInfo()`
-
-Returns `Object`:
-
-* `workingSetSize` Integer - The amount of memory currently pinned to actual physical
-  RAM.
-* `peakWorkingSetSize` Integer - The maximum amount of memory that has ever been pinned
-  to actual physical RAM.
-* `privateBytes` Integer - The amount of memory not shared by other processes, such as
-  JS heap or HTML content.
-* `sharedBytes` Integer - The amount of memory shared between processes, typically
-  memory consumed by the Electron code itself.
-
-Returns an object giving memory usage statistics about the current process. Note
-that all statistics are reported in Kilobytes.
-
 ### `process.getSystemMemoryInfo()`
 
 Returns `Object`:
merged
  result 100644 62b3d6fe377b32520908cefcab451a797e9060e2 docs/api/structures/process-metric.md
  our    100644 15a75a79664723ae5ee5e64621832c7dc883d9b1 docs/api/structures/process-metric.md
@@ -2,5 +2,4 @@
 
 * `pid` Integer - Process id of the process.
 * `type` String - Process type (Browser or Tab or GPU etc).
-* `memory` [MemoryInfo](memory-info.md) - Memory information for the process.
 * `cpu` [CPUUsage](cpu-usage.md) - CPU usage of the process.
merged
  result 100644 2a0602d5c1fdb60aad4c6e9402a6dfeddf90c561 docs/development/build-instructions-gn.md
  our    100644 cbbdaf4c3d1998ccce8e5438eea1a7c9b00f2e37 docs/development/build-instructions-gn.md
@@ -5,7 +5,7 @@
 
 > **NOTE**: The GN build system is in _experimental_ status.
 
-## Platform prerequisites
+## Prerequisites
 
 Check the build prerequisites for your platform before proceeding
 
@@ -13,7 +13,7 @@
   * [Linux](build-instructions-linux.md#prerequisites)
   * [Windows](build-instructions-windows.md#prerequisites)
 
-## GN prerequisites
+## Install `depot_tools`
 
 You'll need to install [`depot_tools`][depot-tools], the toolset
 used for fetching Chromium and its dependencies.
@@ -27,33 +27,20 @@
 
 [depot-tools]: http://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html#_setting_up
 
-## Cached builds (optional step)
+## Getting the Code
 
-### GIT_CACHE_PATH
+### Using a Git cache (optional step)
 
-If you plan on building Electron more than once, adding a git cache will
-speed up subsequent calls to `gclient`. To do this, set a `GIT_CACHE_PATH`
-environment variable:
+`gclient` fetches about 16G worth of repository data. If you plan on building
+more than once, consider using its cache feature to make future calls faster:
 
 ```sh
-$ export GIT_CACHE_PATH="${HOME}/.git_cache"
-$ mkdir -p "${GIT_CACHE_PATH}"
-# This will use about 16G.
+$ export GIT_CACHE_PATH="$HOME/.git_cache"
+$ mkdir -p "$GIT_CACHE_PATH"
+# This will take about 16G.
 ```
 
-### sccache
-
-Thousands of files must be compiled to build Chromium and Electron.
-You can avoid much of the wait by reusing Electron CI's build output via
-[sccache](https://github.com/mozilla/sccache). This requires some
-optional steps (listed below) and these two environment variables:
-
-```sh
-export SCCACHE_BUCKET="electronjs-sccache"
-export SCCACHE_TWO_TIER=true
-```
-
-## Getting the code
+### Getting the code with gclient
 
 ```sh
 $ mkdir electron-gn && cd electron-gn
@@ -70,9 +57,7 @@
 ```sh
 $ cd src
 $ export CHROMIUM_BUILDTOOLS_PATH=`pwd`/buildtools
-# this next line is needed only if building with sccache
-$ export GN_EXTRA_ARGS="${GN_EXTRA_ARGS} cc_wrapper=\"${PWD}/electron/external_binaries/sccache\""
-$ gn gen out/Default --args="import(\"//electron/build/args/debug.gn\") $GN_EXTRA_ARGS"
+$ gn gen out/Default --args='import("//electron/build/args/debug.gn")'
 ```
 
 This will generate a build directory `out/Default` under `src/` with
@@ -88,14 +73,14 @@
 Electron:**
 
 ```sh
-$ gn gen out/Default --args='import("//electron/build/args/debug.gn") $GN_EXTRA_ARGS'
+$ gn gen out/Default --args='import("//electron/build/args/debug.gn")'
 ```
 
 **For generating Release (aka "non-component" or "static") build config of
 Electron:**
 
 ```sh
-$ gn gen out/Default --args="import(\"//electron/build/args/release.gn\") $GN_EXTRA_ARGS"
+$ gn gen out/Default --args='import("//electron/build/args/release.gn")'
 ```
 
 **To build, run `ninja` with the `electron:electron_app` target:**
merged
  result 100644 78ec6e4e07d4aef614ce8a26dae4a1bb093afdad electron.gyp
  our    100644 944ddab2a3fd879044e31677e4bac2843fffbdee electron.gyp
@@ -303,8 +303,6 @@
         '<(libchromiumcontent_src_dir)/v8/include',
         # The `node.h` is using `#include"ares.h"`.
         'vendor/node/deps/cares/include',
-        # The `third_party/WebKit/Source/platform/weborigin/SchemeRegistry.h` is using `platform/PlatformExport.h`.
-        '<(libchromiumcontent_src_dir)/third_party/WebKit/Source',
         # The 'third_party/libyuv/include/libyuv/scale_argb.h' is using 'libyuv/basic_types.h'.
         '<(libchromiumcontent_src_dir)/third_party/libyuv/include',
         # The 'third_party/webrtc/modules/desktop_capture/desktop_frame.h' is using 'webrtc/base/scoped_ptr.h'.
merged
  result 100644 6bfbf9a0f211a8ecfa2757f81c39102b25447377 electron_paks.gni
  our    100644 989cb3834ca0f2c4079fa9378369a6f1461f433a electron_paks.gni
@@ -1,5 +1,5 @@
 import("//build/config/locales.gni")
-import("//printing/features/features.gni")
+import("//printing/buildflags/buildflags.gni")
 import("//tools/grit/repack.gni")
 import("//ui/base/ui_features.gni")
 
@@ -17,7 +17,7 @@
 
     # All sources should also have deps for completeness.
     sources = [
-      "$root_gen_dir/blink/public/resources/blink_scaled_resources_${percent}_percent.pak",
+      "$root_gen_dir/third_party/blink/public/resources/blink_scaled_resources_${percent}_percent.pak",
       "$root_gen_dir/components/components_resources_${percent}_percent.pak",
       "$root_gen_dir/content/app/resources/content_resources_${percent}_percent.pak",
       "$root_gen_dir/ui/resources/ui_resources_${percent}_percent.pak",
@@ -26,7 +26,7 @@
     deps = [
       "//components/resources",
       "//content/app/resources",
-      "//third_party/WebKit/public:scaled_resources_${percent}_percent",
+      "//third_party/blink/public:scaled_resources_${percent}_percent",
       "//ui/resources",
     ]
 
@@ -53,7 +53,7 @@
                            ])
     output = "${invoker.output_dir}/resources.pak"
     sources = [
-      "$root_gen_dir/blink/public/resources/blink_resources.pak",
+      "$root_gen_dir/third_party/blink/public/resources/blink_resources.pak",
       "$root_gen_dir/components/components_resources.pak",
       "$root_gen_dir/content/browser/tracing/tracing_resources.pak",
       "$root_gen_dir/content/content_resources.pak",
@@ -66,7 +66,7 @@
       "//content/browser/tracing:resources",
       "//mojo/public/js:resources",
       "//net:net_resources",
-      "//third_party/WebKit/public:resources",
+      "//third_party/blink/public:resources",
     ]
     if (defined(invoker.deps)) {
       deps += invoker.deps
merged
  result 100644 23d7d9907c2351fc3d7e6cd42a1e836524d727b1 features.gypi
  our    100644 86543a4db1195223a3556fa71583038f15d79a0a features.gypi
@@ -3,7 +3,7 @@
   'variables': {
     'variables': {
       'enable_desktop_capturer%': 1,
-      'enable_osr%': 1,
+      'enable_osr%': 0,  # FIXME(alexeykuzmin)
       'enable_pdf_viewer%': 0,  # FIXME(deepak1556)
       'enable_run_as_node%': 1,
       'enable_view_api%': 0,
merged
  result 100644 f0db3c2e663bedc549370c91a64be2e10d1be73c lib/browser/api/app.js
  our    100644 66f6ae651acf10fb19b8ec068fc5280850dd3d91 lib/browser/api/app.js
@@ -42,8 +42,7 @@
 
 const nativeFn = app.getAppMetrics
 app.getAppMetrics = () => {
-  deprecate.removeProperty(nativeFn, 'privateBytes')
-  deprecate.removeProperty(nativeFn, 'sharedBytes')
+  deprecate.removeProperty(nativeFn, 'memory')
   return nativeFn.call(app)
 }
 
merged
  result 100644 c4ff2bb64f4eb9069c8a760e59a020e94fbf84b7 lib/sandboxed_renderer/init.js
  our    100644 30a3fa55216f6bf7588c3accc07b150a31163b7c lib/sandboxed_renderer/init.js
@@ -47,7 +47,6 @@
 preloadProcess.crash = () => binding.crash()
 preloadProcess.hang = () => binding.hang()
 preloadProcess.getHeapStatistics = () => binding.getHeapStatistics()
-preloadProcess.getProcessMemoryInfo = () => binding.getProcessMemoryInfo()
 preloadProcess.getSystemMemoryInfo = () => binding.getSystemMemoryInfo()
 preloadProcess.getCPUUsage = () => binding.getCPUUsage()
 preloadProcess.getIOCounters = () => binding.getIOCounters()
merged
  result 100755 ae5ce3707c38e61716f96cf5e7627cc909597fb8 script/create-dist.py
  our    100755 4a6c0c7ce8f275175e48c4c380ff33627f7a5961 script/create-dist.py
@@ -11,13 +11,10 @@
 if sys.platform == "win32":
   import _winreg
 
-from lib.config import BASE_URL, PLATFORM, build_env, \
-                       enable_verbose_mode, get_target_arch, get_zip_name
-
-from lib.util import add_exec_bit, electron_features, electron_gyp, \
-                     execute, get_electron_version, make_zip, \
-                     parse_version, rm_rf, scoped_cwd
-
+from lib.config import BASE_URL, PLATFORM, enable_verbose_mode, \
+                       get_target_arch, get_zip_name, build_env
+from lib.util import scoped_cwd, rm_rf, get_electron_version, make_zip, \
+                     execute, electron_gyp, electron_features, parse_version
 from lib.env_util import get_vs_location
 
 
@@ -147,7 +144,7 @@
 
   # Copy file and keep the executable bit.
   shutil.copyfile(src, dest)
-  add_exec_bit(dest)
+  os.chmod(dest, os.stat(dest).st_mode | stat.S_IEXEC)
 
 def copy_vcruntime_binaries():
   arch = get_target_arch()
@@ -302,7 +299,7 @@
     dest = os.path.join(DIST_DIR, binary)
     # Copy file and keep the executable bit.
     shutil.copyfile(src, dest)
-    add_exec_bit(dest)
+    os.chmod(dest, os.stat(dest).st_mode | stat.S_IEXEC)
 
     dist_name = get_zip_name(binary, version)
     zip_file = os.path.join(SOURCE_ROOT, 'dist', dist_name)
merged
  result 100644 1fc2b813e7c9b934f7ad11fde55c4bac731f4755 script/lib/util.py
  our    100644 d479d5a9556534c5d98ae1fdc97397cdd14376f5 script/lib/util.py
@@ -8,7 +8,6 @@
 import re
 import shutil
 import ssl
-import stat
 import subprocess
 import sys
 import tarfile
@@ -84,7 +83,6 @@
     if hasattr(ssl, '_create_unverified_context'):
       ssl._create_default_https_context = ssl._create_unverified_context
 
-    print "Downloading %s to %s" % (url, path)
     web_file = urllib2.urlopen(url)
     file_size = int(web_file.info().getheaders("Content-Length")[0])
     downloaded_size = 0
@@ -297,9 +295,6 @@
     else:
       execute_stdout(args, env)
 
-def add_exec_bit(filename):
-  os.chmod(filename, os.stat(filename).st_mode | stat.S_IEXEC)
-
 def clean_parse_version(v):
   return parse_version(v.split("-")[0])        
 
merged
  result 100755 07683a53f32d15c6dcb4f03bda90d9d89e590e29 script/update-clang.sh
  our    100755 0c7ab60533381e33152b8735aaccf41d5f0d6676 script/update-clang.sh
@@ -8,10 +8,10 @@
 # Do NOT CHANGE this if you don't know what you're doing -- see
 # https://code.google.com/p/chromium/wiki/UpdatingClang
 # Reverting problematic clang rolls is safe, though.
-CLANG_REVISION=325667
+CLANG_REVISION=328716
 
 # This is incremented when pushing a new build of Clang at the same revision.
-CLANG_SUB_REVISION=1
+CLANG_SUB_REVISION=2
 
 PACKAGE_VERSION="${CLANG_REVISION}-${CLANG_SUB_REVISION}"
 
merged
  result 100755 e67ac996e2605be675a0431db7fb61fd28a1445c script/update-external-binaries.py
  our    100755 0bc9d0f632057f4a17aa811340ba21631433f173 script/update-external-binaries.py
@@ -4,11 +4,11 @@
 import sys
 import os
 
-from lib.config import PLATFORM, get_target_arch
-from lib.util import add_exec_bit, download, extract_zip, rm_rf, \
-                     safe_mkdir, tempdir
+from lib.config import get_target_arch
+from lib.util import safe_mkdir, rm_rf, extract_zip, tempdir, download
 
-VERSION = 'v1.4.0'
+
+VERSION = 'v1.3.0'
 SOURCE_ROOT = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
 FRAMEWORKS_URL = 'http://github.com/electron/electron-frameworks/releases' \
                  '/download/' + VERSION
@@ -31,13 +31,6 @@
   elif sys.platform in ['cygwin', 'win32']:
     download_and_unzip('directxsdk-' + get_target_arch())
 
-  # get sccache & set exec bit. https://bugs.python.org/issue15795
-  download_and_unzip('sccache-{0}-x64'.format(PLATFORM))
-  appname = 'sccache'
-  if sys.platform == 'win32':
-    appname += '.exe'
-  add_exec_bit(os.path.join('external_binaries', appname))
-
   with open(version_file, 'w') as f:
     f.write(VERSION)
 
merged
  result 100644 68652116a786124ad04813033826a572f93c0950 spec/api-app-spec.js
  our    100644 d224eda2989332c18d655cef05a8bacc2eb6d4b8 spec/api-app-spec.js
@@ -802,15 +802,7 @@
       expect(appMetrics).to.be.an('array').and.have.lengthOf.at.least(1, 'App memory info object is not > 0')
 
       const types = []
-      for (const {memory, pid, type, cpu} of appMetrics) {
-        expect(memory.workingSetSize).to.be.above(0, 'working set size is not > 0')
-
-        // windows causes failures here due to CI server configuration
-        if (process.platform !== 'win32') {
-          expect(memory.privateBytes).to.be.above(0, 'private bytes is not > 0')
-          expect(memory.sharedBytes).to.be.above(0, 'shared bytes is not > 0')
-        }
-
+      for (const {pid, type, cpu} of appMetrics) {
         expect(pid).to.be.above(0, 'pid is not > 0')
         expect(type).to.be.a('string').that.is.not.empty()
 
merged
  result 100644 f42c0b0329f7212510ffb490521bbcbcd5161904 spec/api-browser-window-spec.js
  our    100644 f4cba12ec19d224bc46fca898db42a99baf4972e spec/api-browser-window-spec.js
@@ -1524,7 +1524,8 @@
         w.loadURL('file://' + path.join(fixtures, 'pages', 'window-open.html'))
       })
 
-      it('releases memory after popup is closed', (done) => {
+      // TODO(alexeykuzmin): `GetProcessMemoryInfo()` is not available starting Ch67.
+      xit('releases memory after popup is closed', (done) => {
         w.destroy()
         w = new BrowserWindow({
           show: false,
merged
  result 100644 2b07c407a21f1f4fecd54a488c93a516a7bd0370 spec/api-process-spec.js
  our    100644 ad8f1faea14208d2659c505105c1e70938bba2b9 spec/api-process-spec.js
@@ -34,15 +34,16 @@
     })
   })
 
-  describe('process.getProcessMemoryInfo()', () => {
-    it('returns process memory info object', () => {
-      const processMemoryInfo = process.getProcessMemoryInfo()
-      expect(processMemoryInfo.peakWorkingSetSize).to.be.a('number')
-      expect(processMemoryInfo.privateBytes).to.be.a('number')
-      expect(processMemoryInfo.sharedBytes).to.be.a('number')
-      expect(processMemoryInfo.workingSetSize).to.be.a('number')
-    })
-  })
+  // FIXME: Chromium 67 - getProcessMemoryInfo has been removed
+  // describe('process.getProcessMemoryInfo()', () => {
+  //   it('returns process memory info object', () => {
+  //     const processMemoryInfo = process.getProcessMemoryInfo()
+  //     expect(processMemoryInfo.peakWorkingSetSize).to.be.a('number')
+  //     expect(processMemoryInfo.privateBytes).to.be.a('number')
+  //     expect(processMemoryInfo.sharedBytes).to.be.a('number')
+  //     expect(processMemoryInfo.workingSetSize).to.be.a('number')
+  //   })
+  // })
 
   describe('process.getSystemMemoryInfo()', () => {
     it('returns system memory info object', () => {
merged
  result 100644 e745e7a62d4250f319186124982c889db1a139a4 spec/fixtures/api/sandbox.html
  our    100644 af796ebc988b648455025934a991719135853694 spec/fixtures/api/sandbox.html
@@ -35,20 +35,21 @@
         await invokeGc()
         ipcRenderer.send('answer', new Hello().say())
       },
-      'allocate-memory': async () => {
-        await invokeGc()
-        const {privateBytes: bytesBeforeOpen} = process.getProcessMemoryInfo()
-        let w = open('./allocate-memory.html')
-        await invokeGc()
-        const {privateBytes: bytesAfterOpen} = process.getProcessMemoryInfo()
-        w.close()
-        w = null
-        await invokeGc()
-        const {privateBytes: bytesAfterClose} = process.getProcessMemoryInfo()
-        ipcRenderer.send('answer', {
-          bytesBeforeOpen, bytesAfterOpen, bytesAfterClose
-        })
-      },
+      // FIXME: Chromium 67 - getProcessMemoryInfo has been removed
+      // 'allocate-memory': async () => {
+      //   await invokeGc()
+      //   const {privateBytes: bytesBeforeOpen} = process.getProcessMemoryInfo()
+      //   let w = open('./allocate-memory.html')
+      //   await invokeGc()
+      //   const {privateBytes: bytesAfterOpen} = process.getProcessMemoryInfo()
+      //   w.close()
+      //   w = null
+      //   await invokeGc()
+      //   const {privateBytes: bytesAfterClose} = process.getProcessMemoryInfo()
+      //   ipcRenderer.send('answer', {
+      //     bytesBeforeOpen, bytesAfterOpen, bytesAfterClose
+      //   })
+      // },
       'window-events': () => {
         document.title = 'changed'
       },
merged
  result 100644 9d5a51378a32dd05def1782ecf808cbc64541fc8 spec/modules-spec.js
  our    100644 b996b8f4839bff2160bffb69e55263b16a4178d7 spec/modules-spec.js
@@ -7,7 +7,8 @@
 
 const nativeModulesEnabled = remote.getGlobal('nativeModulesEnabled')
 
-describe('modules support', () => {
+// (alexeykuzmin): [Ch67]: TODO: Enable the tests.
+xdescribe('modules support', () => {
   const fixtures = path.join(__dirname, 'fixtures')
 
   describe('third-party module', () => {
merged
  result 160000 6e0b6913c54a2dec51ce452ff041de20460ef398 vendor/crashpad
  our    160000 f72fa99d3e3d65e3bb9bed9d83429459d6f80c0d vendor/crashpad
changed in both
  base   160000 00cce7a094c5ded91d52d2ac2aac2ab70dc66d02 vendor/libchromiumcontent
  our    160000 c85470a1c379b1c4bedb372c146521bc4be9b75d vendor/libchromiumcontent
  their  160000 e349f85568753947039fc912cf84d76a17a82f2e vendor/libchromiumcontent
merged
  result 100644 ddc313edf9a1c4cbb8191473a25b46fb57e9655f vsts-gn.yml
  our    100644 3c9985b16c0414cfd9bc6c6648d6411a969fc6ef vsts-gn.yml
@@ -16,6 +16,7 @@
       gclient config \
         --name "src/electron" \
         --unmanaged \
+        --cache-dir "${GIT_CACHE_PATH}" \
         "https://github.com/electron/electron"
       mkdir src
       git clone https://github.com/electron/electron src/electron
@@ -31,7 +32,7 @@
   - bash: |
       cd src
       export CHROMIUM_BUILDTOOLS_PATH=`pwd`/buildtools
-      export SCCACHE_WRAPPER="`pwd`/electron/external_binaries/sccache"
+      export SCCACHE_WRAPPER="`pwd`/libchromiumcontent/tools/sccache/aad2120/mac/sccache"
       export SCCACHE_HELPER="`pwd`/libchromiumcontent/script/sccache"
       "$SCCACHE_HELPER" --start-server --azure_container "$(SCCACHE_AZURE_BLOB_CONTAINER)" --azure_connection "$(SCCACHE_AZURE_CONNECTION_STRING)"
       echo "##vso[task.setvariable variable=SCCACHE_WRAPPER]$SCCACHE_WRAPPER"
