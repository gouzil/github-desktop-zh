added in remote
  their  100644 ce778fb8220cf3bb06f2a50def39f74aa683fc7d app/app-info.d.ts
@@ -0,0 +1,2 @@
+export function getReplacements(): any
+export function getCLICommands(): string[]
added in remote
  their  100644 e9375cea93e985e937ff8b587b21652a37afb605 app/app-info.js
@@ -0,0 +1,97 @@
+'use strict'
+
+const fs = require('fs')
+const path = require('path')
+
+const gitInfo = require('./git-info')
+const distInfo = require('../script/dist-info')
+
+const projectRoot = path.join(__dirname, '..')
+
+const devClientId = '3a723b10ac5575cc5bb9'
+const devClientSecret = '22c34d87789a365981ed921352a7b9a8c3f69d54'
+
+const channel = distInfo.getReleaseChannel()
+
+function getCLICommands() {
+  return (
+    // eslint-disable-next-line no-sync
+    fs
+      .readdirSync(path.resolve(projectRoot, 'app', 'src', 'cli', 'commands'))
+      .filter(name => name.endsWith('.ts'))
+      .map(name => name.replace(/\.ts$/, ''))
+  )
+}
+
+function s(text) {
+  return JSON.stringify(text)
+}
+
+function getMenuPlaceholders() {
+  if (process.platform === 'darwin') {
+    return {
+      __MENU_SHOW_LOGS_IN_FILE_MANAGER__: s('Show Logs in Finder'),
+      __MENU_SHOW_IN_FILE_MANAGER__: s('Show in Finder'),
+    }
+  }
+  if (process.platform === 'win32') {
+    return {
+      __MENU_SHOW_LOGS_IN_FILE_MANAGER__: s('S&how Logs in Explorer'),
+      __MENU_SHOW_IN_FILE_MANAGER__: s('Show in E&xplorer'),
+    }
+  }
+  return {
+    __MENU_SHOW_LOGS_IN_FILE_MANAGER__: s('Show logs in File Manager'),
+    __MENU_SHOW_IN_FILE_MANAGER__: s('Show in File Manager'),
+  }
+}
+
+function getPlatformPlaceholders() {
+  if (process.platform === 'darwin') {
+    return {
+      __LABEL_SHOW_IN_FILE_MANAGER__: s('Show in Finder'),
+      __LABEL_REVEAL_IN_FILE_MANAGER__: s('Reveal in Finder'),
+      __LABEL_FILE_MANAGER_NAME__: s('Finder'),
+    }
+  }
+  if (process.platform === 'win32') {
+    return {
+      __LABEL_SHOW_IN_FILE_MANAGER__: s('Show in Explorer'),
+      __LABEL_REVEAL_IN_FILE_MANAGER__: s('Show in Explorer'),
+      __LABEL_FILE_MANAGER_NAME__: s('Explorer'),
+    }
+  }
+  return {
+    __LABEL_SHOW_IN_FILE_MANAGER__: s('Show in File Manager'),
+    __LABEL_REVEAL_IN_FILE_MANAGER__: s('Show in File Manager'),
+    __LABEL_FILE_MANAGER_NAME__: s('File Manager'),
+  }
+}
+
+function getReplacements() {
+  const replacements = {
+    __OAUTH_CLIENT_ID__: s(process.env.DESKTOP_OAUTH_CLIENT_ID || devClientId),
+    __OAUTH_SECRET__: s(
+      process.env.DESKTOP_OAUTH_CLIENT_SECRET || devClientSecret
+    ),
+    __DARWIN__: process.platform === 'darwin',
+    __WIN32__: process.platform === 'win32',
+    __LINUX__: process.platform === 'linux',
+    __DEV__: channel === 'development',
+    __RELEASE_CHANNEL__: s(channel),
+    __UPDATES_URL__: s(distInfo.getUpdatesURL()),
+    __SHA__: s(gitInfo.getSHA()),
+    __CLI_COMMANDS__: s(getCLICommands()),
+    'process.platform': s(process.platform),
+    'process.env.NODE_ENV': s(process.env.NODE_ENV || 'development'),
+    'process.env.TEST_ENV': s(process.env.TEST_ENV),
+  }
+
+  return Object.assign(
+    replacements,
+    getMenuPlaceholders(),
+    getPlatformPlaceholders()
+  )
+}
+
+module.exports = { getReplacements, getCLICommands }
added in remote
  their  100644 db784cfd0f0a6592eb885f2049f8afc835d6e910 app/git-info.d.ts
@@ -0,0 +1 @@
+export function getSHA(): string
added in remote
  their  100644 ed5b62cd3a8bd2c5eddea48944f85e3716fb2e4e app/git-info.js
@@ -0,0 +1,45 @@
+'use strict'
+
+const fs = require('fs')
+const path = require('path')
+
+/**
+ * Attempt to dereference the given ref without requiring a Git environment
+ * to be present. Note that this method will not be able to dereference packed
+ * refs but should suffice for simple refs like 'HEAD'.
+ *
+ * Will throw an error for unborn HEAD.
+ *
+ * @param {string} gitDir The path to the Git repository's .git directory
+ * @param {string} ref    A qualified git ref such as 'HEAD' or 'refs/heads/master'
+ */
+function revParse(gitDir, ref) {
+  const refPath = path.join(gitDir, ref)
+  // eslint-disable-next-line no-sync
+  const refContents = fs.readFileSync(refPath)
+  const refRe = /^([a-f0-9]{40})|(?:ref: (refs\/.*))$/m
+  const refMatch = refRe.exec(refContents)
+
+  if (!refMatch) {
+    throw new Error(
+      `Could not de-reference HEAD to SHA, invalid ref in ${refPath}: ${refContents}`
+    )
+  }
+
+  return refMatch[1] || revParse(gitDir, refMatch[2])
+}
+
+function getSHA() {
+  // CircleCI does some funny stuff where HEAD points to an packed ref, but
+  // luckily it gives us the SHA we want in the environment.
+  const circleSHA = process.env.CIRCLE_SHA1
+  if (circleSHA) {
+    return circleSHA
+  }
+
+  return revParse(path.resolve(__dirname, '../.git'), 'HEAD')
+}
+
+module.exports = {
+  getSHA,
+}
added in remote
  their  100644 5f169d7f8e0a82168c2c13ea3ba71b5b101f0c73 app/package-info.d.ts
@@ -0,0 +1,4 @@
+export function getProductName(): string
+export function getCompanyName(): string
+export function getVersion(): string
+export function getBundleID(): string
added in remote
  their  100644 b63ebe090392d9f6829519ac340cbba3901300cb app/package-info.js
@@ -0,0 +1,33 @@
+'use strict'
+
+const path = require('path')
+
+const projectRoot = __dirname
+// eslint-disable-next-line import/no-dynamic-require
+const appPackage = require(path.join(projectRoot, 'package.json'))
+
+function getProductName() {
+  const productName = appPackage.productName
+  return process.env.NODE_ENV === 'development'
+    ? `${productName}-dev`
+    : productName
+}
+
+function getCompanyName() {
+  return appPackage.companyName
+}
+
+function getVersion() {
+  return appPackage.version
+}
+
+function getBundleID() {
+  return appPackage.bundleID
+}
+
+module.exports = {
+  getProductName,
+  getCompanyName,
+  getVersion,
+  getBundleID,
+}
removed in local
  base   100644 a58f983c1c4806ad8157926803f1ab7256857ab6 app/src/cli/dev-commands-global.js
  their  100644 66965ffb5ca93dbeaa3562652443adc8c8dd4715 app/src/cli/dev-commands-global.js
changed in both
  base   100644 3d47d297a07a66a4b8bd3c47a91a7afb05bc89de app/src/lib/globals.d.ts
  our    100644 fe0ba976e925a57a73938c30e3022a0b0c08fbde app/src/lib/globals.d.ts
  their  100644 9198f6c831eb62c89c9918398040157af4a61d93 app/src/lib/globals.d.ts
@@ -47,6 +47,21 @@
   | 'highlighter'
 
 /**
+ * These menu entries are separated because Windows and Linux can use
+ * accelerators( ??? TODO: that's not the right phrase) to select a
+ * menu item immediately. They need to be reviewed to ensure no clashes
+ * wtih other shortcuts.
+ */
+declare const __MENU_SHOW_LOGS_IN_FILE_MANAGER__: string
+declare const __MENU_SHOW_IN_FILE_MANAGER__: string
+
+/**
+ * These labels are placeholders in the UI which are platform-specific
+ */
+declare const __LABEL_SHOW_IN_FILE_MANAGER__: string
+declare const __LABEL_REVEAL_IN_FILE_MANAGER__: string
+declare const __LABEL_FILE_MANAGER_NAME__: string
+/**
  * The DOMHighResTimeStamp type is a double and is used to store a time value.
  *
  * The value could be a discrete point in time or the difference in time between
changed in both
  base   100644 016352958fee4c32ceec3490f242718d85866eb0 app/src/main-process/menu/build-default-menu.ts
  our    100644 7ec8c001136d655a2ecce3d56b9a6804762172fa app/src/main-process/menu/build-default-menu.ts
  their  100644 b90b828c557d054bbb2ca270e124c120059c451e app/src/main-process/menu/build-default-menu.ts
@@ -239,7 +239,7 @@
         click: emit('open-in-shell'),
       },
       {
-        label: __DARWIN__ ? 'Show in Finder' : 'Show in E&xplorer',
+        label: __MENU_SHOW_IN_FILE_MANAGER__,
         id: 'open-working-directory',
         accelerator: 'CmdOrCtrl+Shift+F',
         click: emit('open-working-directory'),
@@ -361,7 +361,11 @@
       : 'S&how logs in your File Manager'
 
   const showLogsItem: Electron.MenuItemConstructorOptions = {
+<<<<<<< .our
     label: showLogsLabel,
+=======
+    label: __MENU_SHOW_LOGS_IN_FILE_MANAGER__,
+>>>>>>> .their
     click() {
       const logPath = getLogDirectoryPath()
       ensureDir(logPath)
changed in both
  base   100644 c3a83c0d056030cd4c92a23e0d8a2ac38326de32 app/src/ui/changes/changed-file.tsx
  our    100644 e68da78b55ca434ace46ff94982da3e9897bfb4c app/src/ui/changes/changed-file.tsx
  their  100644 afba1373ff7fa239c33b089daa5288457375e9f3 app/src/ui/changes/changed-file.tsx
@@ -85,12 +85,61 @@
     )
   }
 
+<<<<<<< .our
   private onContextMenu = (event: React.MouseEvent<HTMLDivElement>) => {
     this.props.onContextMenu(
       this.props.id,
       this.props.path,
       this.props.status,
       event
+=======
+  private onContextMenu = (event: React.MouseEvent<any>) => {
+    event.preventDefault()
+
+    const extension = Path.extname(this.props.path)
+    const fileName = Path.basename(this.props.path)
+    const items: IMenuItem[] = [
+      {
+        label: __DARWIN__ ? 'Discard Changes…' : 'Discard changes…',
+        action: () => this.props.onDiscardChanges(this.props.path),
+      },
+      { type: 'separator' },
+      {
+        label: 'Ignore',
+        action: () => this.props.onIgnore(this.props.path),
+        enabled: fileName !== GitIgnoreFileName,
+      },
+    ]
+
+    if (extension.length) {
+      items.push({
+        label: __DARWIN__
+          ? `Ignore All ${extension} Files`
+          : `Ignore all ${extension} files`,
+        action: () => this.props.onIgnore(`*${extension}`),
+        enabled: fileName !== GitIgnoreFileName,
+      })
+    }
+
+    const isSafeExtension = __WIN32__
+      ? RestrictedFileExtensions.indexOf(extension.toLowerCase()) === -1
+      : true
+
+    items.push(
+      { type: 'separator' },
+      {
+        label: __LABEL_REVEAL_IN_FILE_MANAGER__,
+        action: () => this.props.onRevealInFileManager(this.props.path),
+        enabled: this.props.status !== AppFileStatus.Deleted,
+      },
+      {
+        label: __DARWIN__
+          ? 'Open with Default Program'
+          : 'Open with default program',
+        action: () => this.props.onOpenItem(this.props.path),
+        enabled: isSafeExtension && this.props.status !== AppFileStatus.Deleted,
+      }
+>>>>>>> .their
     )
   }
 }
changed in both
  base   100644 901ac03d27e9d3b6f3a6f56acd7e91afcf61bd02 app/src/ui/changes/no-changes.tsx
  our    100644 090ffa423a170c926a8b7fdcd04748ff3bd2d416 app/src/ui/changes/no-changes.tsx
  their  100644 3726d27cd5c5ca5058c8841358aa62f41add47cc app/src/ui/changes/no-changes.tsx
@@ -17,11 +17,14 @@
 /** The component to display when there are no local changes. */
 export class NoChanges extends React.Component<INoChangesProps, {}> {
   public render() {
+<<<<<<< .our
     const opener = __DARWIN__
       ? 'Finder'
       : __WIN32__
         ? 'Explorer'
         : 'your File Manager'
+=======
+>>>>>>> .their
     return (
       <div className="panel blankslate" id="no-changes">
         <img src={BlankSlateImage} className="blankslate-image" />
@@ -30,7 +33,7 @@
         <div>
           Would you like to{' '}
           <LinkButton onClick={this.open}>open this repository</LinkButton> in{' '}
-          {opener}?
+          {__LABEL_FILE_MANAGER_NAME__}?
         </div>
       </div>
     )
changed in both
  base   100644 b86cbe8974dc08a9094c6325dc75a8aab4e2c2a6 app/src/ui/repositories-list/repository-list-item.tsx
  our    100644 6ca3c771c795eba242cc4b795e3a3b0bbb4c7488 app/src/ui/repositories-list/repository-list-item.tsx
  their  100644 96859e6008e6261735e64176598dac27b55de88f app/src/ui/repositories-list/repository-list-item.tsx
@@ -163,7 +163,11 @@
         enabled: !missing,
       },
       {
+<<<<<<< .our
         label: showRepositoryLabel,
+=======
+        label: __LABEL_SHOW_IN_FILE_MANAGER__,
+>>>>>>> .their
         action: this.showRepository,
         enabled: !missing,
       },
removed in local
  base   100644 729101a5c3680282efc1c1b269ca5f691218fc6c app/webpack.common.js
  their  100644 6e0b7be8dd3b7d756f24723124ec71399226c3b1 app/webpack.common.js
added in both
  our    100644 348333d12c84aba9cf5ec7404d91e9a8c2816d07 docs/technical/placeholders.md
  their  100644 c0f6ec5a0026ef52f8f7826f8a15a72f528a2bc0 docs/technical/placeholders.md
@@ -29,12 +29,20 @@
 
 ### Replacements
 
+<<<<<<< .our
 The replacements defined for Desktop are found in [`app/app-info.ts`](https://github.com/desktop/desktop/blob/master/app/app-info.ts)
+=======
+The replacements defined for Desktop are found in [`app/app-info.js`](https://github.com/desktop/desktop/blob/master/app/app-info.js)
+>>>>>>> .their
 as a hash of key-value pairs.
 
 ```ts
 function getReplacements() {
+<<<<<<< .our
   return {
+=======
+  const replacements = {
+>>>>>>> .their
     __OAUTH_CLIENT_ID__: s(process.env.DESKTOP_OAUTH_CLIENT_ID || devClientId),
     __OAUTH_SECRET__: s(
       process.env.DESKTOP_OAUTH_CLIENT_SECRET || devClientSecret
@@ -51,11 +59,20 @@
     'process.env.NODE_ENV': s(process.env.NODE_ENV || 'development'),
     'process.env.TEST_ENV': s(process.env.TEST_ENV),
   }
+<<<<<<< .our
+=======
+
+  ...
+>>>>>>> .their
 }
 ```
 
 This means we can embed values at build time based on the current platform.
+<<<<<<< .our
 Note the values we are embedding for `__DARWIN__` and `__WIN32__`:
+=======
+Note the values we are embeddeding for `__DARWIN__` and `__WIN32__`:
+>>>>>>> .their
 
 ```ts
 __DARWIN__: process.platform === 'darwin',
@@ -118,3 +135,94 @@
 
 As a convention, globals which should be replaced by Webpack should be prefixed
 and suffixed with two underscores, e.g. `__DEV__`.
+<<<<<<< .our
+=======
+
+### Platform-specific Menu Items
+
+There are a few places in Desktop where a label depends on the platform the
+app is executing on. For the most part, we use "CamelCase" for labels on macOS
+and "Sentence case" on Windows and Linux, like this:
+
+```ts
+  {
+    id: 'view-repository-on-github',
+    label: __DARWIN__ ? 'View on GitHub' : '&View on GitHub',
+    accelerator: 'CmdOrCtrl+Shift+G',
+    click: emit('view-repository-on-github'),
+  },
+```
+
+Note how the Windows case has a `&` prefixing the `V` - this is so you can
+select the menu item directly by pressing <kbd>ALT</kbd>, then <kbd>V</kbd>.
+
+For situations where a menu item needs to display something unique for each
+platform, these should be defined as placeholders. The prefix `__MENU_` should
+be used to group these.
+
+The corresponding platform-specific values must be added to [`app/app-info.js`](https://github.com/desktop/desktop/blob/master/app/app-info.js),
+in the `getMenuPlaceholders()` function:
+
+```ts
+function getMenuPlaceholders() {
+  if (process.platform === 'darwin') {
+    return {
+      __MENU_SHOW_LOGS_IN_FILE_MANAGER__: s('Show Logs in Finder'),
+      __MENU_SHOW_IN_FILE_MANAGER__: s('Show in Finder'),
+    }
+  }
+
+  if (process.platform === 'win32') {
+    return {
+      __MENU_SHOW_LOGS_IN_FILE_MANAGER__: s('S&how Logs in Explorer'),
+      __MENU_SHOW_IN_FILE_MANAGER__: s('Show in E&xplorer'),
+    }
+  }
+
+  // other platforms follow
+}
+```
+
+Ensure these placeholders also exist as globals under
+[`app/src/lib/globals.ts`](https://github.com/desktop/desktop/blob/master/app/src/lib/globals.d.ts).
+
+
+```ts
+/**
+ * These menu entries are separated because Windows and Linux can use
+ * chords to select a menu item immediately. They need to be reviewed
+ * to ensure no clashes wtih other shortcuts.
+ */
+declare const __MENU_SHOW_LOGS_IN_FILE_MANAGER__: string
+declare const __MENU_SHOW_IN_FILE_MANAGER__: string
+```
+
+### Platform-specific Labels
+
+For other places in the user interface that will differ per-platform,
+the `getPlatformPlaceholders()` method should contain all the necessary
+values:
+
+```js
+function getPlatformPlaceholders() {
+  if (process.platform === 'darwin') {
+    return {
+      __LABEL_SHOW_IN_FILE_MANAGER__: s('Show in Finder'),
+      __LABEL_REVEAL_IN_FILE_MANAGER__: s('Reveal in Finder'),
+      __LABEL_FILE_MANAGER_NAME__: s('Finder'),
+    }
+  }
+  if (process.platform === 'win32') {
+    return {
+      __LABEL_SHOW_IN_FILE_MANAGER__: s('Show in Explorer'),
+      __LABEL_REVEAL_IN_FILE_MANAGER__: s('Show in Explorer'),
+      __LABEL_FILE_MANAGER_NAME__: s('Explorer'),
+    }
+  }
+  // other platforms follow
+}
+```
+
+These placeholders all use the `__LABEL_` prefix to distinguish them from
+assist with grouping.
+>>>>>>> .their
changed in both
  base   100755 fdf7384765afe667e3c7ad464e91c4935df2b730 script/build.ts
  our    100755 7ac3a6cca1891f1f8c80839d46bb4d24e786b9ec script/build.ts
  their  100755 2de7a081c11075424df87fe4217bc48898304cd8 script/build.ts
removed in local
  base   100644 6efaf5dfca90856795f77f2989ad069ca405d2a8 script/dist-info.d.ts
  their  100644 761dea8563e41854304fb72b473ef14d0ead525f script/dist-info.d.ts
removed in local
  base   100644 f86eb9117e0bdef70457ed926ce65438fef6eb5b script/dist-info.js
  their  100644 d5eb68e16988ef0dcebe7a748f61605243af684f script/dist-info.js
changed in both
  base   100644 087d65a5c81208b45beeaf4a481c160e2087edef script/eslint.ts
  our    100644 c71f2850346b76957d6eb4312308b15714d08361 script/eslint.ts
  their  100644 7b1691ce918636c3b0591a1ef8f97dad84324960 script/eslint.ts
@@ -16,7 +16,11 @@
 const report = eslint.executeOnFiles([
   './{script,eslint-rules}/**/*.{j,t}s?(x)',
   './tslint-rules/**/*.ts',
+<<<<<<< .our
   './app/*.ts',
+=======
+  './app/*.js',
+>>>>>>> .their
   './app/{src,typings,test}/**/*.{j,t}s?(x)',
   './changelog.json',
 ])
changed in both
  base   100644 baf89215dcf90428d5ab228276c63be1a932debc script/package.ts
  our    100644 e72d5c172dc7cce7d763ef3579d7df105b2e26a1 script/package.ts
  their  100644 a25a47e9ca631b6f926b39b6287c666028475826 script/package.ts
removed in local
  base   100644 68f1b2a52f7b60c732f580edb12a5e37839976b6 script/publish
  their  100644 f35bab9d856bd56ef8fdaec3842adb4ba6955087 script/publish
changed in both
  base   100644 b0018667cb9ff103bf39eba89bc10622556fba0c script/review-logs.ts
  our    100644 903faa6e50dc2fafc46924b0438baa3b9e6f634b script/review-logs.ts
  their  100644 fc301ecd2b18abd63ca90949cdcd7453de26f832 script/review-logs.ts
@@ -8,6 +8,7 @@
 
 function getUserDataPath() {
   if (process.platform === 'win32') {
+<<<<<<< .our
     if (process.env.APPDATA) {
       return path.join(process.env.APPDATA, getExecutableName())
     } else {
@@ -15,6 +16,9 @@
         `Unable to find the application data directory on Windows :(`
       )
     }
+=======
+    return path.join(process.env.APPDATA, getExecutableName())
+>>>>>>> .their
   } else if (process.platform === 'darwin') {
     const home = os.homedir()
     return path.join(home, 'Library', 'Application Support', getProductName())
@@ -26,9 +30,13 @@
     return path.join(home, '.config', getProductName())
   } else {
     throw new Error(
+<<<<<<< .our
       `I dunno how to resolve the user data path for ${process.platform} ${
         process.arch
       } :(`
+=======
+      `I dunno how to resolve the user data path for ${process.platform} ${process.arch} :(`
+>>>>>>> .their
     )
   }
 }
