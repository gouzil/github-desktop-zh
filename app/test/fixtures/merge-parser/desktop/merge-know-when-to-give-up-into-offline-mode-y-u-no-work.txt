changed in both
  base   100644 b7fc04813074a6cb7cb041abf9f2f656f80bc05d app/src/lib/git/diff.ts
  our    100644 c7b70925514f334e2076ddb67f208c2f3f12672f app/src/lib/git/diff.ts
  their  100644 ae8fe832c53bbaf4e756eb43dec1f4d4c94c6ce8 app/src/lib/git/diff.ts
@@ -41,6 +41,14 @@
 const MaxReasonableDiffSize = MaxDiffBufferSize / 16 // ~4.375MB in decimal
 
 /**
+ * Where `MaxReasonableDiffSize` is a soft limit, and `MaxDiffBufferSize`
+ * is an absolute limit, this is the MAX number of bytes to read from the
+ * buffer before _assuming_ the current buffer being read is `MaxDiffBufferSize`.
+ * This is done so that the UI isn't waiting for the entire buffer to be read.
+ */
+const MaxBytesToRead = MaxDiffBufferSize / 8 //~32MB
+
+/**
  * The longest line length we should try to display. If a diff has a line longer
  * than this, we probably shouldn't attempt it
  */
@@ -115,11 +123,24 @@
     args.push(file.oldPath)
   }
 
-  const { output } = await spawnAndComplete(
+  const { output, didReadAllBytes } = await spawnAndComplete(
     args,
     repository.path,
-    'getCommitDiff'
+    'getCommitDiff',
+    undefined,
+    MaxBytesToRead
   )
+<<<<<<< .our
+=======
+  if (!didReadAllBytes || isBufferTooLarge(output)) {
+    return { kind: DiffType.TooLarge, length: output.length }
+  }
+
+  const diffText = diffFromRawDiffOutput(output)
+  if (isDiffTooLarge(diffText)) {
+    return { kind: DiffType.TooLarge, length: output.length }
+  }
+>>>>>>> .their
 
   return buildDiff(output, repository, file, commitish)
 }
@@ -192,12 +213,28 @@
     ]
   }
 
-  const { output, error } = await spawnAndComplete(
+  const { output, error, didReadAllBytes } = await spawnAndComplete(
     args,
     repository.path,
     'getWorkingDirectoryDiff',
-    successExitCodes
+    successExitCodes,
+    MaxBytesToRead
   )
+<<<<<<< .our
+=======
+  if (!didReadAllBytes || isBufferTooLarge(output)) {
+    // we know we can't transform this process output into a diff, so let's
+    // just return a placeholder for now that we can display to the user
+    // to say we're at the limits of the runtime
+    return { kind: DiffType.TooLarge, length: output.length }
+  }
+
+  const diffText = diffFromRawDiffOutput(output)
+  if (isDiffTooLarge(diffText)) {
+    return { kind: DiffType.TooLarge, length: output.length }
+  }
+
+>>>>>>> .their
   const lineEndingsChange = parseLineEndingsWarning(error)
 
   return buildDiff(output, repository, file, 'HEAD', lineEndingsChange)
changed in both
  base   100644 d911e4235f5a1e8e056f9d98d4a6fda3d76dcaea app/src/lib/git/spawn.ts
  our    100644 143168d54995f923711aa352fff4365067b90676 app/src/lib/git/spawn.ts
  their  100644 79576b0f30fd4b538b4a0c98b1b7a0bb7f68373a app/src/lib/git/spawn.ts
@@ -4,7 +4,11 @@
 type ProcessOutput = {
   /** The contents of stdout received from the spawned process */
   output: Buffer
+<<<<<<< .our
   /** The contents of stderr received from the spawned process */
+=======
+  didReadAllBytes: boolean
+>>>>>>> .their
   error: Buffer
   /** The exit code returned by the spawned process */
   exitCode: number
@@ -38,6 +42,7 @@
         const process = GitProcess.spawn(args, path)
         let totalStdoutLength = 0
         let killSignalSent = false
+        let didReadAllBytes = true
 
         const stdoutChunks = new Array<Buffer>()
         process.stdout.on('data', (chunk: Buffer) => {
@@ -53,6 +58,7 @@
           ) {
             process.kill()
             killSignalSent = true
+            didReadAllBytes = false
           }
         })
 
@@ -84,6 +90,7 @@
           if (exitCodes.has(code) || signal) {
             resolve({
               output: stdout,
+              didReadAllBytes,
               error: stderr,
               exitCode: code,
             })
