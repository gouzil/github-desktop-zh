changed in both
  base   100644 38302823efd1dd629fd5d560fb2a67a3cbafc143 app/src/lib/file-system.ts
  our    100644 a696107c681c84a8da5190495b8d23ee51f935e9 app/src/lib/file-system.ts
  their  100644 22a97568b80cd2991a010d33d464db2a3e075f65 app/src/lib/file-system.ts
@@ -86,6 +86,7 @@
 }
 
 /**
+<<<<<<< .our
  * Read a specific region from a file.
  *
  * @param path  Path to the file
@@ -110,5 +111,20 @@
       })
       .on('error', reject)
       .on('end', () => resolve(Buffer.concat(chunks, total)))
+=======
+ * Helper function to promisify fs.unlink for deleting a file from disk.
+ *
+ * @param path Path to delete from disk.
+ */
+export function removeFile(path: string): Promise<void> {
+  return new Promise<void>((resolve, reject) => {
+    Fs.unlink(path, error => {
+      if (error) {
+        reject(error)
+      } else {
+        resolve()
+      }
+    })
+>>>>>>> .their
   })
 }
changed in both
  base   100644 cc8f049009ace9094a0307160770ffdcd0217554 app/src/lib/stores/git-store.ts
  our    100644 f8eedeb9d958345be59538b82b1b69cd4326d73b app/src/lib/stores/git-store.ts
  their  100644 a3663f99a48bea061a1ae1a3689c745b31378b21 app/src/lib/stores/git-store.ts
@@ -19,6 +19,7 @@
 import { structuralEquals } from '../../lib/equality'
 import { compare } from '../../lib/compare'
 import { queueWorkHigh } from '../../lib/queue-work'
+import { removeFile, pathExists } from '../../lib/file-system'
 
 import {
   reset,
@@ -1120,6 +1121,89 @@
     this.emitUpdate()
   }
 
+<<<<<<< .our
+=======
+  /**
+   * Read the contents of the repository .gitignore.
+   *
+   * Returns a promise which will either be rejected or resolved
+   * with the contents of the file. If there's no .gitignore file
+   * in the repository root the promise will resolve with null.
+   */
+  public async readGitIgnore(): Promise<string | null> {
+    const repository = this.repository
+    const ignorePath = Path.join(repository.path, '.gitignore')
+
+    return new Promise<string | null>((resolve, reject) => {
+      Fs.readFile(ignorePath, 'utf8', (err, data) => {
+        if (err) {
+          if (err.code === 'ENOENT') {
+            resolve(null)
+          } else {
+            reject(err)
+          }
+        } else {
+          resolve(data)
+        }
+      })
+    })
+  }
+
+  /**
+   * Persist the given content to the repository root .gitignore.
+   *
+   * If the repository root doesn't contain a .gitignore file one
+   * will be created, otherwise the current file will be overwritten.
+   */
+  public async saveGitIgnore(text: string): Promise<void> {
+    const repository = this.repository
+    const ignorePath = Path.join(repository.path, '.gitignore')
+    const fileContents = await formatGitIgnoreContents(text, repository)
+
+    return new Promise<void>((resolve, reject) => {
+      Fs.writeFile(ignorePath, fileContents, err => {
+        if (err) {
+          reject(err)
+        } else {
+          resolve()
+        }
+      })
+    })
+  }
+
+  /** Ignore the given path or pattern. */
+  public async ignore(pattern: string): Promise<void> {
+    const repository = this.repository
+
+    if (pattern.startsWith('*')) {
+      // TODO: scan filesystem for all entries matching this expression
+    } else {
+      const status = await getStatus(repository)
+      const match = status.workingDirectory.files.find(p => p.path === pattern)
+      if (match) {
+        // if we have pending changes against this file, discard it
+        // using the workflow defined by the user
+        await this.discardChanges([match])
+      }
+
+      // the file is tracked but has no pending changes, just remove it
+      const path = Path.join(repository.path, pattern)
+      const exists = await pathExists(path)
+      if (exists) {
+        await removeFile(path)
+      }
+    }
+
+    const text = (await this.readGitIgnore()) || ''
+    const currentContents = await formatGitIgnoreContents(text, repository)
+    const newText = await formatGitIgnoreContents(
+      `${currentContents}${pattern}`,
+      repository
+    )
+    await this.saveGitIgnore(newText)
+  }
+
+>>>>>>> .their
   public async discardChanges(
     files: ReadonlyArray<WorkingDirectoryFileChange>
   ): Promise<void> {
changed in both
  base   100644 27231087354abe691390aa5bacabd63762a47b60 app/test/unit/git-store-test.ts
  our    100644 916df52e71502aa756ade2e09be78d7398a4c7f0 app/test/unit/git-store-test.ts
  their  100644 e9b803d0240aad0fd503071fde85aca1aeac0765 app/test/unit/git-store-test.ts
@@ -68,6 +68,39 @@
     files = status.workingDirectory.files
 
     expect(files.length).to.equal(1)
+<<<<<<< .our
+=======
+    expect(files[0].path).to.equal('README.md')
+    expect(files[0].status).to.equal(AppFileStatus.Modified)
+  })
+
+  it('discarding a tracked file will remove it from disk', async () => {
+    const repo = await setupEmptyRepository()
+    const gitStore = new GitStore(repo, shell)
+
+    const relativeFilePath = Path.join('directory', 'README.txt')
+    const filePath = Path.join(repo.path, relativeFilePath)
+
+    Fs.mkdirSync(Path.join(repo.path, 'directory'))
+
+    Fs.writeFileSync(filePath, 'SOME WORDS GO HERE\n')
+
+    // commit the file so it's tracked
+    await GitProcess.exec(['add', relativeFilePath], repo.path)
+    await GitProcess.exec(['commit', '-m', 'added file'], repo.path)
+
+    // ignore the tracked file
+    await gitStore.ignore(relativeFilePath)
+
+    const status = await getStatus(repo)
+    const files = status.workingDirectory.files
+
+    expect(files.length).to.equal(2)
+    expect(files[0].path).equals(relativeFilePath)
+    expect(files[0].status).equals(AppFileStatus.Deleted)
+    expect(files[1].path).equals('.gitignore')
+    expect(files[1].status).equals(AppFileStatus.New)
+>>>>>>> .their
   })
 
   it('can discard a renamed file', async () => {
