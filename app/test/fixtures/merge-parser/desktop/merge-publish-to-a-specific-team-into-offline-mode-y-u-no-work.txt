changed in both
  base   100644 d4b62dbf30e18eb25f0eab0014d38984b1e80c6c app/src/lib/api.ts
  our    100644 e77c79b5d20fbcffe9af534504dac98509135263 app/src/lib/api.ts
  their  100644 891538bef5ffaae9006e4609c90b072a39626c11 app/src/lib/api.ts
@@ -81,6 +81,12 @@
   readonly type: 'User' | 'Organization'
 }
 
+export interface IAPITeam {
+  readonly id: number
+  /** The identifier for the team */
+  readonly name: string
+}
+
 /** The users we get from the mentionables endpoint. */
 export interface IAPIMentionableUser {
   readonly avatar_url: string
@@ -356,19 +362,34 @@
     }
   }
 
+  public async fetchTeams(org: IAPIUser): Promise<ReadonlyArray<IAPITeam>> {
+    const url = `orgs/${org.login}/teams`
+    try {
+      return this.fetchAll<IAPITeam>(url)
+    } catch (e) {
+      log.warn(`fetchTeams: failed with endpoint ${this.endpoint}${url}`, e)
+      return []
+    }
+  }
+
   /** Create a new GitHub repository with the given properties. */
   public async createRepository(
     org: IAPIUser | null,
+    team: IAPITeam | null,
     name: string,
     description: string,
     private_: boolean
   ): Promise<IAPIRepository> {
     try {
       const apiPath = org ? `orgs/${org.login}/repos` : 'user/repos'
+
+      const team_id = team != null ? team.id : undefined
+
       const response = await this.request('POST', apiPath, {
         name,
         description,
         private: private_,
+        team_id,
       })
 
       return await parsedResponse<IAPIRepository>(response)
changed in both
  base   100644 9c822d8df65d53f5fbdb6939e203a7ba2e11a58c app/src/lib/dispatcher/dispatcher.ts
  our    100644 5e56c00e713342e76f5ccba040062e322e8c90cb app/src/lib/dispatcher/dispatcher.ts
  their  100644 92fb3a62a96e103d4f865147ef5a9ca8df2716f5 app/src/lib/dispatcher/dispatcher.ts
@@ -25,7 +25,7 @@
 import { Branch } from '../../models/branch'
 import { Commit } from '../../models/commit'
 import { ExternalEditor } from '../../lib/editors'
-import { IAPIUser } from '../../lib/api'
+import { IAPIUser, IAPITeam } from '../../lib/api'
 import { GitHubRepository } from '../../models/github-repository'
 import { ICommitMessage } from '../stores/git-store'
 import { executeMenuItem } from '../../ui/main-process-proxy'
@@ -329,7 +329,8 @@
     description: string,
     private_: boolean,
     account: Account,
-    org: IAPIUser | null
+    org: IAPIUser | null,
+    team: IAPITeam | null
   ): Promise<Repository> {
     return this.appStore._publishRepository(
       repository,
@@ -337,7 +338,8 @@
       description,
       private_,
       account,
-      org
+      org,
+      team
     )
   }
 
changed in both
  base   100644 1ed8393b2de89d15fe98af5394808815218893ec app/src/lib/stores/app-store.ts
  our    100644 1a4e387e4d192d34abfd0621b4b5ebe8cc34d8d1 app/src/lib/stores/app-store.ts
  their  100644 2f587384d3822eb5c702caff56435dc8c92ccc1c app/src/lib/stores/app-store.ts
@@ -43,6 +43,7 @@
   matchGitHubRepository,
   IMatchedGitHubRepository,
   repositoryMatchesRemote,
+<<<<<<< .our
 } from '../repository-matching'
 import {
   API,
@@ -51,6 +52,10 @@
   getDotComAPIEndpoint,
   getEnterpriseAPIURL,
 } from '../api'
+=======
+} from '../../lib/repository-matching'
+import { API, getAccountForEndpoint, IAPIUser, IAPITeam } from '../../lib/api'
+>>>>>>> .their
 import { caseInsensitiveCompare } from '../compare'
 import {
   Branch,
@@ -2730,11 +2735,13 @@
     description: string,
     private_: boolean,
     account: Account,
-    org: IAPIUser | null
+    org: IAPIUser | null,
+    team: IAPITeam | null
   ): Promise<Repository> {
     const api = API.fromAccount(account)
     const apiRepository = await api.createRepository(
       org,
+      team,
       name,
       description,
       private_
merged
  result 100644 52833651f93201ff5b3259035f62a7153969e552 app/src/ui/publish-repository/publish-repository.tsx
  our    100644 c14a53943087c492bc981e916b32c2d35eedc78c app/src/ui/publish-repository/publish-repository.tsx
@@ -1,6 +1,6 @@
 import * as React from 'react'
 import { Account } from '../../models/account'
-import { API, IAPIUser } from '../../lib/api'
+import { API, IAPIUser, IAPITeam } from '../../lib/api'
 import { TextBox } from '../lib/text-box'
 import { Select } from '../lib/select'
 import { DialogContent } from '../dialog'
@@ -34,10 +34,17 @@
    * published as a personal repository.
    */
   readonly org: IAPIUser | null
+
+  /**
+   * The team which will be granted access to this repository. Only valid when
+   * publishing a repository to an organization.
+   */
+  readonly team: IAPITeam | null
 }
 
 interface IPublishRepositoryState {
   readonly orgs: ReadonlyArray<IAPIUser>
+  readonly teams: ReadonlyArray<IAPITeam>
 }
 
 /** The Publish Repository component. */
@@ -48,7 +55,7 @@
   public constructor(props: IPublishRepositoryProps) {
     super(props)
 
-    this.state = { orgs: [] }
+    this.state = { orgs: [], teams: [] }
   }
 
   public async componentWillMount() {
@@ -57,7 +64,7 @@
 
   public componentWillReceiveProps(nextProps: IPublishRepositoryProps) {
     if (this.props.account !== nextProps.account) {
-      this.setState({ orgs: [] })
+      this.setState({ orgs: [], teams: [] })
 
       this.fetchOrgs(nextProps.account)
     }
@@ -70,6 +77,13 @@
     this.setState({ orgs })
   }
 
+  private async fetchTeams(account: Account, org: IAPIUser) {
+    const api = API.fromAccount(account)
+    const teams = (await api.fetchTeams(org)) as Array<IAPITeam>
+    teams.sort((a, b) => caseInsensitiveCompare(a.name, b.name))
+    this.setState({ teams })
+  }
+
   private updateSettings<K extends keyof IPublishRepositorySettings>(
     subset: Pick<IPublishRepositorySettings, K>
   ) {
@@ -94,10 +108,24 @@
     const value = event.currentTarget.value
     const index = parseInt(value, 10)
     if (index < 0 || isNaN(index)) {
-      this.updateSettings({ org: null })
+      this.updateSettings({ org: null, team: null })
+      // clear teams
+      this.setState({ teams: [] })
     } else {
       const org = this.state.orgs[index]
-      this.updateSettings({ org })
+      this.updateSettings({ org, team: null })
+      this.fetchTeams(this.props.account, org)
+    }
+  }
+
+  private onTeamChange = (event: React.FormEvent<HTMLSelectElement>) => {
+    const value = event.currentTarget.value
+    const index = parseInt(value, 10)
+    if (index < 0 || isNaN(index)) {
+      this.updateSettings({ team: null })
+    } else {
+      const team = this.state.teams[index]
+      this.updateSettings({ team })
     }
   }
 
@@ -138,6 +166,43 @@
     )
   }
 
+  private renderTeams(): JSX.Element | null {
+    if (this.state.teams.length === 0) {
+      return null
+    }
+
+    const options = new Array<JSX.Element>()
+    options.push(
+      <option value={-1} key={-1}>
+        None
+      </option>
+    )
+
+    let selectedIndex = -1
+    const selectedOrg = this.props.settings.team
+    for (const [index, team] of this.state.teams.entries()) {
+      if (selectedOrg && selectedOrg.id === team.id) {
+        selectedIndex = index
+      }
+
+      options.push(
+        <option value={index} key={index}>
+          {team.name}
+        </option>
+      )
+    }
+
+    return (
+      <Select
+        label="Team"
+        value={selectedIndex.toString()}
+        onChange={this.onTeamChange}
+      >
+        {options}
+      </Select>
+    )
+  }
+
   public render() {
     return (
       <DialogContent>
@@ -170,6 +235,7 @@
         </Row>
 
         {this.renderOrgs()}
+        {this.renderTeams()}
       </DialogContent>
     )
   }
changed in both
  base   100644 dbb16e8d0667b3c7f6a9514dda9d6ec8354fe75d app/src/ui/publish-repository/publish.tsx
  our    100644 ffbdef89f9f0f16e966a7d27c2db06bd897c3db6 app/src/ui/publish-repository/publish.tsx
  their  100644 b7e75c79d8796d670af3f7cd805356b327fcf0e4 app/src/ui/publish-repository/publish.tsx
@@ -70,6 +70,7 @@
       description: '',
       private: true,
       org: null,
+      team: null,
     }
 
     this.state = {
@@ -229,7 +230,8 @@
         settings.description,
         settings.private,
         account,
-        settings.org
+        settings.org,
+        settings.team
       )
 
       this.props.onDismissed()
