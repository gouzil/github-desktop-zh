changed in both
  base   100644 fe48405e5f0bbcfbbd7786e07593c26a1dae33cd app/src/ui/lib/filter-list.tsx
  our    100644 a625bab6249781a07060095fe6306dfd832f032f app/src/ui/lib/filter-list.tsx
  their  100644 b18e2fb79f6b4c66454c5b92dd09cf535553c8c3 app/src/ui/lib/filter-list.tsx
@@ -253,9 +253,18 @@
   }
 
   public selectFirstItem(focus: boolean = false) {
+<<<<<<< .our
     if (this.list === null) {
       return
     }
+=======
+    if (this.list !== null) {
+      const next = findNextSelectableRow(
+        this.state.rows.length,
+        { direction: 'down', row: -1 },
+        this.canSelectRow
+      )
+>>>>>>> .their
 
     const next = findNextSelectableRow(
       this.state.rows.length,
added in remote
  their  100644 967fdf80dd5add442b6cf28658aade9673b28645 app/src/ui/lib/list/filter-list.tsx
@@ -0,0 +1,403 @@
+import * as React from 'react'
+import * as classnames from 'classnames'
+
+import {
+  SelectionSource as ListSelectionSource,
+  findNextSelectableRow,
+} from '../../lib/list'
+import { FilterTextBox } from './filter-text-box'
+import { FilterResults } from './filter-results'
+import { Row } from '../../lib/row'
+
+import { match, IMatch } from '../../../lib/fuzzy-find'
+
+/** An item in the filter list. */
+export interface IFilterListItem {
+  /** The text which represents the item. This is used for filtering. */
+  readonly text: string
+
+  /** A unique identifier for the item. */
+  readonly id: string
+}
+
+/** A group of items in the list. */
+export interface IFilterListGroup<T extends IFilterListItem> {
+  /** The identifier for this group. */
+  readonly identifier: string
+
+  /** The items in the group. */
+  readonly items: ReadonlyArray<T>
+}
+
+interface IFlattenedGroup {
+  readonly kind: 'group'
+  readonly identifier: string
+}
+
+interface IFlattenedItem<T extends IFilterListItem> {
+  readonly kind: 'item'
+  readonly item: T
+  /** Array of indexes in `item.text` that should be highlighted */
+  readonly matches: ReadonlyArray<number>
+}
+
+/**
+ * A row in the list. This is used internally after the user-provided groups are
+ * flattened.
+ */
+type IFilterListRow<T extends IFilterListItem> =
+  | IFlattenedGroup
+  | IFlattenedItem<T>
+
+interface IFilterListProps<T extends IFilterListItem> {
+  /** A class name for the wrapping element. */
+  readonly className?: string
+
+  /** The height of the rows. */
+  readonly rowHeight: number
+
+  /** The ordered groups to display in the list. */
+  readonly groups: ReadonlyArray<IFilterListGroup<T>>
+
+  /** The selected item. */
+  readonly selectedItem: T | null
+
+  /** Called to render each visible item. */
+  readonly renderItem: (
+    item: T,
+    matches: ReadonlyArray<number>
+  ) => JSX.Element | null
+
+  /** Called to render header for the group with the given identifier. */
+  readonly renderGroupHeader?: (identifier: string) => JSX.Element | null
+
+  /** Called to render content before/above the filter and list. */
+  readonly renderPreList?: () => JSX.Element | null
+
+  /** Called when an item is clicked. */
+  readonly onItemClick?: (item: T) => void
+
+  /**
+   * This function will be called when the selection changes as a result of a
+   * user keyboard or mouse action (i.e. not when props change). This function
+   * will not be invoked when an already selected row is clicked on.
+   *
+   * @param selectedItem - The item that was just selected
+   * @param source       - The kind of user action that provoked the change,
+   *                       either a pointer device press, or a keyboard event
+   *                       (arrow up/down)
+   */
+  readonly onSelectionChanged?: (
+    selectedItem: T | null,
+    source: SelectionSource
+  ) => void
+
+  /**
+   * Called when a key down happens in the filter text input. Users have a
+   * chance to respond or cancel the default behavior by calling
+   * `preventDefault()`.
+   */
+  readonly onFilterKeyDown?: (
+    event: React.KeyboardEvent<HTMLInputElement>
+  ) => void
+
+  /** The current filter text to use in the form */
+  readonly filterText?: string
+
+  /** Called when the filter text is changed by the user */
+  readonly onFilterTextChanged?: (text: string) => void
+
+  /**
+   * Whether or not the filter list should allow selection
+   * and filtering. Defaults to false.
+   */
+  readonly disabled?: boolean
+
+  /** Any props which should cause a re-render if they change. */
+  readonly invalidationProps: any
+
+  /** Called to render content after the filter. */
+  readonly renderPostFilter?: () => JSX.Element | null
+
+  /** Called when there are no items to render.  */
+  readonly renderNoItems?: () => JSX.Element | null
+}
+
+interface IFilterListState<T extends IFilterListItem> {
+  readonly rows: ReadonlyArray<IFilterListRow<T>>
+  readonly selectedRow: number
+}
+
+/**
+ * Interface describing a user initiated selection change event
+ * originating from changing the filter text.
+ */
+export interface IFilterSelectionSource {
+  kind: 'filter'
+
+  /** The filter text at the time the selection event was raised.  */
+  filterText: string
+}
+
+export type SelectionSource = ListSelectionSource | IFilterSelectionSource
+
+/** A List which includes the ability to filter based on its contents. */
+export class FilterList<T extends IFilterListItem> extends React.Component<
+  IFilterListProps<T>,
+  IFilterListState<T>
+> {
+  private list: FilterResults | null = null
+  private filterTextBox: FilterTextBox | null = null
+
+  public constructor(props: IFilterListProps<T>) {
+    super(props)
+
+    this.state = createStateUpdate(props)
+  }
+
+  public componentWillReceiveProps(nextProps: IFilterListProps<T>) {
+    this.setState(createStateUpdate(nextProps))
+  }
+
+  public componentDidUpdate(
+    prevProps: IFilterListProps<T>,
+    prevState: IFilterListState<T>
+  ) {
+    if (this.props.onSelectionChanged) {
+      const oldSelectedItemId = getItemIdFromRowIndex(
+        prevState.rows,
+        prevState.selectedRow
+      )
+      const newSelectedItemId = getItemIdFromRowIndex(
+        this.state.rows,
+        this.state.selectedRow
+      )
+
+      if (oldSelectedItemId !== newSelectedItemId) {
+        const propSelectionId = this.props.selectedItem
+          ? this.props.selectedItem.id
+          : null
+
+        if (propSelectionId !== newSelectedItemId) {
+          const newSelectedItem = getItemFromRowIndex(
+            this.state.rows,
+            this.state.selectedRow
+          )
+          this.props.onSelectionChanged(newSelectedItem, {
+            kind: 'filter',
+            filterText: this.props.filterText || '',
+          })
+        }
+      }
+    }
+  }
+
+  public componentDidMount() {
+    if (this.filterTextBox != null) {
+      this.filterTextBox.selectAll()
+    }
+  }
+
+  public render() {
+    return (
+      <div className={classnames('filter-list', this.props.className)}>
+        {this.props.renderPreList ? this.props.renderPreList() : null}
+
+        <Row className="filter-field-row">
+          <FilterTextBox
+            ref={this.onTextBoxRef}
+            rowCount={this.state.rows.length}
+            onMoveToRow={this.onMoveToRow}
+            filterText={this.props.filterText}
+            disabled={this.props.disabled}
+            onFilterTextChanged={this.onFilterValueChanged}
+            onSelectFirstRow={this.onSelectFirstRow}
+          />
+
+          {this.props.renderPostFilter ? this.props.renderPostFilter() : null}
+        </Row>
+
+        <div className="filter-list-container">{this.renderContent()}</div>
+      </div>
+    )
+  }
+
+  private renderContent() {
+    if (this.state.rows.length === 0 && this.props.renderNoItems) {
+      return this.props.renderNoItems()
+    } else {
+      return (
+        <FilterResults
+          ref={this.onListRef}
+          rowCount={this.state.rows.length}
+          renderRow={this.renderRow}
+          onFocusTextBox={this.onFocusTextBox}
+          rowHeight={this.props.rowHeight}
+          selectedRows={[this.state.selectedRow]}
+          onSelectedRowChanged={this.onSelectedRowChanged}
+          canSelectRow={this.canSelectRow}
+          invalidationProps={{
+            ...this.props,
+            ...this.props.invalidationProps,
+          }}
+        />
+      )
+    }
+  }
+
+  private onFocusTextBox = () => {
+    if (this.filterTextBox != null) {
+      this.filterTextBox.focus()
+    }
+  }
+
+  private onSelectFirstRow = () => {
+    const rowCount = this.state.rows.length
+
+    const selectedRow = findNextSelectableRow(
+      rowCount,
+      { direction: 'down', row: -1 },
+      this.canSelectRow
+    )
+
+    if (selectedRow != null) {
+      this.onRowClick(selectedRow)
+    }
+  }
+
+  private onMoveToRow = (direction: 'down' | 'up', currentRow: number) => {
+    const rowCount = this.state.rows.length
+
+    const selectedRow = findNextSelectableRow(
+      rowCount,
+      { direction, row: currentRow },
+      this.canSelectRow
+    )
+    if (selectedRow != null) {
+      this.setState({ selectedRow }, () => {
+        if (this.list != null) {
+          this.list.focus()
+        }
+      })
+    }
+  }
+
+  private onRowClick = (index: number) => {
+    if (this.props.onItemClick) {
+      const row = this.state.rows[index]
+
+      if (row.kind === 'item') {
+        this.props.onItemClick(row.item)
+      }
+    }
+  }
+
+  private renderRow = (index: number) => {
+    const row = this.state.rows[index]
+    if (row.kind === 'item') {
+      return this.props.renderItem(row.item, row.matches)
+    } else if (this.props.renderGroupHeader) {
+      return this.props.renderGroupHeader(row.identifier)
+    } else {
+      return null
+    }
+  }
+
+  private onTextBoxRef = (component: FilterTextBox | null) => {
+    this.filterTextBox = component
+  }
+
+  private onListRef = (instance: FilterResults | null) => {
+    this.list = instance
+  }
+
+  private onFilterValueChanged = (text: string) => {
+    if (this.props.onFilterTextChanged) {
+      this.props.onFilterTextChanged(text)
+    }
+  }
+
+  private onSelectedRowChanged = (index: number, source: SelectionSource) => {
+    this.setState({ selectedRow: index })
+
+    if (this.props.onSelectionChanged) {
+      const row = this.state.rows[index]
+      if (row.kind === 'item') {
+        this.props.onSelectionChanged(row.item, source)
+      }
+    }
+  }
+
+  private canSelectRow = (index: number) => {
+    if (this.props.disabled) {
+      return false
+    }
+
+    const row = this.state.rows[index]
+    return row.kind === 'item'
+  }
+}
+
+function createStateUpdate<T extends IFilterListItem>(
+  props: IFilterListProps<T>
+) {
+  const flattenedRows = new Array<IFilterListRow<T>>()
+  const filter = (props.filterText || '').toLowerCase()
+
+  for (const group of props.groups) {
+    const items: ReadonlyArray<IMatch<T>> = filter
+      ? match(filter, group.items, 'text')
+      : group.items.map(item => ({ score: 1, matches: [], item }))
+
+    if (!items.length) {
+      continue
+    }
+
+    if (props.renderGroupHeader) {
+      flattenedRows.push({ kind: 'group', identifier: group.identifier })
+    }
+
+    for (const { item, matches } of items) {
+      flattenedRows.push({ kind: 'item', item, matches })
+    }
+  }
+
+  let selectedRow = -1
+  const selectedItem = props.selectedItem
+  if (selectedItem) {
+    selectedRow = flattenedRows.findIndex(
+      i => i.kind === 'item' && i.item.id === selectedItem.id
+    )
+  }
+
+  if (selectedRow < 0 && filter.length) {
+    // If the selected item isn't in the list (e.g., filtered out), then
+    // select the first visible item.
+    selectedRow = flattenedRows.findIndex(i => i.kind === 'item')
+  }
+
+  return { rows: flattenedRows, selectedRow }
+}
+
+function getItemFromRowIndex<T extends IFilterListItem>(
+  items: ReadonlyArray<IFilterListRow<T>>,
+  index: number
+): T | null {
+  if (index >= 0 && index < items.length) {
+    const row = items[index]
+
+    if (row.kind === 'item') {
+      return row.item
+    }
+  }
+
+  return null
+}
+
+function getItemIdFromRowIndex<T extends IFilterListItem>(
+  items: ReadonlyArray<IFilterListRow<T>>,
+  index: number
+): string | null {
+  const item = getItemFromRowIndex(items, index)
+  return item ? item.id : null
+}
added in remote
  their  100644 d666cd5c14b87ffda942cd0f3e61275231162d0a app/src/ui/lib/list/filter-results.tsx
@@ -0,0 +1,115 @@
+import * as React from 'react'
+
+import { List, findNextSelectableRow, SelectionSource } from '../../lib/list'
+
+interface IFilterResultProps {
+  /** The number of rows in the current filtered list */
+  readonly rowCount: number
+
+  /** The set of selected rows in the current filtered list */
+  readonly selectedRows: ReadonlyArray<number>
+
+  /** Callback to fire to render an element in the lists */
+  readonly renderRow: (index: number) => JSX.Element | null
+
+  /** Optional callback to render something when no items are available */
+  readonly renderNoItems?: () => JSX.Element | null
+
+  /** The height of each row in the list. */
+  readonly rowHeight: number
+
+  /** Any props which should cause a re-render if they change. */
+  readonly invalidationProps: any
+
+  /** Callback to fire when the selected row changes */
+  readonly onSelectedRowChanged?: (
+    index: number,
+    source: SelectionSource
+  ) => void
+
+  /**
+   * Function to validate if the given row can be selected by the user
+   */
+  readonly canSelectRow: (index: number) => boolean
+
+  /**
+   * Callback to the parent component that it should focus on the filter text box
+   */
+  readonly onFocusTextBox: (event: React.KeyboardEvent<any>) => void
+}
+
+export class FilterResults extends React.Component<IFilterResultProps, {}> {
+  private list: List | null = null
+
+  public render() {
+    if (this.props.rowCount === 0 && this.props.renderNoItems) {
+      return this.props.renderNoItems()
+    } else {
+      return (
+        <List
+          ref={this.onListRef}
+          rowCount={this.props.rowCount}
+          rowRenderer={this.props.renderRow}
+          rowHeight={this.props.rowHeight}
+          selectedRows={this.props.selectedRows}
+          onSelectedRowChanged={this.props.onSelectedRowChanged}
+          onRowClick={this.onRowClick}
+          onRowKeyDown={this.onRowKeyDown}
+          canSelectRow={this.props.canSelectRow}
+          invalidationProps={{
+            ...this.props,
+            ...this.props.invalidationProps,
+          }}
+        />
+      )
+    }
+  }
+
+  private onListRef = (instance: List | null) => {
+    this.list = instance
+  }
+
+  public focus() {
+    if (this.list != null) {
+      this.list.focus()
+    }
+  }
+
+  private onRowClick = (row: number, source: SelectionSource) => {
+    if (this.props.onSelectedRowChanged) {
+      this.props.onSelectedRowChanged(row, source)
+    }
+  }
+
+  private onRowKeyDown = (row: number, event: React.KeyboardEvent<any>) => {
+    const list = this.list
+    if (!list) {
+      return
+    }
+
+    const rowCount = this.props.rowCount
+
+    const firstSelectableRow = findNextSelectableRow(
+      rowCount,
+      { direction: 'down', row: -1 },
+      this.props.canSelectRow
+    )
+    const lastSelectableRow = findNextSelectableRow(
+      rowCount,
+      { direction: 'up', row: 0 },
+      this.props.canSelectRow
+    )
+
+    let shouldFocus = false
+
+    if (event.key === 'ArrowUp' && row === firstSelectableRow) {
+      shouldFocus = true
+    } else if (event.key === 'ArrowDown' && row === lastSelectableRow) {
+      shouldFocus = true
+    }
+
+    if (shouldFocus) {
+      this.props.onFocusTextBox(event)
+    }
+  }
+}
added in remote
  their  100644 ab64cc861dda12b34a24844da30a659e17092457 app/src/ui/lib/list/filter-text-box.tsx
@@ -0,0 +1,124 @@
+import * as React from 'react'
+
+import { TextBox } from '../../lib/text-box'
+
+import { SelectionDirection } from '../../lib/list'
+
+interface IFilterTextBoxProps {
+  /** The number of rows in the current filtered list */
+  readonly rowCount: number
+
+  /** The current filter text to use in the form */
+  readonly filterText?: string
+
+  /** Called when the filter text is changed by the user */
+  readonly onFilterTextChanged?: (text: string) => void
+
+  /**
+   * Called when a key down happens in the filter text input. Users have a
+   * chance to respond or cancel the default behavior by calling
+   * `preventDefault()`.
+   */
+  readonly onKeyDown?: (event: React.KeyboardEvent<HTMLInputElement>) => void
+
+  /**
+   * Whether or not the filter list should allow selection
+   * and filtering. Defaults to false.
+   */
+  readonly disabled?: boolean
+
+  /** Called when an item should be focused in the filtered list. */
+  readonly onMoveToRow: (
+    direction: SelectionDirection,
+    currentRow: number
+  ) => void
+
+  /** Called when the parent component should choose the default entry in the filtered list. */
+  readonly onSelectFirstRow: () => void
+}
+
+/** A List which includes the ability to filter based on its contents. */
+export class FilterTextBox extends React.Component<IFilterTextBoxProps, {}> {
+  private textBoxRef: TextBox | null = null
+
+  public render() {
+    return (
+      <TextBox
+        ref={this.onTextBoxRef}
+        type="search"
+        autoFocus={true}
+        placeholder="Filter"
+        className="filter-list-filter-field"
+        onValueChanged={this.onFilterValueChanged}
+        onKeyDown={this.onKeyDown}
+        value={this.props.filterText}
+        disabled={this.props.disabled}
+      />
+    )
+  }
+
+  public focus() {
+    if (this.textBoxRef != null) {
+      this.textBoxRef.focus()
+    }
+  }
+
+  public selectAll() {
+    if (this.textBoxRef != null) {
+      this.textBoxRef.selectAll()
+    }
+  }
+
+  private onTextBoxRef = (textBox: TextBox | null) => {
+    this.textBoxRef = textBox
+  }
+
+  private onFilterValueChanged = (text: string) => {
+    if (this.props.onFilterTextChanged) {
+      this.props.onFilterTextChanged(text)
+    }
+  }
+
+  private onKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
+    const key = event.key
+
+    if (this.props.onKeyDown) {
+      this.props.onKeyDown(event)
+    }
+
+    if (event.defaultPrevented) {
+      return
+    }
+
+    const rowCount = this.props.rowCount
+
+    if (key === 'ArrowDown') {
+      if (rowCount > 0) {
+        this.props.onMoveToRow('down', -1)
+      }
+
+      event.preventDefault()
+    } else if (key === 'ArrowUp') {
+      if (rowCount > 0) {
+        this.props.onMoveToRow('up', 0)
+      }
+
+      event.preventDefault()
+    } else if (key === 'Enter') {
+      // no repositories currently displayed, bail out
+      if (rowCount === 0) {
+        return event.preventDefault()
+      }
+
+      const filterText = this.props.filterText
+
+      if (filterText !== undefined && !/\S/.test(filterText)) {
+        return event.preventDefault()
+      }
+
+      if (this.props.onSelectFirstRow) {
+        this.props.onSelectFirstRow()
+      }
+    }
+  }
+}
changed in both
  base   100644 72a36afa71949e6a0a3d2550c9bcf5a07b731868 app/src/ui/lib/list/list.tsx
  our    100644 e534ebfd72eb9026d47bcdcd9e3077b295db520a app/src/ui/lib/list/list.tsx
  their  100644 92779478b46a6e660a1cac230900cbfdd9faac78 app/src/ui/lib/list/list.tsx
@@ -465,7 +465,11 @@
 
     const newRow = findNextSelectableRow(
       this.props.rowCount,
+<<<<<<< .our
       { direction, row: lastSelection, wrap: false },
+=======
+      { direction, row: lastSelection },
+>>>>>>> .their
       this.canSelectRow
     )
 
@@ -500,7 +504,11 @@
 
     const newRow = findNextSelectableRow(
       this.props.rowCount,
+<<<<<<< .our
       { direction, row: lastSelection },
+=======
+      { direction, row: lastSelection, wrap: false },
+>>>>>>> .their
       this.canSelectRow
     )
 
added in both
  our    100644 e508ad7bd721169b3f96558a76f7e5a32bcf8a71 app/src/ui/lib/list/selection.ts
  their  100644 fc006b23b096e3dd5a3d40d1c4b6b20ee553a387 app/src/ui/lib/list/selection.ts
@@ -100,6 +100,7 @@
   let currentRow =
     row < 0 || row >= rowCount ? (direction === 'up' ? rowCount - 1 : 0) : row
 
+<<<<<<< .our
   // handle specific case from switching from filter text to list
   //
   // locking currentRow to [0,rowCount) above means that the below loops
@@ -108,6 +109,8 @@
     currentRow = -1
   }
 
+=======
+>>>>>>> .their
   const delta = direction === 'up' ? -1 : 1
 
   // Iterate through all rows (starting offset from the
