changed in both
  base   100644 f90c946fa2c439ffe576db4820b3768a65a1b08e app/src/lib/dispatcher/dispatcher.ts
  our    100644 5e56c00e713342e76f5ccba040062e322e8c90cb app/src/lib/dispatcher/dispatcher.ts
  their  100644 16fc744a17f351d7db2bb1e7ae547fe77d3742ff app/src/lib/dispatcher/dispatcher.ts
@@ -583,6 +583,11 @@
     return this.appStore._reportStats()
   }
 
+  /** Removes the given remote for the repository */
+  public removeRemote(repository: Repository, name: string): Promise<void> {
+    return this.appStore._removeRemote(repository, name)
+  }
+
   /** Changes the URL for the remote that matches the given name  */
   public setRemoteURL(
     repository: Repository,
changed in both
  base   100644 35616ea966ef4ad7549bac1421f71090fbe1d3e6 app/src/lib/stores/app-store.ts
  our    100644 1a4e387e4d192d34abfd0621b4b5ebe8cc34d8d1 app/src/lib/stores/app-store.ts
  their  100644 15cd235220c186f54795bca0d0d2cf8d7cd03cf7 app/src/lib/stores/app-store.ts
@@ -3067,6 +3067,12 @@
   }
 
   /** This shouldn't be called directly. See `Dispatcher`. */
+  public _removeRemote(repository: Repository, name: string): Promise<void> {
+    const gitStore = this.getGitStore(repository)
+    return gitStore.removeRemote(name)
+  }
+
+  /** This shouldn't be called directly. See `Dispatcher`. */
   public _setRemoteURL(
     repository: Repository,
     name: string,
changed in both
  base   100644 cc8f049009ace9094a0307160770ffdcd0217554 app/src/lib/stores/git-store.ts
  our    100644 f8eedeb9d958345be59538b82b1b69cd4326d73b app/src/lib/stores/git-store.ts
  their  100644 b431d751c1c7cf6ea3f671d2ea8f28bc3c4a7d35 app/src/lib/stores/git-store.ts
@@ -31,6 +31,7 @@
   deleteRef,
   getCommits,
   merge,
+  removeRemote,
   setRemoteURL,
   getStatus,
   IStatusResult,
@@ -1110,6 +1111,18 @@
     })
   }
 
+  /** Remove the given remote from the given repository  */
+  public async removeRemote(name: string): Promise<void> {
+    await this.performFailableOperation(() =>
+      removeRemote(this.repository, name)
+    )
+
+    this._remote = null
+    await this.loadCurrentRemote()
+
+    this.emitUpdate()
+  }
+
   /** Changes the URL for the remote that matches the given name  */
   public async setRemoteURL(name: string, url: string): Promise<void> {
     await this.performFailableOperation(() =>
merged
  result 100644 3208900a9b6bad0f92a9c552289c43ae750e809a app/src/ui/repository-settings/remote.tsx
  our    100644 5c8ba70c0b00b68c877c28f5786d6f96fbb9532a app/src/ui/repository-settings/remote.tsx
@@ -1,6 +1,9 @@
 import * as React from 'react'
 import { IRemote } from '../../models/remote'
+import { Row } from '../lib/row'
 import { TextBox } from '../lib/text-box'
+import { LinkButton } from '../lib/link-button'
+import { Octicon, OcticonSymbol } from '../octicons'
 import { DialogContent } from '../dialog'
 
 interface IRemoteProps {
@@ -9,21 +12,73 @@
 
   /** The function to call when the remote URL is changed by the user. */
   readonly onRemoteUrlChanged: (url: string) => void
+
+  /** The function to call when the user marks the repository for removal */
+  readonly onRemoteRemoved: () => void
+
+  /** A flag to confirm the remote will be removed when saving changes */
+  readonly remoteDeleted: boolean
 }
 
 /** The Remote component. */
 export class Remote extends React.Component<IRemoteProps, {}> {
   public render() {
     const remote = this.props.remote
+
+    if (this.props.remoteDeleted) {
+      return (
+        <DialogContent>
+          <Row className="warning-helper-text">
+            <Octicon symbol={OcticonSymbol.alert} />
+            <p>
+              Removing the <strong>{remote.name}</strong> remote will affect
+              publishing the repository to your remote server. Press{' '}
+              <strong>Save</strong> to confirm this change.
+            </p>
+          </Row>
+        </DialogContent>
+      )
+    }
+
+    const title = `Remove the ${remote.name} remote from this repository`
     return (
       <DialogContent>
-        <div>Primary remote repository ({remote.name})</div>
-        <TextBox
-          placeholder="Remote URL"
-          value={remote.url}
-          onValueChanged={this.props.onRemoteUrlChanged}
-        />
+        <Row>
+          <div>Primary remote repository ({remote.name})</div>
+        </Row>
+        <Row>
+          <TextBox
+            placeholder="Remote URL"
+            value={remote.url}
+            onValueChanged={this.props.onRemoteUrlChanged}
+          />
+          <LinkButton onClick={this.removeRemote} title={title}>
+            <Octicon symbol={OcticonSymbol.trashcan} />
+          </LinkButton>
+        </Row>
+
+        {this.renderInvalidUrlWarning()}
       </DialogContent>
     )
   }
+
+  private renderInvalidUrlWarning() {
+    const isValidPath = this.props.remote.url.length > 0
+
+    if (isValidPath) {
+      return null
+    }
+
+    return (
+      <Row className="error-helper-text">
+        <Octicon symbol={OcticonSymbol.x} />
+        <p>You cannot create an empty remote URL.</p>
+      </Row>
+    )
+  }
+
+  private removeRemote = () => {
+    // TODO: propagate this up the chain
+    this.props.onRemoteRemoved()
+  }
 }
changed in both
  base   100644 ad68721a27fd17b357977ad754663df39fa337ab app/src/ui/repository-settings/repository-settings.tsx
  our    100644 df6e4cf60b4e535a69c9fc0a585902ada9e70fbb app/src/ui/repository-settings/repository-settings.tsx
  their  100644 fc03bb01f366eb3490f84ba88db8f0d3dcb6be1b app/src/ui/repository-settings/repository-settings.tsx
@@ -27,6 +27,7 @@
 interface IRepositorySettingsState {
   readonly selectedTab: RepositorySettingsTab
   readonly remote: IRemote | null
+  readonly remoteDeleted: boolean
   readonly ignoreText: string | null
   readonly ignoreTextHasChanged: boolean
   readonly disabled: boolean
@@ -43,6 +44,7 @@
     this.state = {
       selectedTab: RepositorySettingsTab.Remote,
       remote: props.remote,
+      remoteDeleted: false,
       ignoreText: null,
       ignoreTextHasChanged: false,
       disabled: false,
@@ -106,15 +108,23 @@
 
   private renderFooter() {
     const tab = this.state.selectedTab
+    if (tab !== RepositorySettingsTab.Remote) {
+      return null
+    }
+
     const remote = this.state.remote
-    if (tab === RepositorySettingsTab.Remote && !remote) {
+    if (!remote) {
       return null
     }
 
+    const disabled = remote.url.length === 0
+
     return (
       <DialogFooter>
         <ButtonGroup>
-          <Button type="submit">Save</Button>
+          <Button type="submit" disabled={disabled}>
+            Save
+          </Button>
           <Button onClick={this.props.onDismissed}>Cancel</Button>
         </ButtonGroup>
       </DialogFooter>
@@ -131,6 +141,8 @@
             <Remote
               remote={remote}
               onRemoteUrlChanged={this.onRemoteUrlChanged}
+              onRemoteRemoved={this.onRemoteRemoved}
+              remoteDeleted={this.state.remoteDeleted}
             />
           )
         } else {
@@ -167,21 +179,42 @@
     const errors = new Array<JSX.Element | string>()
 
     if (this.state.remote && this.props.remote) {
-      if (this.state.remote.url !== this.props.remote.url) {
+      if (this.state.remoteDeleted) {
         try {
-          await this.props.dispatcher.setRemoteURL(
+          await this.props.dispatcher.removeRemote(
             this.props.repository,
-            this.props.remote.name,
-            this.state.remote.url
+            this.props.remote.name
           )
         } catch (e) {
           log.error(
+<<<<<<< .our
             `RepositorySettings: unable to set remote URL at ${
               this.props.repository.path
             }`,
+=======
+            `RepositorySettings: unable to remove remote at ${this.props
+              .repository.path}`,
+>>>>>>> .their
             e
           )
-          errors.push(`Failed setting the remote URL: ${e}`)
+          errors.push(`Failed removing the remote: ${e}`)
+        }
+      } else {
+        if (this.state.remote.url !== this.props.remote.url) {
+          try {
+            await this.props.dispatcher.setRemoteURL(
+              this.props.repository,
+              this.props.remote.name,
+              this.state.remote.url
+            )
+          } catch (e) {
+            log.error(
+              `RepositorySettings: unable to set remote URL at ${this.props
+                .repository.path}`,
+              e
+            )
+            errors.push(`Failed setting the remote URL: ${e}`)
+          }
         }
       }
     }
@@ -221,6 +254,10 @@
     this.setState({ remote: newRemote })
   }
 
+  private onRemoteRemoved = () => {
+    this.setState({ remoteDeleted: true })
+  }
+
   private onIgnoreTextChanged = (text: string) => {
     this.setState({ ignoreText: text, ignoreTextHasChanged: true })
   }
changed in both
  base   100644 8452efb173e669e14878c01f74896e865306cda9 app/styles/ui/_dialog.scss
  our    100644 94b86d54fb9b0314deb1ef48cc9e1466578ed390 app/styles/ui/_dialog.scss
  their  100644 9cf3db7cc7ea8b2e7116074e23a87ebdc17fd27e app/styles/ui/_dialog.scss
@@ -362,3 +362,12 @@
     margin-right: var(--spacing-half);
   }
 }
+
+.error-helper-text {
+  font-size: var(--font-size-sm);
+
+  .octicon {
+    fill: var(--dialog-error-color);
+    margin-right: var(--spacing-half);
+  }
+}
